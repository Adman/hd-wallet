(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function renderTx(e){return(0,_h2.default)("tr",[(0,_h2.default)("td",e.hash),(0,_h2.default)("td",e.height?e.height.toString():"unconfirmed"),(0,_h2.default)("td",e.value.toString()),(0,_h2.default)("td",e.type),(0,_h2.default)("td",e.targets.map(function(e){return(0,_h2.default)("span",e.address+" ("+e.value+") ")}))])}function renderAccount(e){return"number"==typeof e.info?(0,_h2.default)("div",e.xpub+" - Loading ("+e.info+" transactions)"):[(0,_h2.default)("div",e.xpub+" - Balance: "+e.info.balance),(0,_h2.default)("table",e.info.transactions.map(renderTx))]}function render(e){return(0,_h2.default)("div",e.map(renderAccount))}function refresh(){var e=render(appState),r=(0,_diff2.default)(tree,e);rootNode=(0,_patch2.default)(rootNode,r),tree=e}function discover(e,r,t){var o=0;e.forEach(function(i,n){var a=r.discoverAccount(null,i,t);appState[n]={xpub:i,info:0},a.stream.values.attach(function(e){appState[n]={xpub:i,info:e.transactions},refresh()}),a.ending.then(function(r){appState[n]={xpub:i,info:r},refresh(),++o===e.length&&console.timeEnd("portfolio")}),processes.push(a),refresh()}),console.time("portfolio")}var _bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),_workerDiscovery=require("../lib/discovery/worker-discovery"),_bitcore=require("../lib/bitcore"),_h=require("virtual-dom/h"),_h2=_interopRequireDefault(_h),_diff=require("virtual-dom/diff"),_diff2=_interopRequireDefault(_diff),_patch=require("virtual-dom/patch"),_patch2=_interopRequireDefault(_patch),_createElement=require("virtual-dom/create-element"),_createElement2=_interopRequireDefault(_createElement),fastXpubWorker=new Worker("fastxpub.js"),fastXpubWasmFilePromise=fetch("fastxpub.wasm").then(function(e){return e.ok?e.arrayBuffer():Promise.reject("failed to load")}),socketWorkerFactory=function(){return new Worker("./socket-worker.js")},discoveryWorkerFactory=function(){return new Worker("./discovery-worker.js")},appState=[],processes=[],tree=render(appState),rootNode=(0,_createElement2.default)(tree);document.body.appendChild(rootNode),window.run=function(){var e=["xpub6BiVtCpG9fQQ8pVjVF7jm3kLahkNbQRkWGUvzsKQpXWYvhYD4d4UDADxZUL4xp9UwsDT5YgwNKofTWRtwJgnHkbNxuzLDho4mxfS9KLesGP","xpub6BiVtCpG9fQQCgxA541qm9qZ9VrGLScde4zsAMj2d15ewiMysCAnbgvSDSZXhFUdsyA2BfzzMrMFJbC4VSkXbzrXLZRitAmUVURmivxxqMJ","xpub6BiVtCpG9fQQDvwDNekCEzAr3gYcoGXEF27bMwSBsCVP3bJYdUZ6m3jhv9vSG7hVxff3VEfnfK4fcMr2YRwfTfHcJwM4ioS6Eiwnrm1wcuf","xpub6BiVtCpG9fQQGq7bXBjjf5zyguEXHrmxDu4t7pdTFUtDWD5epi4ecKmWBTMHvPQtRmQnby8gET7ArTzxjL4SNYdD2RYSdjk7fwYeEDMzkce"],r=["https://bitcore1.trezor.io","https://bitcore3.trezor.io"],t=new _bitcore.BitcoreBlockchain(r,socketWorkerFactory);discover(e,new _workerDiscovery.WorkerDiscovery(discoveryWorkerFactory,fastXpubWorker,fastXpubWasmFilePromise,t),_bitcoinjsLibZcash.networks.bitcoin)},window.stop=function(){processes.forEach(function(e){return e.dispose()}),console.timeEnd("portfolio")};

},{"../lib/bitcore":3,"../lib/discovery/worker-discovery":4,"bitcoinjs-lib-zcash":44,"virtual-dom/create-element":213,"virtual-dom/diff":214,"virtual-dom/h":215,"virtual-dom/patch":216}],2:[function(require,module,exports){
"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(r,n,t){return n&&e(r.prototype,n),t&&e(r,t),r}}(),WorkerAddressSource=exports.WorkerAddressSource=function(){function e(r,n,t,s){_classCallCheck(this,e),this.channel=r,this.node={depth:n.depth,child_num:n.index,fingerprint:n.parentFingerprint,chain_code:Array.prototype.slice.call(n.chainCode),public_key:Array.prototype.slice.call(n.keyPair.getPublicKeyBuffer())},this.version=t,this.segwit=s}return _createClass(e,[{key:"derive",value:function(e,r){var n={type:"deriveAddressRange",node:this.node,version:this.version,firstIndex:e,lastIndex:r,addressFormat:"p2sh"===this.segwit?1:0};return this.channel.postMessage(n).then(function(e){return e.addresses})}}]),e}();

},{}],3:[function(require,module,exports){
"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function lookupAllAddressHistories(e,t,r,n){return _stream.Stream.combineFlat([lookupAddressHistoriesMempool(e,t,!0,r,n),lookupAddressHistoriesMempool(e,t,!1,r,n)])}function lookupAddressHistoriesMempool(e,t,r,n,o){function s(e){return e}var i={from:0,to:0,items:[],totalCount:0},u=1,a=!0;return _stream.Stream.generate(i,function(i){var c=s(i);c.items.reduce(function(e,t){return e+t.tx.hex.length/2},0)<=5e3&&!a&&(u*=5,u=Math.min(50,u)),a=!1;var f=c.to,l=c.to+u;return lookupAddressHistories(e,t,f,l,r,n,o).then(function(e){return _extends({},e,{from:f,to:l})},function(e){return"object"===(void 0===e?"undefined":_typeof(e))&&null!=e&&e instanceof Error?e:new Error(JSON.stringify(e))})},function(e){return!(e instanceof Error)&&e.to<e.totalCount})}function lookupAddressHistories(e,t,r,n,o,s,i){var u=o?{start:s,end:i,queryMempoolOnly:!0}:{start:s,end:i,queryMempol:!1},a=[t,_extends({},u,{from:r,to:n})];return e.send({method:"getAddressHistory",params:a})}function lookupDetailedTransaction(e,t){var r=[t];return e.send({method:"getDetailedTransaction",params:r})}function _sendTransaction(e,t){var r=[t];return e.send({method:"sendTransaction",params:r})}function _lookupBlockHash(e,t){var r=[t];return e.send({method:"getBlockHeader",params:r}).then(function(e){return e.hash})}function _lookupSyncStatus(e){var t=[];return e.send({method:"getInfo",params:t}).then(function(e){return{height:e.blocks}})}function estimateSmartTxFee(e,t,r){var n=[t,r];return e.send({method:"estimateSmartFee",params:n})}function estimateTxFee(e,t){var r=[t];return e.send({method:"estimateFee",params:r})}function onlineStatusCheck(e,t){var r=new _outside.Socket(e,t);return new Promise(function(e){observeErrors(r).awaitFirst().then(function(){return e(!1)}).catch(function(){return e(!1)}),Promise.race([new Promise(function(e,t){return setTimeout(function(){return t()},3e4)}),_lookupBlockHash(r,0)]).then(function(){return e(!0)},function(){return e(!1)})}).then(function(e){return e?r:(r.close(),null)})}function observeErrors(e){var t=["connect_error","reconnect_error","error","close","disconnect"];return _stream.Stream.combineFlat(t.map(function(t){return e.observe(t).map(function(e){return new Error(JSON.stringify(e)+" ("+t+")")})}))}function convertTx(e,t){return{zcash:e,hex:t.hex,height:t.height===-1?null:t.height,timestamp:t.blockTimestamp,hash:t.hash,inputAddresses:t.inputs.map(function(e){return e.address}),outputAddresses:t.outputs.map(function(e){return e.address}),fee:t.feeSatoshis,vsize:null==t.size?t.hex.length/2:t.size}}var _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BitcoreBlockchain=void 0;var _typeof="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return void 0===e?"undefined":_typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof2(e)},_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();require("whatwg-fetch");var _stream=require("./utils/stream"),_outside=require("./socketio-worker/outside"),_deferred=require("./utils/deferred"),_uniqueRandom=require("./utils/unique-random"),BitcoreBlockchain=exports.BitcoreBlockchain=function(){function e(t,r){var n=this;_classCallCheck(this,e),this.socket=(0,_deferred.deferred)(),this.workingUrl="none",this._silent=!1,this.addresses=new Set,this.socketWorkerFactory=r,this.endpoints=t,this.zcash=!1;var o=function(e){return e.observe("bitcoind/addresstxid").mapPromise(function(e){var t=e.txid;return n.lookupTransaction(t)})},s=function(e){return e.subscribe("bitcoind/hashblock"),e.observe("bitcoind/hashblock")},i=_stream.Stream.setLater(),u=_stream.Stream.setLater(),a=_stream.Stream.setLater();this.errors=i.stream,this.notifications=u.stream,this.blocks=a.stream;var c={"-1":!0};e._tryEndpoint(t,r,c).then(function(e){var t=e.socket,r=e.url;estimateSmartTxFee(t,2,!1).then(function(){n.hasSmartTxFees=!0},function(){n.hasSmartTxFees=!1}).then(function(){n.workingUrl=r,n.socket.resolve(t),i.setter(observeErrors(t)),u.setter(o(t)),a.setter(s(t))})},function(){i.setter(_stream.Stream.simple(new Error("All backends are offline."))),n._silent||(n.socket.reject(new Error("All backends are offline.")),n.socket.promise.catch(function(e){return console.error(e)}))})}return _createClass(e,null,[{key:"_tryEndpoint",value:function(t,r,n){var o=t.filter(function(e,t){return!n[t.toString()]});if(0===o.length)return Promise.reject(new Error("All backends are down."));var s=(0,_uniqueRandom.uniqueRandom)(o.length);return onlineStatusCheck(r,o[s]).then(function(i){return i?{socket:i,url:o[s]}:(n[s.toString()]=!0,e._tryEndpoint(t,r,n))})}}]),_createClass(e,[{key:"hardStatusCheck",value:function(){var e=this;return Promise.all(this.endpoints.map(function(t){return onlineStatusCheck(e.socketWorkerFactory,t)})).then(function(e){return e.forEach(function(e){null!=e&&e.close()}),e.filter(function(e){return null!=e}).length>0})}},{key:"subscribe",value:function(e){var t=this;if(!(e instanceof Set))throw new Error("Input not a set of strings.");var r=!0,n=!1,o=void 0;try{for(var s,i=e[Symbol.iterator]();!(r=(s=i.next()).done);r=!0){if("string"!=typeof s.value)throw new Error("Input not a set of strings.")}}catch(e){n=!0,o=e}finally{try{!r&&i.return&&i.return()}finally{if(n)throw o}}this.socket.promise.then(function(r){var n=[].concat(_toConsumableArray(e)).filter(function(e){return!t.addresses.has(e)});if(n.forEach(function(e){return t.addresses.add(e)}),0!==n.length)for(var o=0;o<n.length;o+=20)r.subscribe("bitcoind/addresstxid",n.slice(o,o+20))},function(){})}},{key:"destroy",value:function(){this.socket.promise.then(function(e){e.close()})}},{key:"lookupTransactionsStream",value:function(e,t,r){var n=this;return _stream.Stream.fromPromise(this.socket.promise.then(function(o){return lookupAllAddressHistories(o,e,t,r).map(function(e){return e instanceof Error?e:e.items.map(function(e){return convertTx(n.zcash,e.tx)})})}))}},{key:"lookupTransactions",value:function(e,t,r){return this.lookupTransactionsStream(e,t,r).reduce(function(e,t){return e instanceof Error?e:t instanceof Error?t:e.concat(t)},[]).then(function(e){if(e instanceof Error)throw e;return e})}},{key:"lookupTransaction",value:function(e){var t=this;return this.socket.promise.then(function(r){return lookupDetailedTransaction(r,e).then(function(e){return convertTx(t.zcash,e)})})}},{key:"sendTransaction",value:function(e){return this.socket.promise.then(function(t){return _sendTransaction(t,e)})}},{key:"lookupBlockHash",value:function(e){return this.socket.promise.then(function(t){return _lookupBlockHash(t,e)})}},{key:"lookupSyncStatus",value:function(){return this.socket.promise.then(function(e){return _lookupSyncStatus(e)})}},{key:"estimateSmartTxFees",value:function(e,t){var r=this;return this.socket.promise.then(function(n){var o=Promise.resolve({});return e.forEach(function(e){o=o.then(function(o){return(r.hasSmartTxFees?estimateSmartTxFee(n,e,t):Promise.resolve(-1)).then(function(t){return o[e]=t,o})})}),o})}},{key:"estimateTxFees",value:function(e,t){return this.socket.promise.then(function(r){var n=Promise.resolve({});return e.forEach(function(e){n=n.then(function(n){return estimateTxFee(r,e).then(function(r){return(!t||r!==-1)&&(n[e]=r),n})})}),n})}}]),e}();

},{"./socketio-worker/outside":7,"./utils/deferred":8,"./utils/stream":10,"./utils/unique-random":11,"whatwg-fetch":240}],4:[function(require,module,exports){
"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerDiscovery=void 0;var _createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var s=r[t];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(r,t,s){return t&&e(r.prototype,t),s&&e(r,s),r}}(),_stream=require("../utils/stream"),_outside=require("./worker/outside"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),_simpleWorkerChannel=require("../utils/simple-worker-channel"),_addressSource=require("../address-source"),WorkerDiscovery=exports.WorkerDiscovery=function(){function e(r,t,s,n){var i=this;_classCallCheck(this,e),this.forceAddedTransactions=[],this.forceAddedTransactionsEmitter=new _stream.Emitter,this.forceAddedTransactionsStream=_stream.Stream.fromEmitter(this.forceAddedTransactionsEmitter,function(){}).map(function(){return"block"}),this.discoveryWorkerFactory=r,this.addressWorkerChannel="undefined"==typeof WebAssembly?null:new _simpleWorkerChannel.WorkerChannel(t),s.then(function(e){null!==i.addressWorkerChannel&&t.postMessage({type:"init",binary:e})},function(e){return console.error(e)}),this.chain=n}return _createClass(e,[{key:"tryHDNode",value:function(e,r){try{return _bitcoinjsLibZcash.HDNode.fromBase58(e,r,!0)}catch(e){return e}}},{key:"forceAddTransaction",value:function(e){this.forceAddedTransactions.push(e),this.forceAddedTransactionsEmitter.emit(!0)}},{key:"discoverAccount",value:function(e,r,t,s){var n=this.tryHDNode(r,t);if(n instanceof Error)return _stream.StreamWithEnding.fromStreamAndPromise(_stream.Stream.fromArray([]),Promise.reject(n));var i=n.derive(0),o=n.derive(1),a=[this.createAddressSource(i,t,s),this.createAddressSource(o,t,s)];return new _outside.WorkerDiscoveryHandler(this.discoveryWorkerFactory,this.chain,a,t,this.forceAddedTransactions).discovery(e,r,"p2sh"===s)}},{key:"monitorAccountActivity",value:function(e,r,t,s){function n(e){return new Set(e.usedAddresses.map(function(e){return e.address}).concat(e.unusedAddresses).concat(e.changeAddresses))}var i=this,o=this.tryHDNode(r,t);if(o instanceof Error)return _stream.Stream.simple(o);var a=o.derive(0),c=o.derive(1),d=[this.createAddressSource(a,t,s),this.createAddressSource(c,t,s)];this.chain.subscribe(n(e));var u=e,h=this.chain.notifications.filter(function(e){var r=n(u),t=!1;return e.inputAddresses.concat(e.outputAddresses).forEach(function(e){null!=e&&r.has(e)&&(t=!0)}),t}).map(function(e){return e}),l=this.chain.blocks.map(function(){return"block"}),f=l.concat(h).concat(this.forceAddedTransactionsStream).mapPromiseError(function(){return new _outside.WorkerDiscoveryHandler(i.discoveryWorkerFactory,i.chain,d,t,i.forceAddedTransactions).discovery(u,r,"p2sh"===s).ending.then(function(e){return u=e,e})});return _stream.Stream.filterNull(f)}},{key:"createAddressSource",value:function(e,r,t){var s=this.addressWorkerChannel;if(null==s)return null;var n="p2sh"===t?r.scriptHash:r.pubKeyHash;return new _addressSource.WorkerAddressSource(s,e,n,t)}}]),e}();

},{"../address-source":2,"../utils/simple-worker-channel":9,"../utils/stream":10,"./worker/outside":6,"bitcoinjs-lib-zcash":44}],5:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerChannel=void 0;var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,r,s){return r&&e(t.prototype,r),s&&e(t,s),t}}(),_stream=require("../../../utils/stream"),WorkerChannel=exports.WorkerChannel=function(){function e(t,r,s){var n=this;_classCallCheck(this,e),this.messageEmitter=new _stream.Emitter,this.w=t(),this.getPromise=r,this.getStream=s,this.w.onmessage=function(e){var t=e.data;n.messageEmitter.emit(t)},this.messageEmitter.attach(function(e){"promiseRequest"===e.type&&n.handlePromiseRequest(e),"streamRequest"===e.type&&n.handleStreamRequest(e)})}return _createClass(e,[{key:"postToWorker",value:function(e){this.w.postMessage(e)}},{key:"resPromise",value:function(e){var t=this;return new Promise(function(r,s){t.messageEmitter.attach(function(n,a){"result"===n.type&&(r(n.result),a(),e(),t.w.terminate()),"error"===n.type&&(s(n.error),a(),e(),t.w.terminate())})})}},{key:"handlePromiseRequest",value:function(e){var t=this;this.getPromise(e.request).then(function(r){var s={type:e.request.type,response:r};t.postToWorker({type:"promiseResponseSuccess",id:e.id,response:s})},function(r){var s=null==r.message?r.toString():r.message.toString();t.postToWorker({type:"promiseResponseFailure",failure:s,id:e.id})})}},{key:"handleStreamRequest",value:function(e){var t=this,r=this.getStream(e.request);r.values.attach(function(r){t.postToWorker({type:"streamResponseUpdate",id:e.id,update:{type:e.request.type,response:r}})}),r.finish.attach(function(r){t.postToWorker({type:"streamResponseFinish",id:e.id})})}}]),e}();

},{"../../../utils/stream":10}],6:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerDiscoveryHandler=void 0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_stream=require("../../../utils/stream"),_channel=require("./channel"),WorkerDiscoveryHandler=exports.WorkerDiscoveryHandler=function(){function e(t,r,n,s,o){var i=this;_classCallCheck(this,e),this.forceAddedTransactions=[],this.counter=new TransactionCounter,this.blockchain=r,this.addressSources=n,this.workerChannel=new _channel.WorkerChannel(t,function(e){return i.getPromise(e)},function(e){return i.getStream(e)}),this.network=s,this.forceAddedTransactions=o}return _createClass(e,[{key:"discovery",value:function(e,t,r){var n=this,s="undefined"!=typeof WebAssembly;this.workerChannel.postToWorker({type:"init",state:e,network:this.network,webassembly:s,xpub:t,segwit:r}),this.workerChannel.postToWorker({type:"startDiscovery"});var o=this.workerChannel.resPromise(function(){return n.counter.finisher.emit()}),i=this.counter.stream;return _stream.StreamWithEnding.fromStreamAndPromise(i,o)}},{key:"getStream",value:function(e){if("chunkTransactions"===e.type){var t=this.addressSources[e.chainId];return 0===e.chainId&&this.counter.setCount(e.pseudoCount),this.getChunkStream(t,e.firstIndex,e.lastIndex,e.startBlock,e.endBlock,0===e.chainId,e.addresses)}return _stream.Stream.simple("Unknown request "+e.type)}},{key:"getPromise",value:function(e){return"lookupBlockHash"===e.type?this.blockchain.lookupBlockHash(e.height):"lookupSyncStatus"===e.type?this.blockchain.lookupSyncStatus().then(function(e){return e.height}):"doesTransactionExist"===e.type?this.blockchain.lookupTransaction(e.txid).then(function(){return!0},function(){return!1}):Promise.reject(new Error("Unknown request "+e.type))}},{key:"getChunkStream",value:function(t,r,n,s,o,i,a){var c=this,u=e.deriveAddresses(t,a,r,n);return _stream.Stream.fromPromise(u.then(function(e){return c.blockchain.lookupTransactionsStream(e,o,s).map(function(t){if(t instanceof Error)return t.message;var r=t,n=[];return c.forceAddedTransactions.slice().forEach(function(t,s){var o=_extends({},t,{height:null,timestamp:null});if(r.map(function(e){return e.hash}).some(function(e){return t.hash===e}))c.forceAddedTransactions.slice(s,1);else{var i=new Set;t.inputAddresses.concat(t.outputAddresses).forEach(function(e){null!=e&&i.add(e)}),e.some(function(e){return i.has(e)})&&n.push(o)}}),c.counter.setCount(c.counter.count+t.length),{transactions:t.concat(n),addresses:e}})}))}}],[{key:"deriveAddresses",value:function(e,t,r,n){return null==t?null==e?Promise.reject(new Error("Cannot derive addresses in worker without webassembly")):e.derive(r,n):Promise.resolve(t)}}]),e}(),TransactionCounter=function(){function e(){_classCallCheck(this,e),this.count=0,this.emitter=new _stream.Emitter,this.finisher=new _stream.Emitter,this.stream=_stream.Stream.fromEmitterFinish(this.emitter,this.finisher,function(){})}return _createClass(e,[{key:"setCount",value:function(e){e>this.count&&(this.count=e,this.emitter.emit({transactions:this.count}))}}]),e}();

},{"../../../utils/stream":10,"./channel":5}],7:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function setLogCommunication(){logCommunication=!0}Object.defineProperty(exports,"__esModule",{value:!0}),exports.Socket=void 0;var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();exports.setLogCommunication=setLogCommunication;var _stream=require("../utils/stream"),_deferred=require("../utils/deferred"),logCommunication=!1,Socket=exports.Socket=function(){function e(t,r){_classCallCheck(this,e),this.streams=[],this.endpoint=r,this.socket=new SocketWorkerHandler(t),this._socketInited=this.socket.init(this.endpoint)}return _createClass(e,[{key:"send",value:function(e){var t=this;return this._socketInited.then(function(){return t.socket.send(e)})}},{key:"close",value:function(){var e=this;this.streams.forEach(function(e){return e.dispose()}),this._socketInited.then(function(){return e.socket.close()},function(){})}},{key:"observe",value:function(e){var t=this,r=_stream.Stream.fromPromise(this._socketInited.then(function(){return t.socket.observe(e)}));return this.streams.push(r),r}},{key:"subscribe",value:function(e){for(var t=this,r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return this._socketInited.then(function(){var r;return(r=t.socket).subscribe.apply(r,[e].concat(n))}).catch(function(){})}}]),e}(),errorTypes=["connect_error","reconnect_error","error","close","disconnect"],disconnectErrorTypes=["connect_error","reconnect_error","close","disconnect"],SocketWorkerHandler=function(){function e(t){_classCallCheck(this,e),this.workerFactory=t,this.counter=0}return _createClass(e,[{key:"_tryWorker",value:function(e,t){var r=this.workerFactory(),n=(0,_deferred.deferred)();return r.onmessage=function(e){var t=e.data;if("string"==typeof t){"initDone"===JSON.parse(t).type?n.resolve(r):n.reject(new Error("Connection failed."))}},r.postMessage(JSON.stringify({type:"init",endpoint:e,connectionType:t})),n.promise}},{key:"init",value:function(e){var t=this;return this._tryWorker(e,"websocket").catch(function(){return t._tryWorker(e,"polling")}).then(function(e){t._worker=e;var r=new _stream.Emitter;e.onmessage=function(e){var t=e.data;"string"==typeof t&&r.emit(JSON.parse(t))},t._emitter=r,disconnectErrorTypes.forEach(function(e){t.observe(e).map(function(){t._sendMessage({type:"close"}),t._emitter=null})})})}},{key:"close",value:function(){this._sendMessage({type:"close"}),null!=this._emitter&&(this._emitter.destroy(),this._emitter=null)}},{key:"send",value:function(e){this.counter++;var t=this.counter;this._sendMessage({type:"send",message:e,id:t});var r=(0,_deferred.deferred)();return null==this._emitter?Promise.reject(new Error("Server disconnected.")):(this._emitter.attach(function(e,n){if(logCommunication&&console.log("[socket.io] in message",e),"sendReply"===e.type&&e.id===t){var o=e.reply,s=o.result,i=o.error;null!=i?r.reject(i):r.resolve(s),n()}"emit"===e.type&&errorTypes.indexOf(e.event)!==-1&&(r.reject(new Error("Server disconnected.")),n())}),r.promise)}},{key:"observe",value:function(e){var t=this;this.counter++;var r=this.counter;this._sendMessage({type:"observe",event:e,id:r});var n=this._emitter;return _stream.Stream.fromEmitter(n,function(){t._sendMessage({type:"unobserve",event:e,id:r})}).filter(function(t){return"emit"===t.type&&t.event===e}).map(function(e){return e.data})}},{key:"subscribe",value:function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this._sendMessage({type:"subscribe",event:e,values:r})}},{key:"_sendMessage",value:function(e){var t=this._worker;logCommunication&&console.log("[socket.io] out message",e),t.postMessage(JSON.stringify(e))}}]),e}();

},{"../utils/deferred":8,"../utils/stream":10}],8:[function(require,module,exports){
"use strict";function deferred(){var e=function(e){},r=function(e){};return{promise:new Promise(function(t,n){e=t,r=n}),resolve:e,reject:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deferred=deferred;

},{}],9:[function(require,module,exports){
"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,n){for(var s=0;s<n.length;s++){var t=n[s];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,s,t){return s&&e(n.prototype,s),t&&e(n,t),n}}(),WorkerChannel=exports.WorkerChannel=function(){function e(n){_classCallCheck(this,e),this.worker=n,this.pending=[],this.onMessage=this.receiveMessage.bind(this),this.open()}return _createClass(e,[{key:"open",value:function(){this.worker.addEventListener("message",this.onMessage)}},{key:"postMessage",value:function(e){var n=this;return new Promise(function(s,t){n.pending.push({resolve:s,reject:t}),n.worker.postMessage(e)})}},{key:"receiveMessage",value:function(e){var n=this.pending.shift();n&&n.resolve(e.data)}}]),e}();

},{}],10:[function(require,module,exports){
"use strict";function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.StreamWithEnding=exports.Stream=exports.Queue=exports.Emitter=void 0;var _createClass=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),_deferred=require("./deferred"),Emitter=exports.Emitter=function(){function t(){_classCallCheck(this,t),this.listeners=[]}return _createClass(t,[{key:"destroy",value:function(){var t=this;this.listeners.forEach(function(n){return t.detach(n.handler)}),this.listeners=[]}},{key:"attach",value:function(t){this.listeners=this.listeners.concat([{handler:t,detached:!1}])}},{key:"detach",value:function(t){this.listeners=this.listeners.filter(function(n){return n.handler!==t||(n.detached=!0,!1)})}},{key:"emit",value:function(t){var n=this;this.listeners.forEach(function(e){e.detached||e.handler(t,function(){n.detach(e.handler)})})}}]),t}(),Queue=exports.Queue=function(){function t(){_classCallCheck(this,t),this.buffer=[],this.takers=[]}return _createClass(t,[{key:"put",value:function(t){this.buffer.push(t),this.shift()}},{key:"take",value:function(t){this.takers.push(t),this.shift()}},{key:"shift",value:function(){if(this.buffer.length>0&&this.takers.length>0){var t=this.buffer.shift();this.takers.shift()(t)}}}]),t}(),Stream=function(){function t(n){var e=this;_classCallCheck(this,t),this.values=new Emitter,this.finish=new Emitter,this.dispose=n(function(t){e.values.emit(t)},function(){e.finish.emit()})}return _createClass(t,null,[{key:"fromEmitter",value:function(n,e){return new t(function(t,i){var r=!1,u=function(n){r||t(n)};return n.attach(u),function(){r=!0,n.detach(u),e()}})}},{key:"fromEmitterFinish",value:function(n,e,i){return new t(function(t,r){var u=!1,a=function(n){u||t(n)};return n.attach(a),e.attach(function(t,e){r(),e(),n.detach(a)}),function(){u=!0,n.detach(a),i()}})}},{key:"fromArray",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(n.forEach(function(n){t(n)}),e())},0),function(){i=!0}})}},{key:"fromPromise",value:function(n){return new t(function(t,e){var i=void 0,r=!1;return n.then(function(n){r||(n.values.attach(function(n){return t(n)}),n.finish.attach(function(){return e()}),i=n)},function(){setTimeout(function(){return e()},1)}),function(){r=!0,null!=i&&i.dispose()}})}},{key:"generate",value:function(n,e,i){return new t(function(t,r){var u=!1;return function n(a){e(a).then(function(e){u||(t(e),i(e)?n(e):r())})}(n),function(){u=!0}})}},{key:"setLater",value:function(){var n=(0,_deferred.deferred)(),e=!1,i=function(t){if(e)throw new Error("Setting stream twice.");e=!0,n.resolve(t)};return{stream:new t(function(t,e){var i=null;return n.promise.then(function(n){i=n,n.values.attach(function(n){t(n)}),n.finish.attach(function(){e()})}),function(){null!=i&&i.dispose()}}),setter:i}}},{key:"simple",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(t(n),setTimeout(function(){i||e()},1))},1),function(){i=!0}})}},{key:"combine",value:function(n){return new t(function(t,e){var i=new Array(n.length),r=new Set,u=new Set;return n.forEach(function(a,c){a.values.attach(function(e){i[c]=e,r.add(c),r.size>=n.length&&t(i)}),a.finish.attach(function(){u.add(c),u.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"combineFlat",value:function(n){return new t(function(t,e){var i=new Set;return n.forEach(function(r,u){r.values.attach(function(n){t(n)}),r.finish.attach(function(){i.add(u),i.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"filterNull",value:function(n){return new t(function(t,e){return n.values.attach(function(n){null!=n&&t(n)}),n.finish.attach(e),n.dispose})}}]),_createClass(t,[{key:"awaitFirst",value:function(){var t=this;return new Promise(function(n,e){var i=function(){},r=function e(r){t.values.detach(e),t.finish.detach(i),n(r)};i=function(){t.values.detach(r),t.finish.detach(i),e(new Error("No first value."))},t.values.attach(r),t.finish.attach(i)})}},{key:"awaitFinish",value:function(){var t=this;return new Promise(function(n){var e=function e(i){t.finish.detach(e),n()};t.finish.attach(e)})}},{key:"awaitLast",value:function(){var t=this;return new Promise(function(n,e){var i=void 0,r=function(t){i=t},u=function u(a){t.values.detach(r),t.finish.detach(u),null==i?e(new Error("No last value.")):n(i)};t.values.attach(r),t.finish.attach(u)})}},{key:"map",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){t(n(e))}),e.finish.attach(i),e.dispose})}},{key:"mapPromise",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"mapPromiseError",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})},function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"filter",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){n(e)&&t(e)}),e.finish.attach(i),e.dispose})}},{key:"reduce",value:function(t,n){var e=this;return new Promise(function(i,r){var u=n;e.values.attach(function(n){u=t(u,n)}),e.finish.attach(function(){i(u)})})}},{key:"concat",value:function(n){var e=this;return new t(function(t,i){var r=0;e.values.attach(function(n){t(n)}),n.values.attach(function(n){t(n)});var u=function(){2===++r&&i()};return e.finish.attach(u),n.finish.attach(u),function(){e.dispose(),n.dispose()}})}}]),t}();exports.Stream=Stream;var StreamWithEnding=exports.StreamWithEnding=function(){function t(){_classCallCheck(this,t)}return _createClass(t,null,[{key:"fromStreamAndPromise",value:function(n,e){var i=new t;i.stream=n;var r=(0,_deferred.deferred)();return i.dispose=function(t){r.reject(t),n.dispose()},n.awaitFinish().then(function(){r.resolve()}),i.ending=r.promise.then(function(){return e}),i}}]),t}();

},{"./deferred":8}],11:[function(require,module,exports){
(function (process){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function uniqueRandom(e){for(var t="undefined"==typeof navigator?null==process?"weird":process.version:navigator.userAgent,n=(new Date).getTimezoneOffset(),r="undefined"==typeof navigator?"node":null==navigator.languages?navigator.language:navigator.languages.toString(),a=t+n+r,o=_crypto2.default.createHash("md5").update(a).digest(),u=0,i=0;i<o.length;i++)u+=o[i],u%=e;return u}Object.defineProperty(exports,"__esModule",{value:!0}),exports.uniqueRandom=uniqueRandom;var _crypto=require("crypto"),_crypto2=_interopRequireDefault(_crypto);

}).call(this,require('_process'))

},{"_process":173,"crypto":112}],12:[function(require,module,exports){
var asn1=exports;asn1.bignum=require("bn.js"),asn1.define=require("./asn1/api").define,asn1.base=require("./asn1/base"),asn1.constants=require("./asn1/constants"),asn1.decoders=require("./asn1/decoders"),asn1.encoders=require("./asn1/encoders");

},{"./asn1/api":13,"./asn1/base":15,"./asn1/constants":19,"./asn1/decoders":21,"./asn1/encoders":24,"bn.js":73}],13:[function(require,module,exports){
function Entity(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}var asn1=require("../asn1"),inherits=require("inherits");exports.define=function(e,t){return new Entity(e,t)},Entity.prototype._createNamed=function(e){var t;try{t=require("vm").runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return inherits(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},Entity.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(asn1.decoders[e])),this.decoders[e]},Entity.prototype.decode=function(e,t,n){return this._getDecoder(t).decode(e,n)},Entity.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(asn1.encoders[e])),this.encoders[e]},Entity.prototype.encode=function(e,t,n){return this._getEncoder(t).encode(e,n)};

},{"../asn1":12,"inherits":159,"vm":239}],14:[function(require,module,exports){
function DecoderBuffer(e,t){if(Reporter.call(this,t),!Buffer.isBuffer(e))return void this.error("Input not Buffer");this.base=e,this.offset=0,this.length=e.length}function EncoderBuffer(e,t){if(Array.isArray(e))this.length=0,this.value=e.map(function(e){return e instanceof EncoderBuffer||(e=new EncoderBuffer(e,t)),this.length+=e.length,e},this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=Buffer.byteLength(e);else{if(!Buffer.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}var inherits=require("inherits"),Reporter=require("../base").Reporter,Buffer=require("buffer").Buffer;inherits(DecoderBuffer,Reporter),exports.DecoderBuffer=DecoderBuffer,DecoderBuffer.prototype.save=function(){return{offset:this.offset,reporter:Reporter.prototype.save.call(this)}},DecoderBuffer.prototype.restore=function(e){var t=new DecoderBuffer(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,Reporter.prototype.restore.call(this,e.reporter),t},DecoderBuffer.prototype.isEmpty=function(){return this.offset===this.length},DecoderBuffer.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},DecoderBuffer.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new DecoderBuffer(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},DecoderBuffer.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},exports.EncoderBuffer=EncoderBuffer,EncoderBuffer.prototype.join=function(e,t){return e||(e=new Buffer(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach(function(r){r.join(e,t),t+=r.length}):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):Buffer.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)};

},{"../base":15,"buffer":104,"inherits":159}],15:[function(require,module,exports){
var base=exports;base.Reporter=require("./reporter").Reporter,base.DecoderBuffer=require("./buffer").DecoderBuffer,base.EncoderBuffer=require("./buffer").EncoderBuffer,base.Node=require("./node");

},{"./buffer":14,"./node":16,"./reporter":17}],16:[function(require,module,exports){
function Node(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}var Reporter=require("../base").Reporter,EncoderBuffer=require("../base").EncoderBuffer,DecoderBuffer=require("../base").DecoderBuffer,assert=require("minimalistic-assert"),tags=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],methods=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(tags),overrided=["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"];module.exports=Node;var stateProps=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];Node.prototype.clone=function(){var e=this._baseState,t={};stateProps.forEach(function(r){t[r]=e[r]});var r=new this.constructor(t.parent);return r._baseState=t,r},Node.prototype._wrap=function(){var e=this._baseState;methods.forEach(function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}},this)},Node.prototype._init=function(e){var t=this._baseState;assert(null===t.parent),e.call(this),t.children=t.children.filter(function(e){return e._baseState.parent===this},this),assert.equal(t.children.length,1,"Root node can have only one child")},Node.prototype._useArgs=function(e){var t=this._baseState,r=e.filter(function(e){return e instanceof this.constructor},this);e=e.filter(function(e){return!(e instanceof this.constructor)},this),0!==r.length&&(assert(null===t.children),t.children=r,r.forEach(function(e){e._baseState.parent=this},this)),0!==e.length&&(assert(null===t.args),t.args=e,t.reverseArgs=e.map(function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach(function(r){r==(0|r)&&(r|=0),t[e[r]]=r}),t}))},overrided.forEach(function(e){Node.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}}),tags.forEach(function(e){Node.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return assert(null===t.tag),t.tag=e,this._useArgs(r),this}}),Node.prototype.use=function(e){assert(e);var t=this._baseState;return assert(null===t.use),t.use=e,this},Node.prototype.optional=function(){return this._baseState.optional=!0,this},Node.prototype.def=function(e){var t=this._baseState;return assert(null===t.default),t.default=e,t.optional=!0,this},Node.prototype.explicit=function(e){var t=this._baseState;return assert(null===t.explicit&&null===t.implicit),t.explicit=e,this},Node.prototype.implicit=function(e){var t=this._baseState;return assert(null===t.explicit&&null===t.implicit),t.implicit=e,this},Node.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},Node.prototype.key=function(e){var t=this._baseState;return assert(null===t.key),t.key=e,this},Node.prototype.any=function(){return this._baseState.any=!0,this},Node.prototype.choice=function(e){var t=this._baseState;return assert(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map(function(t){return e[t]})),this},Node.prototype.contains=function(e){var t=this._baseState;return assert(null===t.use),t.contains=e,this},Node.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var i=r.default,n=!0,o=null;if(null!==r.key&&(o=e.enterKey(r.key)),r.optional){var s=null;if(null!==r.explicit?s=r.explicit:null!==r.implicit?s=r.implicit:null!==r.tag&&(s=r.tag),null!==s||r.any){if(n=this._peekTag(e,s,r.any),e.isError(n))return n}else{var a=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),n=!0}catch(e){n=!1}e.restore(a)}}var c;if(r.obj&&n&&(c=e.enterObject()),n){if(null!==r.explicit){var l=this._decodeTag(e,r.explicit);if(e.isError(l))return l;e=l}var u=e.offset;if(null===r.use&&null===r.choice){if(r.any)var a=e.save();var d=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(d))return d;r.any?i=e.raw(a):e=d}if(t&&t.track&&null!==r.tag&&t.track(e.path(),u,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),i=r.any?i:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(i))return i;if(r.any||null!==r.choice||null===r.children||r.children.forEach(function(r){r._decode(e,t)}),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var h=new DecoderBuffer(i);i=this._getUse(r.contains,e._reporterState.obj)._decode(h,t)}}return r.obj&&n&&(i=e.leaveObject(c)),null===r.key||null===i&&n!==!0?null!==o&&e.exitKey(o):e.leaveKey(o,r.key,i),i},Node.prototype._decodeGeneric=function(e,t,r){var i=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,i.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&i.args?this._decodeObjid(t,i.args[0],i.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,i.args&&i.args[0],r):null!==i.use?this._getUse(i.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},Node.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),assert(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},Node.prototype._decodeChoice=function(e,t){var r=this._baseState,i=null,n=!1;return Object.keys(r.choice).some(function(o){var s=e.save(),a=r.choice[o];try{var c=a._decode(e,t);if(e.isError(c))return!1;i={type:o,value:c},n=!0}catch(t){return e.restore(s),!1}return!0},this),n?i:e.error("Choice not matched")},Node.prototype._createEncoderBuffer=function(e){return new EncoderBuffer(e,this.reporter)},Node.prototype._encode=function(e,t,r){var i=this._baseState;if(null===i.default||i.default!==e){var n=this._encodeValue(e,t,r);if(void 0!==n&&!this._skipDefault(n,t,r))return n}},Node.prototype._encodeValue=function(e,t,r){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(e,t||new Reporter);var n=null;if(this.reporter=t,i.optional&&void 0===e){if(null===i.default)return;e=i.default}var o=null,s=!1;if(i.any)n=this._createEncoderBuffer(e);else if(i.choice)n=this._encodeChoice(e,t);else if(i.contains)o=this._getUse(i.contains,r)._encode(e,t),s=!0;else if(i.children)o=i.children.map(function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var i=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var n=r._encode(e[r._baseState.key],t,e);return t.leaveKey(i),n},this).filter(function(e){return e}),o=this._createEncoderBuffer(o);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return t.error("Too many args for : "+i.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var a=this.clone();a._baseState.implicit=null,o=this._createEncoderBuffer(e.map(function(r){var i=this._baseState;return this._getUse(i.args[0],e)._encode(r,t)},a))}else null!==i.use?n=this._getUse(i.use,r)._encode(e,t):(o=this._encodePrimitive(i.tag,e),s=!0);var n;if(!i.any&&null===i.choice){var c=null!==i.implicit?i.implicit:i.tag,l=null===i.implicit?"universal":"context";null===c?null===i.use&&t.error("Tag could be ommited only for .use()"):null===i.use&&(n=this._encodeComposite(c,s,l,o))}return null!==i.explicit&&(n=this._encodeComposite(i.explicit,!1,"context",n)),n},Node.prototype._encodeChoice=function(e,t){var r=this._baseState,i=r.choice[e.type];return i||assert(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),i._encode(e.value,t)},Node.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},Node.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},Node.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)};

},{"../base":15,"minimalistic-assert":164}],17:[function(require,module,exports){
function Reporter(r){this._reporterState={obj:null,path:[],options:r||{},errors:[]}}function ReporterError(r,t){this.path=r,this.rethrow(t)}var inherits=require("inherits");exports.Reporter=Reporter,Reporter.prototype.isError=function(r){return r instanceof ReporterError},Reporter.prototype.save=function(){var r=this._reporterState;return{obj:r.obj,pathLen:r.path.length}},Reporter.prototype.restore=function(r){var t=this._reporterState;t.obj=r.obj,t.path=t.path.slice(0,r.pathLen)},Reporter.prototype.enterKey=function(r){return this._reporterState.path.push(r)},Reporter.prototype.exitKey=function(r){var t=this._reporterState;t.path=t.path.slice(0,r-1)},Reporter.prototype.leaveKey=function(r,t,e){var o=this._reporterState;this.exitKey(r),null!==o.obj&&(o.obj[t]=e)},Reporter.prototype.path=function(){return this._reporterState.path.join("/")},Reporter.prototype.enterObject=function(){var r=this._reporterState,t=r.obj;return r.obj={},t},Reporter.prototype.leaveObject=function(r){var t=this._reporterState,e=t.obj;return t.obj=r,e},Reporter.prototype.error=function(r){var t,e=this._reporterState,o=r instanceof ReporterError;if(t=o?r:new ReporterError(e.path.map(function(r){return"["+JSON.stringify(r)+"]"}).join(""),r.message||r,r.stack),!e.options.partial)throw t;return o||e.errors.push(t),t},Reporter.prototype.wrapResult=function(r){var t=this._reporterState;return t.options.partial?{result:this.isError(r)?null:r,errors:t.errors}:r},inherits(ReporterError,Error),ReporterError.prototype.rethrow=function(r){if(this.message=r+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,ReporterError),!this.stack)try{throw new Error(this.message)}catch(r){this.stack=r.stack}return this};

},{"inherits":159}],18:[function(require,module,exports){
var constants=require("../constants");exports.tagClass={0:"universal",1:"application",2:"context",3:"private"},exports.tagClassByName=constants._reverse(exports.tagClass),exports.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},exports.tagByName=constants._reverse(exports.tag);

},{"../constants":19}],19:[function(require,module,exports){
var constants=exports;constants._reverse=function(r){var e={};return Object.keys(r).forEach(function(n){(0|n)==n&&(n|=0),e[r[n]]=n}),e},constants.der=require("./der");

},{"./der":18}],20:[function(require,module,exports){
function DERDecoder(r){this.enc="der",this.name=r.name,this.entity=r,this.tree=new DERNode,this.tree._init(r.body)}function DERNode(r){base.Node.call(this,"der",r)}function derDecodeTag(r,e){var t=r.readUInt8(e);if(r.isError(t))return t;var i=der.tagClass[t>>6],o=0==(32&t);if(31==(31&t)){var n=t;for(t=0;128==(128&n);){if(n=r.readUInt8(e),r.isError(n))return n;t<<=7,t|=127&n}}else t&=31;return{cls:i,primitive:o,tag:t,tagStr:der.tag[t]}}function derDecodeLen(r,e,t){var i=r.readUInt8(t);if(r.isError(i))return i;if(!e&&128===i)return null;if(0==(128&i))return i;var o=127&i;if(o>4)return r.error("length octect is too long");i=0;for(var n=0;n<o;n++){i<<=8;var s=r.readUInt8(t);if(r.isError(s))return s;i|=s}return i}var inherits=require("inherits"),asn1=require("../../asn1"),base=asn1.base,bignum=asn1.bignum,der=asn1.constants.der;module.exports=DERDecoder,DERDecoder.prototype.decode=function(r,e){return r instanceof base.DecoderBuffer||(r=new base.DecoderBuffer(r,e)),this.tree._decode(r,e)},inherits(DERNode,base.Node),DERNode.prototype._peekTag=function(r,e,t){if(r.isEmpty())return!1;var i=r.save(),o=derDecodeTag(r,'Failed to peek tag: "'+e+'"');return r.isError(o)?o:(r.restore(i),o.tag===e||o.tagStr===e||o.tagStr+"of"===e||t)},DERNode.prototype._decodeTag=function(r,e,t){var i=derDecodeTag(r,'Failed to decode tag of "'+e+'"');if(r.isError(i))return i;var o=derDecodeLen(r,i.primitive,'Failed to get length of "'+e+'"');if(r.isError(o))return o;if(!t&&i.tag!==e&&i.tagStr!==e&&i.tagStr+"of"!==e)return r.error('Failed to match tag: "'+e+'"');if(i.primitive||null!==o)return r.skip(o,'Failed to match body of: "'+e+'"');var n=r.save(),s=this._skipUntilEnd(r,'Failed to skip indefinite length body: "'+this.tag+'"');return r.isError(s)?s:(o=r.offset-n.offset,r.restore(n),r.skip(o,'Failed to match body of: "'+e+'"'))},DERNode.prototype._skipUntilEnd=function(r,e){for(;;){var t=derDecodeTag(r,e);if(r.isError(t))return t;var i=derDecodeLen(r,t.primitive,e);if(r.isError(i))return i;var o;if(o=t.primitive||null!==i?r.skip(i):this._skipUntilEnd(r,e),r.isError(o))return o;if("end"===t.tagStr)break}},DERNode.prototype._decodeList=function(r,e,t,i){for(var o=[];!r.isEmpty();){var n=this._peekTag(r,"end");if(r.isError(n))return n;var s=t.decode(r,"der",i);if(r.isError(s)&&n)break;o.push(s)}return o},DERNode.prototype._decodeStr=function(r,e){if("bitstr"===e){var t=r.readUInt8();return r.isError(t)?t:{unused:t,data:r.raw()}}if("bmpstr"===e){var i=r.raw();if(i.length%2==1)return r.error("Decoding of string type: bmpstr length mismatch");for(var o="",n=0;n<i.length/2;n++)o+=String.fromCharCode(i.readUInt16BE(2*n));return o}if("numstr"===e){var s=r.raw().toString("ascii");return this._isNumstr(s)?s:r.error("Decoding of string type: numstr unsupported characters")}if("octstr"===e)return r.raw();if("objDesc"===e)return r.raw();if("printstr"===e){var a=r.raw().toString("ascii");return this._isPrintstr(a)?a:r.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(e)?r.raw().toString():r.error("Decoding of string type: "+e+" unsupported")},DERNode.prototype._decodeObjid=function(r,e,t){for(var i,o=[],n=0;!r.isEmpty();){var s=r.readUInt8();n<<=7,n|=127&s,0==(128&s)&&(o.push(n),n=0)}128&s&&o.push(n);var a=o[0]/40|0,d=o[0]%40;if(i=t?o:[a,d].concat(o.slice(1)),e){var u=e[i.join(" ")];void 0===u&&(u=e[i.join(".")]),void 0!==u&&(i=u)}return i},DERNode.prototype._decodeTime=function(r,e){var t=r.raw().toString();if("gentime"===e)var i=0|t.slice(0,4),o=0|t.slice(4,6),n=0|t.slice(6,8),s=0|t.slice(8,10),a=0|t.slice(10,12),d=0|t.slice(12,14);else{if("utctime"!==e)return r.error("Decoding "+e+" time is not supported yet");var i=0|t.slice(0,2),o=0|t.slice(2,4),n=0|t.slice(4,6),s=0|t.slice(6,8),a=0|t.slice(8,10),d=0|t.slice(10,12);i=i<70?2e3+i:1900+i}return Date.UTC(i,o-1,n,s,a,d,0)},DERNode.prototype._decodeNull=function(r){return null},DERNode.prototype._decodeBool=function(r){var e=r.readUInt8();return r.isError(e)?e:0!==e},DERNode.prototype._decodeInt=function(r,e){var t=r.raw(),i=new bignum(t);return e&&(i=e[i.toString(10)]||i),i},DERNode.prototype._use=function(r,e){return"function"==typeof r&&(r=r(e)),r._getDecoder("der").tree};

},{"../../asn1":12,"inherits":159}],21:[function(require,module,exports){
var decoders=exports;decoders.der=require("./der"),decoders.pem=require("./pem");

},{"./der":20,"./pem":22}],22:[function(require,module,exports){
function PEMDecoder(e){DERDecoder.call(this,e),this.enc="pem"}var inherits=require("inherits"),Buffer=require("buffer").Buffer,DERDecoder=require("./der");inherits(PEMDecoder,DERDecoder),module.exports=PEMDecoder,PEMDecoder.prototype.decode=function(e,r){for(var o=e.toString().split(/[\r\n]+/g),i=r.label.toUpperCase(),t=-1,c=-1,n=0;n<o.length;n++){var f=o[n].match(/^-----(BEGIN|END) ([^-]+)-----$/);if(null!==f&&f[2]===i){if(t!==-1){if("END"!==f[1])break;c=n;break}if("BEGIN"!==f[1])break;t=n}}if(t===-1||c===-1)throw new Error("PEM section not found for: "+i);var a=o.slice(t+1,c).join("");a.replace(/[^a-z0-9\+\/=]+/gi,"");var d=new Buffer(a,"base64");return DERDecoder.prototype.decode.call(this,d,r)};

},{"./der":20,"buffer":104,"inherits":159}],23:[function(require,module,exports){
function DEREncoder(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new DERNode,this.tree._init(e.body)}function DERNode(e){base.Node.call(this,"der",e)}function two(e){return e<10?"0"+e:e}function encodeTag(e,r,t,n){var o;if("seqof"===e?e="seq":"setof"===e&&(e="set"),der.tagByName.hasOwnProperty(e))o=der.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);o=e}return o>=31?n.error("Multi-octet tag encoding unsupported"):(r||(o|=32),o|=der.tagClassByName[t||"universal"]<<6)}var inherits=require("inherits"),Buffer=require("buffer").Buffer,asn1=require("../../asn1"),base=asn1.base,der=asn1.constants.der;module.exports=DEREncoder,DEREncoder.prototype.encode=function(e,r){return this.tree._encode(e,r).join()},inherits(DERNode,base.Node),DERNode.prototype._encodeComposite=function(e,r,t,n){var o=encodeTag(e,r,t,this.reporter);if(n.length<128){var i=new Buffer(2);return i[0]=o,i[1]=n.length,this._createEncoderBuffer([i,n])}for(var f=1,s=n.length;s>=256;s>>=8)f++;var i=new Buffer(2+f);i[0]=o,i[1]=128|f;for(var s=1+f,u=n.length;u>0;s--,u>>=8)i[s]=255&u;return this._createEncoderBuffer([i,n])},DERNode.prototype._encodeStr=function(e,r){if("bitstr"===r)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===r){for(var t=new Buffer(2*e.length),n=0;n<e.length;n++)t.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(t)}return"numstr"===r?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===r?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(r)?this._createEncoderBuffer(e):"objDesc"===r?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+r+" unsupported")},DERNode.prototype._encodeObjid=function(e,r,t){if("string"==typeof e){if(!r)return this.reporter.error("string objid given, but no values map found");if(!r.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=r[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(var n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!t){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}for(var o=0,n=0;n<e.length;n++){var i=e[n];for(o++;i>=128;i>>=7)o++}for(var f=new Buffer(o),s=f.length-1,n=e.length-1;n>=0;n--){var i=e[n];for(f[s--]=127&i;(i>>=7)>0;)f[s--]=128|127&i}return this._createEncoderBuffer(f)},DERNode.prototype._encodeTime=function(e,r){var t,n=new Date(e);return"gentime"===r?t=[two(n.getFullYear()),two(n.getUTCMonth()+1),two(n.getUTCDate()),two(n.getUTCHours()),two(n.getUTCMinutes()),two(n.getUTCSeconds()),"Z"].join(""):"utctime"===r?t=[two(n.getFullYear()%100),two(n.getUTCMonth()+1),two(n.getUTCDate()),two(n.getUTCHours()),two(n.getUTCMinutes()),two(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+r+" time is not supported yet"),this._encodeStr(t,"octstr")},DERNode.prototype._encodeNull=function(){return this._createEncoderBuffer("")},DERNode.prototype._encodeInt=function(e,r){if("string"==typeof e){if(!r)return this.reporter.error("String int or enum given, but no values map");if(!r.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=r[e]}if("number"!=typeof e&&!Buffer.isBuffer(e)){var t=e.toArray();!e.sign&&128&t[0]&&t.unshift(0),e=new Buffer(t)}if(Buffer.isBuffer(e)){var n=e.length;0===e.length&&n++;var o=new Buffer(n);return e.copy(o),0===e.length&&(o[0]=0),this._createEncoderBuffer(o)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);for(var n=1,i=e;i>=256;i>>=8)n++;for(var o=new Array(n),i=o.length-1;i>=0;i--)o[i]=255&e,e>>=8;return 128&o[0]&&o.unshift(0),this._createEncoderBuffer(new Buffer(o))},DERNode.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},DERNode.prototype._use=function(e,r){return"function"==typeof e&&(e=e(r)),e._getEncoder("der").tree},DERNode.prototype._skipDefault=function(e,r,t){var n,o=this._baseState;if(null===o.default)return!1;var i=e.join();if(void 0===o.defaultBuffer&&(o.defaultBuffer=this._encodeValue(o.default,r,t).join()),i.length!==o.defaultBuffer.length)return!1;for(n=0;n<i.length;n++)if(i[n]!==o.defaultBuffer[n])return!1;return!0};

},{"../../asn1":12,"buffer":104,"inherits":159}],24:[function(require,module,exports){
var encoders=exports;encoders.der=require("./der"),encoders.pem=require("./pem");

},{"./der":23,"./pem":25}],25:[function(require,module,exports){
function PEMEncoder(e){DEREncoder.call(this,e),this.enc="pem"}var inherits=require("inherits"),DEREncoder=require("./der");inherits(PEMEncoder,DEREncoder),module.exports=PEMEncoder,PEMEncoder.prototype.encode=function(e,r){for(var n=DEREncoder.prototype.encode.call(this,e),o=n.toString("base64"),E=["-----BEGIN "+r.label+"-----"],t=0;t<o.length;t+=64)E.push(o.slice(t,t+64));return E.push("-----END "+r.label+"-----"),E.join("\n")};

},{"./der":23,"inherits":159}],26:[function(require,module,exports){
(function (global){
"use strict";function compare(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function isBuffer(e){return global.Buffer&&"function"==typeof global.Buffer.isBuffer?global.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}function pToString(e){return Object.prototype.toString.call(e)}function isView(e){return!isBuffer(e)&&("function"==typeof global.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}function getName(e){if(util.isFunction(e)){if(functionsHaveNames)return e.name;var t=e.toString(),r=t.match(regex);return r&&r[1]}}function truncate(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function inspect(e){if(functionsHaveNames||!util.isFunction(e))return util.inspect(e);var t=getName(e);return"[Function"+(t?": "+t:"")+"]"}function getMessage(e){return truncate(inspect(e.actual),128)+" "+e.operator+" "+truncate(inspect(e.expected),128)}function fail(e,t,r,n,i){throw new assert.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ok(e,t){e||fail(e,!0,t,"==",assert.ok)}function _deepEqual(e,t,r,n){if(e===t)return!0;if(isBuffer(e)&&isBuffer(t))return 0===compare(e,t);if(util.isDate(e)&&util.isDate(t))return e.getTime()===t.getTime();if(util.isRegExp(e)&&util.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(isView(e)&&isView(t)&&pToString(e)===pToString(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===compare(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(isBuffer(e)!==isBuffer(t))return!1;n=n||{actual:[],expected:[]};var i=n.actual.indexOf(e);return i!==-1&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),objEquiv(e,t,r,n))}return r?e===t:e==t}function isArguments(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function objEquiv(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(util.isPrimitive(e)||util.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=isArguments(e),a=isArguments(t);if(i&&!a||!i&&a)return!1;if(i)return e=pSlice.call(e),t=pSlice.call(t),_deepEqual(e,t,r);var s,u,o=objectKeys(e),f=objectKeys(t);if(o.length!==f.length)return!1;for(o.sort(),f.sort(),u=o.length-1;u>=0;u--)if(o[u]!==f[u])return!1;for(u=o.length-1;u>=0;u--)if(s=o[u],!_deepEqual(e[s],t[s],r,n))return!1;return!0}function notDeepStrictEqual(e,t,r){_deepEqual(e,t,!0)&&fail(e,t,r,"notDeepStrictEqual",notDeepStrictEqual)}function expectedException(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&t.call({},e)===!0}function _tryBlock(e){var t;try{e()}catch(e){t=e}return t}function _throws(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=_tryBlock(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&fail(i,r,"Missing expected exception"+n);var a="string"==typeof n,s=!e&&util.isError(i),u=!e&&i&&!r;if((s&&a&&expectedException(i,r)||u)&&fail(i,r,"Got unwanted exception"+n),e&&i&&r&&!expectedException(i,r)||!e&&i)throw i}var util=require("util/"),hasOwn=Object.prototype.hasOwnProperty,pSlice=Array.prototype.slice,functionsHaveNames=function(){return"foo"===function(){}.name}(),assert=module.exports=ok,regex=/\s*function\s+([^\(\s]*)\s*/;assert.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var t=e.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=getName(t),a=n.indexOf("\n"+i);if(a>=0){var s=n.indexOf("\n",a+1);n=n.substring(s+1)}this.stack=n}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(e,t,r){e!=t&&fail(e,t,r,"==",assert.equal)},assert.notEqual=function(e,t,r){e==t&&fail(e,t,r,"!=",assert.notEqual)},assert.deepEqual=function(e,t,r){_deepEqual(e,t,!1)||fail(e,t,r,"deepEqual",assert.deepEqual)},assert.deepStrictEqual=function(e,t,r){_deepEqual(e,t,!0)||fail(e,t,r,"deepStrictEqual",assert.deepStrictEqual)},assert.notDeepEqual=function(e,t,r){_deepEqual(e,t,!1)&&fail(e,t,r,"notDeepEqual",assert.notDeepEqual)},assert.notDeepStrictEqual=notDeepStrictEqual,assert.strictEqual=function(e,t,r){e!==t&&fail(e,t,r,"===",assert.strictEqual)},assert.notStrictEqual=function(e,t,r){e===t&&fail(e,t,r,"!==",assert.notStrictEqual)},assert.throws=function(e,t,r){_throws(!0,e,t,r)},assert.doesNotThrow=function(e,t,r){_throws(!1,e,t,r)},assert.ifError=function(e){if(e)throw e};var objectKeys=Object.keys||function(e){var t=[];for(var r in e)hasOwn.call(e,r)&&t.push(r);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"util/":211}],27:[function(require,module,exports){
(function (Buffer){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var u="",a=0;0===e[a]&&a<e.length-1;++a)u+=r[0];for(var v=n.length-1;v>=0;--v)u+=r[n[v]];return u}function n(r){if(0===r.length)return new Buffer(0);for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var u=0,a=t;u<e.length;++u)a+=e[u]*f,e[u]=255&a,a>>=8;for(;a>0;)e.push(255&a),a>>=8}for(var v=0;r[v]===h&&v<r.length-1;++v)e.push(0);return new Buffer(e.reverse())}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),u=0;u<r.length;u++){var a=r.charAt(u);if(void 0!==o[a])throw new TypeError(a+" is ambiguous");o[a]=u}return{encode:e,decodeUnsafe:n,decode:t}};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],28:[function(require,module,exports){
"use strict";function placeHoldersCount(o){var r=o.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===o[r-2]?2:"="===o[r-1]?1:0}function byteLength(o){return 3*o.length/4-placeHoldersCount(o)}function toByteArray(o){var r,e,t,u,n,p,a=o.length;n=placeHoldersCount(o),p=new Arr(3*a/4-n),t=n>0?a-4:a;var l=0;for(r=0,e=0;r<t;r+=4,e+=3)u=revLookup[o.charCodeAt(r)]<<18|revLookup[o.charCodeAt(r+1)]<<12|revLookup[o.charCodeAt(r+2)]<<6|revLookup[o.charCodeAt(r+3)],p[l++]=u>>16&255,p[l++]=u>>8&255,p[l++]=255&u;return 2===n?(u=revLookup[o.charCodeAt(r)]<<2|revLookup[o.charCodeAt(r+1)]>>4,p[l++]=255&u):1===n&&(u=revLookup[o.charCodeAt(r)]<<10|revLookup[o.charCodeAt(r+1)]<<4|revLookup[o.charCodeAt(r+2)]>>2,p[l++]=u>>8&255,p[l++]=255&u),p}function tripletToBase64(o){return lookup[o>>18&63]+lookup[o>>12&63]+lookup[o>>6&63]+lookup[63&o]}function encodeChunk(o,r,e){for(var t,u=[],n=r;n<e;n+=3)t=(o[n]<<16)+(o[n+1]<<8)+o[n+2],u.push(tripletToBase64(t));return u.join("")}function fromByteArray(o){for(var r,e=o.length,t=e%3,u="",n=[],p=0,a=e-t;p<a;p+=16383)n.push(encodeChunk(o,p,p+16383>a?a:p+16383));return 1===t?(r=o[e-1],u+=lookup[r>>2],u+=lookup[r<<4&63],u+="=="):2===t&&(r=(o[e-2]<<8)+o[e-1],u+=lookup[r>>10],u+=lookup[r>>4&63],u+=lookup[r<<2&63],u+="="),n.push(u),n.join("")}exports.byteLength=byteLength,exports.toByteArray=toByteArray,exports.fromByteArray=fromByteArray;for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;

},{}],29:[function(require,module,exports){
function BigInteger(t,r,o){if(!(this instanceof BigInteger))return new BigInteger(t,r,o);null!=t&&("number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function am1(t,r,o,n,i,e){for(;--e>=0;){var s=r*this[t++]+o[n]+i;i=Math.floor(s/67108864),o[n++]=67108863&s}return i}function am2(t,r,o,n,i,e){for(var s=32767&r,u=r>>15;--e>=0;){var h=32767&this[t],f=this[t++]>>15,p=u*h+f*s;h=s*h+((32767&p)<<15)+o[n]+(1073741823&i),i=(h>>>30)+(p>>>15)+u*f+(i>>>30),o[n++]=1073741823&h}return i}function am3(t,r,o,n,i,e){for(var s=16383&r,u=r>>14;--e>=0;){var h=16383&this[t],f=this[t++]>>14,p=u*h+f*s;h=s*h+((16383&p)<<14)+o[n]+i,i=(h>>28)+(p>>14)+u*f,o[n++]=268435455&h}return i}function int2char(t){return BI_RM.charAt(t)}function intAt(t,r){var o=BI_RC[t.charCodeAt(r)];return null==o?-1:o}function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s}function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+DV:this.t=0}function nbv(t){var r=new BigInteger;return r.fromInt(t),r}function bnpFromString(t,r){var o,n=this;if(16==r)o=4;else if(8==r)o=3;else if(256==r)o=8;else if(2==r)o=1;else if(32==r)o=5;else{if(4!=r)return void n.fromRadix(t,r);o=2}n.t=0,n.s=0;for(var i=t.length,e=!1,s=0;--i>=0;){var u=8==o?255&t[i]:intAt(t,i);u<0?"-"==t.charAt(i)&&(e=!0):(e=!1,0==s?n[n.t++]=u:s+o>n.DB?(n[n.t-1]|=(u&(1<<n.DB-s)-1)<<s,n[n.t++]=u>>n.DB-s):n[n.t-1]|=u<<s,(s+=o)>=n.DB&&(s-=n.DB))}8==o&&0!=(128&t[0])&&(n.s=-1,s>0&&(n[n.t-1]|=(1<<n.DB-s)-1<<s)),n.clamp(),e&&BigInteger.ZERO.subTo(n,n)}function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t}function bnToString(t){var r=this;if(r.s<0)return"-"+r.negate().toString(t);var o;if(16==t)o=4;else if(8==t)o=3;else if(2==t)o=1;else if(32==t)o=5;else{if(4!=t)return r.toRadix(t);o=2}var n,i=(1<<o)-1,e=!1,s="",u=r.t,h=r.DB-u*r.DB%o;if(u-- >0)for(h<r.DB&&(n=r[u]>>h)>0&&(e=!0,s=int2char(n));u>=0;)h<o?(n=(r[u]&(1<<h)-1)<<o-h,n|=r[--u]>>(h+=r.DB-o)):(n=r[u]>>(h-=o)&i,h<=0&&(h+=r.DB,--u)),n>0&&(e=!0),e&&(s+=int2char(n));return e?s:"0"}function bnNegate(){var t=new BigInteger;return BigInteger.ZERO.subTo(this,t),t}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var o=this.t;if(0!=(r=o-t.t))return this.s<0?-r:r;for(;--o>=0;)if(0!=(r=this[o]-t[o]))return r;return 0}function nbits(t){var r,o=1;return 0!=(r=t>>>16)&&(t=r,o+=16),0!=(r=t>>8)&&(t=r,o+=8),0!=(r=t>>4)&&(t=r,o+=4),0!=(r=t>>2)&&(t=r,o+=2),0!=(r=t>>1)&&(t=r,o+=1),o}function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnByteLength(){return this.bitLength()>>3}function bnpDLShiftTo(t,r){var o;for(o=this.t-1;o>=0;--o)r[o+t]=this[o];for(o=t-1;o>=0;--o)r[o]=0;r.t=this.t+t,r.s=this.s}function bnpDRShiftTo(t,r){for(var o=t;o<this.t;++o)r[o-t]=this[o];r.t=Math.max(this.t-t,0),r.s=this.s}function bnpLShiftTo(t,r){var o,n=this,i=t%n.DB,e=n.DB-i,s=(1<<e)-1,u=Math.floor(t/n.DB),h=n.s<<i&n.DM;for(o=n.t-1;o>=0;--o)r[o+u+1]=n[o]>>e|h,h=(n[o]&s)<<i;for(o=u-1;o>=0;--o)r[o]=0;r[u]=h,r.t=n.t+u+1,r.s=n.s,r.clamp()}function bnpRShiftTo(t,r){var o=this;r.s=o.s;var n=Math.floor(t/o.DB);if(n>=o.t)return void(r.t=0);var i=t%o.DB,e=o.DB-i,s=(1<<i)-1;r[0]=o[n]>>i;for(var u=n+1;u<o.t;++u)r[u-n-1]|=(o[u]&s)<<e,r[u-n]=o[u]>>i;i>0&&(r[o.t-n-1]|=(o.s&s)<<e),r.t=o.t-n,r.clamp()}function bnpSubTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]-t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i-=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i-=t[n],r[n++]=i&o.DM,i>>=o.DB;i-=t.s}r.s=i<0?-1:0,i<-1?r[n++]=o.DV+i:i>0&&(r[n++]=i),r.t=n,r.clamp()}function bnpMultiplyTo(t,r){var o=this.abs(),n=t.abs(),i=o.t;for(r.t=i+n.t;--i>=0;)r[i]=0;for(i=0;i<n.t;++i)r[i+o.t]=o.am(0,n[i],r,i,0,o.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(t){for(var r=this.abs(),o=t.t=2*r.t;--o>=0;)t[o]=0;for(o=0;o<r.t-1;++o){var n=r.am(o,r[o],t,2*o,0,1);(t[o+r.t]+=r.am(o+1,2*r[o],t,2*o+1,n,r.t-o-1))>=r.DV&&(t[o+r.t]-=r.DV,t[o+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(o,r[o],t,2*o,0,1)),t.s=0,t.clamp()}function bnpDivRemTo(t,r,o){var n=this,i=t.abs();if(!(i.t<=0)){var e=n.abs();if(e.t<i.t)return null!=r&&r.fromInt(0),void(null!=o&&n.copyTo(o));null==o&&(o=new BigInteger);var s=new BigInteger,u=n.s,h=t.s,f=n.DB-nbits(i[i.t-1]);f>0?(i.lShiftTo(f,s),e.lShiftTo(f,o)):(i.copyTo(s),e.copyTo(o));var p=s.t,a=s[p-1];if(0!=a){var b=a*(1<<n.F1)+(p>1?s[p-2]>>n.F2:0),l=n.FV/b,m=(1<<n.F1)/b,g=1<<n.F2,c=o.t,v=c-p,T=null==r?new BigInteger:r;for(s.dlShiftTo(v,T),o.compareTo(T)>=0&&(o[o.t++]=1,o.subTo(T,o)),BigInteger.ONE.dlShiftTo(p,T),T.subTo(s,s);s.t<p;)s[s.t++]=0;for(;--v>=0;){var B=o[--c]==a?n.DM:Math.floor(o[c]*l+(o[c-1]+g)*m);if((o[c]+=s.am(0,B,o,v,0,p))<B)for(s.dlShiftTo(v,T),o.subTo(T,o);o[c]<--B;)o.subTo(T,o)}null!=r&&(o.drShiftTo(p,r),u!=h&&BigInteger.ZERO.subTo(r,r)),o.t=p,o.clamp(),f>0&&o.rShiftTo(f,o),u<0&&BigInteger.ZERO.subTo(o,o)}}}function bnMod(t){var r=new BigInteger;return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r}function Classic(t){this.m=t}function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t}function cRevert(t){return t}function cReduce(t){t.divRemTo(this.m,null,t)}function cMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function cSqrTo(t,r){t.squareTo(r),this.reduce(r)}function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return r=r*(2-(15&t)*r)&15,r=r*(2-(255&t)*r)&255,r=r*(2-((65535&t)*r&65535))&65535,r=r*(2-t*r%this.DV)%this.DV,r>0?this.DV-r:-r}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function montConvert(t){var r=new BigInteger;return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r}function montRevert(t){var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var o=32767&t[r],n=o*this.mpl+((o*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(o=r+this.m.t,t[o]+=this.m.am(0,n,t,r,0,this.m.t);t[o]>=t.DV;)t[o]-=t.DV,t[++o]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)}function montSqrTo(t,r){t.squareTo(r),this.reduce(r)}function montMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)}function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var o=new BigInteger,n=new BigInteger,i=r.convert(this),e=nbits(t)-1;for(i.copyTo(o);--e>=0;)if(r.sqrTo(o,n),(t&1<<e)>0)r.mulTo(n,i,o);else{var s=o;o=n,n=s}return r.revert(o)}function bnModPowInt(t,r){var o;return o=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,o)}function bnClone(){var t=new BigInteger;return this.copyTo(t),t}function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24}function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16}function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))}function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1}function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),o=Math.pow(t,r),n=nbv(o),i=new BigInteger,e=new BigInteger,s="";for(this.divRemTo(n,i,e);i.signum()>0;)s=(o+e.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,e);return e.intValue().toString(t)+s}function bnpFromRadix(t,r){var o=this;o.fromInt(0),null==r&&(r=10);for(var n=o.chunkSize(r),i=Math.pow(r,n),e=!1,s=0,u=0,h=0;h<t.length;++h){var f=intAt(t,h);f<0?"-"==t.charAt(h)&&0==o.signum()&&(e=!0):(u=r*u+f,++s>=n&&(o.dMultiply(i),o.dAddOffset(u,0),s=0,u=0))}s>0&&(o.dMultiply(Math.pow(r,s)),o.dAddOffset(u,0)),e&&BigInteger.ZERO.subTo(o,o)}function bnpFromNumber(t,r,o){var n=this;if("number"==typeof r)if(t<2)n.fromInt(1);else for(n.fromNumber(t,o),n.testBit(t-1)||n.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,n),n.isEven()&&n.dAddOffset(1,0);!n.isProbablePrime(r);)n.dAddOffset(2,0),n.bitLength()>t&&n.subTo(BigInteger.ONE.shiftLeft(t-1),n);else{var i=new Array,e=7&t;i.length=1+(t>>3),r.nextBytes(i),e>0?i[0]&=(1<<e)-1:i[0]=0,n.fromString(i,256)}}function bnToByteArray(){var t=this,r=t.t,o=new Array;o[0]=t.s;var n,i=t.DB-r*t.DB%8,e=0;if(r-- >0)for(i<t.DB&&(n=t[r]>>i)!=(t.s&t.DM)>>i&&(o[e++]=n|t.s<<t.DB-i);r>=0;)i<8?(n=(t[r]&(1<<i)-1)<<8-i,n|=t[--r]>>(i+=t.DB-8)):(n=t[r]>>(i-=8)&255,i<=0&&(i+=t.DB,--r)),0!=(128&n)&&(n|=-256),0===e&&(128&t.s)!=(128&n)&&++e,(e>0||n!=t.s)&&(o[e++]=n);return o}function bnEquals(t){return 0==this.compareTo(t)}function bnMin(t){return this.compareTo(t)<0?this:t}function bnMax(t){return this.compareTo(t)>0?this:t}function bnpBitwiseTo(t,r,o){var n,i,e=this,s=Math.min(t.t,e.t);for(n=0;n<s;++n)o[n]=r(e[n],t[n]);if(t.t<e.t){for(i=t.s&e.DM,n=s;n<e.t;++n)o[n]=r(e[n],i);o.t=e.t}else{for(i=e.s&e.DM,n=s;n<t.t;++n)o[n]=r(i,t[n]);o.t=t.t}o.s=r(e.s,t.s),o.clamp()}function op_and(t,r){return t&r}function bnAnd(t){var r=new BigInteger;return this.bitwiseTo(t,op_and,r),r}function op_or(t,r){return t|r}function bnOr(t){var r=new BigInteger;return this.bitwiseTo(t,op_or,r),r}function op_xor(t,r){return t^r}function bnXor(t){var r=new BigInteger;return this.bitwiseTo(t,op_xor,r),r}function op_andnot(t,r){return t&~r}function bnAndNot(t){var r=new BigInteger;return this.bitwiseTo(t,op_andnot,r),r}function bnNot(){for(var t=new BigInteger,r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t}function bnShiftLeft(t){var r=new BigInteger;return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r}function bnShiftRight(t){var r=new BigInteger;return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function bnBitCount(){for(var t=0,r=this.s&this.DM,o=0;o<this.t;++o)t+=cbit(this[o]^r);return t}function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)}function bnpChangeBit(t,r){var o=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(o,r,o),o}function bnSetBit(t){return this.changeBit(t,op_or)}function bnClearBit(t){return this.changeBit(t,op_andnot)}function bnFlipBit(t){return this.changeBit(t,op_xor)}function bnpAddTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]+t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i+=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i+=t[n],r[n++]=i&o.DM,i>>=o.DB;i+=t.s}r.s=i<0?-1:0,i>0?r[n++]=i:i<-1&&(r[n++]=o.DV+i),r.t=n,r.clamp()}function bnAdd(t){var r=new BigInteger;return this.addTo(t,r),r}function bnSubtract(t){var r=new BigInteger;return this.subTo(t,r),r}function bnMultiply(t){var r=new BigInteger;return this.multiplyTo(t,r),r}function bnSquare(){var t=new BigInteger;return this.squareTo(t),t}function bnDivide(t){var r=new BigInteger;return this.divRemTo(t,r,null),r}function bnRemainder(t){var r=new BigInteger;return this.divRemTo(t,null,r),r}function bnDivideAndRemainder(t){var r=new BigInteger,o=new BigInteger;return this.divRemTo(t,r,o),new Array(r,o)}function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()}function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}}function NullExp(){}function nNop(t){return t}function nMulTo(t,r,o){t.multiplyTo(r,o)}function nSqrTo(t,r){t.squareTo(r)}function bnPow(t){return this.exp(t,new NullExp)}function bnpMultiplyLowerTo(t,r,o){var n=Math.min(this.t+t.t,r);for(o.s=0,o.t=n;n>0;)o[--n]=0;var i;for(i=o.t-this.t;n<i;++n)o[n+this.t]=this.am(0,t[n],o,n,0,this.t);for(i=Math.min(t.t,r);n<i;++n)this.am(0,t[n],o,n,0,r-n);o.clamp()}function bnpMultiplyUpperTo(t,r,o){--r;var n=o.t=this.t+t.t-r;for(o.s=0;--n>=0;)o[n]=0;for(n=Math.max(r-this.t,0);n<t.t;++n)o[this.t+n-r]=this.am(r-n,t[n],o,0,0,this.t+n-r);o.clamp(),o.drShiftTo(1,o)}function Barrett(t){this.r2=new BigInteger,this.q3=new BigInteger,BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function barrettRevert(t){return t}function barrettReduce(t){var r=this;for(t.drShiftTo(r.m.t-1,r.r2),t.t>r.m.t+1&&(t.t=r.m.t+1,t.clamp()),r.mu.multiplyUpperTo(r.r2,r.m.t+1,r.q3),r.m.multiplyLowerTo(r.q3,r.m.t+1,r.r2);t.compareTo(r.r2)<0;)t.dAddOffset(1,r.m.t+1);for(t.subTo(r.r2,t);t.compareTo(r.m)>=0;)t.subTo(r.m,t)}function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)}function barrettMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnModPow(t,r){var o,n,i=t.bitLength(),e=nbv(1);if(i<=0)return e;o=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var s=new Array,u=3,h=o-1,f=(1<<o)-1;if(s[1]=n.convert(this),o>1){var p=new BigInteger;for(n.sqrTo(s[1],p);u<=f;)s[u]=new BigInteger,n.mulTo(p,s[u-2],s[u]),u+=2}var a,b,l=t.t-1,m=!0,g=new BigInteger;for(i=nbits(t[l])-1;l>=0;){for(i>=h?a=t[l]>>i-h&f:(a=(t[l]&(1<<i+1)-1)<<h-i,l>0&&(a|=t[l-1]>>this.DB+i-h)),u=o;0==(1&a);)a>>=1,--u;if((i-=u)<0&&(i+=this.DB,--l),m)s[a].copyTo(e),m=!1;else{for(;u>1;)n.sqrTo(e,g),n.sqrTo(g,e),u-=2;u>0?n.sqrTo(e,g):(b=e,e=g,g=b),n.mulTo(g,s[a],e)}for(;l>=0&&0==(t[l]&1<<i);)n.sqrTo(e,g),b=e,e=g,g=b,--i<0&&(i=this.DB-1,--l)}return n.revert(e)}function bnGCD(t){var r=this.s<0?this.negate():this.clone(),o=t.s<0?t.negate():t.clone();if(r.compareTo(o)<0){var n=r;r=o,o=n}var i=r.getLowestSetBit(),e=o.getLowestSetBit();if(e<0)return r;for(i<e&&(e=i),e>0&&(r.rShiftTo(e,r),o.rShiftTo(e,o));r.signum()>0;)(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),(i=o.getLowestSetBit())>0&&o.rShiftTo(i,o),r.compareTo(o)>=0?(r.subTo(o,r),r.rShiftTo(1,r)):(o.subTo(r,o),o.rShiftTo(1,o));return e>0&&o.lShiftTo(e,o),o}function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,o=this.s<0?t-1:0;if(this.t>0)if(0==r)o=this[0]%t;else for(var n=this.t-1;n>=0;--n)o=(r*o+this[n])%t;return o}function bnModInverse(t){var r=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var o=t.clone(),n=this.clone(),i=nbv(1),e=nbv(0),s=nbv(0),u=nbv(1);0!=o.signum();){for(;o.isEven();)o.rShiftTo(1,o),r?(i.isEven()&&e.isEven()||(i.addTo(this,i),e.subTo(t,e)),i.rShiftTo(1,i)):e.isEven()||e.subTo(t,e),e.rShiftTo(1,e);for(;n.isEven();)n.rShiftTo(1,n),r?(s.isEven()&&u.isEven()||(s.addTo(this,s),u.subTo(t,u)),s.rShiftTo(1,s)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);o.compareTo(n)>=0?(o.subTo(n,o),r&&i.subTo(s,i),e.subTo(u,e)):(n.subTo(o,n),r&&s.subTo(i,s),u.subTo(e,u))}if(0!=n.compareTo(BigInteger.ONE))return BigInteger.ZERO;for(;u.compareTo(t)>=0;)u.subTo(t,u);for(;u.signum()<0;)u.addTo(t,u);return u}function bnIsProbablePrime(t){var r,o=this.abs();if(1==o.t&&o[0]<=lowprimes[lowprimes.length-1]){for(r=0;r<lowprimes.length;++r)if(o[0]==lowprimes[r])return!0;return!1}if(o.isEven())return!1;for(r=1;r<lowprimes.length;){for(var n=lowprimes[r],i=r+1;i<lowprimes.length&&n<lplim;)n*=lowprimes[i++];for(n=o.modInt(n);r<i;)if(n%lowprimes[r++]==0)return!1}return o.millerRabin(t)}function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),o=r.getLowestSetBit();if(o<=0)return!1;var n=r.shiftRight(o);(t=t+1>>1)>lowprimes.length&&(t=lowprimes.length);for(var i,e=new BigInteger(null),s=[],u=0;u<t;++u){for(;i=lowprimes[Math.floor(Math.random()*lowprimes.length)],s.indexOf(i)!=-1;);s.push(i),e.fromInt(i);var h=e.modPow(n,this);if(0!=h.compareTo(BigInteger.ONE)&&0!=h.compareTo(r)){for(var i=1;i++<o&&0!=h.compareTo(r);)if(h=h.modPowInt(2,this),0==h.compareTo(BigInteger.ONE))return!1;if(0!=h.compareTo(r))return!1}}return!0}var proto=BigInteger.prototype;proto.__bigi=require("../package.json").version,BigInteger.isBigInteger=function(t,r){return t&&t.__bigi&&(!r||t.__bigi===proto.__bigi)};var dbits;BigInteger.prototype.am=am1,dbits=26,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1;var DV=BigInteger.prototype.DV=1<<dbits,BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz",BI_RC=new Array,rr,vv;for(rr="0".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr="a".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr="A".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;Classic.prototype.convert=cConvert,Classic.prototype.revert=cRevert,Classic.prototype.reduce=cReduce,Classic.prototype.mulTo=cMulTo,Classic.prototype.sqrTo=cSqrTo,Montgomery.prototype.convert=montConvert,Montgomery.prototype.revert=montRevert,Montgomery.prototype.reduce=montReduce,Montgomery.prototype.mulTo=montMulTo,Montgomery.prototype.sqrTo=montSqrTo,proto.copyTo=bnpCopyTo,proto.fromInt=bnpFromInt,proto.fromString=bnpFromString,proto.clamp=bnpClamp,proto.dlShiftTo=bnpDLShiftTo,proto.drShiftTo=bnpDRShiftTo,proto.lShiftTo=bnpLShiftTo,proto.rShiftTo=bnpRShiftTo,proto.subTo=bnpSubTo,proto.multiplyTo=bnpMultiplyTo,proto.squareTo=bnpSquareTo,proto.divRemTo=bnpDivRemTo,proto.invDigit=bnpInvDigit,proto.isEven=bnpIsEven,proto.exp=bnpExp,proto.toString=bnToString,proto.negate=bnNegate,proto.abs=bnAbs,proto.compareTo=bnCompareTo,proto.bitLength=bnBitLength,proto.byteLength=bnByteLength,proto.mod=bnMod,proto.modPowInt=bnModPowInt,NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=nMulTo,NullExp.prototype.sqrTo=nSqrTo,Barrett.prototype.convert=barrettConvert,Barrett.prototype.revert=barrettRevert,Barrett.prototype.reduce=barrettReduce,Barrett.prototype.mulTo=barrettMulTo,Barrett.prototype.sqrTo=barrettSqrTo;var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1];proto.chunkSize=bnpChunkSize,proto.toRadix=bnpToRadix,proto.fromRadix=bnpFromRadix,proto.fromNumber=bnpFromNumber,proto.bitwiseTo=bnpBitwiseTo,proto.changeBit=bnpChangeBit,proto.addTo=bnpAddTo,proto.dMultiply=bnpDMultiply,proto.dAddOffset=bnpDAddOffset,proto.multiplyLowerTo=bnpMultiplyLowerTo,proto.multiplyUpperTo=bnpMultiplyUpperTo,proto.modInt=bnpModInt,proto.millerRabin=bnpMillerRabin,proto.clone=bnClone,proto.intValue=bnIntValue,proto.byteValue=bnByteValue,proto.shortValue=bnShortValue,proto.signum=bnSigNum,proto.toByteArray=bnToByteArray,proto.equals=bnEquals,proto.min=bnMin,proto.max=bnMax,proto.and=bnAnd,proto.or=bnOr,proto.xor=bnXor,proto.andNot=bnAndNot,proto.not=bnNot,proto.shiftLeft=bnShiftLeft,proto.shiftRight=bnShiftRight,proto.getLowestSetBit=bnGetLowestSetBit,proto.bitCount=bnBitCount,proto.testBit=bnTestBit,proto.setBit=bnSetBit,proto.clearBit=bnClearBit,proto.flipBit=bnFlipBit,proto.add=bnAdd,proto.subtract=bnSubtract,proto.multiply=bnMultiply,proto.divide=bnDivide,proto.remainder=bnRemainder,proto.divideAndRemainder=bnDivideAndRemainder,proto.modPow=bnModPow,proto.modInverse=bnModInverse,proto.pow=bnPow,proto.gcd=bnGCD,proto.isProbablePrime=bnIsProbablePrime,proto.square=bnSquare,BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),BigInteger.valueOf=nbv,module.exports=BigInteger;

},{"../package.json":32}],30:[function(require,module,exports){
(function (Buffer){
var assert=require("assert"),BigInteger=require("./bigi");BigInteger.fromByteArrayUnsigned=function(e){return new BigInteger(128&e[0]?[0].concat(e):e)},BigInteger.prototype.toByteArrayUnsigned=function(){var e=this.toByteArray();return 0===e[0]?e.slice(1):e},BigInteger.fromDERInteger=function(e){return new BigInteger(e)},BigInteger.prototype.toDERInteger=BigInteger.prototype.toByteArray,BigInteger.fromBuffer=function(e){if(128&e[0]){var t=Array.prototype.slice.call(e);return new BigInteger([0].concat(t))}return new BigInteger(e)},BigInteger.fromHex=function(e){return""===e?BigInteger.ZERO:(assert.equal(e,e.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),assert.equal(e.length%2,0,"Incomplete hex"),new BigInteger(e,16))},BigInteger.prototype.toBuffer=function(e){for(var t=this.toByteArrayUnsigned(),r=[],n=e-t.length;r.length<n;)r.push(0);return new Buffer(r.concat(t))},BigInteger.prototype.toHex=function(e){return this.toBuffer(e).toString("hex")};

}).call(this,require("buffer").Buffer)

},{"./bigi":29,"assert":26,"buffer":104}],31:[function(require,module,exports){
var BigInteger=require("./bigi");require("./convert"),module.exports=BigInteger;

},{"./bigi":29,"./convert":30}],32:[function(require,module,exports){
module.exports={
  "name": "bigi",
  "version": "1.4.2",
  "description": "Big integers.",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "jshint": "^2.5.1",
    "mocha": "^2.1.0",
    "mochify": "^2.1.0"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/bigi",
    "type": "git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "browser-test": "./node_modules/.bin/mochify --wd -R spec",
    "test": "./node_modules/.bin/_mocha -- test/*.js",
    "jshint": "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
    "unit": "./node_modules/.bin/mocha",
    "coverage": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
  },
  "dependencies": {},
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  }
}

},{}],33:[function(require,module,exports){
(function (Buffer){
function check(e){if(e.length<8)return!1;if(e.length>72)return!1;if(48!==e[0])return!1;if(e[1]!==e.length-2)return!1;if(2!==e[2])return!1;var r=e[3];if(0===r)return!1;if(5+r>=e.length)return!1;if(2!==e[4+r])return!1;var n=e[5+r];return 0!==n&&(6+r+n===e.length&&(!(128&e[4])&&(!(r>1&&0===e[4]&&!(128&e[5]))&&(!(128&e[r+6])&&!(n>1&&0===e[r+6]&&!(128&e[r+7]))))))}function decode(e){if(e.length<8)throw new Error("DER sequence length is too short");if(e.length>72)throw new Error("DER sequence length is too long");if(48!==e[0])throw new Error("Expected DER sequence");if(e[1]!==e.length-2)throw new Error("DER sequence length is invalid");if(2!==e[2])throw new Error("Expected DER integer");var r=e[3];if(0===r)throw new Error("R length is zero");if(5+r>=e.length)throw new Error("R length is too long");if(2!==e[4+r])throw new Error("Expected DER integer (2)");var n=e[5+r];if(0===n)throw new Error("S length is zero");if(6+r+n!==e.length)throw new Error("S length is invalid");if(128&e[4])throw new Error("R value is negative");if(r>1&&0===e[4]&&!(128&e[5]))throw new Error("R value excessively padded");if(128&e[r+6])throw new Error("S value is negative");if(n>1&&0===e[r+6]&&!(128&e[r+7]))throw new Error("S value excessively padded");return{r:e.slice(4,4+r),s:e.slice(6+r)}}function encode(e,r){var n=e.length,t=r.length;if(0===n)throw new Error("R length is zero");if(0===t)throw new Error("S length is zero");if(n>33)throw new Error("R length is too long");if(t>33)throw new Error("S length is too long");if(128&e[0])throw new Error("R value is negative");if(128&r[0])throw new Error("S value is negative");if(n>1&&0===e[0]&&!(128&e[1]))throw new Error("R value excessively padded");if(t>1&&0===r[0]&&!(128&r[1]))throw new Error("S value excessively padded");var o=new Buffer(6+n+t);return o[0]=48,o[1]=o.length-2,o[2]=2,o[3]=e.length,e.copy(o,4),o[4+n]=2,o[5+n]=r.length,r.copy(o,6+n),o}module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],34:[function(require,module,exports){
module.exports={
  "OP_FALSE": 0,
  "OP_0": 0,
  "OP_PUSHDATA1": 76,
  "OP_PUSHDATA2": 77,
  "OP_PUSHDATA4": 78,
  "OP_1NEGATE": 79,
  "OP_RESERVED": 80,
  "OP_1": 81,
  "OP_TRUE": 81,
  "OP_2": 82,
  "OP_3": 83,
  "OP_4": 84,
  "OP_5": 85,
  "OP_6": 86,
  "OP_7": 87,
  "OP_8": 88,
  "OP_9": 89,
  "OP_10": 90,
  "OP_11": 91,
  "OP_12": 92,
  "OP_13": 93,
  "OP_14": 94,
  "OP_15": 95,
  "OP_16": 96,

  "OP_NOP": 97,
  "OP_VER": 98,
  "OP_IF": 99,
  "OP_NOTIF": 100,
  "OP_VERIF": 101,
  "OP_VERNOTIF": 102,
  "OP_ELSE": 103,
  "OP_ENDIF": 104,
  "OP_VERIFY": 105,
  "OP_RETURN": 106,

  "OP_TOALTSTACK": 107,
  "OP_FROMALTSTACK": 108,
  "OP_2DROP": 109,
  "OP_2DUP": 110,
  "OP_3DUP": 111,
  "OP_2OVER": 112,
  "OP_2ROT": 113,
  "OP_2SWAP": 114,
  "OP_IFDUP": 115,
  "OP_DEPTH": 116,
  "OP_DROP": 117,
  "OP_DUP": 118,
  "OP_NIP": 119,
  "OP_OVER": 120,
  "OP_PICK": 121,
  "OP_ROLL": 122,
  "OP_ROT": 123,
  "OP_SWAP": 124,
  "OP_TUCK": 125,

  "OP_CAT": 126,
  "OP_SUBSTR": 127,
  "OP_LEFT": 128,
  "OP_RIGHT": 129,
  "OP_SIZE": 130,

  "OP_INVERT": 131,
  "OP_AND": 132,
  "OP_OR": 133,
  "OP_XOR": 134,
  "OP_EQUAL": 135,
  "OP_EQUALVERIFY": 136,
  "OP_RESERVED1": 137,
  "OP_RESERVED2": 138,

  "OP_1ADD": 139,
  "OP_1SUB": 140,
  "OP_2MUL": 141,
  "OP_2DIV": 142,
  "OP_NEGATE": 143,
  "OP_ABS": 144,
  "OP_NOT": 145,
  "OP_0NOTEQUAL": 146,
  "OP_ADD": 147,
  "OP_SUB": 148,
  "OP_MUL": 149,
  "OP_DIV": 150,
  "OP_MOD": 151,
  "OP_LSHIFT": 152,
  "OP_RSHIFT": 153,

  "OP_BOOLAND": 154,
  "OP_BOOLOR": 155,
  "OP_NUMEQUAL": 156,
  "OP_NUMEQUALVERIFY": 157,
  "OP_NUMNOTEQUAL": 158,
  "OP_LESSTHAN": 159,
  "OP_GREATERTHAN": 160,
  "OP_LESSTHANOREQUAL": 161,
  "OP_GREATERTHANOREQUAL": 162,
  "OP_MIN": 163,
  "OP_MAX": 164,

  "OP_WITHIN": 165,

  "OP_RIPEMD160": 166,
  "OP_SHA1": 167,
  "OP_SHA256": 168,
  "OP_HASH160": 169,
  "OP_HASH256": 170,
  "OP_CODESEPARATOR": 171,
  "OP_CHECKSIG": 172,
  "OP_CHECKSIGVERIFY": 173,
  "OP_CHECKMULTISIG": 174,
  "OP_CHECKMULTISIGVERIFY": 175,

  "OP_NOP1": 176,
  "OP_NOP2": 177,
  "OP_CHECKLOCKTIMEVERIFY": 177,

  "OP_NOP3": 178,
  "OP_NOP4": 179,
  "OP_NOP5": 180,
  "OP_NOP6": 181,
  "OP_NOP7": 182,
  "OP_NOP8": 183,
  "OP_NOP9": 184,
  "OP_NOP10": 185,

  "OP_PUBKEYHASH": 253,
  "OP_PUBKEY": 254,
  "OP_INVALIDOPCODE": 255
}

},{}],35:[function(require,module,exports){
var OPS=require("./index.json"),map={};for(var op in OPS){map[OPS[op]]=op}module.exports=map;

},{"./index.json":34}],36:[function(require,module,exports){
(function (Buffer){
function fromBase58Check(t){var e=bs58check.decode(t);if(e.length<21)throw new TypeError(t+" is too short");if(e.length>22)throw new TypeError(t+" is too long");var r=22===e.length,c=r?2:1,o=r?e.readUInt16BE(0):e[0];return{hash:e.slice(c),version:o}}function toBase58Check(t,e){typeforce(types.tuple(types.Hash160bit,types.UInt16),arguments);var r=e>255,c=r?22:21,o=r?2:1,s=new Buffer(c);return r?s.writeUInt16BE(e,0):s.writeUInt8(e,0),t.copy(s,o),bs58check.encode(s)}function fromOutputScript(t,e){if(e=e||networks.bitcoin,bscript.pubKeyHash.output.check(t))return toBase58Check(bscript.compile(t).slice(3,23),e.pubKeyHash);if(bscript.scriptHash.output.check(t))return toBase58Check(bscript.compile(t).slice(2,22),e.scriptHash);throw new Error(bscript.toASM(t)+" has no matching Address")}function toOutputScript(t,e){e=e||networks.bitcoin;var r=fromBase58Check(t);if(r.version===e.pubKeyHash)return bscript.pubKeyHash.output.encode(r.hash);if(r.version===e.scriptHash)return bscript.scriptHash.output.encode(r.hash);throw new Error(t+" has no matching Script")}var bs58check=require("bs58check"),bscript=require("./script"),networks=require("./networks"),typeforce=require("typeforce"),types=require("./types");module.exports={fromBase58Check:fromBase58Check,fromOutputScript:fromOutputScript,toBase58Check:toBase58Check,toOutputScript:toOutputScript};

}).call(this,require("buffer").Buffer)

},{"./networks":45,"./script":46,"./types":72,"bs58check":102,"buffer":104,"typeforce":206}],37:[function(require,module,exports){
(function (Buffer){
function Block(){this.version=1,this.prevHash=null,this.merkleRoot=null,this.timestamp=0,this.bits=0,this.nonce=0}var bufferutils=require("./bufferutils"),bcrypto=require("./crypto"),fastMerkleRoot=require("merkle-lib/fastRoot"),typeforce=require("typeforce"),types=require("./types"),Transaction=require("./transaction");Block.fromBuffer=function(t){function r(r){return o+=r,t.slice(o-r,o)}function e(){var r=t.readUInt32LE(o);return o+=4,r}if(t.length<80)throw new Error("Buffer too small (< 80 bytes)");var o=0,n=new Block;if(n.version=function(){var r=t.readInt32LE(o);return o+=4,r}(),n.prevHash=r(32),n.merkleRoot=r(32),n.timestamp=e(),n.bits=e(),n.nonce=e(),80===t.length)return n;var i=function(){var r=bufferutils.readVarInt(t,o);return o+=r.size,r.number}();n.transactions=[];for(var s=0;s<i;++s){var c=function(){var r=Transaction.fromBuffer(t.slice(o),!1,!0);return o+=r.byteLength(),r}();n.transactions.push(c)}return n},Block.fromHex=function(t){return Block.fromBuffer(new Buffer(t,"hex"))},Block.prototype.getHash=function(){return bcrypto.hash256(this.toBuffer(!0))},Block.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Block.prototype.getUTCDate=function(){var t=new Date(0);return t.setUTCSeconds(this.timestamp),t},Block.prototype.toBuffer=function(t){function r(t){t.copy(o,n),n+=t.length}function e(t){o.writeUInt32LE(t,n),n+=4}var o=new Buffer(80),n=0;if(function(t){o.writeInt32LE(t,n),n+=4}(this.version),r(this.prevHash),r(this.merkleRoot),e(this.timestamp),e(this.bits),e(this.nonce),t||!this.transactions)return o;var i=bufferutils.varIntBuffer(this.transactions.length),s=this.transactions.map(function(t){return t.toBuffer()});return Buffer.concat([o,i].concat(s))},Block.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")},Block.calculateTarget=function(t){var r=((4278190080&t)>>24)-3,e=8388607&t,o=new Buffer(32);return o.fill(0),o.writeUInt32BE(e,28-r),o},Block.calculateMerkleRoot=function(t){if(typeforce([{getHash:types.Function}],t),0===t.length)throw TypeError("Cannot compute merkle root for zero transactions");return fastMerkleRoot(t.map(function(t){return t.getHash()}),bcrypto.hash256)},Block.prototype.checkMerkleRoot=function(){if(!this.transactions)return!1;var t=Block.calculateMerkleRoot(this.transactions);return 0===this.merkleRoot.compare(t)},Block.prototype.checkProofOfWork=function(){var t=this.getHash().reverse(),r=Block.calculateTarget(this.bits);return t.compare(r)<=0},module.exports=Block;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":38,"./crypto":39,"./transaction":70,"./types":72,"buffer":104,"merkle-lib/fastRoot":162,"typeforce":206}],38:[function(require,module,exports){
function verifuint(r,n){if("number"!=typeof r)throw new Error("cannot write a non-number as a number");if(r<0)throw new Error("specified a negative value for writing an unsigned value");if(r>n)throw new Error("RangeError: value out of range");if(Math.floor(r)!==r)throw new Error("value has a fractional component")}function readUInt64LE(r,n){var t=r.readUInt32LE(n),e=r.readUInt32LE(n+4);return e*=4294967296,verifuint(e+t,9007199254740991),e+t}function writeUInt64LE(r,n,t){return verifuint(n,9007199254740991),r.writeInt32LE(n&-1,t),r.writeUInt32LE(Math.floor(n/4294967296),t+4),t+8}function readVarInt(r,n){return{number:varuint.decode(r,n),size:varuint.decode.bytes}}function writeVarInt(r,n,t){return varuint.encode(n,r,t),varuint.encode.bytes}var pushdata=require("pushdata-bitcoin"),varuint=require("varuint-bitcoin");module.exports={pushDataSize:pushdata.encodingLength,readPushDataInt:pushdata.decode,readUInt64LE:readUInt64LE,readVarInt:readVarInt,varIntBuffer:varuint.encode,varIntSize:varuint.encodingLength,writePushDataInt:pushdata.encode,writeUInt64LE:writeUInt64LE,writeVarInt:writeVarInt};

},{"pushdata-bitcoin":180,"varuint-bitcoin":212}],39:[function(require,module,exports){
function ripemd160(a){return createHash("rmd160").update(a).digest()}function sha1(a){return createHash("sha1").update(a).digest()}function sha256(a){return createHash("sha256").update(a).digest()}function hash160(a){return ripemd160(sha256(a))}function hash256(a){return sha256(sha256(a))}var createHash=require("create-hash");module.exports={hash160:hash160,hash256:hash256,ripemd160:ripemd160,sha1:sha1,sha256:sha256};

},{"create-hash":108}],40:[function(require,module,exports){
(function (Buffer){
function deterministicGenerateK(e,t,r){typeforce(types.tuple(types.Hash256bit,types.Buffer256bit,types.Function),arguments);var i=new Buffer(32),a=new Buffer(32);a.fill(1),i.fill(0),i=createHmac("sha256",i).update(a).update(ZERO).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),i=createHmac("sha256",i).update(a).update(ONE).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest();for(var u=BigInteger.fromBuffer(a);u.signum()<=0||u.compareTo(secp256k1.n)>=0||!r(u);)i=createHmac("sha256",i).update(a).update(ZERO).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest(),u=BigInteger.fromBuffer(a);return u}function sign(e,t){typeforce(types.tuple(types.Hash256bit,types.BigInt),arguments);var r,i,a=t.toBuffer(32),u=BigInteger.fromBuffer(e),s=secp256k1.n,n=secp256k1.G;return deterministicGenerateK(e,a,function(e){var a=n.multiply(e);return!secp256k1.isInfinity(a)&&(r=a.affineX.mod(s),0!==r.signum()&&(i=e.modInverse(s).multiply(u.add(t.multiply(r))).mod(s),0!==i.signum()))}),i.compareTo(N_OVER_TWO)>0&&(i=s.subtract(i)),new ECSignature(r,i)}function verify(e,t,r){typeforce(types.tuple(types.Hash256bit,types.ECSignature,types.ECPoint),arguments);var i=secp256k1.n,a=secp256k1.G,u=t.r,s=t.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var n=BigInteger.fromBuffer(e),p=s.modInverse(i),c=n.multiply(p).mod(i),f=u.multiply(p).mod(i),m=a.multiplyTwo(c,r,f);return!secp256k1.isInfinity(m)&&m.affineX.mod(i).equals(u)}var createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi"),ECSignature=require("./ecsignature"),ZERO=new Buffer([0]),ONE=new Buffer([1]),ecurve=require("ecurve"),secp256k1=ecurve.getCurveByName("secp256k1"),N_OVER_TWO=secp256k1.n.shiftRight(1);module.exports={deterministicGenerateK:deterministicGenerateK,sign:sign,verify:verify,__curve:secp256k1};

}).call(this,require("buffer").Buffer)

},{"./ecsignature":42,"./types":72,"bigi":31,"buffer":104,"create-hmac":111,"ecurve":125,"typeforce":206}],41:[function(require,module,exports){
function ECPair(e,r,t){if(t&&typeforce({compressed:types.maybe(types.Boolean),network:types.maybe(types.Network)},t),t=t||{},e){if(e.signum()<=0)throw new Error("Private key must be greater than 0");if(e.compareTo(secp256k1.n)>=0)throw new Error("Private key must be less than the curve order");if(r)throw new TypeError("Unexpected publicKey parameter");this.d=e}else typeforce(types.ECPoint,r),this.__Q=r;this.compressed=void 0===t.compressed||t.compressed,this.network=t.network||NETWORKS.bitcoin}var baddress=require("./address"),bcrypto=require("./crypto"),ecdsa=require("./ecdsa"),randomBytes=require("randombytes"),typeforce=require("typeforce"),types=require("./types"),wif=require("wif"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ecurve=require("ecurve"),secp256k1=ecdsa.__curve;Object.defineProperty(ECPair.prototype,"Q",{get:function(){return!this.__Q&&this.d&&(this.__Q=secp256k1.G.multiply(this.d)),this.__Q}}),ECPair.fromPublicKeyBuffer=function(e,r){var t=ecurve.Point.decodeFrom(secp256k1,e);return new ECPair(null,t,{compressed:t.compressed,network:r})},ECPair.fromWIF=function(e,r){var t=wif.decode(e),i=t.version;if(types.Array(r)){if(!(r=r.filter(function(e){return i===e.wif}).pop()))throw new Error("Unknown network version")}else if(r=r||NETWORKS.bitcoin,i!==r.wif)throw new Error("Invalid network version");return new ECPair(BigInteger.fromBuffer(t.privateKey),null,{compressed:t.compressed,network:r})},ECPair.makeRandom=function(e){e=e||{};var r,t=e.rng||randomBytes;do{var i=t(32);typeforce(types.Buffer256bit,i),r=BigInteger.fromBuffer(i)}while(r.signum()<=0||r.compareTo(secp256k1.n)>=0);return new ECPair(r,null,e)},ECPair.prototype.getAddress=function(){return baddress.toBase58Check(bcrypto.hash160(this.getPublicKeyBuffer()),this.getNetwork().pubKeyHash)},ECPair.prototype.getNetwork=function(){return this.network},ECPair.prototype.getPublicKeyBuffer=function(){return this.Q.getEncoded(this.compressed)},ECPair.prototype.sign=function(e){if(!this.d)throw new Error("Missing private key");return ecdsa.sign(e,this.d)},ECPair.prototype.toWIF=function(){if(!this.d)throw new Error("Missing private key");return wif.encode(this.network.wif,this.d.toBuffer(32),this.compressed)},ECPair.prototype.verify=function(e,r){return ecdsa.verify(e,r,this.Q)},module.exports=ECPair;

},{"./address":36,"./crypto":39,"./ecdsa":40,"./networks":45,"./types":72,"bigi":31,"ecurve":125,"randombytes":181,"typeforce":206,"wif":241}],42:[function(require,module,exports){
(function (Buffer){
function ECSignature(e,r){typeforce(types.tuple(types.BigInt,types.BigInt),arguments),this.r=e,this.s=r}var bip66=require("bip66"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi");ECSignature.parseCompact=function(e){if(65!==e.length)throw new Error("Invalid signature length");var r=e.readUInt8(0)-27;if(r!==(7&r))throw new Error("Invalid signature parameter");return{compressed:!!(4&r),i:3&r,signature:new ECSignature(BigInteger.fromBuffer(e.slice(1,33)),BigInteger.fromBuffer(e.slice(33)))}},ECSignature.fromDER=function(e){var r=bip66.decode(e);return new ECSignature(BigInteger.fromDERInteger(r.r),BigInteger.fromDERInteger(r.s))},ECSignature.parseScriptSignature=function(e){var r=e.readUInt8(e.length-1),t=r&-129;if(t<=0||t>=4)throw new Error("Invalid hashType "+r);return{signature:ECSignature.fromDER(e.slice(0,-1)),hashType:r}},ECSignature.prototype.toCompact=function(e,r){r&&(e+=4),e+=27;var t=new Buffer(65);return t.writeUInt8(e,0),this.r.toBuffer(32).copy(t,1),this.s.toBuffer(32).copy(t,33),t},ECSignature.prototype.toDER=function(){var e=new Buffer(this.r.toDERInteger()),r=new Buffer(this.s.toDERInteger());return bip66.encode(e,r)},ECSignature.prototype.toScriptSignature=function(e){var r=e&-129;if(r<=0||r>=4)throw new Error("Invalid hashType "+e);var t=new Buffer(1);return t.writeUInt8(e,0),Buffer.concat([this.toDER(),t])},module.exports=ECSignature;

}).call(this,require("buffer").Buffer)

},{"./types":72,"bigi":31,"bip66":33,"buffer":104,"typeforce":206}],43:[function(require,module,exports){
(function (Buffer){
function HDNode(e,r){if(typeforce(types.tuple("ECPair",types.Buffer256bit),arguments),!e.compressed)throw new TypeError("BIP32 only allows compressed keyPairs");this.keyPair=e,this.chainCode=r,this.depth=0,this.index=0,this.parentFingerprint=0}var base58check=require("bs58check"),bcrypto=require("./crypto"),createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ECPair=require("./ecpair"),ecurve=require("ecurve"),curve=ecurve.getCurveByName("secp256k1");HDNode.HIGHEST_BIT=2147483648,HDNode.LENGTH=78,HDNode.MASTER_SECRET=new Buffer("Bitcoin seed"),HDNode.fromSeedBuffer=function(e,r){if(typeforce(types.tuple(types.Buffer,types.maybe(types.Network)),arguments),e.length<16)throw new TypeError("Seed should be at least 128 bits");if(e.length>64)throw new TypeError("Seed should be at most 512 bits");var t=createHmac("sha512",HDNode.MASTER_SECRET).update(e).digest(),i=t.slice(0,32),n=t.slice(32);return new HDNode(new ECPair(BigInteger.fromBuffer(i),null,{network:r}),n)},HDNode.fromSeedHex=function(e,r){return HDNode.fromSeedBuffer(new Buffer(e,"hex"),r)},HDNode.fromBase58=function(e,r,t){var i=base58check.decode(e);if(78!==i.length)throw new Error("Invalid buffer length");var n,o=i.readUInt32BE(0);if(Array.isArray(r)){if(!(n=r.filter(function(e){return o===e.bip32.private||o===e.bip32.public}).pop()))throw new Error("Unknown network version")}else n=r||NETWORKS.bitcoin;if(o!==n.bip32.private&&o!==n.bip32.public)throw new Error("Invalid network version");var d=i[4],s=i.readUInt32BE(5);if(0===d&&0!==s)throw new Error("Invalid parent fingerprint");var a=i.readUInt32BE(9);if(0===d&&0!==a)throw new Error("Invalid index");var p,u=i.slice(13,45);if(o===n.bip32.private){if(0!==i.readUInt8(45))throw new Error("Invalid private key");p=new ECPair(BigInteger.fromBuffer(i.slice(46,78)),null,{network:n})}else{var f=ecurve.Point.decodeFrom(curve,i.slice(45,78));t||curve.validate(f),p=new ECPair(null,f,{network:n})}var c=new HDNode(p,u);return c.depth=d,c.index=a,c.parentFingerprint=s,c},HDNode.prototype.getAddress=function(){return this.keyPair.getAddress()},HDNode.prototype.getIdentifier=function(){return bcrypto.hash160(this.keyPair.getPublicKeyBuffer())},HDNode.prototype.getFingerprint=function(){return this.getIdentifier().slice(0,4)},HDNode.prototype.getNetwork=function(){return this.keyPair.getNetwork()},HDNode.prototype.getPublicKeyBuffer=function(){return this.keyPair.getPublicKeyBuffer()},HDNode.prototype.neutered=function(){var e=new ECPair(null,this.keyPair.Q,{network:this.keyPair.network}),r=new HDNode(e,this.chainCode);return r.depth=this.depth,r.index=this.index,r.parentFingerprint=this.parentFingerprint,r},HDNode.prototype.sign=function(e){return this.keyPair.sign(e)},HDNode.prototype.verify=function(e,r){return this.keyPair.verify(e,r)},HDNode.prototype.toBase58=function(e){if(void 0!==e)throw new TypeError("Unsupported argument in 2.0.0");var r=this.keyPair.network,t=this.isNeutered()?r.bip32.public:r.bip32.private,i=new Buffer(78);return i.writeUInt32BE(t,0),i.writeUInt8(this.depth,4),i.writeUInt32BE(this.parentFingerprint,5),i.writeUInt32BE(this.index,9),this.chainCode.copy(i,13),this.isNeutered()?this.keyPair.getPublicKeyBuffer().copy(i,45):(i.writeUInt8(0,45),this.keyPair.d.toBuffer(32).copy(i,46)),base58check.encode(i)},HDNode.prototype.derive=function(e){typeforce(types.UInt32,e);var r=e>=HDNode.HIGHEST_BIT,t=new Buffer(37);if(r){if(this.isNeutered())throw new TypeError("Could not derive hardened child key");t[0]=0,this.keyPair.d.toBuffer(32).copy(t,1),t.writeUInt32BE(e,33)}else this.keyPair.getPublicKeyBuffer().copy(t,0),t.writeUInt32BE(e,33);var i=createHmac("sha512",this.chainCode).update(t).digest(),n=i.slice(0,32),o=i.slice(32),d=BigInteger.fromBuffer(n);if(d.compareTo(curve.n)>=0)return this.derive(e+1);var s;if(this.isNeutered()){var a=curve.G.multiply(d).add(this.keyPair.Q);if(curve.isInfinity(a))return this.derive(e+1);s=new ECPair(null,a,{network:this.keyPair.network})}else{var p=d.add(this.keyPair.d).mod(curve.n);if(0===p.signum())return this.derive(e+1);s=new ECPair(p,null,{network:this.keyPair.network})}var u=new HDNode(s,o);return u.depth=this.depth+1,u.index=e,u.parentFingerprint=this.getFingerprint().readUInt32BE(0),u},HDNode.prototype.deriveHardened=function(e){return typeforce(types.UInt31,e),this.derive(e+HDNode.HIGHEST_BIT)},HDNode.prototype.isNeutered=function(){return!this.keyPair.d},HDNode.prototype.derivePath=function(e){typeforce(types.BIP32Path,e);var r=e.split("/");if("m"===r[0]){if(this.parentFingerprint)throw new Error("Not a master node");r=r.slice(1)}return r.reduce(function(e,r){var t;return"'"===r.slice(-1)?(t=parseInt(r.slice(0,-1),10),e.deriveHardened(t)):(t=parseInt(r,10),e.derive(t))},this)},module.exports=HDNode;

}).call(this,require("buffer").Buffer)

},{"./crypto":39,"./ecpair":41,"./networks":45,"./types":72,"bigi":31,"bs58check":102,"buffer":104,"create-hmac":111,"ecurve":125,"typeforce":206}],44:[function(require,module,exports){
module.exports={Block:require("./block"),ECPair:require("./ecpair"),ECSignature:require("./ecsignature"),HDNode:require("./hdnode"),Transaction:require("./transaction"),TransactionBuilder:require("./transaction_builder"),address:require("./address"),bufferutils:require("./bufferutils"),crypto:require("./crypto"),networks:require("./networks"),opcodes:require("bitcoin-ops"),script:require("./script")};

},{"./address":36,"./block":37,"./bufferutils":38,"./crypto":39,"./ecpair":41,"./ecsignature":42,"./hdnode":43,"./networks":45,"./script":46,"./transaction":70,"./transaction_builder":71,"bitcoin-ops":34}],45:[function(require,module,exports){
module.exports={bitcoin:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:76067358,private:76066276},pubKeyHash:0,scriptHash:5,wif:128},testnet:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:70617039,private:70615956},pubKeyHash:111,scriptHash:196,wif:239},litecoin:{messagePrefix:"Litecoin Signed Message:\n",bip32:{public:27108450,private:27106558},pubKeyHash:48,scriptHash:5,wif:176}};

},{}],46:[function(require,module,exports){
(function (Buffer){
function isOPInt(e){return types.Number(e)&&(e===OPS.OP_0||e>=OPS.OP_1&&e<=OPS.OP_16||e===OPS.OP_1NEGATE)}function isPushOnlyChunk(e){return types.Buffer(e)||isOPInt(e)}function isPushOnly(e){return types.Array(e)&&e.every(isPushOnlyChunk)}function compile(e){if(Buffer.isBuffer(e))return e;typeforce(types.Array,e);var r=e.reduce(function(e,r){return Buffer.isBuffer(r)?1===r.length&&(129===r[0]||r[0]>=1&&r[0]<=16)?e+1:e+pushdata.encodingLength(r.length)+r.length:e+1},0),n=new Buffer(r),t=0;if(e.forEach(function(e){if(Buffer.isBuffer(e)){if(1===e.length&&e[0]>=1&&e[0]<=16){var r=OP_INT_BASE+e[0];return n.writeUInt8(r,t),void(t+=1)}if(1===e.length&&129===e[0])return n.writeUInt8(OPS.OP_1NEGATE,t),void(t+=1);t+=pushdata.encode(n,e.length,t),e.copy(n,t),t+=e.length}else n.writeUInt8(e,t),t+=1}),t!==n.length)throw new Error("Could not decode chunks");return n}function decompile(e){if(types.Array(e))return e;typeforce(types.Buffer,e);for(var r=[],n=0;n<e.length;){var t=e[n];if(t>OPS.OP_0&&t<=OPS.OP_PUSHDATA4){var i=pushdata.decode(e,n);if(null===i)return[];if((n+=i.size)+i.number>e.length)return[];var u=e.slice(n,n+i.number);n+=i.number,r.push(u)}else r.push(t),n+=1}return r}function toASM(e){return Buffer.isBuffer(e)&&(e=decompile(e)),e.map(function(e){return Buffer.isBuffer(e)?e.toString("hex"):REVERSE_OPS[e]}).join(" ")}function fromASM(e){return typeforce(types.String,e),compile(e.split(" ").map(function(e){return void 0!==OPS[e]?OPS[e]:(typeforce(types.Hex,e),new Buffer(e,"hex"))}))}function toStack(e){return e=decompile(e),typeforce(isPushOnly,e),e.map(function(e){return Buffer.isBuffer(e)?e:e===OPS.OP_0?new Buffer(0):scriptNumber.encode(e-OP_INT_BASE)})}function isCanonicalPubKey(e){if(!Buffer.isBuffer(e))return!1;if(e.length<33)return!1;switch(e[0]){case 2:case 3:return 33===e.length;case 4:return 65===e.length}return!1}function isDefinedHashType(e){var r=e&-129;return r>0&&r<4}function isCanonicalSignature(e){return!!Buffer.isBuffer(e)&&(!!isDefinedHashType(e[e.length-1])&&bip66.check(e.slice(0,-1)))}var bip66=require("bip66"),pushdata=require("pushdata-bitcoin"),typeforce=require("typeforce"),types=require("./types"),scriptNumber=require("./script_number"),OPS=require("bitcoin-ops"),REVERSE_OPS=require("bitcoin-ops/map"),OP_INT_BASE=OPS.OP_RESERVED;module.exports={compile:compile,decompile:decompile,fromASM:fromASM,toASM:toASM,toStack:toStack,number:require("./script_number"),isCanonicalPubKey:isCanonicalPubKey,isCanonicalSignature:isCanonicalSignature,isPushOnly:isPushOnly,isDefinedHashType:isDefinedHashType};var templates=require("./templates");for(var key in templates)module.exports[key]=templates[key];

}).call(this,require("buffer").Buffer)

},{"./script_number":47,"./templates":48,"./types":72,"bip66":33,"bitcoin-ops":34,"bitcoin-ops/map":35,"buffer":104,"pushdata-bitcoin":180,"typeforce":206}],47:[function(require,module,exports){
(function (Buffer){
function decode(r,e,n){e=e||4,n=void 0===n||n;var t=r.length;if(0===t)return 0;if(t>e)throw new TypeError("Script number overflow");if(n&&0==(127&r[t-1])&&(t<=1||0==(128&r[t-2])))throw new Error("Non-minimally encoded script number");if(5===t){var o=r.readUInt32LE(0),i=r.readUInt8(4);return 128&i?-(4294967296*(i&-129)+o):4294967296*i+o}for(var d=0,c=0;c<t;++c)d|=r[c]<<8*c;return 128&r[t-1]?-(d&~(128<<8*(t-1))):d}function scriptNumSize(r){return r>2147483647?5:r>8388607?4:r>32767?3:r>127?2:r>0?1:0}function encode(r){for(var e=Math.abs(r),n=scriptNumSize(e),t=new Buffer(n),o=r<0,i=0;i<n;++i)t.writeUInt8(255&e,i),e>>=8;return 128&t[n-1]?t.writeUInt8(o?128:0,n-1):o&&(t[n-1]|=128),t}module.exports={decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],48:[function(require,module,exports){
function classifyOutput(s){if(witnessPubKeyHash.output.check(s))return types.P2WPKH;if(witnessScriptHash.output.check(s))return types.P2WSH;if(pubKeyHash.output.check(s))return types.P2PKH;if(scriptHash.output.check(s))return types.P2SH;var t=decompile(s);return multisig.output.check(t)?types.MULTISIG:pubKey.output.check(t)?types.P2PK:witnessCommitment.output.check(t)?types.WITNESS_COMMITMENT:nullData.output.check(t)?types.NULLDATA:types.NONSTANDARD}function classifyInput(s,t){var e=decompile(s);return pubKeyHash.input.check(e)?types.P2PKH:scriptHash.input.check(e,t)?types.P2SH:multisig.input.check(e,t)?types.MULTISIG:pubKey.input.check(e)?types.P2PK:types.NONSTANDARD}function classifyWitness(s,t){var e=decompile(s);return witnessPubKeyHash.input.check(e)?types.P2WPKH:witnessScriptHash.input.check(e)?types.P2WSH:types.NONSTANDARD}var decompile=require("../script").decompile,multisig=require("./multisig"),nullData=require("./nulldata"),pubKey=require("./pubkey"),pubKeyHash=require("./pubkeyhash"),scriptHash=require("./scripthash"),witnessPubKeyHash=require("./witnesspubkeyhash"),witnessScriptHash=require("./witnessscripthash"),witnessCommitment=require("./witnesscommitment"),types={MULTISIG:"multisig",NONSTANDARD:"nonstandard",NULLDATA:"nulldata",P2PK:"pubkey",P2PKH:"pubkeyhash",P2SH:"scripthash",P2WPKH:"witnesspubkeyhash",P2WSH:"witnessscripthash",WITNESS_COMMITMENT:"witnesscommitment"};module.exports={classifyInput:classifyInput,classifyOutput:classifyOutput,classifyWitness:classifyWitness,multisig:multisig,nullData:nullData,pubKey:pubKey,pubKeyHash:pubKeyHash,scriptHash:scriptHash,witnessPubKeyHash:witnessPubKeyHash,witnessScriptHash:witnessScriptHash,witnessCommitment:witnessCommitment,types:types};

},{"../script":46,"./multisig":49,"./nulldata":52,"./pubkey":53,"./pubkeyhash":56,"./scripthash":59,"./witnesscommitment":62,"./witnesspubkeyhash":64,"./witnessscripthash":67}],49:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":50,"./output":51}],50:[function(require,module,exports){
(function (Buffer){
function partialSignature(e){return e===OPS.OP_0||bscript.isCanonicalSignature(e)}function check(e,c){var t=bscript.decompile(e);return!(t.length<2)&&(t[0]===OPS.OP_0&&(c?t.slice(1).every(partialSignature):t.slice(1).every(bscript.isCanonicalSignature)))}function encodeStack(e,c){if(typeforce([partialSignature],e),c){var t=bscript.multisig.output.decode(c);if(e.length<t.m)throw new TypeError("Not enough signatures provided");if(e.length>t.pubKeys.length)throw new TypeError("Too many signatures provided")}return[].concat(new Buffer(0),e)}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e,c){return typeforce(check,e,c),e.slice(1)}function decode(e,c){return decodeStack(bscript.decompile(e),c)}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"multisig input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,require("buffer").Buffer)

},{"../../script":46,"bitcoin-ops":34,"buffer":104,"typeforce":206}],51:[function(require,module,exports){
function check(e,r){var t=bscript.decompile(e);if(t.length<4)return!1;if(t[t.length-1]!==OPS.OP_CHECKMULTISIG)return!1;if(!types.Number(t[0]))return!1;if(!types.Number(t[t.length-2]))return!1;var c=t[0]-OP_INT_BASE,i=t[t.length-2]-OP_INT_BASE;return!(c<=0)&&(!(i>16)&&(!(c>i)&&(i===t.length-3&&(!!r||t.slice(1,-2).every(bscript.isCanonicalPubKey)))))}function encode(e,r){typeforce({m:types.Number,pubKeys:[bscript.isCanonicalPubKey]},{m:e,pubKeys:r});var t=r.length;if(t<e)throw new TypeError("Not enough pubKeys provided");return bscript.compile([].concat(OP_INT_BASE+e,r,OP_INT_BASE+t,OPS.OP_CHECKMULTISIG))}function decode(e,r){var t=bscript.decompile(e);return typeforce(check,t,r),{m:t[0]-OP_INT_BASE,pubKeys:t.slice(1,-2)}}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),OP_INT_BASE=OPS.OP_RESERVED;check.toJSON=function(){return"multi-sig output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"typeforce":206}],52:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return c.length>1&&c[0]===OPS.OP_RETURN}function encode(e){return typeforce(types.Buffer,e),bscript.compile([OPS.OP_RETURN,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../script"),types=require("../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"null data output"},module.exports={output:{check:check,decode:decode,encode:encode}};

},{"../script":46,"../types":72,"bitcoin-ops":34,"typeforce":206}],53:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":54,"./output":55}],54:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 1===c.length&&bscript.isCanonicalSignature(c[0])}function encodeStack(e){return typeforce(types.Buffer,e),[e]}function encode(e){return bscript.compile(encodeStack(e))}function decodeStack(e){return typeforce(check,e),e[0]}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKey input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":46,"../../types":72,"typeforce":206}],55:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalPubKey(c[0])&&c[1]===OPS.OP_CHECKSIG}function encode(e){return typeforce(bscript.isCanonicalPubKey,e),bscript.compile([e,OPS.OP_CHECKSIG])}function decode(e){var c=bscript.decompile(e);return typeforce(check,c),c[0]}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKey output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"bitcoin-ops":34,"typeforce":206}],56:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":57,"./output":58}],57:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalSignature(c[0])&&bscript.isCanonicalPubKey(c[1])}function encodeStack(e,c){return typeforce({signature:types.Buffer,pubKey:types.Buffer},{signature:e,pubKey:c}),[e,c]}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e){return typeforce(check,e),{signature:e[0],pubKey:e[1]}}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKeyHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":46,"../../types":72,"typeforce":206}],58:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 25===c.length&&c[0]===OPS.OP_DUP&&c[1]===OPS.OP_HASH160&&20===c[2]&&c[23]===OPS.OP_EQUALVERIFY&&c[24]===OPS.OP_CHECKSIG}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_DUP,OPS.OP_HASH160,e,OPS.OP_EQUALVERIFY,OPS.OP_CHECKSIG])}function decode(e){return typeforce(check,e),e.slice(3,23)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"typeforce":206}],59:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":60,"./output":61}],60:[function(require,module,exports){
(function (Buffer){
function check(e,c){var t=bscript.decompile(e);if(t.length<1)return!1;var r=t[t.length-1];if(!Buffer.isBuffer(r))return!1;var i=bscript.decompile(bscript.compile(t.slice(0,-1))),p=bscript.decompile(r);if(0===p.length)return!1;if(!bscript.isPushOnly(i))return!1;var n=bscript.classifyInput(i,c),o=bscript.classifyOutput(p);return 1===t.length?o===bscript.types.P2WSH||o===bscript.types.P2WPKH:n===o}function encodeStack(e,c){var t=bscript.compile(c);return[].concat(e,t)}function encode(e,c){var t=bscript.decompile(e);return bscript.compile(encodeStack(t,c))}function decodeStack(e){return typeforce(check,e),{redeemScriptStack:e.slice(0,-1),redeemScript:e[e.length-1]}}function decode(e){var c=bscript.decompile(e),t=decodeStack(c);return t.redeemScriptSig=bscript.compile(t.redeemScriptStack),delete t.redeemScriptStack,t}var bscript=require("../../script"),typeforce=require("typeforce");check.toJSON=function(){return"scriptHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,{"isBuffer":require("../../../../is-buffer/index.js")})

},{"../../../../is-buffer/index.js":160,"../../script":46,"typeforce":206}],61:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 23===c.length&&c[0]===OPS.OP_HASH160&&20===c[1]&&c[22]===OPS.OP_EQUAL}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_HASH160,e,OPS.OP_EQUAL])}function decode(e){return typeforce(check,e),e.slice(2,22)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"typeforce":206}],62:[function(require,module,exports){
module.exports={output:require("./output")};

},{"./output":63}],63:[function(require,module,exports){
(function (Buffer){
function check(e){var c=bscript.compile(e);return c.length>37&&c[0]===OPS.OP_RETURN&&36===c[1]&&c.slice(2,6).equals(HEADER)}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_RETURN,Buffer.concat([HEADER,e])])}function decode(e){return typeforce(check,e),bscript.decompile(e)[1].slice(4,36)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),HEADER=new Buffer("aa21a9ed","hex");check.toJSON=function(){return"Witness commitment output"},module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"buffer":104,"typeforce":206}],64:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":65,"./output":66}],65:[function(require,module,exports){
var pkh=require("../pubkeyhash/input");module.exports={check:pkh.check,decodeStack:pkh.decodeStack,encodeStack:pkh.encodeStack};

},{"../pubkeyhash/input":57}],66:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 22===c.length&&c[0]===OPS.OP_0&&20===c[1]}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"typeforce":206}],67:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":68,"./output":69}],68:[function(require,module,exports){
var p2sh=require("../scripthash/input");module.exports={check:p2sh.check,decodeStack:p2sh.decodeStack,encodeStack:p2sh.encodeStack};

},{"../scripthash/input":60}],69:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 34===c.length&&c[0]===OPS.OP_0&&32===c[1]}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":46,"../../types":72,"bitcoin-ops":34,"typeforce":206}],70:[function(require,module,exports){
(function (Buffer){
function varSliceSize(t){var n=t.length;return bufferutils.varIntSize(n)+n}function vectorSize(t){var n=t.length;return bufferutils.varIntSize(n)+t.reduce(function(t,n){return t+varSliceSize(n)},0)}function Transaction(){this.version=1,this.locktime=0,this.ins=[],this.outs=[],this.joinsplits=[]}var bcrypto=require("./crypto"),bscript=require("./script"),bufferutils=require("./bufferutils"),opcodes=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types");Transaction.DEFAULT_SEQUENCE=4294967295,Transaction.SIGHASH_ALL=1,Transaction.SIGHASH_NONE=2,Transaction.SIGHASH_SINGLE=3,Transaction.SIGHASH_ANYONECANPAY=128,Transaction.ADVANCED_TRANSACTION_MARKER=0,Transaction.ADVANCED_TRANSACTION_FLAG=1;var EMPTY_SCRIPT=new Buffer(0),EMPTY_WITNESS=[],ZERO=new Buffer("0000000000000000000000000000000000000000000000000000000000000000","hex"),ONE=new Buffer("0000000000000000000000000000000000000000000000000000000000000001","hex"),VALUE_UINT64_MAX=new Buffer("ffffffffffffffff","hex"),BLANK_OUTPUT={script:EMPTY_SCRIPT,valueBuffer:VALUE_UINT64_MAX};Transaction.ZCASH_NUM_JS_INPUTS=2,Transaction.ZCASH_NUM_JS_OUTPUTS=2,Transaction.ZCASH_NOTECIPHERTEXT_SIZE=601,Transaction.ZCASH_G1_PREFIX_MASK=2,Transaction.ZCASH_G2_PREFIX_MASK=10,Transaction.fromBuffer=function(t,n,e){function r(n){return f+=n,t.slice(f-n,f)}function i(){var n=t.readUInt8(f);return f+=1,n}function s(){var n=t.readUInt32LE(f);return f+=4,n}function o(){var n=bufferutils.readUInt64LE(t,f);return f+=8,n}function a(){var n=bufferutils.readVarInt(t,f);return f+=n.size,n.number}function u(){return r(a())}function c(){var t=1&i();return{x:r(32),yLsb:t}}var f=0,h=new Transaction;h.version=function(){var n=t.readInt32LE(f);return f+=4,n}();var p=t.readUInt8(f),T=t.readUInt8(f+1),S=!1;n||p===Transaction.ADVANCED_TRANSACTION_MARKER&&T===Transaction.ADVANCED_TRANSACTION_FLAG&&(f+=2,S=!0);for(var l=a(),_=0;_<l;++_)h.ins.push({hash:r(32),index:s(),script:u(),sequence:s(),witness:EMPTY_WITNESS});var E=a();for(_=0;_<E;++_)h.outs.push({value:o(),script:u()});if(S){for(_=0;_<l;++_)h.ins[_].witness=function(){for(var t=a(),n=[],e=0;e<t;e++)n.push(u());return n}();if(!h.hasWitnesses())throw new Error("Transaction has superfluous witness data")}if(h.locktime=s(),h.version>=2&&n){var A=a();for(_=0;_<A;++_){for(var y=o(),I=o(),v=r(32),N=[],g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)N.push(r(32));var H=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)H.push(r(32));var b=r(32),C=r(32),m=[];for(g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)m.push(r(32));var U={gA:c(),gAPrime:c(),gB:function(){var t=1&i();return{x:r(64),yLsb:t}}(),gBPrime:c(),gC:c(),gCPrime:c(),gK:c(),gH:c()},d=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)d.push(r(Transaction.ZCASH_NOTECIPHERTEXT_SIZE));h.joinsplits.push({vpubOld:y,vpubNew:I,anchor:v,nullifiers:N,commitments:H,ephemeralKey:b,randomSeed:C,macs:m,zproof:U,ciphertexts:d})}A>0&&(h.joinsplitPubkey=r(32),h.joinsplitSig=r(64))}if(h.zcash=!!n,e)return h;if(f!==t.length)throw new Error("Transaction has unexpected data");return h},Transaction.fromHex=function(t,n){return Transaction.fromBuffer(new Buffer(t,"hex"),n)},Transaction.isCoinbaseHash=function(t){typeforce(types.Hash256bit,t);for(var n=0;n<32;++n)if(0!==t[n])return!1;return!0},Transaction.prototype.isCoinbase=function(){return 1===this.ins.length&&Transaction.isCoinbaseHash(this.ins[0].hash)},Transaction.prototype.addInput=function(t,n,e,r){return typeforce(types.tuple(types.Hash256bit,types.UInt32,types.maybe(types.UInt32),types.maybe(types.Buffer)),arguments),types.Null(e)&&(e=Transaction.DEFAULT_SEQUENCE),this.ins.push({hash:t,index:n,script:r||EMPTY_SCRIPT,sequence:e,witness:EMPTY_WITNESS})-1},Transaction.prototype.addOutput=function(t,n){return typeforce(types.tuple(types.Buffer,types.Satoshi),arguments),this.outs.push({script:t,value:n})-1},Transaction.prototype.hasWitnesses=function(){return this.ins.some(function(t){return 0!==t.witness.length})},Transaction.prototype.byteLength=function(){return this.__byteLength(!0)},Transaction.prototype.joinsplitByteLength=function(){if(this.version<2)return 0;if(!this.zcash)return 0;var t=this.joinsplits.length>0?96:0;return bufferutils.varIntSize(this.joinsplits.length)+this.joinsplits.reduce(function(t,n){return t+8+8+32+32*n.nullifiers.length+32*n.commitments.length+32+32+32*n.macs.length+65+231+n.ciphertexts.length*Transaction.ZCASH_NOTECIPHERTEXT_SIZE},0)+t},Transaction.prototype.__byteLength=function(t){var n=t&&this.hasWitnesses();return(n?10:8)+bufferutils.varIntSize(this.ins.length)+bufferutils.varIntSize(this.outs.length)+this.ins.reduce(function(t,n){return t+40+varSliceSize(n.script)},0)+this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0)+(n?this.ins.reduce(function(t,n){return t+vectorSize(n.witness)},0):0)+this.joinsplitByteLength()},Transaction.prototype.clone=function(){var t=new Transaction;return t.version=this.version,t.locktime=this.locktime,t.zcash=this.zcash,t.ins=this.ins.map(function(t){return{hash:t.hash,index:t.index,script:t.script,sequence:t.sequence,witness:t.witness}}),t.outs=this.outs.map(function(t){return{script:t.script,value:t.value}}),t},Transaction.prototype.hashForSignature=function(t,n,e){if(typeforce(types.tuple(types.UInt32,types.Buffer,types.Number),arguments),t>=this.ins.length)return ONE;var r=bscript.compile(bscript.decompile(n).filter(function(t){return t!==opcodes.OP_CODESEPARATOR})),i=this.clone();if((31&e)===Transaction.SIGHASH_NONE)i.outs=[],i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)});else if((31&e)===Transaction.SIGHASH_SINGLE){if(t>=this.outs.length)return ONE;i.outs.length=t+1;for(var s=0;s<t;s++)i.outs[s]=BLANK_OUTPUT;i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)})}e&Transaction.SIGHASH_ANYONECANPAY?(i.ins=[i.ins[t]],i.ins[0].script=r):(i.ins.forEach(function(t){t.script=EMPTY_SCRIPT}),i.ins[t].script=r);var o=new Buffer(i.__byteLength(!1)+4);return o.writeInt32LE(e,o.length-4),i.__toBuffer(o,0,!1),bcrypto.hash256(o)},Transaction.prototype.hashForWitnessV0=function(t,n,e,r){function i(t){f+=t.copy(c,f)}function s(t){f=c.writeUInt32LE(t,f)}function o(t){f=bufferutils.writeUInt64LE(c,t,f)}function a(t){f+=bufferutils.writeVarInt(c,t,f)}function u(t){a(t.length),i(t)}typeforce(types.tuple(types.UInt32,types.Buffer,types.Satoshi,types.UInt32),arguments);var c,f,h=ZERO,p=ZERO,T=ZERO;if(r&Transaction.SIGHASH_ANYONECANPAY||(c=new Buffer(36*this.ins.length),f=0,this.ins.forEach(function(t){i(t.hash),s(t.index)}),p=bcrypto.hash256(c)),r&Transaction.SIGHASH_ANYONECANPAY||(31&r)===Transaction.SIGHASH_SINGLE||(31&r)===Transaction.SIGHASH_NONE||(c=new Buffer(4*this.ins.length),f=0,this.ins.forEach(function(t){s(t.sequence)}),T=bcrypto.hash256(c)),(31&r)!==Transaction.SIGHASH_SINGLE&&(31&r)!==Transaction.SIGHASH_NONE){var S=this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0);c=new Buffer(S),f=0,this.outs.forEach(function(t){o(t.value),u(t.script)}),h=bcrypto.hash256(c)}else if((31&r)===Transaction.SIGHASH_SINGLE&&t<this.outs.length){var l=this.outs[t];c=new Buffer(8+varSliceSize(l.script)),f=0,o(l.value),u(l.script),h=bcrypto.hash256(c)}c=new Buffer(156+varSliceSize(n)),f=0;var _=this.ins[t];return s(this.version),i(p),i(T),i(_.hash),s(_.index),u(n),o(e),s(_.sequence),i(h),s(this.locktime),s(r),bcrypto.hash256(c)},Transaction.prototype.getHash=function(){return bcrypto.hash256(this.__toBuffer(void 0,void 0,!1))},Transaction.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Transaction.prototype.toBuffer=function(t,n){return this.__toBuffer(t,n,!0)},Transaction.prototype.__toBuffer=function(t,n,e){function r(n){p+=n.copy(t,p)}function i(n){p=t.writeUInt8(n,p)}function s(n){p=t.writeUInt32LE(n,p)}function o(n){p=bufferutils.writeUInt64LE(t,n,p)}function a(n){p+=bufferutils.writeVarInt(t,n,p)}function u(t){a(t.length),r(t)}function c(t){a(t.length),t.forEach(u)}function f(t){i(Transaction.ZCASH_G1_PREFIX_MASK|t.yLsb),r(t.x)}function h(t){i(Transaction.ZCASH_G2_PREFIX_MASK|t.yLsb),r(t.x)}t||(t=new Buffer(this.__byteLength(e)));var p=n||0;!function(n){p=t.writeInt32LE(n,p)}(this.version);var T=e&&this.hasWitnesses();return T&&(i(Transaction.ADVANCED_TRANSACTION_MARKER),i(Transaction.ADVANCED_TRANSACTION_FLAG)),a(this.ins.length),this.ins.forEach(function(t){r(t.hash),s(t.index),u(t.script),s(t.sequence)}),a(this.outs.length),this.outs.forEach(function(t){t.valueBuffer?r(t.valueBuffer):o(t.value),u(t.script)}),T&&this.ins.forEach(function(t){c(t.witness)}),s(this.locktime),this.version>=2&&this.zcash&&(a(this.joinsplits.length),this.joinsplits.forEach(function(t){o(t.vpubOld),o(t.vpubNew),r(t.anchor),t.nullifiers.forEach(function(t){r(t)}),t.commitments.forEach(function(t){r(t)}),r(t.ephemeralKey),r(t.randomSeed),t.macs.forEach(function(t){r(t)}),f(t.zproof.gA),f(t.zproof.gAPrime),h(t.zproof.gB),f(t.zproof.gBPrime),f(t.zproof.gC),f(t.zproof.gCPrime),f(t.zproof.gK),f(t.zproof.gH),t.ciphertexts.forEach(function(t){r(t)})}),this.joinsplits.length>0&&(r(this.joinsplitPubkey),r(this.joinsplitSig))),void 0!==n?t.slice(n,p):t},Transaction.prototype.toHex=function(){return this.toBuffer().toString("hex")},Transaction.prototype.setInputScript=function(t,n){typeforce(types.tuple(types.Number,types.Buffer),arguments),this.ins[t].script=n},Transaction.prototype.setWitness=function(t,n){typeforce(types.tuple(types.Number,[types.Buffer]),arguments),this.ins[t].witness=n},module.exports=Transaction;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":38,"./crypto":39,"./script":46,"./types":72,"bitcoin-ops":34,"buffer":104,"typeforce":206}],71:[function(require,module,exports){
(function (Buffer){
function extractChunks(t,e,r){var i=[],s=[];switch(t){case scriptTypes.P2PKH:i=e.slice(1),s=e.slice(0,1);break;case scriptTypes.P2PK:i[0]=r?bscript.pubKey.output.decode(r):void 0,s=e.slice(0,1);break;case scriptTypes.MULTISIG:if(r){i=bscript.multisig.output.decode(r).pubKeys}s=e.slice(1).map(function(t){return 0===t.length?void 0:t})}return{pubKeys:i,signatures:s}}function expandInput(t,e){var r,i,s,n,p,u,c,o,a,y,h=!1,d=!1,f=bscript.decompile(t);bscript.classifyInput(f,!0)===scriptTypes.P2SH&&(d=!0,p=f[f.length-1],o=bscript.classifyOutput(p),r=bscript.scriptHash.output.encode(bcrypto.hash160(p)),i=scriptTypes.P2SH,n=p);var S=bscript.classifyWitness(e);if(S===scriptTypes.P2WSH){if(u=e[e.length-1],c=bscript.classifyOutput(u),h=!0,0===t.length){if(r=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),i=scriptTypes.P2WSH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WSH, but scriptSig non-empty");if(a=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),!p.equals(a))throw new Error("Redeem script didn't match witnessScript")}if(SIGNABLE.indexOf(bscript.classifyOutput(u))===-1)throw new Error("unsupported witness script");n=u,s=c,y=e.slice(0,-1)}else if(S===scriptTypes.P2WPKH){var b=e[e.length-1],w=bcrypto.hash160(b);if(0===t.length){if(r=bscript.witnessPubKeyHash.output.encode(w),i=scriptTypes.P2WPKH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WPKH, but scriptSig wasn't empty");if(a=bscript.witnessPubKeyHash.output.encode(w),!p.equals(a))throw new Error("Redeem script did not have the right witness program")}s=scriptTypes.P2PKH,y=e}else if(p){if(P2SH.indexOf(o)===-1)throw new Error("Bad redeemscript!");n=p,s=o,y=f.slice(0,-1)}else i=s=bscript.classifyInput(t),y=f;var l=extractChunks(s,y,n),v={pubKeys:l.pubKeys,signatures:l.signatures,prevOutScript:r,prevOutType:i,signType:s,signScript:n,witness:Boolean(!1)};return d&&(v.redeemScript=p,v.redeemScriptType=o),h&&(v.witnessScript=u,v.witnessScriptType=c),v}function fixMultisigOrder(t,e,r){if(t.redeemScriptType===scriptTypes.MULTISIG&&t.redeemScript&&t.pubKeys.length!==t.signatures.length){var i=t.signatures.concat();t.signatures=t.pubKeys.map(function(s,n){var p,u=ECPair.fromPublicKeyBuffer(s);return i.some(function(s,n){if(!s)return!1;var c=ECSignature.parseScriptSignature(s),o=e.hashForSignature(r,t.redeemScript,c.hashType);return!!u.verify(o,c.signature)&&(i[n]=void 0,p=s,!0)}),p})}}function expandOutput(t,e,r){typeforce(types.Buffer,t);var i=bscript.decompile(t);e||(e=bscript.classifyOutput(t));var s=[];switch(e){case scriptTypes.P2PKH:if(!r)break;var n=i[2],p=bcrypto.hash160(r);n.equals(p)&&(s=[r]);break;case scriptTypes.P2WPKH:if(!r)break;var u=i[1],c=bcrypto.hash160(r);u.equals(c)&&(s=[r]);break;case scriptTypes.P2PK:s=i.slice(0,1);break;case scriptTypes.MULTISIG:s=i.slice(1,-2);break;default:return{scriptType:e}}return{pubKeys:s,scriptType:e,signatures:s.map(function(){})}}function checkP2shInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2SH)throw new Error("PrevOutScript must be P2SH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent hash160(RedeemScript)")}}function checkP2WSHInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2WSH)throw new Error("PrevOutScript must be P2WSH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent sha25(WitnessScript)")}}function prepareInput(t,e,r,i,s){var n,p,u,c,o,a,y,h,d,f=!1,S=!1,b=!1;if(r&&s){if(o=bcrypto.hash160(r),y=bcrypto.sha256(s),checkP2shInput(t,o),!r.equals(bscript.witnessScriptHash.output.encode(y)))throw new Error("Witness script inconsistent with redeem script");if(n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=S=b=!0,c=bscript.types.P2WSH,h=a=n.scriptType,d=s}else if(r){if(o=bcrypto.hash160(r),checkP2shInput(t,o),n=expandOutput(r,void 0,e),!n.pubKeys)throw new Error('RedeemScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=!0,h=c=n.scriptType,d=r,S=h===bscript.types.P2WPKH}else if(s){if(y=bcrypto.sha256(s),checkP2WSHInput(t,y),n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2WSH,u=bscript.witnessScriptHash.output.encode(y),S=b=!0,h=a=n.scriptType,d=s}else if(t.prevOutType){if(t.prevOutType===scriptTypes.P2SH||t.prevOutType===scriptTypes.P2WSH)throw new Error("PrevOutScript is "+t.prevOutType+", requires redeemScript");if(p=t.prevOutType,u=t.prevOutScript,n=expandOutput(t.prevOutScript,t.prevOutType,e),!n.pubKeys)return;S=t.prevOutType===scriptTypes.P2WPKH,h=p,d=u}else u=bscript.pubKeyHash.output.encode(bcrypto.hash160(e)),n=expandOutput(u,scriptTypes.P2PKH,e),p=scriptTypes.P2PKH,S=!1,h=p,d=u;if(S&&!types.Satoshi(i))throw new Error("Input was witness but not given witness value");h===scriptTypes.P2WPKH&&(d=bscript.pubKeyHash.output.encode(bscript.witnessPubKeyHash.output.decode(d))),f&&(t.redeemScript=r,t.redeemScriptType=c),b&&(t.witnessScript=s,t.witnessScriptType=a),t.pubKeys=n.pubKeys,t.signatures=n.signatures,t.signScript=d,t.signType=h,t.prevOutScript=u,t.prevOutType=p,t.witness=S}function buildStack(t,e,r,i){if(t===scriptTypes.P2PKH){if(1===e.length&&e[0]instanceof Buffer&&1===r.length)return bscript.pubKeyHash.input.encodeStack(e[0],r[0])}else if(t===scriptTypes.P2PK){if(1===e.length&&e[0]instanceof Buffer)return bscript.pubKey.input.encodeStack(e[0])}else{if(t!==scriptTypes.MULTISIG)throw new Error("Not yet supported");if(e.length>0)return e=e.map(function(t){return t||ops.OP_0}),i||(e=e.filter(function(t){return t!==ops.OP_0})),bscript.multisig.input.encodeStack(e)}if(!i)throw new Error("Not enough signatures provided");return[]}function buildInput(t,e){var r=t.prevOutType,i=[],s=[];SIGNABLE.indexOf(r)!==-1&&(i=buildStack(r,t.signatures,t.pubKeys,t.script,e));var n=!1;if(r===bscript.types.P2SH){if(P2SH.indexOf(t.redeemScriptType)===-1)throw new Error("Impossible to sign this type");n=!0,SIGNABLE.indexOf(t.redeemScriptType)!==-1&&(i=buildStack(t.redeemScriptType,t.signatures,t.pubKeys,e)),r=t.redeemScriptType}if(r===bscript.types.P2WPKH)s=buildStack(bscript.types.P2PKH,t.signatures,t.pubKeys,e);else if(r===bscript.types.P2WSH){if(SIGNABLE.indexOf(t.witnessScriptType)===-1)throw new Error;s=buildStack(t.witnessScriptType,t.signatures,t.pubKeys,e),s.push(t.witnessScript),r=t.witnessScriptType}return n&&i.push(t.redeemScript),{type:r,script:bscript.compile(i),witness:s}}function TransactionBuilder(t,e){this.prevTxMap={},this.network=t||networks.bitcoin,this.maximumFeeRate=e||1e3,this.inputs=[],this.tx=new Transaction}function canSign(t){return void 0!==t.prevOutScript&&void 0!==t.signScript&&void 0!==t.pubKeys&&void 0!==t.signatures&&t.signatures.length===t.pubKeys.length&&t.pubKeys.length>0&&void 0!==t.witness}function signatureHashType(t){return t.readUInt8(t.length-1)}var baddress=require("./address"),bcrypto=require("./crypto"),bscript=require("./script"),networks=require("./networks"),ops=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types"),scriptTypes=bscript.types,SIGNABLE=[bscript.types.P2PKH,bscript.types.P2PK,bscript.types.MULTISIG],P2SH=SIGNABLE.concat([bscript.types.P2WPKH,bscript.types.P2WSH]),ECPair=require("./ecpair"),ECSignature=require("./ecsignature"),Transaction=require("./transaction");TransactionBuilder.prototype.setLockTime=function(t){if(typeforce(types.UInt32,t),this.inputs.some(function(t){return!!t.signatures&&t.signatures.some(function(t){return t})}))throw new Error("No, this would invalidate signatures");this.tx.locktime=t},TransactionBuilder.prototype.setVersion=function(t){typeforce(types.UInt32,t),this.tx.version=t},TransactionBuilder.fromTransaction=function(t,e){var r=new TransactionBuilder(e);return r.setVersion(t.version),r.setLockTime(t.locktime),t.outs.forEach(function(t){r.addOutput(t.script,t.value)}),t.ins.forEach(function(t){r.__addInputUnsafe(t.hash,t.index,{sequence:t.sequence,script:t.script,witness:t.witness})}),r.inputs.forEach(function(e,r){fixMultisigOrder(e,t,r)}),r},TransactionBuilder.prototype.addInput=function(t,e,r,i){if(!this.__canModifyInputs())throw new Error("No, this would invalidate signatures");var s;if("string"==typeof t)t=new Buffer(t,"hex").reverse();else if(t instanceof Transaction){var n=t.outs[e];i=n.script,s=n.value,t=t.getHash()}return this.__addInputUnsafe(t,e,{sequence:r,prevOutScript:i,value:s})},TransactionBuilder.prototype.__addInputUnsafe=function(t,e,r){if(Transaction.isCoinbaseHash(t))throw new Error("coinbase inputs not supported");var i=t.toString("hex")+":"+e;if(void 0!==this.prevTxMap[i])throw new Error("Duplicate TxOut: "+i);var s={};if(void 0!==r.script&&(s=expandInput(r.script,r.witness)),void 0!==r.value&&(s.value=r.value),!s.prevOutScript&&r.prevOutScript){var n;if(!s.pubKeys&&!s.signatures){var p=expandOutput(r.prevOutScript);p.pubKeys&&(s.pubKeys=p.pubKeys,s.signatures=p.signatures),n=p.scriptType}s.prevOutScript=r.prevOutScript,s.prevOutType=n||bscript.classifyOutput(r.prevOutScript)}var u=this.tx.addInput(t,e,r.sequence,r.scriptSig);return this.inputs[u]=s,this.prevTxMap[i]=u,u},TransactionBuilder.prototype.addOutput=function(t,e){if(!this.__canModifyOutputs())throw new Error("No, this would invalidate signatures");return"string"==typeof t&&(t=baddress.toOutputScript(t,this.network)),this.tx.addOutput(t,e)},TransactionBuilder.prototype.build=function(){return this.__build(!1)},TransactionBuilder.prototype.buildIncomplete=function(){return this.__build(!0)},TransactionBuilder.prototype.__build=function(t){if(!t){if(!this.tx.ins.length)throw new Error("Transaction has no inputs");if(!this.tx.outs.length)throw new Error("Transaction has no outputs")}var e=this.tx.clone();if(this.inputs.forEach(function(r,i){if(!(r.witnessScriptType||r.redeemScriptType||r.prevOutType||t))throw new Error("Transaction is not complete");var s=buildInput(r,t);if(!t&&SIGNABLE.indexOf(s.type)===-1&&s.type!==bscript.types.P2WPKH)throw new Error(s.type+" not supported");e.setInputScript(i,s.script),e.setWitness(i,s.witness)}),!t&&this.__overMaximumFees(e.byteLength()))throw new Error("Transaction has absurd fees");return e},TransactionBuilder.prototype.sign=function(t,e,r,i,s,n){if(e.network!==this.network)throw new Error("Inconsistent network");if(!this.inputs[t])throw new Error("No input at index: "+t);i=i||Transaction.SIGHASH_ALL;var p=this.inputs[t];if(void 0!==p.redeemScript&&r&&!p.redeemScript.equals(r))throw new Error("Inconsistent redeemScript");var u=e.getPublicKeyBuffer();if(!canSign(p)&&(prepareInput(p,u,r,s,n),!canSign(p)))throw Error(p.prevOutType+" not supported");var c;if(c=p.witness?this.tx.hashForWitnessV0(t,p.signScript,s,i):this.tx.hashForSignature(t,p.signScript,i),!p.pubKeys.some(function(t,r){if(!u.equals(t))return!1;if(p.signatures[r])throw new Error("Signature already exists");return p.signatures[r]=e.sign(c).toScriptSignature(i),!0}))throw new Error("Key pair cannot sign for this input")},TransactionBuilder.prototype.__canModifyInputs=function(){return this.inputs.every(function(t){return void 0===t.signatures||t.signatures.every(function(t){return!t||signatureHashType(t)&Transaction.SIGHASH_ANYONECANPAY})})},TransactionBuilder.prototype.__canModifyOutputs=function(){var t=this.tx.ins.length,e=this.tx.outs.length;return this.inputs.every(function(r){return void 0===r.signatures||r.signatures.every(function(r){if(!r)return!0;var i=signatureHashType(r),s=31&i;return s===Transaction.SIGHASH_NONE||(s===Transaction.SIGHASH_SINGLE?t<=e:void 0)})})},TransactionBuilder.prototype.__overMaximumFees=function(t){return(this.inputs.reduce(function(t,e){return t+(e.value>>>0)},0)-this.tx.outs.reduce(function(t,e){return t+e.value},0))/t>this.maximumFeeRate},module.exports=TransactionBuilder;

}).call(this,require("buffer").Buffer)

},{"./address":36,"./crypto":39,"./ecpair":41,"./ecsignature":42,"./networks":45,"./script":46,"./transaction":70,"./types":72,"bitcoin-ops":34,"buffer":104,"typeforce":206}],72:[function(require,module,exports){
function UInt31(e){return typeforce.UInt32(e)&&e<=UINT31_MAX}function BIP32Path(e){return typeforce.String(e)&&e.match(/^(m\/)?(\d+'?\/)*\d+'?$/)}function Satoshi(e){return typeforce.UInt53(e)&&e<=SATOSHI_MAX}var typeforce=require("typeforce"),UINT31_MAX=Math.pow(2,31)-1;BIP32Path.toJSON=function(){return"BIP32 derivation path"};var SATOSHI_MAX=21e14,BigInt=typeforce.quacksLike("BigInteger"),ECPoint=typeforce.quacksLike("Point"),ECSignature=typeforce.compile({r:BigInt,s:BigInt}),Network=typeforce.compile({messagePrefix:typeforce.oneOf(typeforce.Buffer,typeforce.String),bip32:{public:typeforce.UInt32,private:typeforce.UInt32},pubKeyHash:typeforce.UInt16,scriptHash:typeforce.UInt16,wif:typeforce.UInt8}),types={BigInt:BigInt,BIP32Path:BIP32Path,Buffer256bit:typeforce.BufferN(32),ECPoint:ECPoint,ECSignature:ECSignature,Hash160bit:typeforce.BufferN(20),Hash256bit:typeforce.BufferN(32),Network:Network,Satoshi:Satoshi,UInt31:UInt31};for(var typeName in typeforce)types[typeName]=typeforce[typeName];module.exports=types;

},{"typeforce":206}],73:[function(require,module,exports){
!function(t,i){"use strict";function r(t,i){if(!t)throw new Error(i||"Assertion failed")}function h(t,i){t.super_=i;var r=function(){};r.prototype=i.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,i,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==i&&"be"!==i||(r=i,i=10),this._init(t||0,i||10,r||"be"))}function e(t,i,r){for(var h=0,n=Math.min(t.length,r),e=i;e<n;e++){var o=t.charCodeAt(e)-48;h<<=4,h|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return h}function o(t,i,r,h){for(var n=0,e=Math.min(t.length,r),o=i;o<e;o++){var s=t.charCodeAt(o)-48;n*=h,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}function s(t){for(var i=new Array(t.bitLength()),r=0;r<i.length;r++){var h=r/26|0,n=r%26;i[r]=(t.words[h]&1<<n)>>>n}return i}function u(t,i,r){r.negative=i.negative^t.negative;var h=t.length+i.length|0;r.length=h,h=h-1|0;var n=0|t.words[0],e=0|i.words[0],o=n*e,s=67108863&o,u=o/67108864|0;r.words[0]=s;for(var a=1;a<h;a++){for(var l=u>>>26,m=67108863&u,f=Math.min(a,i.length-1),d=Math.max(0,a-t.length+1);d<=f;d++){var p=a-d|0;n=0|t.words[p],e=0|i.words[d],o=n*e+m,l+=o/67108864|0,m=67108863&o}r.words[a]=0|m,u=0|l}return 0!==u?r.words[a]=0|u:r.length--,r.strip()}function a(t,i,r){r.negative=i.negative^t.negative,r.length=t.length+i.length;for(var h=0,n=0,e=0;e<r.length-1;e++){var o=n;n=0;for(var s=67108863&h,u=Math.min(e,i.length-1),a=Math.max(0,e-t.length+1);a<=u;a++){var l=e-a,m=0|t.words[l],f=0|i.words[a],d=m*f,p=67108863&d;o=o+(d/67108864|0)|0,p=p+s|0,s=67108863&p,o=o+(p>>>26)|0,n+=o>>>26,o&=67108863}r.words[e]=s,h=o,o=n}return 0!==h?r.words[e]=h:r.length--,r.strip()}function l(t,i,r){return(new m).mulp(t,i,r)}function m(t,i){this.x=t,this.y=i}function f(t,i){this.name=t,this.p=new n(i,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function d(){f.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function p(){f.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){f.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function v(){f.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function g(t){if("string"==typeof t){var i=n._prime(t);this.m=i.p,this.prime=i}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function c(t){g.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}"object"==typeof t?t.exports=n:i.BN=n,n.BN=n,n.wordSize=26;var w;try{w=require("buffer").Buffer}catch(t){}n.isBN=function(t){return t instanceof n||null!==t&&"object"==typeof t&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,i){return t.cmp(i)>0?t:i},n.min=function(t,i){return t.cmp(i)<0?t:i},n.prototype._init=function(t,i,h){if("number"==typeof t)return this._initNumber(t,i,h);if("object"==typeof t)return this._initArray(t,i,h);"hex"===i&&(i=16),r(i===(0|i)&&i>=2&&i<=36),t=t.toString().replace(/\s+/g,"");var n=0;"-"===t[0]&&n++,16===i?this._parseHex(t,n):this._parseBase(t,i,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===h&&this._initArray(this.toArray(),i,h)},n.prototype._initNumber=function(t,i,h){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===h&&this._initArray(this.toArray(),i,h)},n.prototype._initArray=function(t,i,h){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var e,o,s=0;if("be"===h)for(n=t.length-1,e=0;n>=0;n-=3)o=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[e]|=o<<s&67108863,this.words[e+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,e++);else if("le"===h)for(n=0,e=0;n<t.length;n+=3)o=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[e]|=o<<s&67108863,this.words[e+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,e++);return this.strip()},n.prototype._parseHex=function(t,i){this.length=Math.ceil((t.length-i)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var h,n,o=0;for(r=t.length-6,h=0;r>=i;r-=6)n=e(t,r,r+6),this.words[h]|=n<<o&67108863,this.words[h+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,h++);r+6!==i&&(n=e(t,i,r+6),this.words[h]|=n<<o&67108863,this.words[h+1]|=n>>>26-o&4194303),this.strip()},n.prototype._parseBase=function(t,i,r){this.words=[0],this.length=1;for(var h=0,n=1;n<=67108863;n*=i)h++;h--,n=n/i|0;for(var e=t.length-r,s=e%h,u=Math.min(e,e-s)+r,a=0,l=r;l<u;l+=h)a=o(t,l,l+h,i),this.imuln(n),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==s){var m=1;for(a=o(t,l,t.length,i),l=0;l<s;l++)m*=i;this.imuln(m),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}},n.prototype.copy=function(t){t.words=new Array(this.length);for(var i=0;i<this.length;i++)t.words[i]=this.words[i];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},n.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var y=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],b=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],_=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];n.prototype.toString=function(t,i){t=t||10,i=0|i||1;var h;if(16===t||"hex"===t){h="";for(var n=0,e=0,o=0;o<this.length;o++){var s=this.words[o],u=(16777215&(s<<n|e)).toString(16);e=s>>>24-n&16777215,h=0!==e||o!==this.length-1?y[6-u.length]+u+h:u+h,n+=2,n>=26&&(n-=26,o--)}for(0!==e&&(h=e.toString(16)+h);h.length%i!=0;)h="0"+h;return 0!==this.negative&&(h="-"+h),h}if(t===(0|t)&&t>=2&&t<=36){var a=b[t],l=_[t];h="";var m=this.clone();for(m.negative=0;!m.isZero();){var f=m.modn(l).toString(t);m=m.idivn(l),h=m.isZero()?f+h:y[a-f.length]+f+h}for(this.isZero()&&(h="0"+h);h.length%i!=0;)h="0"+h;return 0!==this.negative&&(h="-"+h),h}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16)},n.prototype.toBuffer=function(t,i){return r(void 0!==w),this.toArrayLike(w,t,i)},n.prototype.toArray=function(t,i){return this.toArrayLike(Array,t,i)},n.prototype.toArrayLike=function(t,i,h){var n=this.byteLength(),e=h||Math.max(1,n);r(n<=e,"byte array longer than desired length"),r(e>0,"Requested array length <= 0"),this.strip();var o,s,u="le"===i,a=new t(e),l=this.clone();if(u){for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),a[s]=o;for(;s<e;s++)a[s]=0}else{for(s=0;s<e-n;s++)a[s]=0;for(s=0;!l.isZero();s++)o=l.andln(255),l.iushrn(8),a[e-s-1]=o}return a},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var i=t,r=0;return i>=4096&&(r+=13,i>>>=13),i>=64&&(r+=7,i>>>=7),i>=8&&(r+=4,i>>>=4),i>=2&&(r+=2,i>>>=2),r+i},n.prototype._zeroBits=function(t){if(0===t)return 26;var i=t,r=0;return 0==(8191&i)&&(r+=13,i>>>=13),0==(127&i)&&(r+=7,i>>>=7),0==(15&i)&&(r+=4,i>>>=4),0==(3&i)&&(r+=2,i>>>=2),0==(1&i)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],i=this._countBits(t);return 26*(this.length-1)+i},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,i=0;i<this.length;i++){var r=this._zeroBits(this.words[i]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var i=0;i<t.length;i++)this.words[i]=this.words[i]|t.words[i];return this.strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var i;i=this.length>t.length?t:this;for(var r=0;r<i.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=i.length,this.strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var i,r;this.length>t.length?(i=this,r=t):(i=t,r=this);for(var h=0;h<r.length;h++)this.words[h]=i.words[h]^r.words[h];if(this!==i)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=i.length,this.strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var i=0|Math.ceil(t/26),h=t%26;this._expand(i),h>0&&i--;for(var n=0;n<i;n++)this.words[n]=67108863&~this.words[n];return h>0&&(this.words[n]=~this.words[n]&67108863>>26-h),this.strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,i){r("number"==typeof t&&t>=0);var h=t/26|0,n=t%26;return this._expand(h+1),this.words[h]=i?this.words[h]|1<<n:this.words[h]&~(1<<n),this.strip()},n.prototype.iadd=function(t){var i;if(0!==this.negative&&0===t.negative)return this.negative=0,i=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,i=this.isub(t),t.negative=1,i._normSign();var r,h;this.length>t.length?(r=this,h=t):(r=t,h=this);for(var n=0,e=0;e<h.length;e++)i=(0|r.words[e])+(0|h.words[e])+n,this.words[e]=67108863&i,n=i>>>26;for(;0!==n&&e<r.length;e++)i=(0|r.words[e])+n,this.words[e]=67108863&i,n=i>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;e<r.length;e++)this.words[e]=r.words[e];return this},n.prototype.add=function(t){var i;return 0!==t.negative&&0===this.negative?(t.negative=0,i=this.sub(t),t.negative^=1,i):0===t.negative&&0!==this.negative?(this.negative=0,i=t.sub(this),this.negative=1,i):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var i=this.iadd(t);return t.negative=1,i._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r=this.cmp(t);if(0===r)return this.negative=0,this.length=1,this.words[0]=0,this;var h,n;r>0?(h=this,n=t):(h=t,n=this);for(var e=0,o=0;o<n.length;o++)i=(0|h.words[o])-(0|n.words[o])+e,e=i>>26,this.words[o]=67108863&i;for(;0!==e&&o<h.length;o++)i=(0|h.words[o])+e,e=i>>26,this.words[o]=67108863&i;if(0===e&&o<h.length&&h!==this)for(;o<h.length;o++)this.words[o]=h.words[o];return this.length=Math.max(this.length,o),h!==this&&(this.negative=1),this.strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var k=function(t,i,r){var h,n,e,o=t.words,s=i.words,u=r.words,a=0,l=0|o[0],m=8191&l,f=l>>>13,d=0|o[1],p=8191&d,M=d>>>13,v=0|o[2],g=8191&v,c=v>>>13,w=0|o[3],y=8191&w,b=w>>>13,_=0|o[4],k=8191&_,A=_>>>13,x=0|o[5],S=8191&x,Z=x>>>13,q=0|o[6],R=8191&q,B=q>>>13,N=0|o[7],L=8191&N,I=N>>>13,z=0|o[8],T=8191&z,E=z>>>13,O=0|o[9],j=8191&O,K=O>>>13,P=0|s[0],F=8191&P,C=P>>>13,D=0|s[1],H=8191&D,J=D>>>13,U=0|s[2],G=8191&U,Q=U>>>13,V=0|s[3],W=8191&V,X=V>>>13,Y=0|s[4],$=8191&Y,tt=Y>>>13,it=0|s[5],rt=8191&it,ht=it>>>13,nt=0|s[6],et=8191&nt,ot=nt>>>13,st=0|s[7],ut=8191&st,at=st>>>13,lt=0|s[8],mt=8191&lt,ft=lt>>>13,dt=0|s[9],pt=8191&dt,Mt=dt>>>13;r.negative=t.negative^i.negative,r.length=19,h=Math.imul(m,F),n=Math.imul(m,C),n=n+Math.imul(f,F)|0,e=Math.imul(f,C);var vt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,h=Math.imul(p,F),n=Math.imul(p,C),n=n+Math.imul(M,F)|0,e=Math.imul(M,C),h=h+Math.imul(m,H)|0,n=n+Math.imul(m,J)|0,n=n+Math.imul(f,H)|0,e=e+Math.imul(f,J)|0;var gt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,h=Math.imul(g,F),n=Math.imul(g,C),n=n+Math.imul(c,F)|0,e=Math.imul(c,C),h=h+Math.imul(p,H)|0,n=n+Math.imul(p,J)|0,n=n+Math.imul(M,H)|0,e=e+Math.imul(M,J)|0,h=h+Math.imul(m,G)|0,n=n+Math.imul(m,Q)|0,n=n+Math.imul(f,G)|0,e=e+Math.imul(f,Q)|0;var ct=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(ct>>>26)|0,ct&=67108863,h=Math.imul(y,F),n=Math.imul(y,C),n=n+Math.imul(b,F)|0,e=Math.imul(b,C),h=h+Math.imul(g,H)|0,n=n+Math.imul(g,J)|0,n=n+Math.imul(c,H)|0,e=e+Math.imul(c,J)|0,h=h+Math.imul(p,G)|0,n=n+Math.imul(p,Q)|0,n=n+Math.imul(M,G)|0,e=e+Math.imul(M,Q)|0,h=h+Math.imul(m,W)|0,n=n+Math.imul(m,X)|0,n=n+Math.imul(f,W)|0,e=e+Math.imul(f,X)|0;var wt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,h=Math.imul(k,F),n=Math.imul(k,C),n=n+Math.imul(A,F)|0,e=Math.imul(A,C),h=h+Math.imul(y,H)|0,n=n+Math.imul(y,J)|0,n=n+Math.imul(b,H)|0,e=e+Math.imul(b,J)|0,h=h+Math.imul(g,G)|0,n=n+Math.imul(g,Q)|0,n=n+Math.imul(c,G)|0,e=e+Math.imul(c,Q)|0,h=h+Math.imul(p,W)|0,n=n+Math.imul(p,X)|0,n=n+Math.imul(M,W)|0,e=e+Math.imul(M,X)|0,h=h+Math.imul(m,$)|0,n=n+Math.imul(m,tt)|0,n=n+Math.imul(f,$)|0,e=e+Math.imul(f,tt)|0;var yt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,h=Math.imul(S,F),n=Math.imul(S,C),n=n+Math.imul(Z,F)|0,e=Math.imul(Z,C),h=h+Math.imul(k,H)|0,n=n+Math.imul(k,J)|0,n=n+Math.imul(A,H)|0,e=e+Math.imul(A,J)|0,h=h+Math.imul(y,G)|0,n=n+Math.imul(y,Q)|0,n=n+Math.imul(b,G)|0,e=e+Math.imul(b,Q)|0,h=h+Math.imul(g,W)|0,n=n+Math.imul(g,X)|0,n=n+Math.imul(c,W)|0,e=e+Math.imul(c,X)|0,h=h+Math.imul(p,$)|0,n=n+Math.imul(p,tt)|0,n=n+Math.imul(M,$)|0,e=e+Math.imul(M,tt)|0,h=h+Math.imul(m,rt)|0,n=n+Math.imul(m,ht)|0,n=n+Math.imul(f,rt)|0,e=e+Math.imul(f,ht)|0;var bt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,h=Math.imul(R,F),n=Math.imul(R,C),n=n+Math.imul(B,F)|0,e=Math.imul(B,C),h=h+Math.imul(S,H)|0,n=n+Math.imul(S,J)|0,n=n+Math.imul(Z,H)|0,e=e+Math.imul(Z,J)|0,h=h+Math.imul(k,G)|0,n=n+Math.imul(k,Q)|0,n=n+Math.imul(A,G)|0,e=e+Math.imul(A,Q)|0,h=h+Math.imul(y,W)|0,n=n+Math.imul(y,X)|0,n=n+Math.imul(b,W)|0,e=e+Math.imul(b,X)|0,h=h+Math.imul(g,$)|0,n=n+Math.imul(g,tt)|0,n=n+Math.imul(c,$)|0,e=e+Math.imul(c,tt)|0,h=h+Math.imul(p,rt)|0,n=n+Math.imul(p,ht)|0,n=n+Math.imul(M,rt)|0,e=e+Math.imul(M,ht)|0,h=h+Math.imul(m,et)|0,n=n+Math.imul(m,ot)|0,n=n+Math.imul(f,et)|0,e=e+Math.imul(f,ot)|0;var _t=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,h=Math.imul(L,F),n=Math.imul(L,C),n=n+Math.imul(I,F)|0,e=Math.imul(I,C),h=h+Math.imul(R,H)|0,n=n+Math.imul(R,J)|0,n=n+Math.imul(B,H)|0,e=e+Math.imul(B,J)|0,h=h+Math.imul(S,G)|0,n=n+Math.imul(S,Q)|0,n=n+Math.imul(Z,G)|0,e=e+Math.imul(Z,Q)|0,h=h+Math.imul(k,W)|0,n=n+Math.imul(k,X)|0,n=n+Math.imul(A,W)|0,e=e+Math.imul(A,X)|0,h=h+Math.imul(y,$)|0,n=n+Math.imul(y,tt)|0,n=n+Math.imul(b,$)|0,e=e+Math.imul(b,tt)|0,h=h+Math.imul(g,rt)|0,n=n+Math.imul(g,ht)|0,n=n+Math.imul(c,rt)|0,e=e+Math.imul(c,ht)|0,h=h+Math.imul(p,et)|0,n=n+Math.imul(p,ot)|0,n=n+Math.imul(M,et)|0,e=e+Math.imul(M,ot)|0,h=h+Math.imul(m,ut)|0,n=n+Math.imul(m,at)|0,n=n+Math.imul(f,ut)|0,e=e+Math.imul(f,at)|0;var kt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,h=Math.imul(T,F),n=Math.imul(T,C),n=n+Math.imul(E,F)|0,e=Math.imul(E,C),h=h+Math.imul(L,H)|0,n=n+Math.imul(L,J)|0,n=n+Math.imul(I,H)|0,e=e+Math.imul(I,J)|0,h=h+Math.imul(R,G)|0,n=n+Math.imul(R,Q)|0,n=n+Math.imul(B,G)|0,e=e+Math.imul(B,Q)|0,h=h+Math.imul(S,W)|0,n=n+Math.imul(S,X)|0,n=n+Math.imul(Z,W)|0,e=e+Math.imul(Z,X)|0,h=h+Math.imul(k,$)|0,n=n+Math.imul(k,tt)|0,n=n+Math.imul(A,$)|0,e=e+Math.imul(A,tt)|0,h=h+Math.imul(y,rt)|0,n=n+Math.imul(y,ht)|0,n=n+Math.imul(b,rt)|0,e=e+Math.imul(b,ht)|0,h=h+Math.imul(g,et)|0,n=n+Math.imul(g,ot)|0,n=n+Math.imul(c,et)|0,e=e+Math.imul(c,ot)|0,h=h+Math.imul(p,ut)|0,n=n+Math.imul(p,at)|0,n=n+Math.imul(M,ut)|0,e=e+Math.imul(M,at)|0,h=h+Math.imul(m,mt)|0,n=n+Math.imul(m,ft)|0,n=n+Math.imul(f,mt)|0,e=e+Math.imul(f,ft)|0;var At=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(At>>>26)|0,At&=67108863,h=Math.imul(j,F),n=Math.imul(j,C),n=n+Math.imul(K,F)|0,e=Math.imul(K,C),h=h+Math.imul(T,H)|0,n=n+Math.imul(T,J)|0,n=n+Math.imul(E,H)|0,e=e+Math.imul(E,J)|0,h=h+Math.imul(L,G)|0,n=n+Math.imul(L,Q)|0,n=n+Math.imul(I,G)|0,e=e+Math.imul(I,Q)|0,h=h+Math.imul(R,W)|0,n=n+Math.imul(R,X)|0,n=n+Math.imul(B,W)|0,e=e+Math.imul(B,X)|0,h=h+Math.imul(S,$)|0,n=n+Math.imul(S,tt)|0,n=n+Math.imul(Z,$)|0,e=e+Math.imul(Z,tt)|0,h=h+Math.imul(k,rt)|0,n=n+Math.imul(k,ht)|0,n=n+Math.imul(A,rt)|0,e=e+Math.imul(A,ht)|0,h=h+Math.imul(y,et)|0,n=n+Math.imul(y,ot)|0,n=n+Math.imul(b,et)|0,e=e+Math.imul(b,ot)|0,h=h+Math.imul(g,ut)|0,n=n+Math.imul(g,at)|0,n=n+Math.imul(c,ut)|0,e=e+Math.imul(c,at)|0,h=h+Math.imul(p,mt)|0,n=n+Math.imul(p,ft)|0,n=n+Math.imul(M,mt)|0,e=e+Math.imul(M,ft)|0,h=h+Math.imul(m,pt)|0,n=n+Math.imul(m,Mt)|0,n=n+Math.imul(f,pt)|0,e=e+Math.imul(f,Mt)|0;var xt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,h=Math.imul(j,H),n=Math.imul(j,J),n=n+Math.imul(K,H)|0,e=Math.imul(K,J),h=h+Math.imul(T,G)|0,n=n+Math.imul(T,Q)|0,n=n+Math.imul(E,G)|0,e=e+Math.imul(E,Q)|0,h=h+Math.imul(L,W)|0,n=n+Math.imul(L,X)|0,n=n+Math.imul(I,W)|0,e=e+Math.imul(I,X)|0,h=h+Math.imul(R,$)|0,n=n+Math.imul(R,tt)|0,n=n+Math.imul(B,$)|0,e=e+Math.imul(B,tt)|0,h=h+Math.imul(S,rt)|0,n=n+Math.imul(S,ht)|0,n=n+Math.imul(Z,rt)|0,e=e+Math.imul(Z,ht)|0,h=h+Math.imul(k,et)|0,n=n+Math.imul(k,ot)|0,n=n+Math.imul(A,et)|0,e=e+Math.imul(A,ot)|0,h=h+Math.imul(y,ut)|0,n=n+Math.imul(y,at)|0,n=n+Math.imul(b,ut)|0,e=e+Math.imul(b,at)|0,h=h+Math.imul(g,mt)|0,n=n+Math.imul(g,ft)|0,n=n+Math.imul(c,mt)|0,e=e+Math.imul(c,ft)|0,h=h+Math.imul(p,pt)|0,n=n+Math.imul(p,Mt)|0,n=n+Math.imul(M,pt)|0,e=e+Math.imul(M,Mt)|0;var St=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(St>>>26)|0,St&=67108863,h=Math.imul(j,G),n=Math.imul(j,Q),n=n+Math.imul(K,G)|0,e=Math.imul(K,Q),h=h+Math.imul(T,W)|0,n=n+Math.imul(T,X)|0,n=n+Math.imul(E,W)|0,e=e+Math.imul(E,X)|0,h=h+Math.imul(L,$)|0,n=n+Math.imul(L,tt)|0,n=n+Math.imul(I,$)|0,e=e+Math.imul(I,tt)|0,h=h+Math.imul(R,rt)|0,n=n+Math.imul(R,ht)|0,n=n+Math.imul(B,rt)|0,e=e+Math.imul(B,ht)|0,h=h+Math.imul(S,et)|0,n=n+Math.imul(S,ot)|0,n=n+Math.imul(Z,et)|0,e=e+Math.imul(Z,ot)|0,h=h+Math.imul(k,ut)|0,n=n+Math.imul(k,at)|0,n=n+Math.imul(A,ut)|0,e=e+Math.imul(A,at)|0,h=h+Math.imul(y,mt)|0,n=n+Math.imul(y,ft)|0,n=n+Math.imul(b,mt)|0,e=e+Math.imul(b,ft)|0,h=h+Math.imul(g,pt)|0,n=n+Math.imul(g,Mt)|0,n=n+Math.imul(c,pt)|0,e=e+Math.imul(c,Mt)|0;var Zt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(Zt>>>26)|0,Zt&=67108863,h=Math.imul(j,W),n=Math.imul(j,X),n=n+Math.imul(K,W)|0,e=Math.imul(K,X),h=h+Math.imul(T,$)|0,n=n+Math.imul(T,tt)|0,n=n+Math.imul(E,$)|0,e=e+Math.imul(E,tt)|0,h=h+Math.imul(L,rt)|0,n=n+Math.imul(L,ht)|0,n=n+Math.imul(I,rt)|0,e=e+Math.imul(I,ht)|0,h=h+Math.imul(R,et)|0,n=n+Math.imul(R,ot)|0,n=n+Math.imul(B,et)|0,e=e+Math.imul(B,ot)|0,h=h+Math.imul(S,ut)|0,n=n+Math.imul(S,at)|0,n=n+Math.imul(Z,ut)|0,e=e+Math.imul(Z,at)|0,h=h+Math.imul(k,mt)|0,n=n+Math.imul(k,ft)|0,n=n+Math.imul(A,mt)|0,e=e+Math.imul(A,ft)|0,h=h+Math.imul(y,pt)|0,n=n+Math.imul(y,Mt)|0,n=n+Math.imul(b,pt)|0,e=e+Math.imul(b,Mt)|0;var qt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(qt>>>26)|0,qt&=67108863,h=Math.imul(j,$),n=Math.imul(j,tt),n=n+Math.imul(K,$)|0,e=Math.imul(K,tt),h=h+Math.imul(T,rt)|0,n=n+Math.imul(T,ht)|0,n=n+Math.imul(E,rt)|0,e=e+Math.imul(E,ht)|0,h=h+Math.imul(L,et)|0,n=n+Math.imul(L,ot)|0,n=n+Math.imul(I,et)|0,e=e+Math.imul(I,ot)|0,h=h+Math.imul(R,ut)|0,n=n+Math.imul(R,at)|0,n=n+Math.imul(B,ut)|0,e=e+Math.imul(B,at)|0,h=h+Math.imul(S,mt)|0,n=n+Math.imul(S,ft)|0,n=n+Math.imul(Z,mt)|0,e=e+Math.imul(Z,ft)|0,h=h+Math.imul(k,pt)|0,n=n+Math.imul(k,Mt)|0,n=n+Math.imul(A,pt)|0,e=e+Math.imul(A,Mt)|0;var Rt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,h=Math.imul(j,rt),n=Math.imul(j,ht),n=n+Math.imul(K,rt)|0,e=Math.imul(K,ht),h=h+Math.imul(T,et)|0,n=n+Math.imul(T,ot)|0,n=n+Math.imul(E,et)|0,e=e+Math.imul(E,ot)|0,h=h+Math.imul(L,ut)|0,n=n+Math.imul(L,at)|0,n=n+Math.imul(I,ut)|0,e=e+Math.imul(I,at)|0,h=h+Math.imul(R,mt)|0,n=n+Math.imul(R,ft)|0,n=n+Math.imul(B,mt)|0,e=e+Math.imul(B,ft)|0,h=h+Math.imul(S,pt)|0,n=n+Math.imul(S,Mt)|0,n=n+Math.imul(Z,pt)|0,e=e+Math.imul(Z,Mt)|0;var Bt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,h=Math.imul(j,et),n=Math.imul(j,ot),n=n+Math.imul(K,et)|0,e=Math.imul(K,ot),h=h+Math.imul(T,ut)|0,n=n+Math.imul(T,at)|0,n=n+Math.imul(E,ut)|0,e=e+Math.imul(E,at)|0,h=h+Math.imul(L,mt)|0,n=n+Math.imul(L,ft)|0,n=n+Math.imul(I,mt)|0,e=e+Math.imul(I,ft)|0,h=h+Math.imul(R,pt)|0,n=n+Math.imul(R,Mt)|0,n=n+Math.imul(B,pt)|0,e=e+Math.imul(B,Mt)|0;var Nt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,h=Math.imul(j,ut),n=Math.imul(j,at),n=n+Math.imul(K,ut)|0,e=Math.imul(K,at),h=h+Math.imul(T,mt)|0,n=n+Math.imul(T,ft)|0,n=n+Math.imul(E,mt)|0,e=e+Math.imul(E,ft)|0,h=h+Math.imul(L,pt)|0,n=n+Math.imul(L,Mt)|0,n=n+Math.imul(I,pt)|0,e=e+Math.imul(I,Mt)|0;var Lt=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,h=Math.imul(j,mt),n=Math.imul(j,ft),n=n+Math.imul(K,mt)|0,e=Math.imul(K,ft),h=h+Math.imul(T,pt)|0,n=n+Math.imul(T,Mt)|0,n=n+Math.imul(E,pt)|0,e=e+Math.imul(E,Mt)|0;var It=(a+h|0)+((8191&n)<<13)|0;a=(e+(n>>>13)|0)+(It>>>26)|0,It&=67108863,h=Math.imul(j,pt),n=Math.imul(j,Mt),n=n+Math.imul(K,pt)|0,e=Math.imul(K,Mt);var zt=(a+h|0)+((8191&n)<<13)|0;return a=(e+(n>>>13)|0)+(zt>>>26)|0,zt&=67108863,u[0]=vt,u[1]=gt,u[2]=ct,u[3]=wt,u[4]=yt,u[5]=bt,u[6]=_t,u[7]=kt,u[8]=At,u[9]=xt,u[10]=St,u[11]=Zt,u[12]=qt,u[13]=Rt,u[14]=Bt,u[15]=Nt,u[16]=Lt,u[17]=It,u[18]=zt,0!==a&&(u[19]=a,r.length++),r};Math.imul||(k=u),n.prototype.mulTo=function(t,i){var r=this.length+t.length;return 10===this.length&&10===t.length?k(this,t,i):r<63?u(this,t,i):r<1024?a(this,t,i):l(this,t,i)},m.prototype.makeRBT=function(t){for(var i=new Array(t),r=n.prototype._countBits(t)-1,h=0;h<t;h++)i[h]=this.revBin(h,r,t);return i},m.prototype.revBin=function(t,i,r){if(0===t||t===r-1)return t;for(var h=0,n=0;n<i;n++)h|=(1&t)<<i-n-1,t>>=1;return h},m.prototype.permute=function(t,i,r,h,n,e){for(var o=0;o<e;o++)h[o]=i[t[o]],n[o]=r[t[o]]},m.prototype.transform=function(t,i,r,h,n,e){this.permute(e,t,i,r,h,n);for(var o=1;o<n;o<<=1)for(var s=o<<1,u=Math.cos(2*Math.PI/s),a=Math.sin(2*Math.PI/s),l=0;l<n;l+=s)for(var m=u,f=a,d=0;d<o;d++){var p=r[l+d],M=h[l+d],v=r[l+d+o],g=h[l+d+o],c=m*v-f*g;g=m*g+f*v,v=c,r[l+d]=p+v,h[l+d]=M+g,r[l+d+o]=p-v,h[l+d+o]=M-g,d!==s&&(c=u*m-a*f,f=u*f+a*m,m=c)}},m.prototype.guessLen13b=function(t,i){var r=1|Math.max(i,t),h=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+h},m.prototype.conjugate=function(t,i,r){if(!(r<=1))for(var h=0;h<r/2;h++){var n=t[h];t[h]=t[r-h-1],t[r-h-1]=n,n=i[h],i[h]=-i[r-h-1],i[r-h-1]=-n}},m.prototype.normalize13b=function(t,i){for(var r=0,h=0;h<i/2;h++){var n=8192*Math.round(t[2*h+1]/i)+Math.round(t[2*h]/i)+r;t[h]=67108863&n,r=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,i,h,n){for(var e=0,o=0;o<i;o++)e+=0|t[o],h[2*o]=8191&e,e>>>=13,h[2*o+1]=8191&e,e>>>=13;for(o=2*i;o<n;++o)h[o]=0;r(0===e),r(0==(e&-8192))},m.prototype.stub=function(t){for(var i=new Array(t),r=0;r<t;r++)i[r]=0;return i},m.prototype.mulp=function(t,i,r){var h=2*this.guessLen13b(t.length,i.length),n=this.makeRBT(h),e=this.stub(h),o=new Array(h),s=new Array(h),u=new Array(h),a=new Array(h),l=new Array(h),m=new Array(h),f=r.words;f.length=h,this.convert13b(t.words,t.length,o,h),this.convert13b(i.words,i.length,a,h),this.transform(o,e,s,u,h,n),this.transform(a,e,l,m,h,n);for(var d=0;d<h;d++){var p=s[d]*l[d]-u[d]*m[d];u[d]=s[d]*m[d]+u[d]*l[d],s[d]=p}return this.conjugate(s,u,h),this.transform(s,u,f,e,h,n),this.conjugate(f,e,h),this.normalize13b(f,h),r.negative=t.negative^i.negative,r.length=t.length+i.length,r.strip()},n.prototype.mul=function(t){var i=new n(null);return i.words=new Array(this.length+t.length),this.mulTo(t,i)},n.prototype.mulf=function(t){var i=new n(null);return i.words=new Array(this.length+t.length),l(this,t,i)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var i=0,h=0;h<this.length;h++){var n=(0|this.words[h])*t,e=(67108863&n)+(67108863&i);i>>=26,i+=n/67108864|0,i+=e>>>26,this.words[h]=67108863&e}return 0!==i&&(this.words[h]=i,this.length++),this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var i=s(t);if(0===i.length)return new n(1);for(var r=this,h=0;h<i.length&&0===i[h];h++,r=r.sqr());if(++h<i.length)for(var e=r.sqr();h<i.length;h++,e=e.sqr())0!==i[h]&&(r=r.mul(e));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var i,h=t%26,n=(t-h)/26,e=67108863>>>26-h<<26-h;if(0!==h){var o=0;for(i=0;i<this.length;i++){var s=this.words[i]&e,u=(0|this.words[i])-s<<h;this.words[i]=u|o,o=s>>>26-h}o&&(this.words[i]=o,this.length++)}if(0!==n){for(i=this.length-1;i>=0;i--)this.words[i+n]=this.words[i];for(i=0;i<n;i++)this.words[i]=0;this.length+=n}return this.strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,i,h){r("number"==typeof t&&t>=0);var n;n=i?(i-i%26)/26:0;var e=t%26,o=Math.min((t-e)/26,this.length),s=67108863^67108863>>>e<<e,u=h;if(n-=o,n=Math.max(0,n),u){for(var a=0;a<o;a++)u.words[a]=this.words[a];u.length=o}if(0===o);else if(this.length>o)for(this.length-=o,a=0;a<this.length;a++)this.words[a]=this.words[a+o];else this.words[0]=0,this.length=1;var l=0;for(a=this.length-1;a>=0&&(0!==l||a>=n);a--){var m=0|this.words[a];this.words[a]=l<<26-e|m>>>e,l=m&s}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},n.prototype.ishrn=function(t,i,h){return r(0===this.negative),this.iushrn(t,i,h)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var i=t%26,h=(t-i)/26,n=1<<i;return!(this.length<=h)&&!!(this.words[h]&n)},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var i=t%26,h=(t-i)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=h)return this;if(0!==i&&h++,this.length=Math.min(h,this.length),0!==i){var n=67108863^67108863>>>i<<i;this.words[this.length-1]&=n}return this.strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var i=0;i<this.length&&this.words[i]>=67108864;i++)this.words[i]-=67108864,i===this.length-1?this.words[i+1]=1:this.words[i+1]++;return this.length=Math.max(this.length,i+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var i=0;i<this.length&&this.words[i]<0;i++)this.words[i]+=67108864,this.words[i+1]-=1;return this.strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,i,h){var n,e=t.length+h;this._expand(e);var o,s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+h])+s;var u=(0|t.words[n])*i;o-=67108863&u,s=(o>>26)-(u/67108864|0),this.words[n+h]=67108863&o}for(;n<this.length-h;n++)o=(0|this.words[n+h])+s,s=o>>26,this.words[n+h]=67108863&o;if(0===s)return this.strip();for(r(s===-1),s=0,n=0;n<this.length;n++)o=-(0|this.words[n])+s,s=o>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},n.prototype._wordDiv=function(t,i){var r=this.length-t.length,h=this.clone(),e=t,o=0|e.words[e.length-1];0!==(r=26-this._countBits(o))&&(e=e.ushln(r),h.iushln(r),o=0|e.words[e.length-1]);var s,u=h.length-e.length;if("mod"!==i){s=new n(null),s.length=u+1,s.words=new Array(s.length);for(var a=0;a<s.length;a++)s.words[a]=0}var l=h.clone()._ishlnsubmul(e,1,u);0===l.negative&&(h=l,s&&(s.words[u]=1));for(var m=u-1;m>=0;m--){var f=67108864*(0|h.words[e.length+m])+(0|h.words[e.length+m-1]);for(f=Math.min(f/o|0,67108863),h._ishlnsubmul(e,f,m);0!==h.negative;)f--,h.negative=0,h._ishlnsubmul(e,1,m),h.isZero()||(h.negative^=1);s&&(s.words[m]=f)}return s&&s.strip(),h.strip(),"div"!==i&&0!==r&&h.iushrn(r),{div:s||null,mod:h}},n.prototype.divmod=function(t,i,h){if(r(!t.isZero()),this.isZero())return{div:new n(0),mod:new n(0)};var e,o,s;return 0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,i),"mod"!==i&&(e=s.div.neg()),"div"!==i&&(o=s.mod.neg(),h&&0!==o.negative&&o.iadd(t)),{div:e,mod:o}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),i),"mod"!==i&&(e=s.div.neg()),{div:e,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),i),"div"!==i&&(o=s.mod.neg(),h&&0!==o.negative&&o.isub(t)),{div:s.div,mod:o}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===i?{div:this.divn(t.words[0]),mod:null}:"mod"===i?{div:null,mod:new n(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modn(t.words[0]))}:this._wordDiv(t,i)},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var i=this.divmod(t);if(i.mod.isZero())return i.div;var r=0!==i.div.negative?i.mod.isub(t):i.mod,h=t.ushrn(1),n=t.andln(1),e=r.cmp(h)
;return e<0||1===n&&0===e?i.div:0!==i.div.negative?i.div.isubn(1):i.div.iaddn(1)},n.prototype.modn=function(t){r(t<=67108863);for(var i=(1<<26)%t,h=0,n=this.length-1;n>=0;n--)h=(i*h+(0|this.words[n]))%t;return h},n.prototype.idivn=function(t){r(t<=67108863);for(var i=0,h=this.length-1;h>=0;h--){var n=(0|this.words[h])+67108864*i;this.words[h]=n/t|0,i=n%t}return this.strip()},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var i=this,h=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var e=new n(1),o=new n(0),s=new n(0),u=new n(1),a=0;i.isEven()&&h.isEven();)i.iushrn(1),h.iushrn(1),++a;for(var l=h.clone(),m=i.clone();!i.isZero();){for(var f=0,d=1;0==(i.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(i.iushrn(f);f-- >0;)(e.isOdd()||o.isOdd())&&(e.iadd(l),o.isub(m)),e.iushrn(1),o.iushrn(1);for(var p=0,M=1;0==(h.words[0]&M)&&p<26;++p,M<<=1);if(p>0)for(h.iushrn(p);p-- >0;)(s.isOdd()||u.isOdd())&&(s.iadd(l),u.isub(m)),s.iushrn(1),u.iushrn(1);i.cmp(h)>=0?(i.isub(h),e.isub(s),o.isub(u)):(h.isub(i),s.isub(e),u.isub(o))}return{a:s,b:u,gcd:h.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var i=this,h=t.clone();i=0!==i.negative?i.umod(t):i.clone();for(var e=new n(1),o=new n(0),s=h.clone();i.cmpn(1)>0&&h.cmpn(1)>0;){for(var u=0,a=1;0==(i.words[0]&a)&&u<26;++u,a<<=1);if(u>0)for(i.iushrn(u);u-- >0;)e.isOdd()&&e.iadd(s),e.iushrn(1);for(var l=0,m=1;0==(h.words[0]&m)&&l<26;++l,m<<=1);if(l>0)for(h.iushrn(l);l-- >0;)o.isOdd()&&o.iadd(s),o.iushrn(1);i.cmp(h)>=0?(i.isub(h),e.isub(o)):(h.isub(i),o.isub(e))}var f;return f=0===i.cmpn(1)?e:o,f.cmpn(0)<0&&f.iadd(t),f},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var i=this.clone(),r=t.clone();i.negative=0,r.negative=0;for(var h=0;i.isEven()&&r.isEven();h++)i.iushrn(1),r.iushrn(1);for(;;){for(;i.isEven();)i.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=i.cmp(r);if(n<0){var e=i;i=r,r=e}else if(0===n||0===r.cmpn(1))break;i.isub(r)}return r.iushln(h)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var i=t%26,h=(t-i)/26,n=1<<i;if(this.length<=h)return this._expand(h+1),this.words[h]|=n,this;for(var e=n,o=h;0!==e&&o<this.length;o++){var s=0|this.words[o];s+=e,e=s>>>26,s&=67108863,this.words[o]=s}return 0!==e&&(this.words[o]=e,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;this.strip();var h;if(this.length>1)h=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];h=n===t?0:n<t?-1:1}return 0!==this.negative?0|-h:h},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var i=this.ucmp(t);return 0!==this.negative?0|-i:i},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var i=0,r=this.length-1;r>=0;r--){var h=0|this.words[r],n=0|t.words[r];if(h!==n){h<n?i=-1:h>n&&(i=1);break}}return i},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return this.cmpn(t)===-1},n.prototype.lt=function(t){return this.cmp(t)===-1},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new g(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var A={k256:null,p224:null,p192:null,p25519:null};f.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},f.prototype.ireduce=function(t){var i,r=t;do{this.split(r,this.tmp),r=this.imulK(r),r=r.iadd(this.tmp),i=r.bitLength()}while(i>this.n);var h=i<this.n?-1:r.ucmp(this.p);return 0===h?(r.words[0]=0,r.length=1):h>0?r.isub(this.p):r.strip(),r},f.prototype.split=function(t,i){t.iushrn(this.n,0,i)},f.prototype.imulK=function(t){return t.imul(this.k)},h(d,f),d.prototype.split=function(t,i){for(var r=Math.min(t.length,9),h=0;h<r;h++)i.words[h]=t.words[h];if(i.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(i.words[i.length++]=4194303&n,h=10;h<t.length;h++){var e=0|t.words[h];t.words[h-10]=(4194303&e)<<4|n>>>22,n=e}n>>>=22,t.words[h-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},d.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var i=0,r=0;r<t.length;r++){var h=0|t.words[r];i+=977*h,t.words[r]=67108863&i,i=64*h+(i/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},h(p,f),h(M,f),h(v,f),v.prototype.imulK=function(t){for(var i=0,r=0;r<t.length;r++){var h=19*(0|t.words[r])+i,n=67108863&h;h>>>=26,t.words[r]=n,i=h}return 0!==i&&(t.words[t.length++]=i),t},n._prime=function t(i){if(A[i])return A[i];var t;if("k256"===i)t=new d;else if("p224"===i)t=new p;else if("p192"===i)t=new M;else{if("p25519"!==i)throw new Error("Unknown prime "+i);t=new v}return A[i]=t,t},g.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},g.prototype._verify2=function(t,i){r(0==(t.negative|i.negative),"red works only with positives"),r(t.red&&t.red===i.red,"red works only with red numbers")},g.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},g.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},g.prototype.add=function(t,i){this._verify2(t,i);var r=t.add(i);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},g.prototype.iadd=function(t,i){this._verify2(t,i);var r=t.iadd(i);return r.cmp(this.m)>=0&&r.isub(this.m),r},g.prototype.sub=function(t,i){this._verify2(t,i);var r=t.sub(i);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},g.prototype.isub=function(t,i){this._verify2(t,i);var r=t.isub(i);return r.cmpn(0)<0&&r.iadd(this.m),r},g.prototype.shl=function(t,i){return this._verify1(t),this.imod(t.ushln(i))},g.prototype.imul=function(t,i){return this._verify2(t,i),this.imod(t.imul(i))},g.prototype.mul=function(t,i){return this._verify2(t,i),this.imod(t.mul(i))},g.prototype.isqr=function(t){return this.imul(t,t.clone())},g.prototype.sqr=function(t){return this.mul(t,t)},g.prototype.sqrt=function(t){if(t.isZero())return t.clone();var i=this.m.andln(3);if(r(i%2==1),3===i){var h=this.m.add(new n(1)).iushrn(2);return this.pow(t,h)}for(var e=this.m.subn(1),o=0;!e.isZero()&&0===e.andln(1);)o++,e.iushrn(1);r(!e.isZero());var s=new n(1).toRed(this),u=s.redNeg(),a=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new n(2*l*l).toRed(this);0!==this.pow(l,a).cmp(u);)l.redIAdd(u);for(var m=this.pow(l,e),f=this.pow(t,e.addn(1).iushrn(1)),d=this.pow(t,e),p=o;0!==d.cmp(s);){for(var M=d,v=0;0!==M.cmp(s);v++)M=M.redSqr();r(v<p);var g=this.pow(m,new n(1).iushln(p-v-1));f=f.redMul(g),m=g.redSqr(),d=d.redMul(m),p=v}return f},g.prototype.invm=function(t){var i=t._invmp(this.m);return 0!==i.negative?(i.negative=0,this.imod(i).redNeg()):this.imod(i)},g.prototype.pow=function(t,i){if(i.isZero())return new n(1);if(0===i.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var h=2;h<r.length;h++)r[h]=this.mul(r[h-1],t);var e=r[0],o=0,s=0,u=i.bitLength()%26;for(0===u&&(u=26),h=i.length-1;h>=0;h--){for(var a=i.words[h],l=u-1;l>=0;l--){var m=a>>l&1;e!==r[0]&&(e=this.sqr(e)),0!==m||0!==o?(o<<=1,o|=m,(4===++s||0===h&&0===l)&&(e=this.mul(e,r[o]),s=0,o=0)):s=0}u=26}return e},g.prototype.convertTo=function(t){var i=t.umod(this.m);return i===t?i.clone():i},g.prototype.convertFrom=function(t){var i=t.clone();return i.red=null,i},n.mont=function(t){return new c(t)},h(c,g),c.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},c.prototype.convertFrom=function(t){var i=this.imod(t.mul(this.rinv));return i.red=null,i},c.prototype.imul=function(t,i){if(t.isZero()||i.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(i),h=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(h).iushrn(this.shift),e=n;return n.cmp(this.m)>=0?e=n.isub(this.m):n.cmpn(0)<0&&(e=n.iadd(this.m)),e._forceRed(this)},c.prototype.mul=function(t,i){if(t.isZero()||i.isZero())return new n(0)._forceRed(this);var r=t.mul(i),h=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),e=r.isub(h).iushrn(this.shift),o=e;return e.cmp(this.m)>=0?o=e.isub(this.m):e.cmpn(0)<0&&(o=e.iadd(this.m)),o._forceRed(this)},c.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}("undefined"==typeof module||module,this);

},{"buffer":104}],74:[function(require,module,exports){
function Rand(t){this.rand=t}var r;if(module.exports=function(t){return r||(r=new Rand(null)),r.generate(t)},module.exports.Rand=Rand,Rand.prototype.generate=function(t){return this._rand(t)},Rand.prototype._rand=function(t){if(this.rand.getBytes)return this.rand.getBytes(t);for(var r=new Uint8Array(t),e=0;e<r.length;e++)r[e]=this.rand.getByte();return r},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?Rand.prototype._rand=function(t){var r=new Uint8Array(t);return self.crypto.getRandomValues(r),r}:self.msCrypto&&self.msCrypto.getRandomValues?Rand.prototype._rand=function(t){var r=new Uint8Array(t);return self.msCrypto.getRandomValues(r),r}:"object"==typeof window&&(Rand.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var crypto=require("crypto");if("function"!=typeof crypto.randomBytes)throw new Error("Not supported");Rand.prototype._rand=function(t){return crypto.randomBytes(t)}}catch(t){}

},{"crypto":75}],75:[function(require,module,exports){

},{}],76:[function(require,module,exports){
module.exports=function(e){var t=String.prototype.split,n=/()??/.exec("")[1]===e;return function(l,r,i){if("[object RegExp]"!==Object.prototype.toString.call(r))return t.call(l,r,i);var o,p,s,c,g=[],u=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.extended?"x":"")+(r.sticky?"y":""),x=0,r=new RegExp(r.source,u+"g");for(l+="",n||(o=new RegExp("^"+r.source+"$(?!\\s)",u)),i=i===e?-1>>>0:i>>>0;(p=r.exec(l))&&!((s=p.index+p[0].length)>x&&(g.push(l.slice(x,p.index)),!n&&p.length>1&&p[0].replace(o,function(){for(var t=1;t<arguments.length-2;t++)arguments[t]===e&&(p[t]=e)}),p.length>1&&p.index<l.length&&Array.prototype.push.apply(g,p.slice(1)),c=p[0].length,x=s,g.length>=i));)r.lastIndex===p.index&&r.lastIndex++;return x===l.length?!c&&r.test("")||g.push(""):g.push(l.slice(x)),g.length>i?g.slice(0,i):g}}();

},{}],77:[function(require,module,exports){
(function (Buffer){
function fixup_uint32(t){var e;return t>uint_max||t<0?(e=Math.abs(t)%uint_max,t<0?uint_max-e:e):t}function scrub_vec(t){for(;0<t.length;t++)t[0]=0;return!1}function Global(){this.SBOX=[],this.INV_SBOX=[],this.SUB_MIX=[[],[],[],[]],this.INV_SUB_MIX=[[],[],[],[]],this.init(),this.RCON=[0,1,2,4,8,16,32,64,128,27,54]}function bufferToArray(t){for(var e=t.length/4,i=new Array(e),r=-1;++r<e;)i[r]=t.readUInt32BE(4*r);return i}function AES(t){this._key=bufferToArray(t),this._doReset()}var uint_max=Math.pow(2,32);Global.prototype.init=function(){var t,e,i,r,n,S,u,_,o,h;for(t=function(){var t,i;for(i=[],e=t=0;t<256;e=++t)e<128?i.push(e<<1):i.push(e<<1^283);return i}(),n=0,o=0,e=h=0;h<256;e=++h)i=o^o<<1^o<<2^o<<3^o<<4,i=i>>>8^255&i^99,this.SBOX[n]=i,this.INV_SBOX[i]=n,S=t[n],u=t[S],_=t[u],r=257*t[i]^16843008*i,this.SUB_MIX[0][n]=r<<24|r>>>8,this.SUB_MIX[1][n]=r<<16|r>>>16,this.SUB_MIX[2][n]=r<<8|r>>>24,this.SUB_MIX[3][n]=r,r=16843009*_^65537*u^257*S^16843008*n,this.INV_SUB_MIX[0][i]=r<<24|r>>>8,this.INV_SUB_MIX[1][i]=r<<16|r>>>16,this.INV_SUB_MIX[2][i]=r<<8|r>>>24,this.INV_SUB_MIX[3][i]=r,0===n?n=o=1:(n=S^t[t[t[_^S]]],o^=t[t[o]]);return!0};var G=new Global;AES.blockSize=16,AES.prototype.blockSize=AES.blockSize,AES.keySize=32,AES.prototype.keySize=AES.keySize,AES.prototype._doReset=function(){var t,e,i,r,n,S;for(i=this._key,e=i.length,this._nRounds=e+6,n=4*(this._nRounds+1),this._keySchedule=[],r=0;r<n;r++)this._keySchedule[r]=r<e?i[r]:(S=this._keySchedule[r-1],r%e==0?(S=S<<8|S>>>24,S=G.SBOX[S>>>24]<<24|G.SBOX[S>>>16&255]<<16|G.SBOX[S>>>8&255]<<8|G.SBOX[255&S],S^=G.RCON[r/e|0]<<24):e>6&&r%e==4&&(S=G.SBOX[S>>>24]<<24|G.SBOX[S>>>16&255]<<16|G.SBOX[S>>>8&255]<<8|G.SBOX[255&S]),this._keySchedule[r-e]^S);for(this._invKeySchedule=[],t=0;t<n;t++)r=n-t,S=this._keySchedule[r-(t%4?0:4)],this._invKeySchedule[t]=t<4||r<=4?S:G.INV_SUB_MIX[0][G.SBOX[S>>>24]]^G.INV_SUB_MIX[1][G.SBOX[S>>>16&255]]^G.INV_SUB_MIX[2][G.SBOX[S>>>8&255]]^G.INV_SUB_MIX[3][G.SBOX[255&S]];return!0},AES.prototype.encryptBlock=function(t){t=bufferToArray(new Buffer(t));var e=this._doCryptBlock(t,this._keySchedule,G.SUB_MIX,G.SBOX),i=new Buffer(16);return i.writeUInt32BE(e[0],0),i.writeUInt32BE(e[1],4),i.writeUInt32BE(e[2],8),i.writeUInt32BE(e[3],12),i},AES.prototype.decryptBlock=function(t){t=bufferToArray(new Buffer(t));var e=[t[3],t[1]];t[1]=e[0],t[3]=e[1];var i=this._doCryptBlock(t,this._invKeySchedule,G.INV_SUB_MIX,G.INV_SBOX),r=new Buffer(16);return r.writeUInt32BE(i[0],0),r.writeUInt32BE(i[3],4),r.writeUInt32BE(i[2],8),r.writeUInt32BE(i[1],12),r},AES.prototype.scrub=function(){scrub_vec(this._keySchedule),scrub_vec(this._invKeySchedule),scrub_vec(this._key)},AES.prototype._doCryptBlock=function(t,e,i,r){var n,S,u,_,o,h,B,s,c;S=t[0]^e[0],u=t[1]^e[1],_=t[2]^e[2],o=t[3]^e[3],n=4;for(var f=1;f<this._nRounds;f++)h=i[0][S>>>24]^i[1][u>>>16&255]^i[2][_>>>8&255]^i[3][255&o]^e[n++],B=i[0][u>>>24]^i[1][_>>>16&255]^i[2][o>>>8&255]^i[3][255&S]^e[n++],s=i[0][_>>>24]^i[1][o>>>16&255]^i[2][S>>>8&255]^i[3][255&u]^e[n++],c=i[0][o>>>24]^i[1][S>>>16&255]^i[2][u>>>8&255]^i[3][255&_]^e[n++],S=h,u=B,_=s,o=c;return h=(r[S>>>24]<<24|r[u>>>16&255]<<16|r[_>>>8&255]<<8|r[255&o])^e[n++],B=(r[u>>>24]<<24|r[_>>>16&255]<<16|r[o>>>8&255]<<8|r[255&S])^e[n++],s=(r[_>>>24]<<24|r[o>>>16&255]<<16|r[S>>>8&255]<<8|r[255&u])^e[n++],c=(r[o>>>24]<<24|r[S>>>16&255]<<16|r[u>>>8&255]<<8|r[255&_])^e[n++],[fixup_uint32(h),fixup_uint32(B),fixup_uint32(s),fixup_uint32(c)]},exports.AES=AES;

}).call(this,require("buffer").Buffer)

},{"buffer":104}],78:[function(require,module,exports){
(function (Buffer){
function StreamCipher(t,e,r,h){if(!(this instanceof StreamCipher))return new StreamCipher(t,e,r);Transform.call(this),this._finID=Buffer.concat([r,new Buffer([0,0,0,1])]),r=Buffer.concat([r,new Buffer([0,0,0,2])]),this._cipher=new aes.AES(e),this._prev=new Buffer(r.length),this._cache=new Buffer(""),this._secCache=new Buffer(""),this._decrypt=h,this._alen=0,this._len=0,r.copy(this._prev),this._mode=t;var i=new Buffer(4);i.fill(0),this._ghash=new GHASH(this._cipher.encryptBlock(i)),this._authTag=null,this._called=!1}function xorTest(t,e){var r=0;t.length!==e.length&&r++;for(var h=Math.min(t.length,e.length),i=-1;++i<h;)r+=t[i]^e[i];return r}var aes=require("./aes"),Transform=require("cipher-base"),inherits=require("inherits"),GHASH=require("./ghash"),xor=require("buffer-xor");inherits(StreamCipher,Transform),module.exports=StreamCipher,StreamCipher.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=new Buffer(e),e.fill(0),this._ghash.update(e))}this._called=!0;var r=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(r),this._len+=t.length,r},StreamCipher.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=xor(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt){if(xorTest(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data")}else this._authTag=t;this._cipher.scrub()},StreamCipher.prototype.getAuthTag=function(){if(!this._decrypt&&Buffer.isBuffer(this._authTag))return this._authTag;throw new Error("Attempting to get auth tag in unsupported state")},StreamCipher.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},StreamCipher.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length};

}).call(this,require("buffer").Buffer)

},{"./aes":77,"./ghash":82,"buffer":104,"buffer-xor":103,"cipher-base":105,"inherits":159}],79:[function(require,module,exports){
function getCiphers(){return Object.keys(modes)}var ciphers=require("./encrypter");exports.createCipher=exports.Cipher=ciphers.createCipher,exports.createCipheriv=exports.Cipheriv=ciphers.createCipheriv;var deciphers=require("./decrypter");exports.createDecipher=exports.Decipher=deciphers.createDecipher,exports.createDecipheriv=exports.Decipheriv=deciphers.createDecipheriv;var modes=require("./modes");exports.listCiphers=exports.getCiphers=getCiphers;

},{"./decrypter":80,"./encrypter":81,"./modes":83}],80:[function(require,module,exports){
(function (Buffer){
function Decipher(e,r,t){if(!(this instanceof Decipher))return new Decipher(e,r,t);Transform.call(this),this._cache=new Splitter,this._last=void 0,this._cipher=new aes.AES(r),this._prev=new Buffer(t.length),t.copy(this._prev),this._mode=e,this._autopadding=!0}function Splitter(){if(!(this instanceof Splitter))return new Splitter;this.cache=new Buffer("")}function unpad(e){for(var r=e[15],t=-1;++t<r;)if(e[t+(16-r)]!==r)throw new Error("unable to decrypt data");if(16!==r)return e.slice(0,16-r)}function createDecipheriv(e,r,t){var i=modes[e.toLowerCase()];if(!i)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=new Buffer(t)),"string"==typeof r&&(r=new Buffer(r)),r.length!==i.key/8)throw new TypeError("invalid key length "+r.length);if(t.length!==i.iv)throw new TypeError("invalid iv length "+t.length);return"stream"===i.type?new StreamCipher(modelist[i.mode],r,t,!0):"auth"===i.type?new AuthCipher(modelist[i.mode],r,t,!0):new Decipher(modelist[i.mode],r,t)}function createDecipher(e,r){var t=modes[e.toLowerCase()];if(!t)throw new TypeError("invalid suite type");var i=ebtk(r,!1,t.key,t.iv);return createDecipheriv(e,i.key,i.iv)}var aes=require("./aes"),Transform=require("cipher-base"),inherits=require("inherits"),modes=require("./modes"),StreamCipher=require("./streamCipher"),AuthCipher=require("./authCipher"),ebtk=require("evp_bytestokey");inherits(Decipher,Transform),Decipher.prototype._update=function(e){this._cache.add(e);for(var r,t,i=[];r=this._cache.get(this._autopadding);)t=this._mode.decrypt(this,r),i.push(t);return Buffer.concat(i)},Decipher.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return unpad(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},Decipher.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},Splitter.prototype.add=function(e){this.cache=Buffer.concat([this.cache,e])},Splitter.prototype.get=function(e){var r;if(e){if(this.cache.length>16)return r=this.cache.slice(0,16),this.cache=this.cache.slice(16),r}else if(this.cache.length>=16)return r=this.cache.slice(0,16),this.cache=this.cache.slice(16),r;return null},Splitter.prototype.flush=function(){if(this.cache.length)return this.cache};var modelist={ECB:require("./modes/ecb"),CBC:require("./modes/cbc"),CFB:require("./modes/cfb"),CFB8:require("./modes/cfb8"),CFB1:require("./modes/cfb1"),OFB:require("./modes/ofb"),CTR:require("./modes/ctr"),GCM:require("./modes/ctr")};exports.createDecipher=createDecipher,exports.createDecipheriv=createDecipheriv;

}).call(this,require("buffer").Buffer)

},{"./aes":77,"./authCipher":78,"./modes":83,"./modes/cbc":84,"./modes/cfb":85,"./modes/cfb1":86,"./modes/cfb8":87,"./modes/ctr":88,"./modes/ecb":89,"./modes/ofb":90,"./streamCipher":91,"buffer":104,"cipher-base":105,"evp_bytestokey":146,"inherits":159}],81:[function(require,module,exports){
(function (Buffer){
function Cipher(e,r,t){if(!(this instanceof Cipher))return new Cipher(e,r,t);Transform.call(this),this._cache=new Splitter,this._cipher=new aes.AES(r),this._prev=new Buffer(t.length),t.copy(this._prev),this._mode=e,this._autopadding=!0}function Splitter(){if(!(this instanceof Splitter))return new Splitter;this.cache=new Buffer("")}function createCipheriv(e,r,t){var i=modes[e.toLowerCase()];if(!i)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=new Buffer(t)),"string"==typeof r&&(r=new Buffer(r)),r.length!==i.key/8)throw new TypeError("invalid key length "+r.length);if(t.length!==i.iv)throw new TypeError("invalid iv length "+t.length);return"stream"===i.type?new StreamCipher(modelist[i.mode],r,t):"auth"===i.type?new AuthCipher(modelist[i.mode],r,t):new Cipher(modelist[i.mode],r,t)}function createCipher(e,r){var t=modes[e.toLowerCase()];if(!t)throw new TypeError("invalid suite type");var i=ebtk(r,!1,t.key,t.iv);return createCipheriv(e,i.key,i.iv)}var aes=require("./aes"),Transform=require("cipher-base"),inherits=require("inherits"),modes=require("./modes"),ebtk=require("evp_bytestokey"),StreamCipher=require("./streamCipher"),AuthCipher=require("./authCipher");inherits(Cipher,Transform),Cipher.prototype._update=function(e){this._cache.add(e);for(var r,t,i=[];r=this._cache.get();)t=this._mode.encrypt(this,r),i.push(t);return Buffer.concat(i)},Cipher.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if("10101010101010101010101010101010"!==e.toString("hex"))throw this._cipher.scrub(),new Error("data not multiple of block length")},Cipher.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},Splitter.prototype.add=function(e){this.cache=Buffer.concat([this.cache,e])},Splitter.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},Splitter.prototype.flush=function(){for(var e=16-this.cache.length,r=new Buffer(e),t=-1;++t<e;)r.writeUInt8(e,t);return Buffer.concat([this.cache,r])};var modelist={ECB:require("./modes/ecb"),CBC:require("./modes/cbc"),CFB:require("./modes/cfb"),CFB8:require("./modes/cfb8"),CFB1:require("./modes/cfb1"),OFB:require("./modes/ofb"),CTR:require("./modes/ctr"),GCM:require("./modes/ctr")};exports.createCipheriv=createCipheriv,exports.createCipher=createCipher;

}).call(this,require("buffer").Buffer)

},{"./aes":77,"./authCipher":78,"./modes":83,"./modes/cbc":84,"./modes/cfb":85,"./modes/cfb1":86,"./modes/cfb8":87,"./modes/ctr":88,"./modes/ecb":89,"./modes/ofb":90,"./streamCipher":91,"buffer":104,"cipher-base":105,"evp_bytestokey":146,"inherits":159}],82:[function(require,module,exports){
(function (Buffer){
function GHASH(t){this.h=t,this.state=new Buffer(16),this.state.fill(0),this.cache=new Buffer("")}function toArray(t){return[t.readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)]}function fromArray(t){t=t.map(fixup_uint32);var r=new Buffer(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r}function fixup_uint32(t){var r;return t>uint_max||t<0?(r=Math.abs(t)%uint_max,t<0?uint_max-r:r):t}function xor(t,r){return[t[0]^r[0],t[1]^r[1],t[2]^r[2],t[3]^r[3]]}var zeros=new Buffer(16);zeros.fill(0),module.exports=GHASH,GHASH.prototype.ghash=function(t){for(var r=-1;++r<t.length;)this.state[r]^=t[r];this._multiply()},GHASH.prototype._multiply=function(){for(var t,r,e,i=toArray(this.h),a=[0,0,0,0],n=-1;++n<128;){for(r=0!=(this.state[~~(n/8)]&1<<7-n%8),r&&(a=xor(a,i)),e=0!=(1&i[3]),t=3;t>0;t--)i[t]=i[t]>>>1|(1&i[t-1])<<31;i[0]=i[0]>>>1,e&&(i[0]=i[0]^225<<24)}this.state=fromArray(a)},GHASH.prototype.update=function(t){this.cache=Buffer.concat([this.cache,t]);for(var r;this.cache.length>=16;)r=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(r)},GHASH.prototype.final=function(t,r){return this.cache.length&&this.ghash(Buffer.concat([this.cache,zeros],16)),this.ghash(fromArray([0,t,0,r])),this.state};var uint_max=Math.pow(2,32);

}).call(this,require("buffer").Buffer)

},{"buffer":104}],83:[function(require,module,exports){
exports["aes-128-ecb"]={cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},exports["aes-192-ecb"]={cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},exports["aes-256-ecb"]={cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},exports["aes-128-cbc"]={cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},exports["aes-192-cbc"]={cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},exports["aes-256-cbc"]={cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},exports.aes128=exports["aes-128-cbc"],exports.aes192=exports["aes-192-cbc"],exports.aes256=exports["aes-256-cbc"],exports["aes-128-cfb"]={cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},exports["aes-192-cfb"]={cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},exports["aes-256-cfb"]={cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},exports["aes-128-cfb8"]={cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},exports["aes-192-cfb8"]={cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},exports["aes-256-cfb8"]={cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},exports["aes-128-cfb1"]={cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},exports["aes-192-cfb1"]={cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},exports["aes-256-cfb1"]={cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},exports["aes-128-ofb"]={cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},exports["aes-192-ofb"]={cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},exports["aes-256-ofb"]={cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},exports["aes-128-ctr"]={cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},exports["aes-192-ctr"]={cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},exports["aes-256-ctr"]={cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},exports["aes-128-gcm"]={cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},exports["aes-192-gcm"]={cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},exports["aes-256-gcm"]={cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"};

},{}],84:[function(require,module,exports){
var xor=require("buffer-xor");exports.encrypt=function(r,e){var p=xor(e,r._prev);return r._prev=r._cipher.encryptBlock(p),r._prev},exports.decrypt=function(r,e){var p=r._prev;return r._prev=e,xor(r._cipher.decryptBlock(e),p)};

},{"buffer-xor":103}],85:[function(require,module,exports){
(function (Buffer){
function encryptStart(e,r,c){var t=r.length,n=xor(r,e._cache);return e._cache=e._cache.slice(t),e._prev=Buffer.concat([e._prev,c?r:n]),n}var xor=require("buffer-xor");exports.encrypt=function(e,r,c){for(var t,n=new Buffer("");r.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=new Buffer("")),!(e._cache.length<=r.length)){n=Buffer.concat([n,encryptStart(e,r,c)]);break}t=e._cache.length,n=Buffer.concat([n,encryptStart(e,r.slice(0,t),c)]),r=r.slice(t)}return n};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"buffer-xor":103}],86:[function(require,module,exports){
(function (Buffer){
function encryptByte(r,e,n){for(var t,f,c,u=-1,o=0;++u<8;)t=r._cipher.encryptBlock(r._prev),f=e&1<<7-u?128:0,c=t[0]^f,o+=(128&c)>>u%8,r._prev=shiftIn(r._prev,n?f:c);return o}function shiftIn(r,e){var n=r.length,t=-1,f=new Buffer(r.length);for(r=Buffer.concat([r,new Buffer([e])]);++t<n;)f[t]=r[t]<<1|r[t+1]>>7;return f}exports.encrypt=function(r,e,n){for(var t=e.length,f=new Buffer(t),c=-1;++c<t;)f[c]=encryptByte(r,e[c],n);return f};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],87:[function(require,module,exports){
(function (Buffer){
function encryptByte(e,r,n){var t=e._cipher.encryptBlock(e._prev),c=t[0]^r;return e._prev=Buffer.concat([e._prev.slice(1),new Buffer([n?r:c])]),c}exports.encrypt=function(e,r,n){for(var t=r.length,c=new Buffer(t),f=-1;++f<t;)c[f]=encryptByte(e,r[f],n);return c};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],88:[function(require,module,exports){
(function (Buffer){
function incr32(e){for(var r,c=e.length;c--;){if(255!==(r=e.readUInt8(c))){r++,e.writeUInt8(r,c);break}e.writeUInt8(0,c)}}function getBlock(e){var r=e._cipher.encryptBlock(e._prev);return incr32(e._prev),r}var xor=require("buffer-xor");exports.encrypt=function(e,r){for(;e._cache.length<r.length;)e._cache=Buffer.concat([e._cache,getBlock(e)]);var c=e._cache.slice(0,r.length);return e._cache=e._cache.slice(r.length),xor(r,c)};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"buffer-xor":103}],89:[function(require,module,exports){
exports.encrypt=function(r,c){return r._cipher.encryptBlock(c)},exports.decrypt=function(r,c){return r._cipher.decryptBlock(c)};

},{}],90:[function(require,module,exports){
(function (Buffer){
function getBlock(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}var xor=require("buffer-xor");exports.encrypt=function(e,c){for(;e._cache.length<c.length;)e._cache=Buffer.concat([e._cache,getBlock(e)]);var r=e._cache.slice(0,c.length);return e._cache=e._cache.slice(c.length),xor(c,r)};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"buffer-xor":103}],91:[function(require,module,exports){
(function (Buffer){
function StreamCipher(e,r,t,i){if(!(this instanceof StreamCipher))return new StreamCipher(e,r,t);Transform.call(this),this._cipher=new aes.AES(r),this._prev=new Buffer(t.length),this._cache=new Buffer(""),this._secCache=new Buffer(""),this._decrypt=i,t.copy(this._prev),this._mode=e}var aes=require("./aes"),Transform=require("cipher-base");require("inherits")(StreamCipher,Transform),module.exports=StreamCipher,StreamCipher.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},StreamCipher.prototype._final=function(){this._cipher.scrub()};

}).call(this,require("buffer").Buffer)

},{"./aes":77,"buffer":104,"cipher-base":105,"inherits":159}],92:[function(require,module,exports){
function createCipher(e,r){var s,i;if(e=e.toLowerCase(),aesModes[e])s=aesModes[e].key,i=aesModes[e].iv;else{if(!desModes[e])throw new TypeError("invalid suite type");s=8*desModes[e].key,i=desModes[e].iv}var t=ebtk(r,!1,s,i);return createCipheriv(e,t.key,t.iv)}function createDecipher(e,r){var s,i;if(e=e.toLowerCase(),aesModes[e])s=aesModes[e].key,i=aesModes[e].iv;else{if(!desModes[e])throw new TypeError("invalid suite type");s=8*desModes[e].key,i=desModes[e].iv}var t=ebtk(r,!1,s,i);return createDecipheriv(e,t.key,t.iv)}function createCipheriv(e,r,s){if(e=e.toLowerCase(),aesModes[e])return aes.createCipheriv(e,r,s);if(desModes[e])return new DES({key:r,iv:s,mode:e});throw new TypeError("invalid suite type")}function createDecipheriv(e,r,s){if(e=e.toLowerCase(),aesModes[e])return aes.createDecipheriv(e,r,s);if(desModes[e])return new DES({key:r,iv:s,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}function getCiphers(){return Object.keys(desModes).concat(aes.getCiphers())}var ebtk=require("evp_bytestokey"),aes=require("browserify-aes/browser"),DES=require("browserify-des"),desModes=require("browserify-des/modes"),aesModes=require("browserify-aes/modes");exports.createCipher=exports.Cipher=createCipher,exports.createCipheriv=exports.Cipheriv=createCipheriv,exports.createDecipher=exports.Decipher=createDecipher,exports.createDecipheriv=exports.Decipheriv=createDecipheriv,exports.listCiphers=exports.getCiphers=getCiphers;

},{"browserify-aes/browser":79,"browserify-aes/modes":83,"browserify-des":93,"browserify-des/modes":94,"evp_bytestokey":146}],93:[function(require,module,exports){
(function (Buffer){
function DES(e){CipherBase.call(this);var s,d=e.mode.toLowerCase(),t=modes[d];s=e.decrypt?"decrypt":"encrypt";var r=e.key;"des-ede"!==d&&"des-ede-cbc"!==d||(r=Buffer.concat([r,r.slice(0,8)]));var i=e.iv;this._des=t.create({key:r,iv:i,type:s})}var CipherBase=require("cipher-base"),des=require("des.js"),inherits=require("inherits"),modes={"des-ede3-cbc":des.CBC.instantiate(des.EDE),"des-ede3":des.EDE,"des-ede-cbc":des.CBC.instantiate(des.EDE),"des-ede":des.EDE,"des-cbc":des.CBC.instantiate(des.DES),"des-ecb":des.DES};modes.des=modes["des-cbc"],modes.des3=modes["des-ede3-cbc"],module.exports=DES,inherits(DES,CipherBase),DES.prototype._update=function(e){return new Buffer(this._des.update(e))},DES.prototype._final=function(){return new Buffer(this._des.final())};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"cipher-base":105,"des.js":113,"inherits":159}],94:[function(require,module,exports){
exports["des-ecb"]={key:8,iv:0},exports["des-cbc"]=exports.des={key:8,iv:8},exports["des-ede3-cbc"]=exports.des3={key:24,iv:8},exports["des-ede3"]={key:24,iv:0},exports["des-ede-cbc"]={key:16,iv:8},exports["des-ede"]={key:16,iv:0};

},{}],95:[function(require,module,exports){
(function (Buffer){
function blind(e){var n=getr(e);return{blinder:n.toRed(bn.mont(e.modulus)).redPow(new bn(e.publicExponent)).fromRed(),unblinder:n.invm(e.modulus)}}function crt(e,n){var r=blind(n),o=n.modulus.byteLength(),u=(bn.mont(n.modulus),new bn(e).mul(r.blinder).umod(n.modulus)),m=u.toRed(bn.mont(n.prime1)),d=u.toRed(bn.mont(n.prime2)),t=n.coefficient,i=n.prime1,b=n.prime2,l=m.redPow(n.exponent1),s=d.redPow(n.exponent2);l=l.fromRed(),s=s.fromRed();var p=l.isub(s).imul(t).umod(i);return p.imul(b),s.iadd(p),new Buffer(s.imul(r.unblinder).umod(n.modulus).toArray(!1,o))}function getr(e){for(var n=e.modulus.byteLength(),r=new bn(randomBytes(n));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new bn(randomBytes(n));return r}var bn=require("bn.js"),randomBytes=require("randombytes");module.exports=crt,crt.getr=getr;

}).call(this,require("buffer").Buffer)

},{"bn.js":73,"buffer":104,"randombytes":181}],96:[function(require,module,exports){
(function (Buffer){
"use strict";exports["RSA-SHA224"]=exports.sha224WithRSAEncryption={sign:"rsa",hash:"sha224",id:new Buffer("302d300d06096086480165030402040500041c","hex")},exports["RSA-SHA256"]=exports.sha256WithRSAEncryption={sign:"rsa",hash:"sha256",id:new Buffer("3031300d060960864801650304020105000420","hex")},exports["RSA-SHA384"]=exports.sha384WithRSAEncryption={sign:"rsa",hash:"sha384",id:new Buffer("3041300d060960864801650304020205000430","hex")},exports["RSA-SHA512"]=exports.sha512WithRSAEncryption={sign:"rsa",hash:"sha512",id:new Buffer("3051300d060960864801650304020305000440","hex")},exports["RSA-SHA1"]={sign:"rsa",hash:"sha1",id:new Buffer("3021300906052b0e03021a05000414","hex")},exports["ecdsa-with-SHA1"]={sign:"ecdsa",hash:"sha1",id:new Buffer("","hex")},exports.DSA=exports["DSA-SHA1"]=exports["DSA-SHA"]={sign:"dsa",hash:"sha1",id:new Buffer("","hex")},exports["DSA-SHA224"]=exports["DSA-WITH-SHA224"]={sign:"dsa",hash:"sha224",id:new Buffer("","hex")},exports["DSA-SHA256"]=exports["DSA-WITH-SHA256"]={sign:"dsa",hash:"sha256",id:new Buffer("","hex")},exports["DSA-SHA384"]=exports["DSA-WITH-SHA384"]={sign:"dsa",hash:"sha384",id:new Buffer("","hex")},exports["DSA-SHA512"]=exports["DSA-WITH-SHA512"]={sign:"dsa",hash:"sha512",id:new Buffer("","hex")},exports["DSA-RIPEMD160"]={sign:"dsa",hash:"rmd160",id:new Buffer("","hex")},exports["RSA-RIPEMD160"]=exports.ripemd160WithRSA={sign:"rsa",hash:"rmd160",id:new Buffer("3021300906052b2403020105000414","hex")},exports["RSA-MD5"]=exports.md5WithRSAEncryption={sign:"rsa",hash:"md5",id:new Buffer("3020300c06082a864886f70d020505000410","hex")};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],97:[function(require,module,exports){
(function (Buffer){
function Sign(e){stream.Writable.call(this);var t=algos[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=createHash(t.hash),this._tag=t.id,this._signType=t.sign}function Verify(e){stream.Writable.call(this);var t=algos[e];if(!t)throw new Error("Unknown message digest");this._hash=createHash(t.hash),this._tag=t.id,this._signType=t.sign}function createSign(e){return new Sign(e)}function createVerify(e){return new Verify(e)}var _algos=require("./algos"),createHash=require("create-hash"),inherits=require("inherits"),sign=require("./sign"),stream=require("stream"),verify=require("./verify"),algos={};Object.keys(_algos).forEach(function(e){algos[e]=algos[e.toLowerCase()]=_algos[e]}),inherits(Sign,stream.Writable),Sign.prototype._write=function(e,t,i){this._hash.update(e),i()},Sign.prototype.update=function(e,t){return"string"==typeof e&&(e=new Buffer(e,t)),this._hash.update(e),this},Sign.prototype.sign=function(e,t){this.end();var i=this._hash.digest(),r=sign(Buffer.concat([this._tag,i]),e,this._hashType,this._signType);return t?r.toString(t):r},inherits(Verify,stream.Writable),Verify.prototype._write=function(e,t,i){this._hash.update(e),i()},Verify.prototype.update=function(e,t){return"string"==typeof e&&(e=new Buffer(e,t)),this._hash.update(e),this},Verify.prototype.verify=function(e,t,i){"string"==typeof t&&(t=new Buffer(t,i)),this.end();var r=this._hash.digest();return verify(t,Buffer.concat([this._tag,r]),e,this._signType)},module.exports={Sign:createSign,Verify:createVerify,createSign:createSign,createVerify:createVerify};

}).call(this,require("buffer").Buffer)

},{"./algos":96,"./sign":99,"./verify":100,"buffer":104,"create-hash":108,"inherits":159,"stream":202}],98:[function(require,module,exports){
"use strict";exports["1.3.132.0.10"]="secp256k1",exports["1.3.132.0.33"]="p224",exports["1.2.840.10045.3.1.1"]="p192",exports["1.2.840.10045.3.1.7"]="p256",exports["1.3.132.0.34"]="p384",exports["1.3.132.0.35"]="p521";

},{}],99:[function(require,module,exports){
(function (Buffer){
function sign(e,r,t,n){var a=parseKeys(r);if(a.curve){if("ecdsa"!==n)throw new Error("wrong private key type");return ecSign(e,a)}if("dsa"===a.type){if("dsa"!==n)throw new Error("wrong private key type");return dsaSign(e,a,t)}if("rsa"!==n)throw new Error("wrong private key type");for(var i=a.modulus.byteLength(),u=[0,1];e.length+u.length+1<i;)u.push(255);u.push(0);for(var o=-1;++o<e.length;)u.push(e[o]);return crt(u,a)}function ecSign(e,r){var t=curves[r.curve.join(".")];if(!t)throw new Error("unknown curve "+r.curve.join("."));var n=new EC(t),a=n.genKeyPair();a._importPrivate(r.privateKey);var i=a.sign(e);return new Buffer(i.toDER())}function dsaSign(e,r,t){for(var n,a=r.params.priv_key,i=r.params.p,u=r.params.q,o=r.params.g,c=new BN(0),f=bits2int(e,u).mod(u),s=!1,g=getKey(a,u,e,t);s===!1;)n=makeKey(u,g,t),c=makeR(o,n,i,u),s=n.invm(u).imul(f.add(a.mul(c))).mod(u),s.cmpn(0)||(s=!1,c=new BN(0));return toDER(c,s)}function toDER(e,r){e=e.toArray(),r=r.toArray(),128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r));var t=e.length+r.length+4,n=[48,t,2,e.length];return n=n.concat(e,[2,r.length],r),new Buffer(n)}function getKey(e,r,t,n){if(e=new Buffer(e.toArray()),e.length<r.byteLength()){var a=new Buffer(r.byteLength()-e.length);a.fill(0),e=Buffer.concat([a,e])}var i=t.length,u=bits2octets(t,r),o=new Buffer(i);o.fill(1);var c=new Buffer(i);return c.fill(0),c=createHmac(n,c).update(o).update(new Buffer([0])).update(e).update(u).digest(),o=createHmac(n,c).update(o).digest(),c=createHmac(n,c).update(o).update(new Buffer([1])).update(e).update(u).digest(),o=createHmac(n,c).update(o).digest(),{k:c,v:o}}function bits2int(e,r){var t=new BN(e),n=(e.length<<3)-r.bitLength();return n>0&&t.ishrn(n),t}function bits2octets(e,r){e=bits2int(e,r),e=e.mod(r);var t=new Buffer(e.toArray());if(t.length<r.byteLength()){var n=new Buffer(r.byteLength()-t.length);n.fill(0),t=Buffer.concat([n,t])}return t}function makeKey(e,r,t){var n,a;do{for(n=new Buffer("");8*n.length<e.bitLength();)r.v=createHmac(t,r.k).update(r.v).digest(),n=Buffer.concat([n,r.v]);a=bits2int(n,e),r.k=createHmac(t,r.k).update(r.v).update(new Buffer([0])).digest(),r.v=createHmac(t,r.k).update(r.v).digest()}while(a.cmp(e)!==-1);return a}function makeR(e,r,t,n){return e.toRed(BN.mont(t)).redPow(r).fromRed().mod(n)}var createHmac=require("create-hmac"),crt=require("browserify-rsa"),curves=require("./curves"),elliptic=require("elliptic"),parseKeys=require("parse-asn1"),BN=require("bn.js"),EC=elliptic.ec;module.exports=sign,module.exports.getKey=getKey,module.exports.makeKey=makeKey;

}).call(this,require("buffer").Buffer)

},{"./curves":98,"bn.js":73,"browserify-rsa":95,"buffer":104,"create-hmac":111,"elliptic":128,"parse-asn1":169}],100:[function(require,module,exports){
(function (Buffer){
function verify(e,r,t,n){var o=parseKeys(t);if("ec"===o.type){if("ecdsa"!==n)throw new Error("wrong public key type");return ecVerify(e,r,o)}if("dsa"===o.type){if("dsa"!==n)throw new Error("wrong public key type");return dsaVerify(e,r,o)}if("rsa"!==n)throw new Error("wrong public key type");for(var a=o.modulus.byteLength(),i=[1],u=0;r.length+i.length+2<a;)i.push(255),u++;i.push(0);for(var d=-1;++d<r.length;)i.push(r[d]);i=new Buffer(i);var c=BN.mont(o.modulus);e=new BN(e).toRed(c),e=e.redPow(new BN(o.publicExponent)),e=new Buffer(e.fromRed().toArray());var l=0;for(u<8&&(l=1),a=Math.min(e.length,i.length),e.length!==i.length&&(l=1),d=-1;++d<a;)l|=e[d]^i[d];return 0===l}function ecVerify(e,r,t){var n=curves[t.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+t.data.algorithm.curve.join("."));var o=new EC(n),a=t.data.subjectPrivateKey.data;return o.verify(r,e,a)}function dsaVerify(e,r,t){var n=t.data.p,o=t.data.q,a=t.data.g,i=t.data.pub_key,u=parseKeys.signature.decode(e,"der"),d=u.s,c=u.r;checkValue(d,o),checkValue(c,o);var l=BN.mont(n),f=d.invm(o);return!a.toRed(l).redPow(new BN(r).mul(f).mod(o)).fromRed().mul(i.toRed(l).redPow(c.mul(f).mod(o)).fromRed()).mod(n).mod(o).cmp(c)}function checkValue(e,r){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(r)>=r)throw new Error("invalid sig")}var curves=require("./curves"),elliptic=require("elliptic"),parseKeys=require("parse-asn1"),BN=require("bn.js"),EC=elliptic.ec;module.exports=verify;

}).call(this,require("buffer").Buffer)

},{"./curves":98,"bn.js":73,"buffer":104,"elliptic":128,"parse-asn1":169}],101:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":27}],102:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a)return decodeRaw(a)}function decode(e){var a=base58.decode(e),d=decodeRaw(a);if(!d)throw new Error("Invalid checksum");return d}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":101,"buffer":104,"create-hash":108}],103:[function(require,module,exports){
(function (Buffer){
module.exports=function(e,n){for(var r=Math.min(e.length,n.length),t=new Buffer(r),f=0;f<r;++f)t[f]=e[f]^n[f];return t};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],104:[function(require,module,exports){
"use strict";function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}function createBuffer(e){if(e>K_MAX_LENGTH)throw new RangeError("Invalid typed array length");var t=new Uint8Array(e);return t.__proto__=Buffer.prototype,t}function Buffer(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(e)}return from(e,t,r)}function from(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return e instanceof ArrayBuffer?fromArrayBuffer(e,t,r):"string"==typeof e?fromString(e,t):fromObject(e)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r){return assertSize(e),e<=0?createBuffer(e):void 0!==t?"string"==typeof r?createBuffer(e).fill(t,r):createBuffer(e).fill(t):createBuffer(e)}function allocUnsafe(e){return assertSize(e),createBuffer(e<0?0:0|checked(e))}function fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(e,t),n=createBuffer(r),f=n.write(e,t);return f!==r&&(n=n.slice(0,f)),n}function fromArrayLike(e){for(var t=e.length<0?0:0|checked(e.length),r=createBuffer(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError("'offset' is out of bounds");if(e.byteLength<t+(r||0))throw new RangeError("'length' is out of bounds");var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),n.__proto__=Buffer.prototype,n}function fromObject(e){if(Buffer.isBuffer(e)){var t=0|checked(e.length),r=createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(e){if(isArrayBufferView(e)||"length"in e)return"number"!=typeof e.length||numberIsNaN(e.length)?createBuffer(0):fromArrayLike(e);if("Buffer"===e.type&&Array.isArray(e.data))return fromArrayLike(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|e}function SlowBuffer(e){return+e!=e&&(e=0),Buffer.alloc(+e)}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if(isArrayBufferView(e)||e instanceof ArrayBuffer)return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if(r>>>=0,t>>>=0,r<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,f){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,numberIsNaN(r)&&(r=f?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(f)return-1;r=e.length-1}else if(r<0){if(!f)return-1;r=0}if("string"==typeof t&&(t=Buffer.from(t,n)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,f);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?f?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,f);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,f){function i(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}var o=1,u=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,u/=2,s/=2,r/=2}var a;if(f){var h=-1;for(a=r;a<u;a++)if(i(e,a)===i(t,h===-1?0:a-h)){if(h===-1&&(h=a),a-h+1===s)return h*o}else h!==-1&&(a-=a-h),h=-1}else for(r+s>u&&(r=u-s),a=r;a>=0;a--){for(var c=!0,l=0;l<s;l++)if(i(e,a+l)!==i(t,l)){c=!1;break}if(c)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var f=e.length-r;n?(n=Number(n))>f&&(n=f):n=f;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var o=0;o<n;++o){var u=parseInt(t.substr(2*o,2),16);if(numberIsNaN(u))return o;e[r+o]=u}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?base64.fromByteArray(e):base64.fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],f=t;f<r;){var i=e[f],o=null,u=i>239?4:i>223?3:i>191?2:1;if(f+u<=r){var s,a,h,c;switch(u){case 1:i<128&&(o=i);break;case 2:s=e[f+1],128==(192&s)&&(c=(31&i)<<6|63&s)>127&&(o=c);break;case 3:s=e[f+1],a=e[f+2],128==(192&s)&&128==(192&a)&&(c=(15&i)<<12|(63&s)<<6|63&a)>2047&&(c<55296||c>57343)&&(o=c);break;case 4:s=e[f+1],a=e[f+2],h=e[f+3],128==(192&s)&&128==(192&a)&&128==(192&h)&&(c=(15&i)<<18|(63&s)<<12|(63&a)<<6|63&h)>65535&&c<1114112&&(o=c)}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),f+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(127&e[f]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(e[f]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var f="",i=t;i<r;++i)f+=toHex(e[i]);return f}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),f="",i=0;i<n.length;i+=2)f+=String.fromCharCode(n[i]+256*n[i+1]);return f}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,f,i){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>f||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function checkIEEE754(e,t,r,n,f,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(e,t,r,n,52,8),r+8}function base64clean(e){if(e=e.trim().replace(INVALID_BASE64_RE,""),e.length<2)return"";for(;e.length%4!=0;)e+="=";return e}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){t=t||1/0;for(var r,n=e.length,f=null,i=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!f){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}f=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),f=r;continue}r=65536+(f-55296<<10|r-56320)}else f&&(t-=3)>-1&&i.push(239,191,189);if(f=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,f,i=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,f=r%256,i.push(f),i.push(n);return i}function base64ToBytes(e){return base64.toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var f=0;f<n&&!(f+r>=t.length||f>=e.length);++f)t[f+r]=e[f];return f}function isArrayBufferView(e){return"function"==typeof ArrayBuffer.isView&&ArrayBuffer.isView(e)}function numberIsNaN(e){return e!==e}var base64=require("base64-js"),ieee754=require("ieee754");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH,Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),Buffer.poolSize=8192,Buffer.from=function(e,t,r){return from(e,t,r)},Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,Buffer.alloc=function(e,t,r){return alloc(e,t,r)},Buffer.allocUnsafe=function(e){return allocUnsafe(e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)},Buffer.isBuffer=function(e){return null!=e&&e._isBuffer===!0},Buffer.compare=function(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,f=0,i=Math.min(r,n);f<i;++f)if(e[f]!==t[f]){r=e[f],n=t[f];break}return r<n?-1:n<r?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer.allocUnsafe(t),f=0;for(r=0;r<e.length;++r){var i=e[r];if(!Buffer.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,f),f+=i.length}return n},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=exports.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,r,n,f){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===f&&(f=this.length),t<0||r>e.length||n<0||f>this.length)throw new RangeError("out of range index");if(n>=f&&t>=r)return 0;if(n>=f)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,f>>>=0,this===e)return 0;for(var i=f-n,o=r-t,u=Math.min(i,o),s=this.slice(n,f),a=e.slice(t,r),h=0;h<u;++h)if(s[h]!==a[h]){i=s[h],o=a[h];break}return i<o?-1:o<i?1:0},Buffer.prototype.includes=function(e,t,r){return this.indexOf(e,t,r)!==-1},Buffer.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(e,t){var r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=Buffer.prototype,n},Buffer.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n},Buffer.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],f=1;t>0&&(f*=256);)n+=this[e+--t]*f;return n},Buffer.prototype.readUInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return f*=128,n>=f&&(n-=Math.pow(2,8*t)),n},Buffer.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=t,f=1,i=this[e+--n];n>0&&(f*=256);)i+=this[e+--n]*f;return f*=128,i>=f&&(i-=Math.pow(2,8*t)),i},Buffer.prototype.readInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),128&this[e]?(255-this[e]+1)*-1:this[e]},Buffer.prototype.readInt16LE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=1,i=0;for(this[t]=255&e;++i<r&&(f*=256);)this[t+i]=e/f&255;return t+r},Buffer.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=r-1,i=1;for(this[t+f]=255&e;--f>=0&&(i*=256);)this[t+f]=e/i&255;return t+r},Buffer.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,255,0),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Buffer.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=0,o=1,u=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=r-1,o=1,u=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Buffer.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var f,i=n-r;if(this===e&&r<t&&t<n)for(f=i-1;f>=0;--f)e[f+t]=this[f+r];else if(i<1e3)for(f=0;f<i;++f)e[f+t]=this[f+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},Buffer.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var f=e.charCodeAt(0);f<256&&(e=f)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var i;if("number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var o=Buffer.isBuffer(e)?e:new Buffer(e,n),u=o.length;for(i=0;i<r-t;++i)this[i+t]=o[i%u]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;

},{"base64-js":28,"ieee754":155}],105:[function(require,module,exports){
(function (Buffer){
function CipherBase(t){Transform.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._decoder=null,this._encoding=null}var Transform=require("stream").Transform,inherits=require("inherits"),StringDecoder=require("string_decoder").StringDecoder;module.exports=CipherBase,inherits(CipherBase,Transform),CipherBase.prototype.update=function(t,e,r){"string"==typeof t&&(t=new Buffer(t,e));var i=this._update(t);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},CipherBase.prototype.setAutoPadding=function(){},CipherBase.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},CipherBase.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},CipherBase.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},CipherBase.prototype._transform=function(t,e,r){var i;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){i=t}finally{r(i)}},CipherBase.prototype._flush=function(t){var e;try{this.push(this._final())}catch(t){e=t}finally{t(e)}},CipherBase.prototype._finalOrDigest=function(t){var e=this._final()||new Buffer("");return t&&(e=this._toString(e,t,!0)),e},CipherBase.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new StringDecoder(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var i=this._decoder.write(t);return r&&(i+=this._decoder.end()),i};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"inherits":159,"stream":202,"string_decoder":203}],106:[function(require,module,exports){
(function (Buffer){
function isArray(r){return Array.isArray?Array.isArray(r):"[object Array]"===objectToString(r)}function isBoolean(r){return"boolean"==typeof r}function isNull(r){return null===r}function isNullOrUndefined(r){return null==r}function isNumber(r){return"number"==typeof r}function isString(r){return"string"==typeof r}function isSymbol(r){return"symbol"==typeof r}function isUndefined(r){return void 0===r}function isRegExp(r){return"[object RegExp]"===objectToString(r)}function isObject(r){return"object"==typeof r&&null!==r}function isDate(r){return"[object Date]"===objectToString(r)}function isError(r){return"[object Error]"===objectToString(r)||r instanceof Error}function isFunction(r){return"function"==typeof r}function isPrimitive(r){return null===r||"boolean"==typeof r||"number"==typeof r||"string"==typeof r||"symbol"==typeof r||void 0===r}function objectToString(r){return Object.prototype.toString.call(r)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=Buffer.isBuffer;

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":160}],107:[function(require,module,exports){
(function (Buffer){
function ECDH(e){this.curveType=aliases[e],this.curveType||(this.curveType={name:e}),this.curve=new elliptic.ec(this.curveType.name),this.keys=void 0}function formatReturnValue(e,t,r){Array.isArray(e)||(e=e.toArray());var i=new Buffer(e);if(r&&i.length<r){var s=new Buffer(r-i.length);s.fill(0),i=Buffer.concat([s,i])}return t?i.toString(t):i}var elliptic=require("elliptic"),BN=require("bn.js");module.exports=function(e){return new ECDH(e)};var aliases={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};aliases.p224=aliases.secp224r1,aliases.p256=aliases.secp256r1=aliases.prime256v1,aliases.p192=aliases.secp192r1=aliases.prime192v1,aliases.p384=aliases.secp384r1,aliases.p521=aliases.secp521r1,ECDH.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},ECDH.prototype.computeSecret=function(e,t,r){return t=t||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,t)),formatReturnValue(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),r,this.curveType.byteLength)},ECDH.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),formatReturnValue(r,e)},ECDH.prototype.getPrivateKey=function(e){return formatReturnValue(this.keys.getPrivate(),e)},ECDH.prototype.setPublicKey=function(e,t){return t=t||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,t)),this.keys._importPublic(e),this},ECDH.prototype.setPrivateKey=function(e,t){t=t||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,t));var r=new BN(e);return r=r.toString(16),this.keys._importPrivate(r),this};

}).call(this,require("buffer").Buffer)

},{"bn.js":73,"buffer":104,"elliptic":128}],108:[function(require,module,exports){
(function (Buffer){
"use strict";function HashNoConstructor(s){Base.call(this,"digest"),this._hash=s,this.buffers=[]}function Hash(s){Base.call(this,"digest"),this._hash=s}var inherits=require("inherits"),md5=require("./md5"),rmd160=require("ripemd160"),sha=require("sha.js"),Base=require("cipher-base");inherits(HashNoConstructor,Base),HashNoConstructor.prototype._update=function(s){this.buffers.push(s)},HashNoConstructor.prototype._final=function(){var s=Buffer.concat(this.buffers),t=this._hash(s);return this.buffers=null,t},inherits(Hash,Base),Hash.prototype._update=function(s){this._hash.update(s)},Hash.prototype._final=function(){return this._hash.digest()},module.exports=function(s){return s=s.toLowerCase(),"md5"===s?new HashNoConstructor(md5):"rmd160"===s||"ripemd160"===s?new HashNoConstructor(rmd160):new Hash(sha(s))};

}).call(this,require("buffer").Buffer)

},{"./md5":110,"buffer":104,"cipher-base":105,"inherits":159,"ripemd160":193,"sha.js":195}],109:[function(require,module,exports){
(function (Buffer){
"use strict";function toArray(r,e){if(r.length%intSize!=0){var t=r.length+(intSize-r.length%intSize);r=Buffer.concat([r,zeroBuffer],t)}for(var f=[],n=e?r.readInt32BE:r.readInt32LE,i=0;i<r.length;i+=intSize)f.push(n.call(r,i));return f}function toBuffer(r,e,t){for(var f=new Buffer(e),n=t?f.writeInt32BE:f.writeInt32LE,i=0;i<r.length;i++)n.call(f,r[i],4*i,!0);return f}function hash(r,e,t,f){return Buffer.isBuffer(r)||(r=new Buffer(r)),toBuffer(e(toArray(r,f),r.length*chrsz),t,f)}var intSize=4,zeroBuffer=new Buffer(intSize);zeroBuffer.fill(0);var chrsz=8;exports.hash=hash;

}).call(this,require("buffer").Buffer)

},{"buffer":104}],110:[function(require,module,exports){
"use strict";function core_md5(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,i=-1732584194,h=271733878,r=0;r<d.length;r+=16){var g=m,n=f,e=i,a=h;m=md5_ff(m,f,i,h,d[r+0],7,-680876936),h=md5_ff(h,m,f,i,d[r+1],12,-389564586),i=md5_ff(i,h,m,f,d[r+2],17,606105819),f=md5_ff(f,i,h,m,d[r+3],22,-1044525330),m=md5_ff(m,f,i,h,d[r+4],7,-176418897),h=md5_ff(h,m,f,i,d[r+5],12,1200080426),i=md5_ff(i,h,m,f,d[r+6],17,-1473231341),f=md5_ff(f,i,h,m,d[r+7],22,-45705983),m=md5_ff(m,f,i,h,d[r+8],7,1770035416),h=md5_ff(h,m,f,i,d[r+9],12,-1958414417),i=md5_ff(i,h,m,f,d[r+10],17,-42063),f=md5_ff(f,i,h,m,d[r+11],22,-1990404162),m=md5_ff(m,f,i,h,d[r+12],7,1804603682),h=md5_ff(h,m,f,i,d[r+13],12,-40341101),i=md5_ff(i,h,m,f,d[r+14],17,-1502002290),f=md5_ff(f,i,h,m,d[r+15],22,1236535329),m=md5_gg(m,f,i,h,d[r+1],5,-165796510),h=md5_gg(h,m,f,i,d[r+6],9,-1069501632),i=md5_gg(i,h,m,f,d[r+11],14,643717713),f=md5_gg(f,i,h,m,d[r+0],20,-373897302),m=md5_gg(m,f,i,h,d[r+5],5,-701558691),h=md5_gg(h,m,f,i,d[r+10],9,38016083),i=md5_gg(i,h,m,f,d[r+15],14,-660478335),f=md5_gg(f,i,h,m,d[r+4],20,-405537848),m=md5_gg(m,f,i,h,d[r+9],5,568446438),h=md5_gg(h,m,f,i,d[r+14],9,-1019803690),i=md5_gg(i,h,m,f,d[r+3],14,-187363961),f=md5_gg(f,i,h,m,d[r+8],20,1163531501),m=md5_gg(m,f,i,h,d[r+13],5,-1444681467),h=md5_gg(h,m,f,i,d[r+2],9,-51403784),i=md5_gg(i,h,m,f,d[r+7],14,1735328473),f=md5_gg(f,i,h,m,d[r+12],20,-1926607734),m=md5_hh(m,f,i,h,d[r+5],4,-378558),h=md5_hh(h,m,f,i,d[r+8],11,-2022574463),i=md5_hh(i,h,m,f,d[r+11],16,1839030562),f=md5_hh(f,i,h,m,d[r+14],23,-35309556),m=md5_hh(m,f,i,h,d[r+1],4,-1530992060),h=md5_hh(h,m,f,i,d[r+4],11,1272893353),i=md5_hh(i,h,m,f,d[r+7],16,-155497632),f=md5_hh(f,i,h,m,d[r+10],23,-1094730640),m=md5_hh(m,f,i,h,d[r+13],4,681279174),h=md5_hh(h,m,f,i,d[r+0],11,-358537222),i=md5_hh(i,h,m,f,d[r+3],16,-722521979),f=md5_hh(f,i,h,m,d[r+6],23,76029189),m=md5_hh(m,f,i,h,d[r+9],4,-640364487),h=md5_hh(h,m,f,i,d[r+12],11,-421815835),i=md5_hh(i,h,m,f,d[r+15],16,530742520),f=md5_hh(f,i,h,m,d[r+2],23,-995338651),m=md5_ii(m,f,i,h,d[r+0],6,-198630844),h=md5_ii(h,m,f,i,d[r+7],10,1126891415),i=md5_ii(i,h,m,f,d[r+14],15,-1416354905),f=md5_ii(f,i,h,m,d[r+5],21,-57434055),m=md5_ii(m,f,i,h,d[r+12],6,1700485571),h=md5_ii(h,m,f,i,d[r+3],10,-1894986606),i=md5_ii(i,h,m,f,d[r+10],15,-1051523),f=md5_ii(f,i,h,m,d[r+1],21,-2054922799),m=md5_ii(m,f,i,h,d[r+8],6,1873313359),h=md5_ii(h,m,f,i,d[r+15],10,-30611744),i=md5_ii(i,h,m,f,d[r+6],15,-1560198380),f=md5_ii(f,i,h,m,d[r+13],21,1309151649),m=md5_ii(m,f,i,h,d[r+4],6,-145523070),h=md5_ii(h,m,f,i,d[r+11],10,-1120210379),i=md5_ii(i,h,m,f,d[r+2],15,718787259),f=md5_ii(f,i,h,m,d[r+9],21,-343485551),m=safe_add(m,g),f=safe_add(f,n),i=safe_add(i,e),h=safe_add(h,a)}return Array(m,f,i,h)}function md5_cmn(d,_,m,f,i,h){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,h)),i),m)}function md5_ff(d,_,m,f,i,h,r){return md5_cmn(_&m|~_&f,d,_,i,h,r)}function md5_gg(d,_,m,f,i,h,r){return md5_cmn(_&f|m&~f,d,_,i,h,r)}function md5_hh(d,_,m,f,i,h,r){return md5_cmn(_^m^f,d,_,i,h,r)}function md5_ii(d,_,m,f,i,h,r){return md5_cmn(m^(_|~f),d,_,i,h,r)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}var helpers=require("./helpers");module.exports=function(d){return helpers.hash(d,core_md5,16)};

},{"./helpers":109}],111:[function(require,module,exports){
(function (Buffer){
"use strict";function Hmac(t,e){Transform.call(this),t=t.toLowerCase(),"string"==typeof e&&(e=new Buffer(e));var r="sha512"===t||"sha384"===t?128:64;this._alg=t,this._key=e,e.length>r?e=createHash(t).update(e).digest():e.length<r&&(e=Buffer.concat([e,ZEROS],r));for(var a=this._ipad=new Buffer(r),s=this._opad=new Buffer(r),i=0;i<r;i++)a[i]=54^e[i],s[i]=92^e[i];this._hash=createHash(t).update(a)}var createHash=require("create-hash/browser"),inherits=require("inherits"),Transform=require("stream").Transform,ZEROS=new Buffer(128);ZEROS.fill(0),inherits(Hmac,Transform),Hmac.prototype.update=function(t,e){return this._hash.update(t,e),this},Hmac.prototype._transform=function(t,e,r){this._hash.update(t),r()},Hmac.prototype._flush=function(t){this.push(this.digest()),t()},Hmac.prototype.digest=function(t){var e=this._hash.digest();return createHash(this._alg).update(this._opad).update(e).digest(t)},module.exports=function(t,e){return new Hmac(t,e)};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"create-hash/browser":108,"inherits":159,"stream":202}],112:[function(require,module,exports){
"use strict";exports.randomBytes=exports.rng=exports.pseudoRandomBytes=exports.prng=require("randombytes"),exports.createHash=exports.Hash=require("create-hash"),exports.createHmac=exports.Hmac=require("create-hmac");var hashes=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(Object.keys(require("browserify-sign/algos")));exports.getHashes=function(){return hashes};var p=require("pbkdf2");exports.pbkdf2=p.pbkdf2,exports.pbkdf2Sync=p.pbkdf2Sync;var aes=require("browserify-cipher");["Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers"].forEach(function(e){exports[e]=aes[e]});var dh=require("diffie-hellman");["DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman"].forEach(function(e){exports[e]=dh[e]});var sign=require("browserify-sign");["createSign","Sign","createVerify","Verify"].forEach(function(e){exports[e]=sign[e]}),exports.createECDH=require("create-ecdh");var publicEncrypt=require("public-encrypt");["publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt"].forEach(function(e){exports[e]=publicEncrypt[e]}),["createCredentials"].forEach(function(e){exports[e]=function(){throw new Error(["sorry, "+e+" is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))}});

},{"browserify-cipher":92,"browserify-sign":97,"browserify-sign/algos":96,"create-ecdh":107,"create-hash":108,"create-hmac":111,"diffie-hellman":119,"pbkdf2":170,"public-encrypt":174,"randombytes":181}],113:[function(require,module,exports){
"use strict";exports.utils=require("./des/utils"),exports.Cipher=require("./des/cipher"),exports.DES=require("./des/des"),exports.CBC=require("./des/cbc"),exports.EDE=require("./des/ede");

},{"./des/cbc":114,"./des/cipher":115,"./des/des":116,"./des/ede":117,"./des/utils":118}],114:[function(require,module,exports){
"use strict";function CBCState(t){assert.equal(t.length,8,"Invalid IV length"),this.iv=new Array(8);for(var i=0;i<this.iv.length;i++)this.iv[i]=t[i]}function instantiate(t){function i(i){t.call(this,i),this._cbcInit()}inherits(i,t);for(var e=Object.keys(proto),r=0;r<e.length;r++){var n=e[r];i.prototype[n]=proto[n]}return i.create=function(t){return new i(t)},i}var assert=require("minimalistic-assert"),inherits=require("inherits"),proto={};exports.instantiate=instantiate,proto._cbcInit=function(){var t=new CBCState(this.options.iv);this._cbcState=t},proto._update=function(t,i,e,r){var n=this._cbcState,s=this.constructor.super_.prototype,o=n.iv;if("encrypt"===this.type){for(var a=0;a<this.blockSize;a++)o[a]^=t[i+a];s._update.call(this,o,0,e,r);for(var a=0;a<this.blockSize;a++)o[a]=e[r+a]}else{s._update.call(this,t,i,e,r);for(var a=0;a<this.blockSize;a++)e[r+a]^=o[a];for(var a=0;a<this.blockSize;a++)o[a]=t[i+a]}};

},{"inherits":159,"minimalistic-assert":164}],115:[function(require,module,exports){
"use strict";function Cipher(t){this.options=t,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}var assert=require("minimalistic-assert");module.exports=Cipher,Cipher.prototype._init=function(){},Cipher.prototype.update=function(t){return 0===t.length?[]:"decrypt"===this.type?this._updateDecrypt(t):this._updateEncrypt(t)},Cipher.prototype._buffer=function(t,e){for(var r=Math.min(this.buffer.length-this.bufferOff,t.length-e),i=0;i<r;i++)this.buffer[this.bufferOff+i]=t[e+i];return this.bufferOff+=r,r},Cipher.prototype._flushBuffer=function(t,e){return this._update(this.buffer,0,t,e),this.bufferOff=0,this.blockSize},Cipher.prototype._updateEncrypt=function(t){var e=0,r=0,i=(this.bufferOff+t.length)/this.blockSize|0,f=new Array(i*this.blockSize);0!==this.bufferOff&&(e+=this._buffer(t,e),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(f,r)));for(var h=t.length-(t.length-e)%this.blockSize;e<h;e+=this.blockSize)this._update(t,e,f,r),r+=this.blockSize;for(;e<t.length;e++,this.bufferOff++)this.buffer[this.bufferOff]=t[e];return f},Cipher.prototype._updateDecrypt=function(t){for(var e=0,r=0,i=Math.ceil((this.bufferOff+t.length)/this.blockSize)-1,f=new Array(i*this.blockSize);i>0;i--)e+=this._buffer(t,e),r+=this._flushBuffer(f,r);return e+=this._buffer(t,e),f},Cipher.prototype.final=function(t){var e;t&&(e=this.update(t));var r;return r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),e?e.concat(r):r},Cipher.prototype._pad=function(t,e){if(0===e)return!1;for(;e<t.length;)t[e++]=0;return!0},Cipher.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var t=new Array(this.blockSize);return this._update(this.buffer,0,t,0),t},Cipher.prototype._unpad=function(t){return t},Cipher.prototype._finalDecrypt=function(){assert.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var t=new Array(this.blockSize);return this._flushBuffer(t,0),this._unpad(t)};

},{"minimalistic-assert":164}],116:[function(require,module,exports){
"use strict";function DESState(){this.tmp=new Array(2),this.keys=null}function DES(t){Cipher.call(this,t);var e=new DESState;this._desState=e,this.deriveKeys(e,t.key)}var assert=require("minimalistic-assert"),inherits=require("inherits"),des=require("../des"),utils=des.utils,Cipher=des.Cipher;inherits(DES,Cipher),module.exports=DES,DES.create=function(t){return new DES(t)};var shiftTable=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];DES.prototype.deriveKeys=function(t,e){t.keys=new Array(32),assert.equal(e.length,this.blockSize,"Invalid key length");var r=utils.readUInt32BE(e,0),s=utils.readUInt32BE(e,4);utils.pc1(r,s,t.tmp,0),r=t.tmp[0],s=t.tmp[1];for(var i=0;i<t.keys.length;i+=2){var n=shiftTable[i>>>1];r=utils.r28shl(r,n),s=utils.r28shl(s,n),utils.pc2(r,s,t.keys,i)}},DES.prototype._update=function(t,e,r,s){var i=this._desState,n=utils.readUInt32BE(t,e),p=utils.readUInt32BE(t,e+4);utils.ip(n,p,i.tmp,0),n=i.tmp[0],p=i.tmp[1],"encrypt"===this.type?this._encrypt(i,n,p,i.tmp,0):this._decrypt(i,n,p,i.tmp,0),n=i.tmp[0],p=i.tmp[1],utils.writeUInt32BE(r,n,s),utils.writeUInt32BE(r,p,s+4)},DES.prototype._pad=function(t,e){for(var r=t.length-e,s=e;s<t.length;s++)t[s]=r;return!0},DES.prototype._unpad=function(t){for(var e=t[t.length-1],r=t.length-e;r<t.length;r++)assert.equal(t[r],e);return t.slice(0,t.length-e)},DES.prototype._encrypt=function(t,e,r,s,i){for(var n=e,p=r,u=0;u<t.keys.length;u+=2){var l=t.keys[u],a=t.keys[u+1];utils.expand(p,t.tmp,0),l^=t.tmp[0],a^=t.tmp[1];var h=utils.substitute(l,a),o=utils.permute(h),y=p;p=(n^o)>>>0,n=y}utils.rip(p,n,s,i)},DES.prototype._decrypt=function(t,e,r,s,i){for(var n=r,p=e,u=t.keys.length-2;u>=0;u-=2){var l=t.keys[u],a=t.keys[u+1];utils.expand(n,t.tmp,0),l^=t.tmp[0],a^=t.tmp[1];var h=utils.substitute(l,a),o=utils.permute(h),y=n;n=(p^o)>>>0,p=y}utils.rip(n,p,s,i)};

},{"../des":113,"inherits":159,"minimalistic-assert":164}],117:[function(require,module,exports){
"use strict";function EDEState(e,t){assert.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),p=t.slice(8,16),i=t.slice(16,24);this.ciphers="encrypt"===e?[DES.create({type:"encrypt",key:r}),DES.create({type:"decrypt",key:p}),DES.create({type:"encrypt",key:i})]:[DES.create({type:"decrypt",key:i}),DES.create({type:"encrypt",key:p}),DES.create({type:"decrypt",key:r})]}function EDE(e){Cipher.call(this,e);var t=new EDEState(this.type,this.options.key);this._edeState=t}var assert=require("minimalistic-assert"),inherits=require("inherits"),des=require("../des"),Cipher=des.Cipher,DES=des.DES;inherits(EDE,Cipher),module.exports=EDE,EDE.create=function(e){return new EDE(e)},EDE.prototype._update=function(e,t,r,p){var i=this._edeState;i.ciphers[0]._update(e,t,r,p),i.ciphers[1]._update(r,p,r,p),i.ciphers[2]._update(r,p,r,p)},EDE.prototype._pad=DES.prototype._pad,EDE.prototype._unpad=DES.prototype._unpad;

},{"../des":113,"inherits":159,"minimalistic-assert":164}],118:[function(require,module,exports){
"use strict";exports.readUInt32BE=function(r,o){return(r[0+o]<<24|r[1+o]<<16|r[2+o]<<8|r[3+o])>>>0},exports.writeUInt32BE=function(r,o,t){r[0+t]=o>>>24,r[1+t]=o>>>16&255,r[2+t]=o>>>8&255,r[3+t]=255&o},exports.ip=function(r,o,t,a){for(var e=0,f=0,n=6;n>=0;n-=2){for(var v=0;v<=24;v+=8)e<<=1,e|=o>>>v+n&1;for(var v=0;v<=24;v+=8)e<<=1,e|=r>>>v+n&1}for(var n=6;n>=0;n-=2){for(var v=1;v<=25;v+=8)f<<=1,f|=o>>>v+n&1;for(var v=1;v<=25;v+=8)f<<=1,f|=r>>>v+n&1}t[a+0]=e>>>0,t[a+1]=f>>>0},exports.rip=function(r,o,t,a){for(var e=0,f=0,n=0;n<4;n++)for(var v=24;v>=0;v-=8)e<<=1,e|=o>>>v+n&1,e<<=1,e|=r>>>v+n&1;for(var n=4;n<8;n++)for(var v=24;v>=0;v-=8)f<<=1,f|=o>>>v+n&1,f<<=1,f|=r>>>v+n&1;t[a+0]=e>>>0,t[a+1]=f>>>0},exports.pc1=function(r,o,t,a){for(var e=0,f=0,n=7;n>=5;n--){for(var v=0;v<=24;v+=8)e<<=1,e|=o>>v+n&1;for(var v=0;v<=24;v+=8)e<<=1,e|=r>>v+n&1}for(var v=0;v<=24;v+=8)e<<=1,e|=o>>v+n&1;for(var n=1;n<=3;n++){for(var v=0;v<=24;v+=8)f<<=1,f|=o>>v+n&1;for(var v=0;v<=24;v+=8)f<<=1,f|=r>>v+n&1}for(var v=0;v<=24;v+=8)f<<=1,f|=r>>v+n&1;t[a+0]=e>>>0,t[a+1]=f>>>0},exports.r28shl=function(r,o){return r<<o&268435455|r>>>28-o};var pc2table=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];exports.pc2=function(r,o,t,a){for(var e=0,f=0,n=pc2table.length>>>1,v=0;v<n;v++)e<<=1,e|=r>>>pc2table[v]&1;for(var v=n;v<pc2table.length;v++)f<<=1,f|=o>>>pc2table[v]&1;t[a+0]=e>>>0,t[a+1]=f>>>0},exports.expand=function(r,o,t){var a=0,e=0;a=(1&r)<<5|r>>>27;for(var f=23;f>=15;f-=4)a<<=6,a|=r>>>f&63;for(var f=11;f>=3;f-=4)e|=r>>>f&63,e<<=6;e|=(31&r)<<1|r>>>31,o[t+0]=a>>>0,o[t+1]=e>>>0};var sTable=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];exports.substitute=function(r,o){for(var t=0,a=0;a<4;a++){var e=r>>>18-6*a&63,f=sTable[64*a+e];t<<=4,t|=f}for(var a=0;a<4;a++){var e=o>>>18-6*a&63,f=sTable[256+64*a+e];t<<=4,t|=f}return t>>>0};var permuteTable=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];exports.permute=function(r){for(var o=0,t=0;t<permuteTable.length;t++)o<<=1,o|=r>>>permuteTable[t]&1;return o>>>0},exports.padSplit=function(r,o,t){for(var a=r.toString(2);a.length<o;)a="0"+a;for(var e=[],f=0;f<o;f+=t)e.push(a.slice(f,f+t));return e.join(" ")};

},{}],119:[function(require,module,exports){
(function (Buffer){
function getDiffieHellman(e){return new DH(new Buffer(primes[e].prime,"hex"),new Buffer(primes[e].gen,"hex"))}function createDiffieHellman(e,r,f,i){return Buffer.isBuffer(r)||void 0===ENCODINGS[r]?createDiffieHellman(e,"binary",r,f):(r=r||"binary",i=i||"binary",f=f||new Buffer([2]),Buffer.isBuffer(f)||(f=new Buffer(f,i)),"number"==typeof e?new DH(generatePrime(e,f),f,!0):(Buffer.isBuffer(e)||(e=new Buffer(e,r)),new DH(e,f,!0)))}var generatePrime=require("./lib/generatePrime"),primes=require("./lib/primes.json"),DH=require("./lib/dh"),ENCODINGS={binary:!0,hex:!0,base64:!0};exports.DiffieHellmanGroup=exports.createDiffieHellmanGroup=exports.getDiffieHellman=getDiffieHellman,exports.createDiffieHellman=exports.DiffieHellman=createDiffieHellman;

}).call(this,require("buffer").Buffer)

},{"./lib/dh":120,"./lib/generatePrime":121,"./lib/primes.json":122,"buffer":104}],120:[function(require,module,exports){
(function (Buffer){
function setPublicKey(e,r){return r=r||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,r)),this._pub=new BN(e),this}function setPrivateKey(e,r){return r=r||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,r)),this._priv=new BN(e),this}function checkPrime(e,r){var t=r.toString("hex"),i=[t,e.toString(16)].join("_");if(i in primeCache)return primeCache[i];var n=0;if(e.isEven()||!primes.simpleSieve||!primes.fermatTest(e)||!millerRabin.test(e))return n+=1,n+="02"===t||"05"===t?8:4,primeCache[i]=n,n;millerRabin.test(e.shrn(1))||(n+=2);var u;switch(t){case"02":e.mod(TWENTYFOUR).cmp(ELEVEN)&&(n+=8);break;case"05":u=e.mod(TEN),u.cmp(THREE)&&u.cmp(SEVEN)&&(n+=8);break;default:n+=4}return primeCache[i]=n,n}function DH(e,r,t){this.setGenerator(r),this.__prime=new BN(e),this._prime=BN.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,t?(this.setPublicKey=setPublicKey,this.setPrivateKey=setPrivateKey):this._primeCode=8}function formatReturnValue(e,r){var t=new Buffer(e.toArray());return r?t.toString(r):t}var BN=require("bn.js"),MillerRabin=require("miller-rabin"),millerRabin=new MillerRabin,TWENTYFOUR=new BN(24),ELEVEN=new BN(11),TEN=new BN(10),THREE=new BN(3),SEVEN=new BN(7),primes=require("./generatePrime"),randomBytes=require("randombytes");module.exports=DH;var primeCache={};Object.defineProperty(DH.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=checkPrime(this.__prime,this.__gen)),this._primeCode}}),DH.prototype.generateKeys=function(){return this._priv||(this._priv=new BN(randomBytes(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},DH.prototype.computeSecret=function(e){e=new BN(e),e=e.toRed(this._prime);var r=e.redPow(this._priv).fromRed(),t=new Buffer(r.toArray()),i=this.getPrime();if(t.length<i.length){var n=new Buffer(i.length-t.length);n.fill(0),t=Buffer.concat([n,t])}return t},DH.prototype.getPublicKey=function(e){return formatReturnValue(this._pub,e)},DH.prototype.getPrivateKey=function(e){return formatReturnValue(this._priv,e)},DH.prototype.getPrime=function(e){return formatReturnValue(this.__prime,e)},DH.prototype.getGenerator=function(e){return formatReturnValue(this._gen,e)},DH.prototype.setGenerator=function(e,r){return r=r||"utf8",Buffer.isBuffer(e)||(e=new Buffer(e,r)),this.__gen=e,this._gen=new BN(e),this};

}).call(this,require("buffer").Buffer)

},{"./generatePrime":121,"bn.js":73,"buffer":104,"miller-rabin":163,"randombytes":181}],121:[function(require,module,exports){
function _getPrimes(){if(null!==primes)return primes;var e=[];e[0]=2;for(var r=1,i=3;i<1048576;i+=2){for(var n=Math.ceil(Math.sqrt(i)),t=0;t<r&&e[t]<=n&&i%e[t]!=0;t++);r!==t&&e[t]<=n||(e[r++]=i)}return primes=e,e}function simpleSieve(e){for(var r=_getPrimes(),i=0;i<r.length;i++)if(0===e.modn(r[i]))return 0===e.cmpn(r[i]);return!0}function fermatTest(e){var r=BN.mont(e);return 0===TWO.toRed(r).redPow(e.subn(1)).fromRed().cmpn(1)}function findPrime(e,r){if(e<16)return new BN(2===r||5===r?[140,123]:[140,39]);r=new BN(r);for(var i,n;;){for(i=new BN(randomBytes(Math.ceil(e/8)));i.bitLength()>e;)i.ishrn(1);if(i.isEven()&&i.iadd(ONE),i.testn(1)||i.iadd(TWO),r.cmp(TWO)){if(!r.cmp(FIVE))for(;i.mod(TEN).cmp(THREE);)i.iadd(FOUR)}else for(;i.mod(TWENTYFOUR).cmp(ELEVEN);)i.iadd(FOUR);if(n=i.shrn(1),simpleSieve(n)&&simpleSieve(i)&&fermatTest(n)&&fermatTest(i)&&millerRabin.test(n)&&millerRabin.test(i))return i}}var randomBytes=require("randombytes");module.exports=findPrime,findPrime.simpleSieve=simpleSieve,findPrime.fermatTest=fermatTest;var BN=require("bn.js"),TWENTYFOUR=new BN(24),MillerRabin=require("miller-rabin"),millerRabin=new MillerRabin,ONE=new BN(1),TWO=new BN(2),FIVE=new BN(5),SIXTEEN=new BN(16),EIGHT=new BN(8),TEN=new BN(10),THREE=new BN(3),SEVEN=new BN(7),ELEVEN=new BN(11),FOUR=new BN(4),TWELVE=new BN(12),primes=null;

},{"bn.js":73,"miller-rabin":163,"randombytes":181}],122:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],123:[function(require,module,exports){
function Curve(i,t,n,r,s,e,o){this.p=i,this.a=t,this.b=n,this.G=Point.fromAffine(this,r,s),this.n=e,this.h=o,this.infinity=new Point(this,null,null,BigInteger.ZERO),this.pOverFour=i.add(BigInteger.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}var assert=require("assert"),BigInteger=require("bigi"),Point=require("./point");Curve.prototype.pointFromX=function(i,t){var n=t.pow(3).add(this.a.multiply(t)).add(this.b).mod(this.p),r=n.modPow(this.pOverFour,this.p),s=r;return r.isEven()^!i&&(s=this.p.subtract(s)),Point.fromAffine(this,t,s)},Curve.prototype.isInfinity=function(i){return i===this.infinity||0===i.z.signum()&&0!==i.y.signum()},Curve.prototype.isOnCurve=function(i){if(this.isInfinity(i))return!0;var t=i.affineX,n=i.affineY,r=this.a,s=this.b,e=this.p;if(t.signum()<0||t.compareTo(e)>=0)return!1;if(n.signum()<0||n.compareTo(e)>=0)return!1;var o=n.square().mod(e),u=t.pow(3).add(r.multiply(t)).add(s).mod(e);return o.equals(u)},Curve.prototype.validate=function(i){assert(!this.isInfinity(i),"Point is at infinity"),assert(this.isOnCurve(i),"Point is not on the curve");var t=i.multiply(this.n);return assert(this.isInfinity(t),"Point is not a scalar multiple of G"),!0},module.exports=Curve;

},{"./point":127,"assert":26,"bigi":31}],124:[function(require,module,exports){
module.exports={
  "secp128r1": {
    "p": "fffffffdffffffffffffffffffffffff",
    "a": "fffffffdfffffffffffffffffffffffc",
    "b": "e87579c11079f43dd824993c2cee5ed3",
    "n": "fffffffe0000000075a30d1b9038a115",
    "h": "01",
    "Gx": "161ff7528b899b2d0c28607ca52c5b86",
    "Gy": "cf5ac8395bafeb13c02da292dded7a83"
  },
  "secp160k1": {
    "p": "fffffffffffffffffffffffffffffffeffffac73",
    "a": "00",
    "b": "07",
    "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
    "h": "01",
    "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
    "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
  },
  "secp160r1": {
    "p": "ffffffffffffffffffffffffffffffff7fffffff",
    "a": "ffffffffffffffffffffffffffffffff7ffffffc",
    "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
    "n": "0100000000000000000001f4c8f927aed3ca752257",
    "h": "01",
    "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
    "Gy": "23a628553168947d59dcc912042351377ac5fb32"
  },
  "secp192k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
    "a": "00",
    "b": "03",
    "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
    "h": "01",
    "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
    "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
  },
  "secp192r1": {
    "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
    "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
    "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
    "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
    "h": "01",
    "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
    "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
  },
  "secp256k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "a": "00",
    "b": "07",
    "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
    "h": "01",
    "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
  },
  "secp256r1": {
    "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
    "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
    "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
    "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
    "h": "01",
    "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
    "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
  }
}

},{}],125:[function(require,module,exports){
var Point=require("./point"),Curve=require("./curve"),getCurveByName=require("./names");module.exports={Curve:Curve,Point:Point,getCurveByName:getCurveByName};

},{"./curve":123,"./names":126,"./point":127}],126:[function(require,module,exports){
function getCurveByName(e){var r=curves[e];if(!r)return null;var n=new BigInteger(r.p,16),g=new BigInteger(r.a,16),u=new BigInteger(r.b,16),i=new BigInteger(r.n,16),t=new BigInteger(r.h,16);return new Curve(n,g,u,new BigInteger(r.Gx,16),new BigInteger(r.Gy,16),i,t)}var BigInteger=require("bigi"),curves=require("./curves.json"),Curve=require("./curve");module.exports=getCurveByName;

},{"./curve":123,"./curves.json":124,"bigi":31}],127:[function(require,module,exports){
(function (Buffer){
function Point(t,i,e,r){assert.notStrictEqual(r,void 0,"Missing Z coordinate"),this.curve=t,this.x=i,this.y=e,this.z=r,this._zInv=null,this.compressed=!0}var assert=require("assert"),BigInteger=require("bigi"),THREE=BigInteger.valueOf(3);Object.defineProperty(Point.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(Point.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(Point.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),Point.fromAffine=function(t,i,e){return new Point(t,i,e,BigInteger.ONE)},Point.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},Point.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new Point(this.curve,this.x,t,this.z)},Point.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var i=this.x,e=this.y,r=t.x,n=t.y,s=n.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p),u=r.multiply(this.z).subtract(i.multiply(t.z)).mod(this.curve.p);if(0===u.signum())return 0===s.signum()?this.twice():this.curve.infinity;var h=u.square(),o=h.multiply(u),l=i.multiply(h),f=s.square().multiply(this.z),p=f.subtract(l.shiftLeft(1)).multiply(t.z).subtract(o).multiply(u).mod(this.curve.p),c=l.multiply(THREE).multiply(s).subtract(e.multiply(o)).subtract(f.multiply(s)).multiply(t.z).add(s.multiply(o)).mod(this.curve.p),y=o.multiply(this.z).multiply(t.z).mod(this.curve.p);return new Point(this.curve,p,c,y)},Point.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,i=this.y,e=i.multiply(this.z).mod(this.curve.p),r=e.multiply(i).mod(this.curve.p),n=this.curve.a,s=t.square().multiply(THREE);0!==n.signum()&&(s=s.add(this.z.square().multiply(n))),s=s.mod(this.curve.p);var u=s.square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(e).mod(this.curve.p),h=s.multiply(THREE).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(s.pow(3)).mod(this.curve.p),o=e.pow(3).shiftLeft(3).mod(this.curve.p);return new Point(this.curve,u,h,o)},Point.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var i=t,e=i.multiply(THREE),r=this.negate(),n=this,s=e.bitLength()-2;s>0;--s){var u=e.testBit(s),h=i.testBit(s);n=n.twice(),u!==h&&(n=n.add(u?this:r))}return n},Point.prototype.multiplyTwo=function(t,i,e){for(var r=Math.max(t.bitLength(),e.bitLength())-1,n=this.curve.infinity,s=this.add(i);r>=0;){var u=t.testBit(r),h=e.testBit(r);n=n.twice(),u?n=h?n.add(s):n.add(this):h&&(n=n.add(i)),--r}return n},Point.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return new Buffer("00","hex");var i,e=this.affineX,r=this.affineY,n=this.curve.pLength;return t?(i=new Buffer(1+n),i.writeUInt8(r.isEven()?2:3,0)):(i=new Buffer(1+n+n),i.writeUInt8(4,0),r.toBuffer(n).copy(i,1+n)),e.toBuffer(n).copy(i,1),i},Point.decodeFrom=function(t,i){var e,r=i.readUInt8(0),n=4!==r,s=Math.floor((t.p.bitLength()+7)/8),u=BigInteger.fromBuffer(i.slice(1,1+s));if(n){assert.equal(i.length,s+1,"Invalid sequence length"),assert(2===r||3===r,"Invalid sequence tag");var h=3===r;e=t.pointFromX(h,u)}else{assert.equal(i.length,1+s+s,"Invalid sequence length");var o=BigInteger.fromBuffer(i.slice(1+s));e=Point.fromAffine(t,u,o)}return e.compressed=n,e},Point.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},module.exports=Point;

}).call(this,require("buffer").Buffer)

},{"assert":26,"bigi":31,"buffer":104}],128:[function(require,module,exports){
"use strict";var elliptic=exports;elliptic.version=require("../package.json").version,elliptic.utils=require("./elliptic/utils"),elliptic.rand=require("brorand"),elliptic.curve=require("./elliptic/curve"),elliptic.curves=require("./elliptic/curves"),elliptic.ec=require("./elliptic/ec"),elliptic.eddsa=require("./elliptic/eddsa");

},{"../package.json":143,"./elliptic/curve":131,"./elliptic/curves":134,"./elliptic/ec":135,"./elliptic/eddsa":138,"./elliptic/utils":142,"brorand":74}],129:[function(require,module,exports){
"use strict";function BaseCurve(t,e){this.type=t,this.p=new BN(e.p,16),this.red=e.prime?BN.red(e.prime):BN.mont(this.p),this.zero=new BN(0).toRed(this.red),this.one=new BN(1).toRed(this.red),this.two=new BN(2).toRed(this.red),this.n=e.n&&new BN(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function BasePoint(t,e){this.curve=t,this.type=e,this.precomputed=null}var BN=require("bn.js"),elliptic=require("../../elliptic"),utils=elliptic.utils,getNAF=utils.getNAF,getJSF=utils.getJSF,assert=utils.assert;module.exports=BaseCurve,BaseCurve.prototype.point=function(){throw new Error("Not implemented")},BaseCurve.prototype.validate=function(){throw new Error("Not implemented")},BaseCurve.prototype._fixedNafMul=function(t,e){assert(t.precomputed);var r=t._getDoubles(),n=getNAF(e,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var o=[],s=0;s<n.length;s+=r.step){for(var a=0,e=s+r.step-1;e>=s;e--)a=(a<<1)+n[e];o.push(a)}for(var p=this.jpoint(null,null,null),u=this.jpoint(null,null,null),d=i;d>0;d--){for(var s=0;s<o.length;s++){var a=o[s];a===d?u=u.mixedAdd(r.points[s]):a===-d&&(u=u.mixedAdd(r.points[s].neg()))}p=p.add(u)}return p.toP()},BaseCurve.prototype._wnafMul=function(t,e){var r=4,n=t._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=getNAF(e,r),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var e=0;a>=0&&0===o[a];a--)e++;if(a>=0&&e++,s=s.dblp(e),a<0)break;var p=o[a];assert(0!==p),s="affine"===t.type?p>0?s.mixedAdd(i[p-1>>1]):s.mixedAdd(i[-p-1>>1].neg()):p>0?s.add(i[p-1>>1]):s.add(i[-p-1>>1].neg())}return"affine"===t.type?s.toP():s},BaseCurve.prototype._wnafMulAdd=function(t,e,r,n,i){for(var o=this._wnafT1,s=this._wnafT2,a=this._wnafT3,p=0,u=0;u<n;u++){var d=e[u],l=d._getNAFPoints(t);o[u]=l.wnd,s[u]=l.points}for(var u=n-1;u>=1;u-=2){var h=u-1,f=u;if(1===o[h]&&1===o[f]){var c=[e[h],null,null,e[f]];0===e[h].y.cmp(e[f].y)?(c[1]=e[h].add(e[f]),c[2]=e[h].toJ().mixedAdd(e[f].neg())):0===e[h].y.cmp(e[f].y.redNeg())?(c[1]=e[h].toJ().mixedAdd(e[f]),c[2]=e[h].add(e[f].neg())):(c[1]=e[h].toJ().mixedAdd(e[f]),c[2]=e[h].toJ().mixedAdd(e[f].neg()));var v=[-3,-1,-5,-7,0,7,5,1,3],g=getJSF(r[h],r[f]);p=Math.max(g[0].length,p),a[h]=new Array(p),a[f]=new Array(p);for(var m=0;m<p;m++){var y=0|g[0][m],w=0|g[1][m];a[h][m]=v[3*(y+1)+(w+1)],a[f][m]=0,s[h]=c}}else a[h]=getNAF(r[h],o[h]),a[f]=getNAF(r[f],o[f]),p=Math.max(a[h].length,p),p=Math.max(a[f].length,p)}for(var B=this.jpoint(null,null,null),A=this._wnafT4,u=p;u>=0;u--){for(var b=0;u>=0;){for(var N=!0,m=0;m<n;m++)A[m]=0|a[m][u],0!==A[m]&&(N=!1);if(!N)break;b++,u--}if(u>=0&&b++,B=B.dblp(b),u<0)break;for(var m=0;m<n;m++){var d,_=A[m];0!==_&&(_>0?d=s[m][_-1>>1]:_<0&&(d=s[m][-_-1>>1].neg()),B="affine"===d.type?B.mixedAdd(d):B.add(d))}}for(var u=0;u<n;u++)s[u]=null;return i?B:B.toP()},BaseCurve.BasePoint=BasePoint,BasePoint.prototype.eq=function(){throw new Error("Not implemented")},BasePoint.prototype.validate=function(){return this.curve.validate(this)},BaseCurve.prototype.decodePoint=function(t,e){t=utils.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r){6===t[0]?assert(t[t.length-1]%2==0):7===t[0]&&assert(t[t.length-1]%2==1);return this.point(t.slice(1,1+r),t.slice(1+r,1+2*r))}if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},BasePoint.prototype.encodeCompressed=function(t){return this.encode(t,!0)},BasePoint.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},BasePoint.prototype.encode=function(t,e){return utils.encode(this._encode(e),t)},BasePoint.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},BasePoint.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},BasePoint.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<e;i+=t){for(var o=0;o<t;o++)n=n.dbl();r.push(n)}return{step:t,points:r}},BasePoint.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)e[i]=e[i-1].add(n);return{wnd:t,points:e}},BasePoint.prototype._getBeta=function(){return null},BasePoint.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e};

},{"../../elliptic":128,"bn.js":73}],130:[function(require,module,exports){
"use strict";function EdwardsCurve(t){this.twisted=1!=(0|t.a),this.mOneA=this.twisted&&(0|t.a)==-1,this.extended=this.mOneA,Base.call(this,"edwards",t),this.a=new BN(t.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new BN(t.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new BN(t.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),assert(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|t.c)}function Point(t,r,e,i,d){Base.BasePoint.call(this,t,"projective"),null===r&&null===e&&null===i?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new BN(r,16),this.y=new BN(e,16),this.z=i?new BN(i,16):this.curve.one,this.t=d&&new BN(d,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}var curve=require("../curve"),elliptic=require("../../elliptic"),BN=require("bn.js"),inherits=require("inherits"),Base=curve.base,assert=elliptic.utils.assert;inherits(EdwardsCurve,Base),module.exports=EdwardsCurve,EdwardsCurve.prototype._mulA=function(t){return this.mOneA?t.redNeg():this.a.redMul(t)},EdwardsCurve.prototype._mulC=function(t){return this.oneC?t:this.c.redMul(t)},EdwardsCurve.prototype.jpoint=function(t,r,e,i){return this.point(t,r,e,i)},EdwardsCurve.prototype.pointFromX=function(t,r){t=new BN(t,16),t.red||(t=t.toRed(this.red));var e=t.redSqr(),i=this.c2.redSub(this.a.redMul(e)),d=this.one.redSub(this.c2.redMul(this.d).redMul(e)),s=i.redMul(d.redInvm()),u=s.redSqrt();if(0!==u.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");var n=u.fromRed().isOdd();return(r&&!n||!r&&n)&&(u=u.redNeg()),this.point(t,u)},EdwardsCurve.prototype.pointFromY=function(t,r){t=new BN(t,16),t.red||(t=t.toRed(this.red));var e=t.redSqr(),i=e.redSub(this.one),d=e.redMul(this.d).redAdd(this.one),s=i.redMul(d.redInvm());if(0===s.cmp(this.zero)){if(r)throw new Error("invalid point");return this.point(this.zero,t)}var u=s.redSqrt();if(0!==u.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");return u.isOdd()!==r&&(u=u.redNeg()),this.point(u,t)},EdwardsCurve.prototype.validate=function(t){if(t.isInfinity())return!0;t.normalize();var r=t.x.redSqr(),e=t.y.redSqr(),i=r.redMul(this.a).redAdd(e),d=this.c2.redMul(this.one.redAdd(this.d.redMul(r).redMul(e)));return 0===i.cmp(d)},inherits(Point,Base.BasePoint),EdwardsCurve.prototype.pointFromJSON=function(t){return Point.fromJSON(this,t)},EdwardsCurve.prototype.point=function(t,r,e,i){return new Point(this,t,r,e,i)},Point.fromJSON=function(t,r){return new Point(t,r[0],r[1],r[2])},Point.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},Point.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&0===this.y.cmp(this.z)},Point.prototype._extDbl=function(){var t=this.x.redSqr(),r=this.y.redSqr(),e=this.z.redSqr();e=e.redIAdd(e);var i=this.curve._mulA(t),d=this.x.redAdd(this.y).redSqr().redISub(t).redISub(r),s=i.redAdd(r),u=s.redSub(e),n=i.redSub(r),h=d.redMul(u),o=s.redMul(n),l=d.redMul(n),c=u.redMul(s);return this.curve.point(h,o,c,l)},Point.prototype._projDbl=function(){var t,r,e,i=this.x.redAdd(this.y).redSqr(),d=this.x.redSqr(),s=this.y.redSqr();if(this.curve.twisted){var u=this.curve._mulA(d),n=u.redAdd(s);if(this.zOne)t=i.redSub(d).redSub(s).redMul(n.redSub(this.curve.two)),r=n.redMul(u.redSub(s)),e=n.redSqr().redSub(n).redSub(n);else{var h=this.z.redSqr(),o=n.redSub(h).redISub(h);t=i.redSub(d).redISub(s).redMul(o),r=n.redMul(u.redSub(s)),e=n.redMul(o)}}else{var u=d.redAdd(s),h=this.curve._mulC(this.c.redMul(this.z)).redSqr(),o=u.redSub(h).redSub(h);t=this.curve._mulC(i.redISub(u)).redMul(o),r=this.curve._mulC(u).redMul(d.redISub(s)),e=u.redMul(o)}return this.curve.point(t,r,e)},Point.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},Point.prototype._extAdd=function(t){var r=this.y.redSub(this.x).redMul(t.y.redSub(t.x)),e=this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)),i=this.t.redMul(this.curve.dd).redMul(t.t),d=this.z.redMul(t.z.redAdd(t.z)),s=e.redSub(r),u=d.redSub(i),n=d.redAdd(i),h=e.redAdd(r),o=s.redMul(u),l=n.redMul(h),c=s.redMul(h),p=u.redMul(n);return this.curve.point(o,l,p,c)},Point.prototype._projAdd=function(t){var r,e,i=this.z.redMul(t.z),d=i.redSqr(),s=this.x.redMul(t.x),u=this.y.redMul(t.y),n=this.curve.d.redMul(s).redMul(u),h=d.redSub(n),o=d.redAdd(n),l=this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(s).redISub(u),c=i.redMul(h).redMul(l);return this.curve.twisted?(r=i.redMul(o).redMul(u.redSub(this.curve._mulA(s))),e=h.redMul(o)):(r=i.redMul(o).redMul(u.redSub(s)),e=this.curve._mulC(h).redMul(o)),this.curve.point(c,r,e)},Point.prototype.add=function(t){return this.isInfinity()?t:t.isInfinity()?this:this.curve.extended?this._extAdd(t):this._projAdd(t)},Point.prototype.mul=function(t){return this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve._wnafMul(this,t)},Point.prototype.mulAdd=function(t,r,e){return this.curve._wnafMulAdd(1,[this,r],[t,e],2,!1)},Point.prototype.jmulAdd=function(t,r,e){return this.curve._wnafMulAdd(1,[this,r],[t,e],2,!0)},Point.prototype.normalize=function(){if(this.zOne)return this;var t=this.z.redInvm();return this.x=this.x.redMul(t),this.y=this.y.redMul(t),this.t&&(this.t=this.t.redMul(t)),this.z=this.curve.one,this.zOne=!0,this},Point.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},Point.prototype.getX=function(){return this.normalize(),this.x.fromRed()},Point.prototype.getY=function(){return this.normalize(),this.y.fromRed()},Point.prototype.eq=function(t){return this===t||0===this.getX().cmp(t.getX())&&0===this.getY().cmp(t.getY())},Point.prototype.eqXToP=function(t){var r=t.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(r))return!0;for(var e=t.clone(),i=this.curve.redN.redMul(this.z);;){if(e.iadd(this.curve.n),e.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}return!1},Point.prototype.toP=Point.prototype.normalize,Point.prototype.mixedAdd=Point.prototype.add;

},{"../../elliptic":128,"../curve":131,"bn.js":73,"inherits":159}],131:[function(require,module,exports){
"use strict";var curve=exports;curve.base=require("./base"),curve.short=require("./short"),curve.mont=require("./mont"),curve.edwards=require("./edwards");

},{"./base":129,"./edwards":130,"./mont":132,"./short":133}],132:[function(require,module,exports){
"use strict";function MontCurve(t){Base.call(this,"mont",t),this.a=new BN(t.a,16).toRed(this.red),this.b=new BN(t.b,16).toRed(this.red),this.i4=new BN(4).toRed(this.red).redInvm(),this.two=new BN(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function Point(t,r,e){Base.BasePoint.call(this,t,"projective"),null===r&&null===e?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new BN(r,16),this.z=new BN(e,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}var curve=require("../curve"),BN=require("bn.js"),inherits=require("inherits"),Base=curve.base,elliptic=require("../../elliptic"),utils=elliptic.utils;inherits(MontCurve,Base),module.exports=MontCurve,MontCurve.prototype.validate=function(t){var r=t.normalize().x,e=r.redSqr(),i=e.redMul(r).redAdd(e.redMul(this.a)).redAdd(r);return 0===i.redSqrt().redSqr().cmp(i)},inherits(Point,Base.BasePoint),MontCurve.prototype.decodePoint=function(t,r){return this.point(utils.toArray(t,r),1)},MontCurve.prototype.point=function(t,r){return new Point(this,t,r)},MontCurve.prototype.pointFromJSON=function(t){return Point.fromJSON(this,t)},Point.prototype.precompute=function(){},Point.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},Point.fromJSON=function(t,r){return new Point(t,r[0],r[1]||t.one)},Point.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},Point.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},Point.prototype.dbl=function(){var t=this.x.redAdd(this.z),r=t.redSqr(),e=this.x.redSub(this.z),i=e.redSqr(),o=r.redSub(i),n=r.redMul(i),u=o.redMul(i.redAdd(this.curve.a24.redMul(o)));return this.curve.point(n,u)},Point.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},Point.prototype.diffAdd=function(t,r){var e=this.x.redAdd(this.z),i=this.x.redSub(this.z),o=t.x.redAdd(t.z),n=t.x.redSub(t.z),u=n.redMul(e),d=o.redMul(i),s=r.z.redMul(u.redAdd(d).redSqr()),h=r.x.redMul(u.redISub(d).redSqr());return this.curve.point(s,h)},Point.prototype.mul=function(t){for(var r=t.clone(),e=this,i=this.curve.point(null,null),o=this,n=[];0!==r.cmpn(0);r.iushrn(1))n.push(r.andln(1));for(var u=n.length-1;u>=0;u--)0===n[u]?(e=e.diffAdd(i,o),i=i.dbl()):(i=e.diffAdd(i,o),e=e.dbl());return i},Point.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},Point.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},Point.prototype.eq=function(t){return 0===this.getX().cmp(t.getX())},Point.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},Point.prototype.getX=function(){return this.normalize(),this.x.fromRed()};

},{"../../elliptic":128,"../curve":131,"bn.js":73,"inherits":159}],133:[function(require,module,exports){
"use strict";function ShortCurve(r){Base.call(this,"short",r),this.a=new BN(r.a,16).toRed(this.red),this.b=new BN(r.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(r),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function Point(r,e,t,d){Base.BasePoint.call(this,r,"affine"),null===e&&null===t?(this.x=null,this.y=null,this.inf=!0):(this.x=new BN(e,16),this.y=new BN(t,16),d&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function JPoint(r,e,t,d){Base.BasePoint.call(this,r,"jacobian"),null===e&&null===t&&null===d?(this.x=this.curve.one,this.y=this.curve.one,this.z=new BN(0)):(this.x=new BN(e,16),this.y=new BN(t,16),this.z=new BN(d,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}var curve=require("../curve"),elliptic=require("../../elliptic"),BN=require("bn.js"),inherits=require("inherits"),Base=curve.base,assert=elliptic.utils.assert;inherits(ShortCurve,Base),module.exports=ShortCurve,ShortCurve.prototype._getEndomorphism=function(r){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,t;if(r.beta)e=new BN(r.beta,16).toRed(this.red);else{var d=this._getEndoRoots(this.p);e=d[0].cmp(d[1])<0?d[0]:d[1],e=e.toRed(this.red)}if(r.lambda)t=new BN(r.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(e))?t=i[0]:(t=i[1],assert(0===this.g.mul(t).x.cmp(this.g.x.redMul(e))))}var n;return n=r.basis?r.basis.map(function(r){return{a:new BN(r.a,16),b:new BN(r.b,16)}}):this._getEndoBasis(t),{beta:e,lambda:t,basis:n}}},ShortCurve.prototype._getEndoRoots=function(r){var e=r===this.p?this.red:BN.mont(r),t=new BN(2).toRed(e).redInvm(),d=t.redNeg(),i=new BN(3).toRed(e).redNeg().redSqrt().redMul(t);return[d.redAdd(i).fromRed(),d.redSub(i).fromRed()]},ShortCurve.prototype._getEndoBasis=function(r){for(var e,t,d,i,n,u,s,o,h,l=this.n.ushrn(Math.floor(this.n.bitLength()/2)),p=r,a=this.n.clone(),c=new BN(1),f=new BN(0),v=new BN(0),S=new BN(1),b=0;0!==p.cmpn(0);){var I=a.div(p);o=a.sub(I.mul(p)),h=v.sub(I.mul(c));var y=S.sub(I.mul(f));if(!d&&o.cmp(l)<0)e=s.neg(),t=c,d=o.neg(),i=h;else if(d&&2==++b)break;s=o,a=p,p=o,v=c,c=h,S=f,f=y}n=o.neg(),u=h;var A=d.sqr().add(i.sqr());return n.sqr().add(u.sqr()).cmp(A)>=0&&(n=e,u=t),d.negative&&(d=d.neg(),i=i.neg()),n.negative&&(n=n.neg(),u=u.neg()),[{a:d,b:i},{a:n,b:u}]},ShortCurve.prototype._endoSplit=function(r){var e=this.endo.basis,t=e[0],d=e[1],i=d.b.mul(r).divRound(this.n),n=t.b.neg().mul(r).divRound(this.n),u=i.mul(t.a),s=n.mul(d.a),o=i.mul(t.b),h=n.mul(d.b);return{k1:r.sub(u).sub(s),k2:o.add(h).neg()}},ShortCurve.prototype.pointFromX=function(r,e){r=new BN(r,16),r.red||(r=r.toRed(this.red));var t=r.redSqr().redMul(r).redIAdd(r.redMul(this.a)).redIAdd(this.b),d=t.redSqrt();if(0!==d.redSqr().redSub(t).cmp(this.zero))throw new Error("invalid point");var i=d.fromRed().isOdd();return(e&&!i||!e&&i)&&(d=d.redNeg()),this.point(r,d)},ShortCurve.prototype.validate=function(r){if(r.inf)return!0;var e=r.x,t=r.y,d=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(d).redIAdd(this.b);return 0===t.redSqr().redISub(i).cmpn(0)},ShortCurve.prototype._endoWnafMulAdd=function(r,e,t){for(var d=this._endoWnafT1,i=this._endoWnafT2,n=0;n<r.length;n++){var u=this._endoSplit(e[n]),s=r[n],o=s._getBeta();u.k1.negative&&(u.k1.ineg(),s=s.neg(!0)),u.k2.negative&&(u.k2.ineg(),o=o.neg(!0)),d[2*n]=s,d[2*n+1]=o,i[2*n]=u.k1,i[2*n+1]=u.k2}for(var h=this._wnafMulAdd(1,d,i,2*n,t),l=0;l<2*n;l++)d[l]=null,i[l]=null;return h},inherits(Point,Base.BasePoint),ShortCurve.prototype.point=function(r,e,t){return new Point(this,r,e,t)},ShortCurve.prototype.pointFromJSON=function(r,e){return Point.fromJSON(this,r,e)},Point.prototype._getBeta=function(){if(this.curve.endo){var r=this.precomputed;if(r&&r.beta)return r.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(r){var t=this.curve,d=function(r){return t.point(r.x.redMul(t.endo.beta),r.y)};r.beta=e,e.precomputed={beta:null,naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(d)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(d)}}}return e}},Point.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},Point.fromJSON=function(r,e,t){function d(e){return r.point(e[0],e[1],t)}"string"==typeof e&&(e=JSON.parse(e));var i=r.point(e[0],e[1],t);if(!e[2])return i;var n=e[2];return i.precomputed={beta:null,doubles:n.doubles&&{step:n.doubles.step,points:[i].concat(n.doubles.points.map(d))},naf:n.naf&&{wnd:n.naf.wnd,points:[i].concat(n.naf.points.map(d))}},i},Point.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},Point.prototype.isInfinity=function(){return this.inf},Point.prototype.add=function(r){if(this.inf)return r;if(r.inf)return this;if(this.eq(r))return this.dbl();if(this.neg().eq(r))return this.curve.point(null,null);if(0===this.x.cmp(r.x))return this.curve.point(null,null);var e=this.y.redSub(r.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(r.x).redInvm()));var t=e.redSqr().redISub(this.x).redISub(r.x),d=e.redMul(this.x.redSub(t)).redISub(this.y);return this.curve.point(t,d)},Point.prototype.dbl=function(){if(this.inf)return this;var r=this.y.redAdd(this.y);if(0===r.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,t=this.x.redSqr(),d=r.redInvm(),i=t.redAdd(t).redIAdd(t).redIAdd(e).redMul(d),n=i.redSqr().redISub(this.x.redAdd(this.x)),u=i.redMul(this.x.redSub(n)).redISub(this.y);return this.curve.point(n,u)},Point.prototype.getX=function(){return this.x.fromRed()},Point.prototype.getY=function(){return this.y.fromRed()},Point.prototype.mul=function(r){return r=new BN(r,16),this._hasDoubles(r)?this.curve._fixedNafMul(this,r):this.curve.endo?this.curve._endoWnafMulAdd([this],[r]):this.curve._wnafMul(this,r)},Point.prototype.mulAdd=function(r,e,t){var d=[this,e],i=[r,t];return this.curve.endo?this.curve._endoWnafMulAdd(d,i):this.curve._wnafMulAdd(1,d,i,2)},Point.prototype.jmulAdd=function(r,e,t){var d=[this,e],i=[r,t];return this.curve.endo?this.curve._endoWnafMulAdd(d,i,!0):this.curve._wnafMulAdd(1,d,i,2,!0)},Point.prototype.eq=function(r){return this===r||this.inf===r.inf&&(this.inf||0===this.x.cmp(r.x)&&0===this.y.cmp(r.y))},Point.prototype.neg=function(r){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(r&&this.precomputed){var t=this.precomputed,d=function(r){return r.neg()};e.precomputed={naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(d)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(d)}}}return e},Point.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},inherits(JPoint,Base.BasePoint),ShortCurve.prototype.jpoint=function(r,e,t){return new JPoint(this,r,e,t)},JPoint.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var r=this.z.redInvm(),e=r.redSqr(),t=this.x.redMul(e),d=this.y.redMul(e).redMul(r);return this.curve.point(t,d)},JPoint.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},JPoint.prototype.add=function(r){if(this.isInfinity())return r;if(r.isInfinity())return this;var e=r.z.redSqr(),t=this.z.redSqr(),d=this.x.redMul(e),i=r.x.redMul(t),n=this.y.redMul(e.redMul(r.z)),u=r.y.redMul(t.redMul(this.z)),s=d.redSub(i),o=n.redSub(u);if(0===s.cmpn(0))return 0!==o.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var h=s.redSqr(),l=h.redMul(s),p=d.redMul(h),a=o.redSqr().redIAdd(l).redISub(p).redISub(p),c=o.redMul(p.redISub(a)).redISub(n.redMul(l)),f=this.z.redMul(r.z).redMul(s);return this.curve.jpoint(a,c,f)},JPoint.prototype.mixedAdd=function(r){if(this.isInfinity())return r.toJ();if(r.isInfinity())return this;var e=this.z.redSqr(),t=this.x,d=r.x.redMul(e),i=this.y,n=r.y.redMul(e).redMul(this.z),u=t.redSub(d),s=i.redSub(n);if(0===u.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var o=u.redSqr(),h=o.redMul(u),l=t.redMul(o),p=s.redSqr().redIAdd(h).redISub(l).redISub(l),a=s.redMul(l.redISub(p)).redISub(i.redMul(h)),c=this.z.redMul(u);return this.curve.jpoint(p,a,c)},JPoint.prototype.dblp=function(r){if(0===r)return this;if(this.isInfinity())return this;if(!r)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var e=this,t=0;t<r;t++)e=e.dbl();return e}for(var d=this.curve.a,i=this.curve.tinv,n=this.x,u=this.y,s=this.z,o=s.redSqr().redSqr(),h=u.redAdd(u),t=0;t<r;t++){var l=n.redSqr(),p=h.redSqr(),a=p.redSqr(),c=l.redAdd(l).redIAdd(l).redIAdd(d.redMul(o)),f=n.redMul(p),v=c.redSqr().redISub(f.redAdd(f)),S=f.redISub(v),b=c.redMul(S);b=b.redIAdd(b).redISub(a);var I=h.redMul(s);t+1<r&&(o=o.redMul(a)),n=v,s=I,h=b}return this.curve.jpoint(n,h.redMul(i),s)},JPoint.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},JPoint.prototype._zeroDbl=function(){var r,e,t;if(this.zOne){var d=this.x.redSqr(),i=this.y.redSqr(),n=i.redSqr(),u=this.x.redAdd(i).redSqr().redISub(d).redISub(n);u=u.redIAdd(u);var s=d.redAdd(d).redIAdd(d),o=s.redSqr().redISub(u).redISub(u),h=n.redIAdd(n);h=h.redIAdd(h),h=h.redIAdd(h),r=o,e=s.redMul(u.redISub(o)).redISub(h),t=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),p=this.y.redSqr(),a=p.redSqr(),c=this.x.redAdd(p).redSqr().redISub(l).redISub(a);c=c.redIAdd(c);var f=l.redAdd(l).redIAdd(l),v=f.redSqr(),S=a.redIAdd(a);S=S.redIAdd(S),S=S.redIAdd(S),r=v.redISub(c).redISub(c),e=f.redMul(c.redISub(r)).redISub(S),t=this.y.redMul(this.z),t=t.redIAdd(t)}return this.curve.jpoint(r,e,t)},JPoint.prototype._threeDbl=function(){var r,e,t;if(this.zOne){var d=this.x.redSqr(),i=this.y.redSqr(),n=i.redSqr(),u=this.x.redAdd(i).redSqr().redISub(d).redISub(n);u=u.redIAdd(u);var s=d.redAdd(d).redIAdd(d).redIAdd(this.curve.a),o=s.redSqr().redISub(u).redISub(u);r=o;var h=n.redIAdd(n);h=h.redIAdd(h),h=h.redIAdd(h),e=s.redMul(u.redISub(o)).redISub(h),t=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),p=this.y.redSqr(),a=this.x.redMul(p),c=this.x.redSub(l).redMul(this.x.redAdd(l));c=c.redAdd(c).redIAdd(c);var f=a.redIAdd(a);f=f.redIAdd(f);var v=f.redAdd(f);r=c.redSqr().redISub(v),t=this.y.redAdd(this.z).redSqr().redISub(p).redISub(l);var S=p.redSqr();S=S.redIAdd(S),S=S.redIAdd(S),S=S.redIAdd(S),e=c.redMul(f.redISub(r)).redISub(S)}return this.curve.jpoint(r,e,t)},JPoint.prototype._dbl=function(){var r=this.curve.a,e=this.x,t=this.y,d=this.z,i=d.redSqr().redSqr(),n=e.redSqr(),u=t.redSqr(),s=n.redAdd(n).redIAdd(n).redIAdd(r.redMul(i)),o=e.redAdd(e);o=o.redIAdd(o);var h=o.redMul(u),l=s.redSqr().redISub(h.redAdd(h)),p=h.redISub(l),a=u.redSqr();a=a.redIAdd(a),a=a.redIAdd(a),a=a.redIAdd(a);var c=s.redMul(p).redISub(a),f=t.redAdd(t).redMul(d);return this.curve.jpoint(l,c,f)},JPoint.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var r=this.x.redSqr(),e=this.y.redSqr(),t=this.z.redSqr(),d=e.redSqr(),i=r.redAdd(r).redIAdd(r),n=i.redSqr(),u=this.x.redAdd(e).redSqr().redISub(r).redISub(d);u=u.redIAdd(u),u=u.redAdd(u).redIAdd(u),u=u.redISub(n);var s=u.redSqr(),o=d.redIAdd(d);o=o.redIAdd(o),o=o.redIAdd(o),o=o.redIAdd(o);var h=i.redIAdd(u).redSqr().redISub(n).redISub(s).redISub(o),l=e.redMul(h);l=l.redIAdd(l),l=l.redIAdd(l);var p=this.x.redMul(s).redISub(l);p=p.redIAdd(p),p=p.redIAdd(p);var a=this.y.redMul(h.redMul(o.redISub(h)).redISub(u.redMul(s)));a=a.redIAdd(a),a=a.redIAdd(a),a=a.redIAdd(a);var c=this.z.redAdd(u).redSqr().redISub(t).redISub(s);return this.curve.jpoint(p,a,c)},JPoint.prototype.mul=function(r,e){return r=new BN(r,e),this.curve._wnafMul(this,r)},JPoint.prototype.eq=function(r){if("affine"===r.type)return this.eq(r.toJ());if(this===r)return!0;var e=this.z.redSqr(),t=r.z.redSqr();if(0!==this.x.redMul(t).redISub(r.x.redMul(e)).cmpn(0))return!1;var d=e.redMul(this.z),i=t.redMul(r.z);return 0===this.y.redMul(i).redISub(r.y.redMul(d)).cmpn(0)},JPoint.prototype.eqXToP=function(r){var e=this.z.redSqr(),t=r.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(t))return!0;for(var d=r.clone(),i=this.curve.redN.redMul(e);;){if(d.iadd(this.curve.n),d.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(i),0===this.x.cmp(t))return!0}return!1},JPoint.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},JPoint.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};

},{"../../elliptic":128,"../curve":131,"bn.js":73,"inherits":159}],134:[function(require,module,exports){
"use strict";function PresetCurve(f){"short"===f.type?this.curve=new elliptic.curve.short(f):"edwards"===f.type?this.curve=new elliptic.curve.edwards(f):this.curve=new elliptic.curve.mont(f),this.g=this.curve.g,this.n=this.curve.n,this.hash=f.hash,assert(this.g.validate(),"Invalid curve"),assert(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function defineCurve(f,e){Object.defineProperty(curves,f,{configurable:!0,enumerable:!0,get:function(){var a=new PresetCurve(e);return Object.defineProperty(curves,f,{configurable:!0,enumerable:!0,value:a}),a}})}var curves=exports,hash=require("hash.js"),elliptic=require("../elliptic"),assert=elliptic.utils.assert;curves.PresetCurve=PresetCurve,defineCurve("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:hash.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),defineCurve("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:hash.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),defineCurve("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:hash.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),defineCurve("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:hash.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),defineCurve("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:hash.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),defineCurve("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:hash.sha256,gRed:!1,g:["9"]}),defineCurve("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:hash.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});var pre;try{pre=require("./precomputed/secp256k1")}catch(f){pre=void 0}defineCurve("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:hash.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",pre]});

},{"../elliptic":128,"./precomputed/secp256k1":141,"hash.js":148}],135:[function(require,module,exports){
"use strict";function EC(e){if(!(this instanceof EC))return new EC(e);"string"==typeof e&&(assert(elliptic.curves.hasOwnProperty(e),"Unknown curve "+e),e=elliptic.curves[e]),e instanceof elliptic.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var BN=require("bn.js"),HmacDRBG=require("hmac-drbg"),elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert,KeyPair=require("./key"),Signature=require("./signature");module.exports=EC,EC.prototype.keyPair=function(e){return new KeyPair(this,e)},EC.prototype.keyFromPrivate=function(e,t){return KeyPair.fromPrivate(this,e,t)},EC.prototype.keyFromPublic=function(e,t){return KeyPair.fromPublic(this,e,t)},EC.prototype.genKeyPair=function(e){e||(e={});for(var t=new HmacDRBG({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||elliptic.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new BN(2));;){var i=new BN(t.generate(r));if(!(i.cmp(n)>0))return i.iaddn(1),this.keyFromPrivate(i)}},EC.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},EC.prototype.sign=function(e,t,r,n){"object"==typeof r&&(n=r,r=null),n||(n={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new BN(e,16));for(var i=this.n.byteLength(),s=t.getPrivate().toArray("be",i),u=e.toArray("be",i),o=new HmacDRBG({hash:this.hash,entropy:s,nonce:u,pers:n.pers,persEnc:n.persEnc||"utf8"}),c=this.n.sub(new BN(1)),h=0;!0;h++){var a=n.k?n.k(h):new BN(o.generate(this.n.byteLength()));if(a=this._truncateToN(a,!0),!(a.cmpn(1)<=0||a.cmp(c)>=0)){var p=this.g.mul(a);if(!p.isInfinity()){var m=p.getX(),v=m.umod(this.n);if(0!==v.cmpn(0)){var y=a.invm(this.n).mul(v.mul(t.getPrivate()).iadd(e));if(y=y.umod(this.n),0!==y.cmpn(0)){var l=(p.getY().isOdd()?1:0)|(0!==m.cmp(v)?2:0);return n.canonical&&y.cmp(this.nh)>0&&(y=this.n.sub(y),l^=1),new Signature({r:v,s:y,recoveryParam:l})}}}}}},EC.prototype.verify=function(e,t,r,n){e=this._truncateToN(new BN(e,16)),r=this.keyFromPublic(r,n),t=new Signature(t,"hex");var i=t.r,s=t.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var u=s.invm(this.n),o=u.mul(e).umod(this.n),c=u.mul(i).umod(this.n);if(!this.curve._maxwellTrick){var h=this.g.mulAdd(o,r.getPublic(),c);return!h.isInfinity()&&0===h.getX().umod(this.n).cmp(i)}var h=this.g.jmulAdd(o,r.getPublic(),c);return!h.isInfinity()&&h.eqXToP(i)},EC.prototype.recoverPubKey=function(e,t,r,n){assert((3&r)===r,"The recovery param is more than two bits"),t=new Signature(t,n);var i=this.n,s=new BN(e),u=t.r,o=t.s,c=1&r,h=r>>1;if(u.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");u=h?this.curve.pointFromX(u.add(this.curve.n),c):this.curve.pointFromX(u,c);var a=t.r.invm(i),p=i.sub(s).mul(a).umod(i),m=o.mul(a).umod(i);return this.g.mulAdd(p,u,m)},EC.prototype.getKeyRecoveryParam=function(e,t,r,n){if(t=new Signature(t,n),null!==t.recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var s;try{s=this.recoverPubKey(e,t,i)}catch(e){continue}if(s.eq(r))return i}throw new Error("Unable to find valid recovery factor")};

},{"../../elliptic":128,"./key":136,"./signature":137,"bn.js":73,"hmac-drbg":154}],136:[function(require,module,exports){
"use strict";function KeyPair(i,t){this.ec=i,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var BN=require("bn.js"),elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert;module.exports=KeyPair,KeyPair.fromPublic=function(i,t,e){return t instanceof KeyPair?t:new KeyPair(i,{pub:t,pubEnc:e})},KeyPair.fromPrivate=function(i,t,e){return t instanceof KeyPair?t:new KeyPair(i,{priv:t,privEnc:e})},KeyPair.prototype.validate=function(){var i=this.getPublic();return i.isInfinity()?{result:!1,reason:"Invalid public key"}:i.validate()?i.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},KeyPair.prototype.getPublic=function(i,t){return"string"==typeof i&&(t=i,i=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,i):this.pub},KeyPair.prototype.getPrivate=function(i){return"hex"===i?this.priv.toString(16,2):this.priv},KeyPair.prototype._importPrivate=function(i,t){this.priv=new BN(i,t||16),this.priv=this.priv.umod(this.ec.curve.n)},KeyPair.prototype._importPublic=function(i,t){if(i.x||i.y)return"mont"===this.ec.curve.type?assert(i.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||assert(i.x&&i.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(i.x,i.y));this.pub=this.ec.curve.decodePoint(i,t)},KeyPair.prototype.derive=function(i){return i.mul(this.priv).getX()},KeyPair.prototype.sign=function(i,t,e){return this.ec.sign(i,this,t,e)},KeyPair.prototype.verify=function(i,t){return this.ec.verify(i,t,this)},KeyPair.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};

},{"../../elliptic":128,"bn.js":73}],137:[function(require,module,exports){
"use strict";function Signature(t,r){if(t instanceof Signature)return t;this._importDER(t,r)||(assert(t.r&&t.s,"Signature without r or s"),this.r=new BN(t.r,16),this.s=new BN(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}function Position(){this.place=0}function getLength(t,r){var e=t[r.place++];if(!(128&e))return e;for(var n=15&e,i=0,a=0,c=r.place;a<n;a++,c++)i<<=8,i|=t[c];return r.place=c,i}function rmPadding(t){for(var r=0,e=t.length-1;!t[r]&&!(128&t[r+1])&&r<e;)r++;return 0===r?t:t.slice(r)}function constructLength(t,r){if(r<128)return void t.push(r);var e=1+(Math.log(r)/Math.LN2>>>3);for(t.push(128|e);--e;)t.push(r>>>(e<<3)&255);t.push(r)}var BN=require("bn.js"),elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert;module.exports=Signature,Signature.prototype._importDER=function(t,r){t=utils.toArray(t,r);var e=new Position;if(48!==t[e.place++])return!1;if(getLength(t,e)+e.place!==t.length)return!1;if(2!==t[e.place++])return!1;var n=getLength(t,e),i=t.slice(e.place,n+e.place);if(e.place+=n,2!==t[e.place++])return!1;var a=getLength(t,e);if(t.length!==a+e.place)return!1;var c=t.slice(e.place,a+e.place);return 0===i[0]&&128&i[1]&&(i=i.slice(1)),0===c[0]&&128&c[1]&&(c=c.slice(1)),this.r=new BN(i),this.s=new BN(c),this.recoveryParam=null,!0},Signature.prototype.toDER=function(t){var r=this.r.toArray(),e=this.s.toArray();for(128&r[0]&&(r=[0].concat(r)),128&e[0]&&(e=[0].concat(e)),r=rmPadding(r),e=rmPadding(e);!(e[0]||128&e[1]);)e=e.slice(1);var n=[2];constructLength(n,r.length),n=n.concat(r),n.push(2),constructLength(n,e.length);var i=n.concat(e),a=[48];return constructLength(a,i.length),a=a.concat(i),utils.encode(a,t)};

},{"../../elliptic":128,"bn.js":73}],138:[function(require,module,exports){
"use strict";function EDDSA(t){if(assert("ed25519"===t,"only tested with ed25519 so far"),!(this instanceof EDDSA))return new EDDSA(t);var t=elliptic.curves[t].curve;this.curve=t,this.g=t.g,this.g.precompute(t.n.bitLength()+1),this.pointClass=t.point().constructor,this.encodingLength=Math.ceil(t.n.bitLength()/8),this.hash=hash.sha512}var hash=require("hash.js"),elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert,parseBytes=utils.parseBytes,KeyPair=require("./key"),Signature=require("./signature");module.exports=EDDSA,EDDSA.prototype.sign=function(t,e){t=parseBytes(t);var i=this.keyFromSecret(e),r=this.hashInt(i.messagePrefix(),t),n=this.g.mul(r),s=this.encodePoint(n),o=this.hashInt(s,i.pubBytes(),t).mul(i.priv()),u=r.add(o).umod(this.curve.n);return this.makeSignature({R:n,S:u,Rencoded:s})},EDDSA.prototype.verify=function(t,e,i){t=parseBytes(t),e=this.makeSignature(e);var r=this.keyFromPublic(i),n=this.hashInt(e.Rencoded(),r.pubBytes(),t),s=this.g.mul(e.S());return e.R().add(r.pub().mul(n)).eq(s)},EDDSA.prototype.hashInt=function(){for(var t=this.hash(),e=0;e<arguments.length;e++)t.update(arguments[e]);return utils.intFromLE(t.digest()).umod(this.curve.n)},EDDSA.prototype.keyFromPublic=function(t){return KeyPair.fromPublic(this,t)},EDDSA.prototype.keyFromSecret=function(t){return KeyPair.fromSecret(this,t)},EDDSA.prototype.makeSignature=function(t){return t instanceof Signature?t:new Signature(this,t)},EDDSA.prototype.encodePoint=function(t){var e=t.getY().toArray("le",this.encodingLength);return e[this.encodingLength-1]|=t.getX().isOdd()?128:0,e},EDDSA.prototype.decodePoint=function(t){t=utils.parseBytes(t);var e=t.length-1,i=t.slice(0,e).concat(t[e]&-129),r=0!=(128&t[e]),n=utils.intFromLE(i);return this.curve.pointFromY(n,r)},EDDSA.prototype.encodeInt=function(t){return t.toArray("le",this.encodingLength)},EDDSA.prototype.decodeInt=function(t){return utils.intFromLE(t)},EDDSA.prototype.isPoint=function(t){return t instanceof this.pointClass};

},{"../../elliptic":128,"./key":139,"./signature":140,"hash.js":148}],139:[function(require,module,exports){
"use strict";function KeyPair(e,t){this.eddsa=e,this._secret=parseBytes(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=parseBytes(t.pub)}var elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert,parseBytes=utils.parseBytes,cachedProperty=utils.cachedProperty;KeyPair.fromPublic=function(e,t){return t instanceof KeyPair?t:new KeyPair(e,{pub:t})},KeyPair.fromSecret=function(e,t){return t instanceof KeyPair?t:new KeyPair(e,{secret:t})},KeyPair.prototype.secret=function(){return this._secret},cachedProperty(KeyPair,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),cachedProperty(KeyPair,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),cachedProperty(KeyPair,"privBytes",function(){var e=this.eddsa,t=this.hash(),i=e.encodingLength-1,r=t.slice(0,e.encodingLength);return r[0]&=248,r[i]&=127,r[i]|=64,r}),cachedProperty(KeyPair,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),cachedProperty(KeyPair,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),cachedProperty(KeyPair,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),KeyPair.prototype.sign=function(e){return assert(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},KeyPair.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},KeyPair.prototype.getSecret=function(e){return assert(this._secret,"KeyPair is public only"),utils.encode(this.secret(),e)},KeyPair.prototype.getPublic=function(e){return utils.encode(this.pubBytes(),e)},module.exports=KeyPair;

},{"../../elliptic":128}],140:[function(require,module,exports){
"use strict";function Signature(e,t){this.eddsa=e,"object"!=typeof t&&(t=parseBytes(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),assert(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof BN&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}var BN=require("bn.js"),elliptic=require("../../elliptic"),utils=elliptic.utils,assert=utils.assert,cachedProperty=utils.cachedProperty,parseBytes=utils.parseBytes;cachedProperty(Signature,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),cachedProperty(Signature,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),cachedProperty(Signature,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),cachedProperty(Signature,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),Signature.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},Signature.prototype.toHex=function(){return utils.encode(this.toBytes(),"hex").toUpperCase()},module.exports=Signature;

},{"../../elliptic":128,"bn.js":73}],141:[function(require,module,exports){
module.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}};

},{}],142:[function(require,module,exports){
"use strict";function getNAF(t,r){for(var i=[],e=1<<r+1,n=t.clone();n.cmpn(1)>=0;){var s;if(n.isOdd()){var u=n.andln(e-1);s=u>(e>>1)-1?(e>>1)-u:u,n.isubn(s)}else s=0;i.push(s);for(var l=0!==n.cmpn(0)&&0===n.andln(e-1)?r+1:1,a=1;a<l;a++)i.push(0);n.iushrn(l)}return i}function getJSF(t,r){var i=[[],[]];t=t.clone(),r=r.clone();for(var e=0,n=0;t.cmpn(-e)>0||r.cmpn(-n)>0;){var s=t.andln(3)+e&3,u=r.andln(3)+n&3;3===s&&(s=-1),3===u&&(u=-1);var l;if(0==(1&s))l=0;else{var a=t.andln(7)+e&7;l=3!==a&&5!==a||2!==u?s:-s}i[0].push(l);var o;if(0==(1&u))o=0;else{var a=r.andln(7)+n&7;o=3!==a&&5!==a||2!==s?u:-u}i[1].push(o),2*e===l+1&&(e=1-e),2*n===o+1&&(n=1-n),t.iushrn(1),r.iushrn(1)}return i}function cachedProperty(t,r,i){var e="_"+r;t.prototype[r]=function(){return void 0!==this[e]?this[e]:this[e]=i.call(this)}}function parseBytes(t){return"string"==typeof t?utils.toArray(t,"hex"):t}function intFromLE(t){return new BN(t,"hex","le")}var utils=exports,BN=require("bn.js"),minAssert=require("minimalistic-assert"),minUtils=require("minimalistic-crypto-utils");utils.assert=minAssert,utils.toArray=minUtils.toArray,utils.zero2=minUtils.zero2,utils.toHex=minUtils.toHex,utils.encode=minUtils.encode,utils.getNAF=getNAF,utils.getJSF=getJSF,utils.cachedProperty=cachedProperty,utils.parseBytes=parseBytes,utils.intFromLE=intFromLE;

},{"bn.js":73,"minimalistic-assert":164,"minimalistic-crypto-utils":165}],143:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.4.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  }
}

},{}],144:[function(require,module,exports){
"use strict";function EvStore(e){var r=e[hashKey];return r||(r=e[hashKey]={}),r}var OneVersionConstraint=require("individual/one-version"),MY_VERSION="7";OneVersionConstraint("ev-store",MY_VERSION);var hashKey="__EV_STORE_KEY@"+MY_VERSION;module.exports=EvStore;

},{"individual/one-version":158}],145:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(i=this._events[e],isUndefined(i))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),o=i.slice(),n=o.length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var n=!1;return i.listener=t,this.on(e,i),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=this._events[e],s=i.length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i=this._events[e],isFunction(i))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){return this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],146:[function(require,module,exports){
(function (Buffer){
function EVP_BytesToKey(e,f,r,u){Buffer.isBuffer(e)||(e=new Buffer(e,"binary")),f&&!Buffer.isBuffer(f)&&(f=new Buffer(f,"binary")),r/=8,u=u||0;for(var i,n,a=0,t=0,B=new Buffer(r),o=new Buffer(u),h=0,s=[];;){if(h++>0&&s.push(i),s.push(e),f&&s.push(f),i=md5(Buffer.concat(s)),s=[],n=0,r>0)for(;;){if(0===r)break;if(n===i.length)break;B[a++]=i[n],r--,n++}if(u>0&&n!==i.length)for(;;){if(0===u)break;if(n===i.length)break;o[t++]=i[n],u--,n++}if(0===r&&0===u)break}for(n=0;n<i.length;n++)i[n]=0;return{key:B,iv:o}}var md5=require("create-hash/md5");module.exports=EVP_BytesToKey;

}).call(this,require("buffer").Buffer)

},{"buffer":104,"create-hash/md5":110}],147:[function(require,module,exports){
(function (global){
var topLevel="undefined"!=typeof global?global:"undefined"!=typeof window?window:{},minDoc=require("min-document");if("undefined"!=typeof document)module.exports=document;else{var doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"];doccy||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":75}],148:[function(require,module,exports){
var hash=exports;hash.utils=require("./hash/utils"),hash.common=require("./hash/common"),hash.sha=require("./hash/sha"),hash.ripemd=require("./hash/ripemd"),hash.hmac=require("./hash/hmac"),hash.sha1=hash.sha.sha1,hash.sha256=hash.sha.sha256,hash.sha224=hash.sha.sha224,hash.sha384=hash.sha.sha384,hash.sha512=hash.sha.sha512,hash.ripemd160=hash.ripemd.ripemd160;

},{"./hash/common":149,"./hash/hmac":150,"./hash/ripemd":151,"./hash/sha":152,"./hash/utils":153}],149:[function(require,module,exports){
function BlockHash(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}var hash=require("../hash"),utils=hash.utils,assert=utils.assert;exports.BlockHash=BlockHash,BlockHash.prototype.update=function(t,i){if(t=utils.toArray(t,i),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){t=this.pending;var h=t.length%this._delta8;this.pending=t.slice(t.length-h,t.length),0===this.pending.length&&(this.pending=null),t=utils.join32(t,0,t.length-h,this.endian);for(var s=0;s<t.length;s+=this._delta32)this._update(t,s,s+this._delta32)}return this},BlockHash.prototype.digest=function(t){return this.update(this._pad()),assert(null===this.pending),this._digest(t)},BlockHash.prototype._pad=function(){var t=this.pendingTotal,i=this._delta8,h=i-(t+this.padLength)%i,s=new Array(h+this.padLength);s[0]=128;for(var n=1;n<h;n++)s[n]=0;if(t<<=3,"big"===this.endian){for(var e=8;e<this.padLength;e++)s[n++]=0;s[n++]=0,s[n++]=0,s[n++]=0,s[n++]=0,s[n++]=t>>>24&255,s[n++]=t>>>16&255,s[n++]=t>>>8&255,s[n++]=255&t}else{s[n++]=255&t,s[n++]=t>>>8&255,s[n++]=t>>>16&255,s[n++]=t>>>24&255,s[n++]=0,s[n++]=0,s[n++]=0,s[n++]=0;for(var e=8;e<this.padLength;e++)s[n++]=0}return s};

},{"../hash":148}],150:[function(require,module,exports){
function Hmac(t,i,e){if(!(this instanceof Hmac))return new Hmac(t,i,e);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(utils.toArray(i,e))}var hmac=exports,hash=require("../hash"),utils=hash.utils,assert=utils.assert;module.exports=Hmac,Hmac.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),assert(t.length<=this.blockSize);for(var i=t.length;i<this.blockSize;i++)t.push(0);for(var i=0;i<t.length;i++)t[i]^=54;this.inner=(new this.Hash).update(t);for(var i=0;i<t.length;i++)t[i]^=106;this.outer=(new this.Hash).update(t)},Hmac.prototype.update=function(t,i){return this.inner.update(t,i),this},Hmac.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)};

},{"../hash":148}],151:[function(require,module,exports){
function RIPEMD160(){if(!(this instanceof RIPEMD160))return new RIPEMD160;BlockHash.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(t,h,s,i){return t<=15?h^s^i:t<=31?h&s|~h&i:t<=47?(h|~s)^i:t<=63?h&i|s&~i:h^(s|~i)}function K(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function Kh(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}var hash=require("../hash"),utils=hash.utils,rotl32=utils.rotl32,sum32=utils.sum32,sum32_3=utils.sum32_3,sum32_4=utils.sum32_4,BlockHash=hash.common.BlockHash;utils.inherits(RIPEMD160,BlockHash),exports.ripemd160=RIPEMD160,RIPEMD160.blockSize=512,RIPEMD160.outSize=160,RIPEMD160.hmacStrength=192,RIPEMD160.padLength=64,RIPEMD160.prototype._update=function(t,h){for(var i=this.h[0],u=this.h[1],l=this.h[2],o=this.h[3],e=this.h[4],n=i,m=u,a=l,c=o,_=e,D=0;D<80;D++){var E=sum32(rotl32(sum32_4(i,f(D,u,l,o),t[r[D]+h],K(D)),s[D]),e);i=e,e=o,o=rotl32(l,10),l=u,u=E,E=sum32(rotl32(sum32_4(n,f(79-D,m,a,c),t[rh[D]+h],Kh(D)),sh[D]),_),n=_,_=c,c=rotl32(a,10),a=m,m=E}E=sum32_3(this.h[1],l,c),this.h[1]=sum32_3(this.h[2],o,_),this.h[2]=sum32_3(this.h[3],e,n),this.h[3]=sum32_3(this.h[4],i,m),this.h[4]=sum32_3(this.h[0],u,a),this.h[0]=E},RIPEMD160.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h,"little"):utils.split32(this.h,"little")};var r=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],rh=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],s=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],sh=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11];

},{"../hash":148}],152:[function(require,module,exports){
function SHA256(){if(!(this instanceof SHA256))return new SHA256;BlockHash.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=sha256_K,this.W=new Array(64)}function SHA224(){if(!(this instanceof SHA224))return new SHA224;SHA256.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}function SHA512(){if(!(this instanceof SHA512))return new SHA512;BlockHash.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=sha512_K,this.W=new Array(160)}function SHA384(){if(!(this instanceof SHA384))return new SHA384;SHA512.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}function SHA1(){if(!(this instanceof SHA1))return new SHA1;BlockHash.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}function ch32(t,h,s){return t&h^~t&s}function maj32(t,h,s){return t&h^t&s^h&s}function p32(t,h,s){return t^h^s}function s0_256(t){return rotr32(t,2)^rotr32(t,13)^rotr32(t,22)}function s1_256(t){return rotr32(t,6)^rotr32(t,11)^rotr32(t,25)}function g0_256(t){return rotr32(t,7)^rotr32(t,18)^t>>>3}function g1_256(t){return rotr32(t,17)^rotr32(t,19)^t>>>10}function ft_1(t,h,s,i){return 0===t?ch32(h,s,i):1===t||3===t?p32(h,s,i):2===t?maj32(h,s,i):void 0}function ch64_hi(t,h,s,i,r,o){var u=t&s^~t&r;return u<0&&(u+=4294967296),u}function ch64_lo(t,h,s,i,r,o){var u=h&i^~h&o;return u<0&&(u+=4294967296),u}function maj64_hi(t,h,s,i,r,o){var u=t&s^t&r^s&r;return u<0&&(u+=4294967296),u}function maj64_lo(t,h,s,i,r,o){var u=h&i^h&o^i&o;return u<0&&(u+=4294967296),u}function s0_512_hi(t,h){var s=rotr64_hi(t,h,28),i=rotr64_hi(h,t,2),r=rotr64_hi(h,t,7),o=s^i^r;return o<0&&(o+=4294967296),o}function s0_512_lo(t,h){var s=rotr64_lo(t,h,28),i=rotr64_lo(h,t,2),r=rotr64_lo(h,t,7),o=s^i^r;return o<0&&(o+=4294967296),o}function s1_512_hi(t,h){var s=rotr64_hi(t,h,14),i=rotr64_hi(t,h,18),r=rotr64_hi(h,t,9),o=s^i^r;return o<0&&(o+=4294967296),o}function s1_512_lo(t,h){var s=rotr64_lo(t,h,14),i=rotr64_lo(t,h,18),r=rotr64_lo(h,t,9),o=s^i^r;return o<0&&(o+=4294967296),o}function g0_512_hi(t,h){var s=rotr64_hi(t,h,1),i=rotr64_hi(t,h,8),r=shr64_hi(t,h,7),o=s^i^r;return o<0&&(o+=4294967296),o}function g0_512_lo(t,h){var s=rotr64_lo(t,h,1),i=rotr64_lo(t,h,8),r=shr64_lo(t,h,7),o=s^i^r;return o<0&&(o+=4294967296),o}function g1_512_hi(t,h){var s=rotr64_hi(t,h,19),i=rotr64_hi(h,t,29),r=shr64_hi(t,h,6),o=s^i^r;return o<0&&(o+=4294967296),o}function g1_512_lo(t,h){var s=rotr64_lo(t,h,19),i=rotr64_lo(h,t,29),r=shr64_lo(t,h,6),o=s^i^r;return o<0&&(o+=4294967296),o}var hash=require("../hash"),utils=hash.utils,assert=utils.assert,rotr32=utils.rotr32,rotl32=utils.rotl32,sum32=utils.sum32,sum32_4=utils.sum32_4,sum32_5=utils.sum32_5,rotr64_hi=utils.rotr64_hi,rotr64_lo=utils.rotr64_lo,shr64_hi=utils.shr64_hi,shr64_lo=utils.shr64_lo,sum64=utils.sum64,sum64_hi=utils.sum64_hi,sum64_lo=utils.sum64_lo,sum64_4_hi=utils.sum64_4_hi,sum64_4_lo=utils.sum64_4_lo,sum64_5_hi=utils.sum64_5_hi,sum64_5_lo=utils.sum64_5_lo,BlockHash=hash.common.BlockHash,sha256_K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],sha512_K=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],sha1_K=[1518500249,1859775393,2400959708,3395469782];utils.inherits(SHA256,BlockHash),exports.sha256=SHA256,SHA256.blockSize=512,SHA256.outSize=256,SHA256.hmacStrength=192,SHA256.padLength=64,SHA256.prototype._update=function(t,h){for(var s=this.W,i=0;i<16;i++)s[i]=t[h+i];for(;i<s.length;i++)s[i]=sum32_4(g1_256(s[i-2]),s[i-7],g0_256(s[i-15]),s[i-16]);var r=this.h[0],o=this.h[1],u=this.h[2],n=this.h[3],_=this.h[4],e=this.h[5],l=this.h[6],a=this.h[7];assert(this.k.length===s.length);for(var i=0;i<s.length;i++){var c=sum32_5(a,s1_256(_),ch32(_,e,l),this.k[i],s[i]),S=sum32(s0_256(r),maj32(r,o,u));a=l,l=e,e=_,_=sum32(n,c),n=u,u=o,o=r,r=sum32(c,S)}this.h[0]=sum32(this.h[0],r),this.h[1]=sum32(this.h[1],o),this.h[2]=sum32(this.h[2],u),this.h[3]=sum32(this.h[3],n),this.h[4]=sum32(this.h[4],_),this.h[5]=sum32(this.h[5],e),this.h[6]=sum32(this.h[6],l),this.h[7]=sum32(this.h[7],a)},SHA256.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h,"big"):utils.split32(this.h,"big")},utils.inherits(SHA224,SHA256),exports.sha224=SHA224,SHA224.blockSize=512,SHA224.outSize=224,SHA224.hmacStrength=192,SHA224.padLength=64,SHA224.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h.slice(0,7),"big"):utils.split32(this.h.slice(0,7),"big")},utils.inherits(SHA512,BlockHash),exports.sha512=SHA512,SHA512.blockSize=1024,SHA512.outSize=512,SHA512.hmacStrength=192,SHA512.padLength=128,SHA512.prototype._prepareBlock=function(t,h){for(var s=this.W,i=0;i<32;i++)s[i]=t[h+i];for(;i<s.length;i+=2){var r=g1_512_hi(s[i-4],s[i-3]),o=g1_512_lo(s[i-4],s[i-3]),u=s[i-14],n=s[i-13],_=g0_512_hi(s[i-30],s[i-29]),e=g0_512_lo(s[i-30],s[i-29]),l=s[i-32],a=s[i-31];s[i]=sum64_4_hi(r,o,u,n,_,e,l,a),s[i+1]=sum64_4_lo(r,o,u,n,_,e,l,a)}},SHA512.prototype._update=function(t,h){this._prepareBlock(t,h);var s=this.W,i=this.h[0],r=this.h[1],o=this.h[2],u=this.h[3],n=this.h[4],_=this.h[5],e=this.h[6],l=this.h[7],a=this.h[8],c=this.h[9],S=this.h[10],m=this.h[11],H=this.h[12],A=this.h[13],f=this.h[14],g=this.h[15];assert(this.k.length===s.length);for(var p=0;p<s.length;p+=2){var v=f,k=g,b=s1_512_hi(a,c),x=s1_512_lo(a,c),d=ch64_hi(a,c,S,m,H,A),y=ch64_lo(a,c,S,m,H,A),z=this.k[p],B=this.k[p+1],w=s[p],j=s[p+1],W=sum64_5_hi(v,k,b,x,d,y,z,B,w,j),K=sum64_5_lo(v,k,b,x,d,y,z,B,w,j),v=s0_512_hi(i,r),k=s0_512_lo(i,r),b=maj64_hi(i,r,o,u,n,_),x=maj64_lo(i,r,o,u,n,_),L=sum64_hi(v,k,b,x),q=sum64_lo(v,k,b,x);f=H,g=A,H=S,A=m,S=a,m=c,a=sum64_hi(e,l,W,K),c=sum64_lo(l,l,W,K),e=n,l=_,n=o,_=u,o=i,u=r,i=sum64_hi(W,K,L,q),r=sum64_lo(W,K,L,q)}sum64(this.h,0,i,r),sum64(this.h,2,o,u),sum64(this.h,4,n,_),sum64(this.h,6,e,l),sum64(this.h,8,a,c),sum64(this.h,10,S,m),sum64(this.h,12,H,A),sum64(this.h,14,f,g)},SHA512.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h,"big"):utils.split32(this.h,"big")},utils.inherits(SHA384,SHA512),exports.sha384=SHA384,SHA384.blockSize=1024,SHA384.outSize=384,SHA384.hmacStrength=192,SHA384.padLength=128,SHA384.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h.slice(0,12),"big"):utils.split32(this.h.slice(0,12),"big")},utils.inherits(SHA1,BlockHash),exports.sha1=SHA1,SHA1.blockSize=512,SHA1.outSize=160,SHA1.hmacStrength=80,SHA1.padLength=64,SHA1.prototype._update=function(t,h){for(var s=this.W,i=0;i<16;i++)s[i]=t[h+i];for(;i<s.length;i++)s[i]=rotl32(s[i-3]^s[i-8]^s[i-14]^s[i-16],1);for(var r=this.h[0],o=this.h[1],u=this.h[2],n=this.h[3],_=this.h[4],i=0;i<s.length;i++){var e=~~(i/20),l=sum32_5(rotl32(r,5),ft_1(e,o,u,n),_,s[i],sha1_K[e]);_=n,n=u,u=rotl32(o,30),o=r,r=l}this.h[0]=sum32(this.h[0],r),this.h[1]=sum32(this.h[1],o),this.h[2]=sum32(this.h[2],u),this.h[3]=sum32(this.h[3],n),this.h[4]=sum32(this.h[4],_)},SHA1.prototype._digest=function(t){return"hex"===t?utils.toHex32(this.h,"big"):utils.split32(this.h,"big")};

},{"../hash":148}],153:[function(require,module,exports){
function toArray(r,t){if(Array.isArray(r))return r.slice();if(!r)return[];var n=[];if("string"==typeof r)if(t){if("hex"===t){r=r.replace(/[^a-z0-9]+/gi,""),r.length%2!=0&&(r="0"+r);for(var u=0;u<r.length;u+=2)n.push(parseInt(r[u]+r[u+1],16))}}else for(var u=0;u<r.length;u++){var o=r.charCodeAt(u),e=o>>8,s=255&o;e?n.push(e,s):n.push(s)}else for(var u=0;u<r.length;u++)n[u]=0|r[u];return n}function toHex(r){for(var t="",n=0;n<r.length;n++)t+=zero2(r[n].toString(16));return t}function htonl(r){return(r>>>24|r>>>8&65280|r<<8&16711680|(255&r)<<24)>>>0}function toHex32(r,t){for(var n="",u=0;u<r.length;u++){var o=r[u];"little"===t&&(o=htonl(o)),n+=zero8(o.toString(16))}return n}function zero2(r){return 1===r.length?"0"+r:r}function zero8(r){return 7===r.length?"0"+r:6===r.length?"00"+r:5===r.length?"000"+r:4===r.length?"0000"+r:3===r.length?"00000"+r:2===r.length?"000000"+r:1===r.length?"0000000"+r:r}function join32(r,t,n,u){var o=n-t;assert(o%4==0);for(var e=new Array(o/4),s=0,i=t;s<e.length;s++,i+=4){var l;l="big"===u?r[i]<<24|r[i+1]<<16|r[i+2]<<8|r[i+3]:r[i+3]<<24|r[i+2]<<16|r[i+1]<<8|r[i],e[s]=l>>>0}return e}function split32(r,t){for(var n=new Array(4*r.length),u=0,o=0;u<r.length;u++,o+=4){var e=r[u];"big"===t?(n[o]=e>>>24,n[o+1]=e>>>16&255,n[o+2]=e>>>8&255,n[o+3]=255&e):(n[o+3]=e>>>24,n[o+2]=e>>>16&255,n[o+1]=e>>>8&255,n[o]=255&e)}return n}function rotr32(r,t){return r>>>t|r<<32-t}function rotl32(r,t){return r<<t|r>>>32-t}function sum32(r,t){return r+t>>>0}function sum32_3(r,t,n){return r+t+n>>>0}function sum32_4(r,t,n,u){return r+t+n+u>>>0}function sum32_5(r,t,n,u,o){return r+t+n+u+o>>>0}function assert(r,t){if(!r)throw new Error(t||"Assertion failed")}function sum64(r,t,n,u){var o=r[t],e=r[t+1],s=u+e>>>0,i=(s<u?1:0)+n+o;r[t]=i>>>0,r[t+1]=s}function sum64_hi(r,t,n,u){return(t+u>>>0<t?1:0)+r+n>>>0}function sum64_lo(r,t,n,u){return t+u>>>0}function sum64_4_hi(r,t,n,u,o,e,s,i){var l=0,h=t;return h=h+u>>>0,l+=h<t?1:0,h=h+e>>>0,l+=h<e?1:0,h=h+i>>>0,l+=h<i?1:0,r+n+o+s+l>>>0}function sum64_4_lo(r,t,n,u,o,e,s,i){return t+u+e+i>>>0}function sum64_5_hi(r,t,n,u,o,e,s,i,l,h){var _=0,f=t;return f=f+u>>>0,_+=f<t?1:0,f=f+e>>>0,_+=f<e?1:0,f=f+i>>>0,_+=f<i?1:0,f=f+h>>>0,_+=f<h?1:0,r+n+o+s+l+_>>>0}function sum64_5_lo(r,t,n,u,o,e,s,i,l,h){return t+u+e+i+h>>>0}function rotr64_hi(r,t,n){return(t<<32-n|r>>>n)>>>0}function rotr64_lo(r,t,n){return(r<<32-n|t>>>n)>>>0}function shr64_hi(r,t,n){return r>>>n}function shr64_lo(r,t,n){return(r<<32-n|t>>>n)>>>0}var utils=exports,inherits=require("inherits");utils.toArray=toArray,utils.toHex=toHex,utils.htonl=htonl,utils.toHex32=toHex32,utils.zero2=zero2,utils.zero8=zero8,utils.join32=join32,utils.split32=split32,utils.rotr32=rotr32,utils.rotl32=rotl32,utils.sum32=sum32,utils.sum32_3=sum32_3,utils.sum32_4=sum32_4,utils.sum32_5=sum32_5,utils.assert=assert,utils.inherits=inherits,exports.sum64=sum64,exports.sum64_hi=sum64_hi,exports.sum64_lo=sum64_lo,exports.sum64_4_hi=sum64_4_hi,exports.sum64_4_lo=sum64_4_lo,exports.sum64_5_hi=sum64_5_hi,exports.sum64_5_lo=sum64_5_lo,exports.rotr64_hi=rotr64_hi,exports.rotr64_lo=rotr64_lo,exports.shr64_hi=shr64_hi,exports.shr64_lo=shr64_lo;

},{"inherits":159}],154:[function(require,module,exports){
"use strict";function HmacDRBG(t){if(!(this instanceof HmacDRBG))return new HmacDRBG(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this.reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=utils.toArray(t.entropy,t.entropyEnc||"hex"),i=utils.toArray(t.nonce,t.nonceEnc||"hex"),s=utils.toArray(t.pers,t.persEnc||"hex");assert(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,i,s)}var hash=require("hash.js"),utils=require("minimalistic-crypto-utils"),assert=require("minimalistic-assert");module.exports=HmacDRBG,HmacDRBG.prototype._init=function(t,e,i){var s=t.concat(e).concat(i);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var h=0;h<this.V.length;h++)this.K[h]=0,this.V[h]=1;this._update(s),this.reseed=1,this.reseedInterval=281474976710656},HmacDRBG.prototype._hmac=function(){return new hash.hmac(this.hash,this.K)},HmacDRBG.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},HmacDRBG.prototype.reseed=function(t,e,i,s){"string"!=typeof e&&(s=i,i=e,e=null),t=utils.toArray(t,e),i=utils.toArray(i,s),assert(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(i||[])),this.reseed=1},HmacDRBG.prototype.generate=function(t,e,i,s){if(this.reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(s=i,i=e,e=null),i&&(i=utils.toArray(i,s||"hex"),this._update(i));for(var h=[];h.length<t;)this.V=this._hmac().update(this.V).digest(),h=h.concat(this.V);var r=h.slice(0,t);return this._update(i),this.reseed++,utils.encode(r,e)};

},{"hash.js":148,"minimalistic-assert":164,"minimalistic-crypto-utils":165}],155:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:1/0*(s?-1:1);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=o<0||0===o&&1/o<0?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],156:[function(require,module,exports){
var indexOf=[].indexOf;module.exports=function(e,n){if(indexOf)return e.indexOf(n);for(var r=0;r<e.length;++r)if(e[r]===n)return r;return-1};

},{}],157:[function(require,module,exports){
(function (global){
"use strict";function Individual(o,n){return o in root?root[o]:(root[o]=n,n)}var root="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};module.exports=Individual;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],158:[function(require,module,exports){
"use strict";function OneVersion(n,e,i){var r="__INDIVIDUAL_ONE_VERSION_"+n,o=r+"_ENFORCE_SINGLETON",a=Individual(o,e);if(a!==e)throw new Error("Can only have one copy of "+n+".\nYou already have version "+a+" installed.\nThis means you cannot install version "+e);return Individual(r,i)}var Individual=require("./index.js");module.exports=OneVersion;

},{"./index.js":157}],159:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],160:[function(require,module,exports){
function isBuffer(f){return!!f.constructor&&"function"==typeof f.constructor.isBuffer&&f.constructor.isBuffer(f)}function isSlowBuffer(f){return"function"==typeof f.readFloatLE&&"function"==typeof f.slice&&isBuffer(f.slice(0,0))}module.exports=function(f){return null!=f&&(isBuffer(f)||isSlowBuffer(f)||!!f._isBuffer)};

},{}],161:[function(require,module,exports){
"use strict";module.exports=function(t){return"object"==typeof t&&null!==t};

},{}],162:[function(require,module,exports){
(function (Buffer){
module.exports=function(r,e){if(!Array.isArray(r))throw TypeError("Expected values Array");if("function"!=typeof e)throw TypeError("Expected digest Function");for(var o=r.length,t=r.concat();o>1;){for(var n=0,a=0;a<o;a+=2,++n){var c=Buffer.concat([t[a],a+1!==o?t[a+1]:t[a]]);t[n]=e(c)}o=n}return t[0]};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],163:[function(require,module,exports){
function MillerRabin(r){this.rand=r||new brorand.Rand}var bn=require("bn.js"),brorand=require("brorand");module.exports=MillerRabin,MillerRabin.create=function(r){return new MillerRabin(r)},MillerRabin.prototype._rand=function(r){var n=r.bitLength(),e=this.rand.generate(Math.ceil(n/8));e[0]|=3;var t=7&n;return 0!==t&&(e[e.length-1]>>=7-t),new bn(e)},MillerRabin.prototype.test=function(r,n,e){var t=r.bitLength(),a=bn.mont(r),i=new bn(1).toRed(a);n||(n=Math.max(1,t/48|0));for(var o=r.subn(1),b=o.subn(1),d=0;!o.testn(d);d++);for(var u=r.shrn(d),f=o.toRed(a);n>0;n--){var c=this._rand(b);e&&e(c);var s=c.toRed(a).redPow(u);if(0!==s.cmp(i)&&0!==s.cmp(f)){for(var l=1;l<d;l++){if(s=s.redSqr(),0===s.cmp(i))return!1;if(0===s.cmp(f))break}if(l===d)return!1}}return!0},MillerRabin.prototype.getDivisor=function(r,n){var e=r.bitLength(),t=bn.mont(r),a=new bn(1).toRed(t);n||(n=Math.max(1,e/48|0));for(var i=r.subn(1),o=i.subn(1),b=0;!i.testn(b);b++);for(var d=r.shrn(b),u=i.toRed(t);n>0;n--){var f=this._rand(o),c=r.gcd(f);if(0!==c.cmpn(1))return c;var s=f.toRed(t).redPow(d);if(0!==s.cmp(a)&&0!==s.cmp(u)){for(var l=1;l<b;l++){if(s=s.redSqr(),0===s.cmp(a))return s.fromRed().subn(1).gcd(r);if(0===s.cmp(u))break}if(l===b)return s=s.redSqr(),s.fromRed().subn(1).gcd(r)}}return!1};

},{"bn.js":73,"brorand":74}],164:[function(require,module,exports){
function assert(r,e){if(!r)throw new Error(e||"Assertion failed")}module.exports=assert,assert.equal=function(r,e,s){if(r!=e)throw new Error(s||"Assertion failed: "+r+" != "+e)};

},{}],165:[function(require,module,exports){
"use strict";function toArray(r,t){if(Array.isArray(r))return r.slice();if(!r)return[];var e=[];if("string"!=typeof r){for(var n=0;n<r.length;n++)e[n]=0|r[n];return e}if("hex"===t){r=r.replace(/[^a-z0-9]+/gi,""),r.length%2!=0&&(r="0"+r);for(var n=0;n<r.length;n+=2)e.push(parseInt(r[n]+r[n+1],16))}else for(var n=0;n<r.length;n++){var o=r.charCodeAt(n),u=o>>8,i=255&o;u?e.push(u,i):e.push(i)}return e}function zero2(r){return 1===r.length?"0"+r:r}function toHex(r){for(var t="",e=0;e<r.length;e++)t+=zero2(r[e].toString(16));return t}var utils=exports;utils.toArray=toArray,utils.zero2=zero2,utils.toHex=toHex,utils.encode=function(r,t){return"hex"===t?toHex(r):r};

},{}],166:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],167:[function(require,module,exports){
var asn1=require("asn1.js"),RSAPrivateKey=asn1.define("RSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())});exports.RSAPrivateKey=RSAPrivateKey;var RSAPublicKey=asn1.define("RSAPublicKey",function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())});exports.RSAPublicKey=RSAPublicKey;var PublicKey=asn1.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier),this.key("subjectPublicKey").bitstr())});exports.PublicKey=PublicKey;var AlgorithmIdentifier=asn1.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())}),PrivateKeyInfo=asn1.define("PrivateKeyInfo",function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(AlgorithmIdentifier),this.key("subjectPrivateKey").octstr())});exports.PrivateKey=PrivateKeyInfo;var EncryptedPrivateKeyInfo=asn1.define("EncryptedPrivateKeyInfo",function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())});exports.EncryptedPrivateKey=EncryptedPrivateKeyInfo;var DSAPrivateKey=asn1.define("DSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())});exports.DSAPrivateKey=DSAPrivateKey,exports.DSAparam=asn1.define("DSAparam",function(){this.int()});var ECPrivateKey=asn1.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(ECParameters),this.key("publicKey").optional().explicit(1).bitstr())});exports.ECPrivateKey=ECPrivateKey;var ECParameters=asn1.define("ECParameters",function(){this.choice({namedCurve:this.objid()})});exports.signature=asn1.define("signature",function(){this.seq().obj(this.key("r").int(),this.key("s").int())});

},{"asn1.js":12}],168:[function(require,module,exports){
(function (Buffer){
var findProc=/Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m,startRegex=/^-----BEGIN (.*) KEY-----\r?\n/m,fullRegex=/^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m,evp=require("evp_bytestokey"),ciphers=require("browserify-aes");module.exports=function(e,r){var n,a=e.toString(),t=a.match(findProc);if(t){var f="aes"+t[1],c=new Buffer(t[2],"hex"),s=new Buffer(t[3].replace(/\r?\n/g,""),"base64"),i=evp(r,c.slice(0,8),parseInt(t[1],10)).key,p=[],u=ciphers.createDecipheriv(f,i,c);p.push(u.update(s)),p.push(u.final()),n=Buffer.concat(p)}else{var o=a.match(fullRegex);n=new Buffer(o[2].replace(/\r?\n/g,""),"base64")}return{tag:a.match(startRegex)[1]+" KEY",data:n}};

}).call(this,require("buffer").Buffer)

},{"browserify-aes":79,"buffer":104,"evp_bytestokey":146}],169:[function(require,module,exports){
(function (Buffer){
function parseKeys(e){var r;"object"!=typeof e||Buffer.isBuffer(e)||(r=e.passphrase,e=e.key),"string"==typeof e&&(e=new Buffer(e));var a,t,s=fixProc(e,r),i=s.tag,c=s.data;switch(i){case"PUBLIC KEY":switch(t=asn1.PublicKey.decode(c,"der"),a=t.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return asn1.RSAPublicKey.decode(t.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return t.subjectPrivateKey=t.subjectPublicKey,{type:"ec",data:t};case"1.2.840.10040.4.1":return t.algorithm.params.pub_key=asn1.DSAparam.decode(t.subjectPublicKey.data,"der"),{type:"dsa",data:t.algorithm.params};default:throw new Error("unknown key id "+a)}throw new Error("unknown key type "+i);case"ENCRYPTED PRIVATE KEY":c=asn1.EncryptedPrivateKey.decode(c,"der"),c=decrypt(c,r);case"PRIVATE KEY":switch(t=asn1.PrivateKey.decode(c,"der"),a=t.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return asn1.RSAPrivateKey.decode(t.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:t.algorithm.curve,privateKey:asn1.ECPrivateKey.decode(t.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return t.algorithm.params.priv_key=asn1.DSAparam.decode(t.subjectPrivateKey,"der"),{type:"dsa",params:t.algorithm.params};default:throw new Error("unknown key id "+a)}throw new Error("unknown key type "+i);case"RSA PUBLIC KEY":return asn1.RSAPublicKey.decode(c,"der");case"RSA PRIVATE KEY":return asn1.RSAPrivateKey.decode(c,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:asn1.DSAPrivateKey.decode(c,"der")};case"EC PRIVATE KEY":return c=asn1.ECPrivateKey.decode(c,"der"),{curve:c.parameters.value,privateKey:c.privateKey};default:throw new Error("unknown key type "+i)}}function decrypt(e,r){var a=e.algorithm.decrypt.kde.kdeparams.salt,t=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),s=aesid[e.algorithm.decrypt.cipher.algo.join(".")],i=e.algorithm.decrypt.cipher.iv,c=e.subjectPrivateKey,d=parseInt(s.split("-")[1],10)/8,n=compat.pbkdf2Sync(r,a,t,d),o=ciphers.createDecipheriv(s,n,i),u=[];return u.push(o.update(c)),u.push(o.final()),Buffer.concat(u)}var asn1=require("./asn1"),aesid=require("./aesid.json"),fixProc=require("./fixProc"),ciphers=require("browserify-aes"),compat=require("pbkdf2");module.exports=parseKeys,parseKeys.signature=asn1.signature;

}).call(this,require("buffer").Buffer)

},{"./aesid.json":166,"./asn1":167,"./fixProc":168,"browserify-aes":79,"buffer":104,"pbkdf2":170}],170:[function(require,module,exports){
(function (process,Buffer){
var createHmac=require("create-hmac"),checkParameters=require("./precondition");exports.pbkdf2=function(e,r,t,f,n,c){if("function"==typeof n&&(c=n,n=void 0),checkParameters(t,f),"function"!=typeof c)throw new Error("No callback provided to pbkdf2");setTimeout(function(){c(null,exports.pbkdf2Sync(e,r,t,f,n))})};var defaultEncoding;if(process.browser)defaultEncoding="utf-8";else{defaultEncoding=parseInt(process.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary"}exports.pbkdf2Sync=function(e,r,t,f,n){Buffer.isBuffer(e)||(e=new Buffer(e,defaultEncoding)),Buffer.isBuffer(r)||(r=new Buffer(r,defaultEncoding)),checkParameters(t,f),n=n||"sha1";var c,a=1,o=new Buffer(f),i=new Buffer(r.length+4);r.copy(i,0,0,r.length);for(var u,d,s=1;s<=a;s++){i.writeUInt32BE(s,r.length);var p=createHmac(n,e).update(i).digest();c||(c=p.length,d=new Buffer(c),a=Math.ceil(f/c),u=f-(a-1)*c),p.copy(d,0,0,c);for(var l=1;l<t;l++){p=createHmac(n,e).update(p).digest();for(var g=0;g<c;g++)d[g]^=p[g]}var h=(s-1)*c,v=s===a?u:c;d.copy(o,h,0,v)}return o};

}).call(this,require('_process'),require("buffer").Buffer)

},{"./precondition":171,"_process":173,"buffer":104,"create-hmac":111}],171:[function(require,module,exports){
var MAX_ALLOC=Math.pow(2,30)-1;module.exports=function(r,e){if("number"!=typeof r)throw new TypeError("Iterations not a number");if(r<0)throw new TypeError("Bad iterations");if("number"!=typeof e)throw new TypeError("Key length not a number");if(e<0||e>MAX_ALLOC||e!==e)throw new TypeError("Bad key length")};

},{}],172:[function(require,module,exports){
(function (process){
"use strict";function nextTick(e,n,c,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var s,t,o=arguments.length;switch(o){case 0:case 1:return process.nextTick(e);case 2:return process.nextTick(function(){e.call(null,n)});case 3:return process.nextTick(function(){e.call(null,n,c)});case 4:return process.nextTick(function(){e.call(null,n,c,r)});default:for(s=new Array(o-1),t=0;t<s.length;)s[t++]=arguments[t];return process.nextTick(function(){e.apply(null,s)})}}!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?module.exports=nextTick:module.exports=process.nextTick;

}).call(this,require('_process'))

},{"_process":173}],173:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],174:[function(require,module,exports){
exports.publicEncrypt=require("./publicEncrypt"),exports.privateDecrypt=require("./privateDecrypt"),exports.privateEncrypt=function(r,p){return exports.publicEncrypt(r,p,!0)},exports.publicDecrypt=function(r,p){return exports.privateDecrypt(r,p,!0)};

},{"./privateDecrypt":176,"./publicEncrypt":177}],175:[function(require,module,exports){
(function (Buffer){
function i2ops(e){var r=new Buffer(4);return r.writeUInt32BE(e,0),r}var createHash=require("create-hash");module.exports=function(e,r){for(var t,a=new Buffer(""),n=0;a.length<r;)t=i2ops(n++),a=Buffer.concat([a,createHash("sha1").update(e).update(t).digest()]);return a.slice(0,r)};

}).call(this,require("buffer").Buffer)

},{"buffer":104,"create-hash":108}],176:[function(require,module,exports){
(function (Buffer){
function oaep(r,e){var n=(r.modulus,r.modulus.byteLength()),t=(e.length,createHash("sha1").update(new Buffer("")).digest()),i=t.length;if(0!==e[0])throw new Error("decryption error");var o=e.slice(1,i+1),u=e.slice(i+1),a=xor(o,mgf(u,i)),c=xor(u,mgf(a,n-i-1));if(compare(t,c.slice(0,i)))throw new Error("decryption error");for(var f=i;0===c[f];)f++;if(1!==c[f++])throw new Error("decryption error");return c.slice(f)}function pkcs1(r,e,n){for(var t=e.slice(0,2),i=2,o=0;0!==e[i++];)if(i>=e.length){o++;break}var u=e.slice(2,i-1);e.slice(i-1,i);if(("0002"!==t.toString("hex")&&!n||"0001"!==t.toString("hex")&&n)&&o++,u.length<8&&o++,o)throw new Error("decryption error");return e.slice(i)}function compare(r,e){r=new Buffer(r),e=new Buffer(e);var n=0,t=r.length;r.length!==e.length&&(n++,t=Math.min(r.length,e.length));for(var i=-1;++i<t;)n+=r[i]^e[i];return n}var parseKeys=require("parse-asn1"),mgf=require("./mgf"),xor=require("./xor"),bn=require("bn.js"),crt=require("browserify-rsa"),createHash=require("create-hash"),withPublic=require("./withPublic");module.exports=function(r,e,n){var t;t=r.padding?r.padding:n?1:4;var i=parseKeys(r),o=i.modulus.byteLength();if(e.length>o||new bn(e).cmp(i.modulus)>=0)throw new Error("decryption error");var u;u=n?withPublic(new bn(e),i):crt(e,i);var a=new Buffer(o-u.length);if(a.fill(0),u=Buffer.concat([a,u],o),4===t)return oaep(i,u);if(1===t)return pkcs1(i,u,n);if(3===t)return u;throw new Error("unknown padding")};

}).call(this,require("buffer").Buffer)

},{"./mgf":175,"./withPublic":178,"./xor":179,"bn.js":73,"browserify-rsa":95,"buffer":104,"create-hash":108,"parse-asn1":169}],177:[function(require,module,exports){
(function (Buffer){
function oaep(e,r){var n=e.modulus.byteLength(),o=r.length,t=createHash("sha1").update(new Buffer("")).digest(),f=t.length,u=2*f;if(o>n-u-2)throw new Error("message too long");var a=new Buffer(n-o-u-2);a.fill(0);var s=n-f-1,i=randomBytes(f),w=xor(Buffer.concat([t,a,new Buffer([1]),r],s),mgf(i,s)),c=xor(i,mgf(w,f));return new bn(Buffer.concat([new Buffer([0]),c,w],n))}function pkcs1(e,r,n){var o=r.length,t=e.modulus.byteLength();if(o>t-11)throw new Error("message too long");var f;return n?(f=new Buffer(t-o-3),f.fill(255)):f=nonZero(t-o-3),new bn(Buffer.concat([new Buffer([0,n?1:2]),f,new Buffer([0]),r],t))}function nonZero(e,r){for(var n,o=new Buffer(e),t=0,f=randomBytes(2*e),u=0;t<e;)u===f.length&&(f=randomBytes(2*e),u=0),(n=f[u++])&&(o[t++]=n);return o}var parseKeys=require("parse-asn1"),randomBytes=require("randombytes"),createHash=require("create-hash"),mgf=require("./mgf"),xor=require("./xor"),bn=require("bn.js"),withPublic=require("./withPublic"),crt=require("browserify-rsa"),constants={RSA_PKCS1_OAEP_PADDING:4,RSA_PKCS1_PADDIN:1,RSA_NO_PADDING:3};module.exports=function(e,r,n){var o;o=e.padding?e.padding:n?1:4;var t,f=parseKeys(e);if(4===o)t=oaep(f,r);else if(1===o)t=pkcs1(f,r,n);else{if(3!==o)throw new Error("unknown padding");if(t=new bn(r),t.cmp(f.modulus)>=0)throw new Error("data too long for modulus")}return n?crt(t,f):withPublic(t,f)};

}).call(this,require("buffer").Buffer)

},{"./mgf":175,"./withPublic":178,"./xor":179,"bn.js":73,"browserify-rsa":95,"buffer":104,"create-hash":108,"parse-asn1":169,"randombytes":181}],178:[function(require,module,exports){
(function (Buffer){
function withPublic(e,n){return new Buffer(e.toRed(bn.mont(n.modulus)).redPow(new bn(n.publicExponent)).fromRed().toArray())}var bn=require("bn.js");module.exports=withPublic;

}).call(this,require("buffer").Buffer)

},{"bn.js":73,"buffer":104}],179:[function(require,module,exports){
module.exports=function(r,e){for(var n=r.length,o=-1;++o<n;)r[o]^=e[o];return r};

},{}],180:[function(require,module,exports){
function encodingLength(e){return e<OPS.OP_PUSHDATA1?1:e<=255?2:e<=65535?3:5}function encode(e,n,t){var r=encodingLength(n);return 1===r?e.writeUInt8(n,t):2===r?(e.writeUInt8(OPS.OP_PUSHDATA1,t),e.writeUInt8(n,t+1)):3===r?(e.writeUInt8(OPS.OP_PUSHDATA2,t),e.writeUInt16LE(n,t+1)):(e.writeUInt8(OPS.OP_PUSHDATA4,t),e.writeUInt32LE(n,t+1)),r}function decode(e,n){var t,r,i=e.readUInt8(n);if(i<OPS.OP_PUSHDATA1)t=i,r=1;else if(i===OPS.OP_PUSHDATA1){if(n+2>e.length)return null;t=e.readUInt8(n+1),r=2}else if(i===OPS.OP_PUSHDATA2){if(n+3>e.length)return null;t=e.readUInt16LE(n+1),r=3}else{if(n+5>e.length)return null;if(i!==OPS.OP_PUSHDATA4)throw new Error("Unexpected opcode");t=e.readUInt32LE(n+1),r=5}return{opcode:i,number:t,size:r}}var OPS=require("bitcoin-ops");module.exports={encodingLength:encodingLength,encode:encode,decode:decode};

},{"bitcoin-ops":34}],181:[function(require,module,exports){
(function (process,global,Buffer){
"use strict";function oldBrowser(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}function randomBytes(r,o){if(r>65536)throw new Error("requested too many random bytes");var e=new global.Uint8Array(r);r>0&&crypto.getRandomValues(e);var t=new Buffer(e.buffer);return"function"==typeof o?process.nextTick(function(){o(null,t)}):t}var crypto=global.crypto||global.msCrypto;crypto&&crypto.getRandomValues?module.exports=randomBytes:module.exports=oldBrowser;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":173,"buffer":104}],182:[function(require,module,exports){
module.exports=require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":183}],183:[function(require,module,exports){
"use strict";function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||processNextTick(onEndNT,this)}function onEndNT(e){e.end()}function forEach(e,t){for(var r=0,i=e.length;r<i;r++)t(e[r],r)}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};module.exports=Duplex;var processNextTick=require("process-nextick-args"),util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}

},{"./_stream_readable":185,"./_stream_writable":187,"core-util-is":106,"inherits":159,"process-nextick-args":172}],184:[function(require,module,exports){
"use strict";function PassThrough(r){if(!(this instanceof PassThrough))return new PassThrough(r);Transform.call(this,r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":186,"core-util-is":106,"inherits":159}],185:[function(require,module,exports){
(function (process){
"use strict";function ReadableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Readable))return new Readable(e);this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),Stream.call(this)}function readableAddChunk(e,t,r,n,a){var i=chunkInvalid(t,r);if(i)e.emit("error",i);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!a){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&a){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else{var o;!t.decoder||a||n||(r=t.decoder.write(r),o=!t.objectMode&&0===r.length),a||(t.reading=!1),o||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,a?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e))),maybeReadMore(e,t)}else a||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function computeNewHighWaterMark(e){return e>=MAX_HWM?e=MAX_HWM:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:null===e||isNaN(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:e<=0?0:(e>t.highWaterMark&&(t.highWaterMark=computeNewHighWaterMark(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var r=null;return Buffer.isBuffer(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?processNextTick(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,processNextTick(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EElistenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,processNextTick(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do{var r=e.read()}while(null!==r&&t.flowing)}function fromList(e,t){var r,n=t.buffer,a=t.length,i=!!t.decoder,d=!!t.objectMode;if(0===n.length)return null;if(0===a)r=null;else if(d)r=n.shift();else if(!e||e>=a)r=i?n.join(""):1===n.length?n[0]:Buffer.concat(n,a),n.length=0;else if(e<n[0].length){var o=n[0];r=o.slice(0,e),n[0]=o.slice(e)}else if(e===n[0].length)r=n.shift();else{r=i?"":new Buffer(e);for(var l=0,u=0,s=n.length;u<s&&l<e;u++){var o=n[0],h=Math.min(e-l,o.length);i?r+=o.slice(0,h):o.copy(r,l,0,h),h<o.length?n[0]=o.slice(h):n.shift(),l+=h}}return r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,processNextTick(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}module.exports=Readable;var processNextTick=require("process-nextick-args"),isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events"),EElistenerCount=function(e,t){return e.listeners(t).length},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer,util=require("core-util-is");util.inherits=require("inherits");var debugUtil=require("util"),debug=void 0;debug=debugUtil&&debugUtil.debuglog?debugUtil.debuglog("stream"):function(){};var StringDecoder;util.inherits(Readable,Stream);var Duplex,Duplex;Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=new Buffer(e,t),t=""),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){return readableAddChunk(this,this._readableState,e,"",!0)},Readable.prototype.isPaused=function(){return this._readableState.flowing===!1},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,r=e;if(("number"!=typeof e||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(0===(e=howMuchToRead(e,t))&&t.ended)return 0===t.length&&endReadable(this),null;var n=t.needReadable;debug("need readable",n),(0===t.length||t.length-e<t.highWaterMark)&&(n=!0,debug("length less than watermark",n)),(t.ended||t.reading)&&(n=!1,debug("reading or ended",n)),n&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),n&&!t.reading&&(e=howMuchToRead(r,t));var a;return a=e>0?fromList(e,t):null,null===a&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),r!==e&&t.ended&&0===t.length&&endReadable(this),null!==a&&this.emit("data",a),a},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function r(e){debug("onunpipe"),e===s&&a()}function n(){debug("onend"),e.end()}function a(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",c),e.removeListener("error",d),e.removeListener("unpipe",r),s.removeListener("end",n),s.removeListener("end",a),s.removeListener("data",i),b=!0,!h.awaitDrain||e._writableState&&!e._writableState.needDrain||c()}function i(t){debug("ondata"),!1===e.write(t)&&(1!==h.pipesCount||h.pipes[0]!==e||1!==s.listenerCount("data")||b||(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++),s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EElistenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,p=f?n:a;h.endEmitted?processNextTick(p):s.once("end",p),e.on("unpipe",r);var c=pipeOnDrain(s);e.on("drain",c);var b=!1;return s.on("data",i),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<n;a++)r[a].emit("unpipe",this);return this}var i=indexOf(t.pipes,e);return i===-1?this:(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&!this._readableState.endEmitted){var n=this._readableState;n.readableListening||(n.readableListening=!0,n.emittedReadable=!1,n.needReadable=!0,n.reading?n.length&&emitReadable(this,n):processNextTick(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(a){if(debug("wrapped data"),t.decoder&&(a=t.decoder.write(a)),(!t.objectMode||null!==a&&void 0!==a)&&(t.objectMode||a&&a.length)){n.push(a)||(r=!0,e.pause())}});for(var a in e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));return forEach(["error","close","destroy","pause","resume"],function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":183,"_process":173,"buffer":104,"core-util-is":106,"events":145,"inherits":159,"isarray":188,"process-nextick-args":172,"stream":202,"string_decoder/":203,"util":75}],186:[function(require,module,exports){
"use strict";function TransformState(r){this.afterTransform=function(t,n){return afterTransform(r,t,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var i=e.writecb;if(!i)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,null!==n&&void 0!==n&&r.push(n),i(t);var a=r._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&r._read(a.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,r&&("function"==typeof r.transform&&(this._transform=r.transform),"function"==typeof r.flush&&(this._flush=r.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var i=this._readableState;(e.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0};

},{"./_stream_duplex":183,"core-util-is":106,"inherits":159}],187:[function(require,module,exports){
(function (process){
"use strict";function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var n=e.decodeStrings===!1;this.decodeStrings=!n,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this),this.corkedRequestsFree.next=new CorkedRequest(this)}function Writable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Writable||this instanceof Duplex))return new Writable(e);this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),Stream.call(this)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),processNextTick(t,r)}function validChunk(e,t,r,i){var n=!0;if(!Buffer.isBuffer(r)&&"string"!=typeof r&&null!==r&&void 0!==r&&!t.objectMode){var s=new TypeError("Invalid non-string/buffer chunk");e.emit("error",s),processNextTick(i,s),n=!1}return n}function decodeChunk(e,t,r){return e.objectMode||e.decodeStrings===!1||"string"!=typeof t||(t=new Buffer(t,r)),t}function writeOrBuffer(e,t,r,i,n){r=decodeChunk(t,r,i),Buffer.isBuffer(r)&&(i="buffer");var s=t.objectMode?1:r.length;t.length+=s;var f=t.length<t.highWaterMark;if(f||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,i,n),u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else doWrite(e,t,!1,s,r,i,n);return f}function doWrite(e,t,r,i,n,s,f){t.writelen=i,t.writecb=f,t.writing=!0,t.sync=!0,r?e._writev(n,t.onwrite):e._write(n,s,t.onwrite),t.sync=!1}function onwriteError(e,t,r,i,n){--t.pendingcb,r?processNextTick(n,i):n(i),e._writableState.errorEmitted=!0,e.emit("error",i)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,i=r.sync,n=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,i,t,n);else{var s=needFinish(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),i?asyncWrite(afterWrite,e,r,s,n):afterWrite(e,r,s,n)}}function afterWrite(e,t,r,i){r||onwriteDrain(e,t),t.pendingcb--,i(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var i=t.bufferedRequestCount,n=new Array(i),s=t.corkedRequestsFree;s.entry=r;for(var f=0;r;)n[f]=r,r=r.next,f+=1;doWrite(e,t,!0,t.length,n,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,t.corkedRequestsFree=s.next,s.next=null}else{for(;r;){var u=r.chunk,o=r.encoding,a=r.callback;if(doWrite(e,t,!1,t.objectMode?1:u.length,u,o,a),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?processNextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}function CorkedRequest(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var i=t.entry;for(t.entry=null;i;){var n=i.callback;e.pendingcb--,n(r),i=i.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}module.exports=Writable;var processNextTick=require("process-nextick-args"),asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick,Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var internalUtil={deprecate:require("util-deprecate")},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer;util.inherits(Writable,Stream);var Duplex;WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(e){}}();var Duplex;Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,t,r){var i=this._writableState,n=!1;return"function"==typeof t&&(r=t,t=null),Buffer.isBuffer(e)?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=nop),i.ended?writeAfterEnd(this,r):validChunk(this,i,e,r)&&(i.pendingcb++,n=writeOrBuffer(this,i,e,t,r)),n},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);this._writableState.defaultEncoding=e},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var i=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||endWritable(this,i,r)};

}).call(this,require('_process'))

},{"./_stream_duplex":183,"_process":173,"buffer":104,"core-util-is":106,"events":145,"inherits":159,"process-nextick-args":172,"stream":202,"util-deprecate":208}],188:[function(require,module,exports){
var toString={}.toString;module.exports=Array.isArray||function(r){return"[object Array]"==toString.call(r)};

},{}],189:[function(require,module,exports){
module.exports=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":184}],190:[function(require,module,exports){
var Stream=function(){try{return require("stream")}catch(r){}}();exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=Stream||exports,exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":183,"./lib/_stream_passthrough.js":184,"./lib/_stream_readable.js":185,"./lib/_stream_transform.js":186,"./lib/_stream_writable.js":187,"stream":202}],191:[function(require,module,exports){
module.exports=require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":186}],192:[function(require,module,exports){
module.exports=require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":187}],193:[function(require,module,exports){
(function (Buffer){
function bytesToWords(r){for(var f=[],n=0,t=0;n<r.length;n++,t+=8)f[t>>>5]|=r[n]<<24-t%32;return f}function wordsToBytes(r){for(var f=[],n=0;n<32*r.length;n+=8)f.push(r[n>>>5]>>>24-n%32&255);return f}function processBlock(r,f,n){for(var t=0;t<16;t++){var o=n+t,e=f[o];f[o]=16711935&(e<<8|e>>>24)|4278255360&(e<<24|e>>>8)}var u,l,s,h,c,i,a,v,d,p;i=u=r[0],a=l=r[1],v=s=r[2],d=h=r[3],p=c=r[4];var g;for(t=0;t<80;t+=1)g=u+f[n+zl[t]]|0,g+=t<16?f1(l,s,h)+hl[0]:t<32?f2(l,s,h)+hl[1]:t<48?f3(l,s,h)+hl[2]:t<64?f4(l,s,h)+hl[3]:f5(l,s,h)+hl[4],g|=0,g=rotl(g,sl[t]),g=g+c|0,u=c,c=h,h=rotl(s,10),s=l,l=g,g=i+f[n+zr[t]]|0,g+=t<16?f5(a,v,d)+hr[0]:t<32?f4(a,v,d)+hr[1]:t<48?f3(a,v,d)+hr[2]:t<64?f2(a,v,d)+hr[3]:f1(a,v,d)+hr[4],g|=0,g=rotl(g,sr[t]),g=g+p|0,i=p,p=d,d=rotl(v,10),v=a,a=g;g=r[1]+s+d|0,r[1]=r[2]+h+p|0,r[2]=r[3]+c+i|0,r[3]=r[4]+u+a|0,r[4]=r[0]+l+v|0,r[0]=g}function f1(r,f,n){return r^f^n}function f2(r,f,n){return r&f|~r&n}function f3(r,f,n){return(r|~f)^n}function f4(r,f,n){return r&n|f&~n}function f5(r,f,n){return r^(f|~n)}function rotl(r,f){return r<<f|r>>>32-f}function ripemd160(r){var f=[1732584193,4023233417,2562383102,271733878,3285377520];"string"==typeof r&&(r=new Buffer(r,"utf8"));var n=bytesToWords(r),t=8*r.length,o=8*r.length;n[t>>>5]|=128<<24-t%32,n[14+(t+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);for(var e=0;e<n.length;e+=16)processBlock(f,n,e);for(e=0;e<5;e++){var u=f[e];f[e]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}var l=wordsToBytes(f);return new Buffer(l)}var zl=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],zr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],sl=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],sr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],hl=[0,1518500249,1859775393,2400959708,2840853838],hr=[1352829926,1548603684,1836072691,2053994217,0];module.exports=ripemd160;

}).call(this,require("buffer").Buffer)

},{"buffer":104}],194:[function(require,module,exports){
(function (Buffer){
function Hash(t,i){this._block=new Buffer(t),this._finalSize=i,this._blockSize=t,this._len=0,this._s=0}Hash.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=new Buffer(t,i));for(var s=this._len+=t.length,e=this._s||0,h=0,o=this._block;e<s;){for(var l=Math.min(t.length,h+this._blockSize-e%this._blockSize),_=l-h,n=0;n<_;n++)o[e%this._blockSize+n]=t[n+h];e+=_,h+=_,e%this._blockSize==0&&this._update(o)}return this._s=e,this},Hash.prototype.digest=function(t){var i=8*this._len;this._block[this._len%this._blockSize]=128,this._block.fill(0,this._len%this._blockSize+1),i%(8*this._blockSize)>=8*this._finalSize&&(this._update(this._block),this._block.fill(0)),this._block.writeInt32BE(i,this._blockSize-4);var s=this._update(this._block)||this._hash();return t?s.toString(t):s},Hash.prototype._update=function(){throw new Error("_update must be implemented by subclass")},module.exports=Hash;

}).call(this,require("buffer").Buffer)

},{"buffer":104}],195:[function(require,module,exports){
var exports=module.exports=function(e){e=e.toLowerCase();var r=exports[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r};exports.sha=require("./sha"),exports.sha1=require("./sha1"),exports.sha224=require("./sha224"),exports.sha256=require("./sha256"),exports.sha384=require("./sha384"),exports.sha512=require("./sha512");

},{"./sha":196,"./sha1":197,"./sha224":198,"./sha256":199,"./sha384":200,"./sha512":201}],196:[function(require,module,exports){
(function (Buffer){
function Sha(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha,Hash),Sha.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,e=0|this._d,n=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=i[_-3]^i[_-8]^i[_-14]^i[_-16];for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,e)+n+i[a]+K[o]|0;n=e,e=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=e+this._d|0,this._e=n+this._e|0},Sha.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"buffer":104,"inherits":159}],197:[function(require,module,exports){
(function (Buffer){
function Sha1(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl1(t){return t<<1|t>>>31}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha1,Hash),Sha1.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha1.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,n=0|this._d,e=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=rotl1(i[_-3]^i[_-8]^i[_-14]^i[_-16]);for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,n)+e+i[a]+K[o]|0;e=n,n=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=n+this._d|0,this._e=e+this._e|0},Sha1.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha1;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"buffer":104,"inherits":159}],198:[function(require,module,exports){
(function (Buffer){
function Sha224(){this.init(),this._w=W,Hash.call(this,64,56)}var inherits=require("inherits"),Sha256=require("./sha256"),Hash=require("./hash"),W=new Array(64);inherits(Sha224,Sha256),Sha224.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},Sha224.prototype._hash=function(){var t=new Buffer(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},module.exports=Sha224;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"./sha256":199,"buffer":104,"inherits":159}],199:[function(require,module,exports){
(function (Buffer){
function Sha256(){this.init(),this._w=W,Hash.call(this,64,56)}function ch(t,i,h){return h^t&(i^h)}function maj(t,i,h){return t&i|h&(t|i)}function sigma0(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function sigma1(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function gamma0(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function gamma1(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],W=new Array(64);inherits(Sha256,Hash),Sha256.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},Sha256.prototype._update=function(t){for(var i=this._w,h=0|this._a,s=0|this._b,r=0|this._c,n=0|this._d,_=0|this._e,a=0|this._f,e=0|this._g,u=0|this._h,o=0;o<16;++o)i[o]=t.readInt32BE(4*o);for(;o<64;++o)i[o]=gamma1(i[o-2])+i[o-7]+gamma0(i[o-15])+i[o-16]|0;for(var f=0;f<64;++f){var c=u+sigma1(_)+ch(_,a,e)+K[f]+i[f]|0,m=sigma0(h)+maj(h,s,r)|0;u=e,e=a,a=_,_=n+c|0,n=r,r=s,s=h,h=c+m|0}this._a=h+this._a|0,this._b=s+this._b|0,this._c=r+this._c|0,this._d=n+this._d|0,this._e=_+this._e|0,this._f=a+this._f|0,this._g=e+this._g|0,this._h=u+this._h|0},Sha256.prototype._hash=function(){var t=new Buffer(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},module.exports=Sha256;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"buffer":104,"inherits":159}],200:[function(require,module,exports){
(function (Buffer){
function Sha384(){this.init(),this._w=W,Hash.call(this,128,112)}var inherits=require("inherits"),SHA512=require("./sha512"),Hash=require("./hash"),W=new Array(160);inherits(Sha384,SHA512),Sha384.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},Sha384.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(48);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),t},module.exports=Sha384;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"./sha512":201,"buffer":104,"inherits":159}],201:[function(require,module,exports){
(function (Buffer){
function Sha512(){this.init(),this._w=W,Hash.call(this,128,112)}function Ch(h,t,i){return i^h&(t^i)}function maj(h,t,i){return h&t|i&(h|t)}function sigma0(h,t){return(h>>>28|t<<4)^(t>>>2|h<<30)^(t>>>7|h<<25)}function sigma1(h,t){return(h>>>14|t<<18)^(h>>>18|t<<14)^(t>>>9|h<<23)}function Gamma0(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^h>>>7}function Gamma0l(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^(h>>>7|t<<25)}function Gamma1(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^h>>>6}function Gamma1l(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^(h>>>6|t<<26)}function getCarry(h,t){return h>>>0<t>>>0?1:0}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],W=new Array(160);inherits(Sha512,Hash),Sha512.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},Sha512.prototype._update=function(h){for(var t=this._w,i=0|this._ah,s=0|this._bh,_=0|this._ch,r=0|this._dh,a=0|this._eh,e=0|this._fh,l=0|this._gh,n=0|this._hh,g=0|this._al,f=0|this._bl,u=0|this._cl,c=0|this._dl,m=0|this._el,o=0|this._fl,y=0|this._gl,C=0|this._hl,d=0;d<32;d+=2)t[d]=h.readInt32BE(4*d),t[d+1]=h.readInt32BE(4*d+4);for(;d<160;d+=2){var b=t[d-30],p=t[d-30+1],v=Gamma0(b,p),G=Gamma0l(p,b);b=t[d-4],p=t[d-4+1];var w=Gamma1(b,p),S=Gamma1l(p,b),B=t[d-14],E=t[d-14+1],I=t[d-32],j=t[d-32+1],H=G+E|0,q=v+B+getCarry(H,G)|0;H=H+S|0,q=q+w+getCarry(H,S)|0,H=H+j|0,q=q+I+getCarry(H,j)|0,t[d]=q,t[d+1]=H}for(var W=0;W<160;W+=2){q=t[W],H=t[W+1];var x=maj(i,s,_),A=maj(g,f,u),k=sigma0(i,g),z=sigma0(g,i),D=sigma1(a,m),F=sigma1(m,a),J=K[W],L=K[W+1],M=Ch(a,e,l),N=Ch(m,o,y),O=C+F|0,P=n+D+getCarry(O,C)|0;O=O+N|0,P=P+M+getCarry(O,N)|0,O=O+L|0,P=P+J+getCarry(O,L)|0,O=O+H|0,P=P+q+getCarry(O,H)|0;var Q=z+A|0,R=k+x+getCarry(Q,z)|0;n=l,C=y,l=e,y=o,e=a,o=m,m=c+O|0,a=r+P+getCarry(m,c)|0,r=_,c=u,_=s,u=f,s=i,f=g,g=O+Q|0,i=P+R+getCarry(g,O)|0}this._al=this._al+g|0,this._bl=this._bl+f|0,this._cl=this._cl+u|0,this._dl=this._dl+c|0,this._el=this._el+m|0,this._fl=this._fl+o|0,this._gl=this._gl+y|0,this._hl=this._hl+C|0,this._ah=this._ah+i+getCarry(this._al,g)|0,this._bh=this._bh+s+getCarry(this._bl,f)|0,this._ch=this._ch+_+getCarry(this._cl,u)|0,this._dh=this._dh+r+getCarry(this._dl,c)|0,this._eh=this._eh+a+getCarry(this._el,m)|0,this._fh=this._fh+e+getCarry(this._fl,o)|0,this._gh=this._gh+l+getCarry(this._gl,y)|0,this._hh=this._hh+n+getCarry(this._hl,C)|0},Sha512.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(64);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),h(this._gh,this._gl,48),h(this._hh,this._hl,56),t},module.exports=Sha512;

}).call(this,require("buffer").Buffer)

},{"./hash":194,"buffer":104,"inherits":159}],202:[function(require,module,exports){
function Stream(){EE.call(this)}module.exports=Stream;var EE=require("events").EventEmitter;require("inherits")(Stream,EE),Stream.Readable=require("readable-stream/readable.js"),Stream.Writable=require("readable-stream/writable.js"),Stream.Duplex=require("readable-stream/duplex.js"),Stream.Transform=require("readable-stream/transform.js"),Stream.PassThrough=require("readable-stream/passthrough.js"),Stream.Stream=Stream,Stream.prototype.pipe=function(e,r){function t(r){e.writable&&!1===e.write(r)&&m.pause&&m.pause()}function a(){m.readable&&m.resume&&m.resume()}function n(){u||(u=!0,e.end())}function o(){u||(u=!0,"function"==typeof e.destroy&&e.destroy())}function s(e){if(i(),0===EE.listenerCount(this,"error"))throw e}function i(){m.removeListener("data",t),e.removeListener("drain",a),m.removeListener("end",n),m.removeListener("close",o),m.removeListener("error",s),e.removeListener("error",s),m.removeListener("end",i),m.removeListener("close",i),e.removeListener("close",i)}var m=this;m.on("data",t),e.on("drain",a),e._isStdio||r&&r.end===!1||(m.on("end",n),m.on("close",o));var u=!1;return m.on("error",s),e.on("error",s),m.on("end",i),m.on("close",i),e.on("close",i),e.emit("pipe",m),e};

},{"events":145,"inherits":159,"readable-stream/duplex.js":182,"readable-stream/passthrough.js":189,"readable-stream/readable.js":190,"readable-stream/transform.js":191,"readable-stream/writable.js":192}],203:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&h<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&h<=56319){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":104}],204:[function(require,module,exports){
function TfTypeError(r,e,t){this.__error=Error.call(this),this.__type=r,this.__value=e,this.__valueTypeName=t;var o;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return o?o:(t=t||getValueTypeName(e),o=tfErrorString(r,e,t))}})}function TfPropertyTypeError(r,e,t,o,n,i){this.__error=n||Error.call(this),this.__label=t,this.__property=e,this.__type=r,this.__value=o,this.__valueTypeName=i;var a;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return a?a:(r?(i=i||getValueTypeName(o),a=tfPropertyErrorString(r,t,e,o,i)):a='Unexpected property "'+e+'"',a)}})}function tfCustomError(r,e){return new TfTypeError(r,{},e)}function tfSubError(r,e,t){return r instanceof TfPropertyTypeError?(e=e+"."+r.__property,t=r.__label,new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName)):r instanceof TfTypeError?new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName):r}function getTypeName(r){return r.name||r.toString().match(/function (.*?)\s*\(/)[1]}function getValueTypeName(r){return native.Null(r)?"":getTypeName(r.constructor)}function getValue(r){return native.Function(r)?"":native.String(r)?JSON.stringify(r):r&&native.Object(r)?"":r}function tfJSON(r){return native.Function(r)?r.toJSON?r.toJSON():getTypeName(r):native.Array(r)?"Array":r&&native.Object(r)?"Object":void 0!==r?r:""}function tfErrorString(r,e,t){var o=getValue(e);return"Expected "+tfJSON(r)+", got"+(""!==t?" "+t:"")+(""!==o?" "+o:"")}function tfPropertyErrorString(r,e,t,o,n){var i='" of type ';return"key"===e&&(i='" with key type '),tfErrorString('property "'+tfJSON(t)+i+tfJSON(r),o,n)}var inherits=require("inherits"),native=require("./native");[TfTypeError,TfPropertyTypeError].forEach(function(r){inherits(r,Error),Object.defineProperty(r,"stack",{get:function(){return this.__error.stack}})}),module.exports={TfTypeError:TfTypeError,TfPropertyTypeError:TfPropertyTypeError,tfCustomError:tfCustomError,tfSubError:tfSubError,tfJSON:tfJSON,getValueTypeName:getValueTypeName};

},{"./native":207,"inherits":159}],205:[function(require,module,exports){
(function (Buffer){
function _Buffer(n){return Buffer.isBuffer(n)}function _BufferN(n){function t(t){if(!Buffer.isBuffer(t))return!1;if(t.length!==n)throw errors.tfCustomError("Buffer(Length: "+n+")","Buffer(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Buffer"},t}function Hex(n){return"string"==typeof n&&/^([0-9a-f]{2})+$/i.test(n)}function _HexN(n){function t(t){if(!Hex(t))return!1;if(t.length!==n)throw errors.tfCustomError("Hex(Length: "+n+")","Hex(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Hex"},t}function Finite(n){return"number"==typeof n&&isFinite(n)}function Int8(n){return n<<24>>24===n}function Int16(n){return n<<16>>16===n}function Int32(n){return(0|n)===n}function UInt8(n){return(255&n)===n}function UInt16(n){return(65535&n)===n}function UInt32(n){return n>>>0===n}function UInt53(n){return"number"==typeof n&&n>=0&&n<=UINT53_MAX&&Math.floor(n)===n}var errors=require("./errors");_Buffer.toJSON=function(){return"Buffer"};var UINT53_MAX=Math.pow(2,53)-1;module.exports={Buffer:_Buffer,BufferN:_BufferN,Finite:Finite,Hex:Hex,HexN:_HexN,Int8:Int8,Int16:Int16,Int32:Int32,UInt8:UInt8,UInt16:UInt16,UInt32:UInt32,UInt53:UInt53};

}).call(this,{"isBuffer":require("../is-buffer/index.js")})

},{"../is-buffer/index.js":160,"./errors":204}],206:[function(require,module,exports){
function compile(r){return NATIVE.String(r)?"?"===r[0]?TYPES.maybe(compile(r.slice(1))):NATIVE[r]||TYPES.quacksLike(r):r&&NATIVE.Object(r)?NATIVE.Array(r)?TYPES.arrayOf(compile(r[0])):TYPES.object(r):NATIVE.Function(r)?r:TYPES.value(r)}function typeforce(r,e,t,n){if(NATIVE.Function(r)){if(r(e,t))return!0;throw new TfTypeError(n||r,e)}return typeforce(compile(r),e,t)}function __async(r,e,t,n){if("function"==typeof t)return __async(r,e,!1,t);try{typeforce(r,e,t)}catch(r){return n(r)}n()}var ERRORS=require("./errors"),NATIVE=require("./native"),tfJSON=ERRORS.tfJSON,TfTypeError=ERRORS.TfTypeError,TfPropertyTypeError=ERRORS.TfPropertyTypeError,tfSubError=ERRORS.tfSubError,getValueTypeName=ERRORS.getValueTypeName,TYPES={arrayOf:function(r){function e(e,t){return!!NATIVE.Array(e)&&e.every(function(e,n){try{return typeforce(r,e,t)}catch(r){throw tfSubError(r,n)}})}return r=compile(r),e.toJSON=function(){return"["+tfJSON(r)+"]"},e},maybe:function r(e){function t(t,n){return NATIVE.Null(t)||e(t,n,r)}return e=compile(e),t.toJSON=function(){return"?"+tfJSON(e)},t},map:function(r,e){function t(t,n){if(!NATIVE.Object(t,n))return!1;if(NATIVE.Null(t,n))return!1;for(var o in t){try{e&&typeforce(e,o,n)}catch(r){throw tfSubError(r,o,"key")}try{typeforce(r,t[o],n)}catch(r){throw tfSubError(r,o)}}return!0}return r=compile(r),e&&(e=compile(e)),t.toJSON=e?function(){return"{"+tfJSON(e)+": "+tfJSON(r)+"}"}:function(){return"{"+tfJSON(r)+"}"},t},object:function(r){function e(r,e){if(!NATIVE.Object(r))return!1;if(NATIVE.Null(r))return!1;var n;try{for(n in t){typeforce(t[n],r[n],e)}}catch(r){throw tfSubError(r,n)}if(e)for(n in r)if(!t[n])throw new TfPropertyTypeError(void 0,n);return!0}var t={};for(var n in r)t[n]=compile(r[n]);return e.toJSON=function(){return tfJSON(t)},e},oneOf:function(){function r(r,t){return e.some(function(e){try{return typeforce(e,r,t)}catch(r){return!1}})}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return e.map(tfJSON).join("|")},r},quacksLike:function(r){function e(e){return r===getValueTypeName(e)}return e.toJSON=function(){return r},e},tuple:function(){function r(r,t){return e.every(function(e,n){try{return typeforce(e,r[n],t)}catch(r){throw tfSubError(r,n)}})&&(!t||r.length===arguments.length)}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return"("+e.map(tfJSON).join(", ")+")"},r},value:function(r){function e(e){return e===r}return e.toJSON=function(){return r},e}};for(var typeName in NATIVE)typeforce[typeName]=NATIVE[typeName];for(typeName in TYPES)typeforce[typeName]=TYPES[typeName];var extra=require("./extra");for(typeName in extra)typeforce[typeName]=extra[typeName];typeforce.async=__async,typeforce.compile=compile,typeforce.TfTypeError=TfTypeError,typeforce.TfPropertyTypeError=TfPropertyTypeError,module.exports=typeforce;

},{"./errors":204,"./extra":205,"./native":207}],207:[function(require,module,exports){
var types={Array:function(n){return null!==n&&void 0!==n&&n.constructor===Array},Boolean:function(n){return"boolean"==typeof n},Function:function(n){return"function"==typeof n},Null:function(n){return void 0===n||null===n},Number:function(n){return"number"==typeof n},Object:function(n){return"object"==typeof n},String:function(n){return"string"==typeof n},"":function(){return!0}};for(var typeName in types)types[typeName].toJSON=function(n){return n}.bind(null,typeName);module.exports=types;

},{}],208:[function(require,module,exports){
(function (global){
function deprecate(r,e){function o(){if(!t){if(config("throwDeprecation"))throw new Error(e);config("traceDeprecation")?console.trace(e):console.warn(e),t=!0}return r.apply(this,arguments)}if(config("noDeprecation"))return r;var t=!1;return o}function config(r){try{if(!global.localStorage)return!1}catch(r){return!1}var e=global.localStorage[r];return null!=e&&"true"===String(e).toLowerCase()}module.exports=deprecate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],209:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],210:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],211:[function(require,module,exports){
(function (process,global){
function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c="",a=!1,l=["{","}"];if(isArray(r)&&(a=!0,l=["[","]"]),isFunction(r)){c=" [Function"+(r.name?": "+r.name:"")+"]"}if(isRegExp(r)&&(c=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(c=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(c=" "+formatError(r)),0===o.length&&(!a||0==r.length))return l[0]+c+l[1];if(t<0)return isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special");e.seen.push(r);var p;return p=a?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,a)}),e.seen.pop(),reduceToSingleString(p,c,l)}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if(c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;s=JSON.stringify(""+i),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){var n=0;return e.reduce(function(e,r){return n++,r.indexOf("\n")>=0&&n++,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}for(var t=1,n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])o+=isNull(s)||!isObject(s)?" "+s:" "+inspect(s);return o},exports.deprecate=function(e,r){function t(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(process.noDeprecation===!0)return e;var n=!1;return t};var debugs={},debugEnviron;exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":210,"_process":173,"inherits":209}],212:[function(require,module,exports){
(function (Buffer){
"use strict";function checkUInt53(e){if(e<0||e>MAX_SAFE_INTEGER||e%1!=0)throw new RangeError("value out of range")}function encode(e,n,t){if(checkUInt53(e),n||(n=new Buffer(encodingLength(e))),!Buffer.isBuffer(n))throw new TypeError("buffer must be a Buffer instance");return t||(t=0),e<253?(n.writeUInt8(e,t),encode.bytes=1):e<=65535?(n.writeUInt8(253,t),n.writeUInt16LE(e,t+1),encode.bytes=3):e<=4294967295?(n.writeUInt8(254,t),n.writeUInt32LE(e,t+1),encode.bytes=5):(n.writeUInt8(255,t),n.writeUInt32LE(e>>>0,t+1),n.writeUInt32LE(e/4294967296|0,t+5),encode.bytes=9),n}function decode(e,n){if(!Buffer.isBuffer(e))throw new TypeError("buffer must be a Buffer instance");n||(n=0);var t=e.readUInt8(n);if(t<253)return decode.bytes=1,t;if(253===t)return decode.bytes=3,e.readUInt16LE(n+1);if(254===t)return decode.bytes=5,e.readUInt32LE(n+1);decode.bytes=9;var r=e.readUInt32LE(n+1),c=e.readUInt32LE(n+5),o=4294967296*c+r;return checkUInt53(o),o}function encodingLength(e){return checkUInt53(e),e<253?1:e<=65535?3:e<=4294967295?5:9}var MAX_SAFE_INTEGER=9007199254740991;module.exports={encode:encode,decode:decode,encodingLength:encodingLength};

}).call(this,require("buffer").Buffer)

},{"buffer":104}],213:[function(require,module,exports){
var createElement=require("./vdom/create-element.js");module.exports=createElement;

},{"./vdom/create-element.js":218}],214:[function(require,module,exports){
var diff=require("./vtree/diff.js");module.exports=diff;

},{"./vtree/diff.js":238}],215:[function(require,module,exports){
var h=require("./virtual-hyperscript/index.js");module.exports=h;

},{"./virtual-hyperscript/index.js":225}],216:[function(require,module,exports){
var patch=require("./vdom/patch.js");module.exports=patch;

},{"./vdom/patch.js":221}],217:[function(require,module,exports){
function applyProperties(o,t,e){for(var r in t){var i=t[r];void 0===i?removeProperty(o,r,i,e):isHook(i)?(removeProperty(o,r,i,e),i.hook&&i.hook(o,r,e?e[r]:void 0)):isObject(i)?patchObject(o,t,e,r,i):o[r]=i}}function removeProperty(o,t,e,r){if(r){var i=r[t];if(isHook(i))i.unhook&&i.unhook(o,t,e);else if("attributes"===t)for(var v in i)o.removeAttribute(v);else if("style"===t)for(var s in i)o.style[s]="";else o[t]="string"==typeof i?"":null}}function patchObject(o,t,e,r,i){var v=e?e[r]:void 0;if("attributes"!==r){if(v&&isObject(v)&&getPrototype(v)!==getPrototype(i))return void(o[r]=i);isObject(o[r])||(o[r]={});var s="style"===r?"":void 0;for(var n in i){var p=i[n];o[r][n]=void 0===p?s:p}}else for(var c in i){var u=i[c];void 0===u?o.removeAttribute(c):o.setAttribute(c,u)}}function getPrototype(o){return Object.getPrototypeOf?Object.getPrototypeOf(o):o.__proto__?o.__proto__:o.constructor?o.constructor.prototype:void 0}var isObject=require("is-object"),isHook=require("../vnode/is-vhook.js");module.exports=applyProperties;

},{"../vnode/is-vhook.js":229,"is-object":161}],218:[function(require,module,exports){
function createElement(e,r){var t=r?r.document||document:document,n=r?r.warn:null;if(e=handleThunk(e).a,isWidget(e))return e.init();if(isVText(e))return t.createTextNode(e.text);if(!isVNode(e))return n&&n("Item is not a valid virtual dom node",e),null;var i=null===e.namespace?t.createElement(e.tagName):t.createElementNS(e.namespace,e.tagName);applyProperties(i,e.properties);for(var a=e.children,d=0;d<a.length;d++){var l=createElement(a[d],r);l&&i.appendChild(l)}return i}var document=require("global/document"),applyProperties=require("./apply-properties"),isVNode=require("../vnode/is-vnode.js"),isVText=require("../vnode/is-vtext.js"),isWidget=require("../vnode/is-widget.js"),handleThunk=require("../vnode/handle-thunk.js");module.exports=createElement;

},{"../vnode/handle-thunk.js":227,"../vnode/is-vnode.js":230,"../vnode/is-vtext.js":231,"../vnode/is-widget.js":232,"./apply-properties":217,"global/document":147}],219:[function(require,module,exports){
function domIndex(n,e,r,i){return r&&0!==r.length?(r.sort(ascending),recurse(n,e,r,i,0)):{}}function recurse(n,e,r,i,t){if(i=i||{},n){indexInRange(r,t,t)&&(i[t]=n);var d=e.children;if(d)for(var u=n.childNodes,o=0;o<e.children.length;o++){t+=1;var c=d[o]||noChild,f=t+(c.count||0);indexInRange(r,t,f)&&recurse(u[o],c,r,i,t),t=f}}return i}function indexInRange(n,e,r){if(0===n.length)return!1;for(var i,t,d=0,u=n.length-1;d<=u;){if(i=(u+d)/2>>0,t=n[i],d===u)return t>=e&&t<=r;if(t<e)d=i+1;else{if(!(t>r))return!0;u=i-1}}return!1}function ascending(n,e){return n>e?1:-1}var noChild={};module.exports=domIndex;

},{}],220:[function(require,module,exports){
function applyPatch(e,r,t){var a=e.type,n=e.vNode,o=e.patch;switch(a){case VPatch.REMOVE:return removeNode(r,n);case VPatch.INSERT:return insertNode(r,o,t);case VPatch.VTEXT:return stringPatch(r,n,o,t);case VPatch.WIDGET:return widgetPatch(r,n,o,t);case VPatch.VNODE:return vNodePatch(r,n,o,t);case VPatch.ORDER:return reorderChildren(r,o),r;case VPatch.PROPS:return applyProperties(r,o,n.properties),r;case VPatch.THUNK:return replaceRoot(r,t.patch(r,o,t));default:return r}}function removeNode(e,r){var t=e.parentNode;return t&&t.removeChild(e),destroyWidget(e,r),null}function insertNode(e,r,t){var a=t.render(r,t);return e&&e.appendChild(a),e}function stringPatch(e,r,t,a){var n;if(3===e.nodeType)e.replaceData(0,e.length,t.text),n=e;else{var o=e.parentNode;n=a.render(t,a),o&&n!==e&&o.replaceChild(n,e)}return n}function widgetPatch(e,r,t,a){var n,o=updateWidget(r,t);n=o?t.update(r,e)||e:a.render(t,a);var d=e.parentNode;return d&&n!==e&&d.replaceChild(n,e),o||destroyWidget(e,r),n}function vNodePatch(e,r,t,a){var n=e.parentNode,o=a.render(t,a);return n&&o!==e&&n.replaceChild(o,e),o}function destroyWidget(e,r){"function"==typeof r.destroy&&isWidget(r)&&r.destroy(e)}function reorderChildren(e,r){for(var t,a,n,o=e.childNodes,d={},i=0;i<r.removes.length;i++)a=r.removes[i],t=o[a.from],a.key&&(d[a.key]=t),e.removeChild(t);for(var c=o.length,p=0;p<r.inserts.length;p++)n=r.inserts[p],t=d[n.key],e.insertBefore(t,n.to>=c++?null:o[n.to])}function replaceRoot(e,r){return e&&r&&e!==r&&e.parentNode&&e.parentNode.replaceChild(r,e),r}var applyProperties=require("./apply-properties"),isWidget=require("../vnode/is-widget.js"),VPatch=require("../vnode/vpatch.js"),updateWidget=require("./update-widget");module.exports=applyPatch;

},{"../vnode/is-widget.js":232,"../vnode/vpatch.js":235,"./apply-properties":217,"./update-widget":222}],221:[function(require,module,exports){
function patch(r,e,t){return t=t||{},t.patch=t.patch&&t.patch!==patch?t.patch:patchRecursive,t.render=t.render||render,t.patch(r,e,t)}function patchRecursive(r,e,t){var a=patchIndices(e);if(0===a.length)return r;var n=domIndex(r,e.a,a),c=r.ownerDocument;t.document||c===document||(t.document=c);for(var p=0;p<a.length;p++){var u=a[p];r=applyPatch(r,n[u],e[u],t)}return r}function applyPatch(r,e,t,a){if(!e)return r;var n;if(isArray(t))for(var c=0;c<t.length;c++)n=patchOp(t[c],e,a),e===r&&(r=n);else n=patchOp(t,e,a),e===r&&(r=n);return r}function patchIndices(r){var e=[];for(var t in r)"a"!==t&&e.push(Number(t));return e}var document=require("global/document"),isArray=require("x-is-array"),render=require("./create-element"),domIndex=require("./dom-index"),patchOp=require("./patch-op");module.exports=patch;

},{"./create-element":218,"./dom-index":219,"./patch-op":220,"global/document":147,"x-is-array":245}],222:[function(require,module,exports){
function updateWidget(i,e){return!(!isWidget(i)||!isWidget(e))&&("name"in i&&"name"in e?i.id===e.id:i.init===e.init)}var isWidget=require("../vnode/is-widget.js");module.exports=updateWidget;

},{"../vnode/is-widget.js":232}],223:[function(require,module,exports){
"use strict";function EvHook(o){if(!(this instanceof EvHook))return new EvHook(o);this.value=o}var EvStore=require("ev-store");module.exports=EvHook,EvHook.prototype.hook=function(o,t){EvStore(o)[t.substr(3)]=this.value},EvHook.prototype.unhook=function(o,t){EvStore(o)[t.substr(3)]=void 0};

},{"ev-store":144}],224:[function(require,module,exports){
"use strict";function SoftSetHook(o){if(!(this instanceof SoftSetHook))return new SoftSetHook(o);this.value=o}module.exports=SoftSetHook,SoftSetHook.prototype.hook=function(o,t){o[t]!==this.value&&(o[t]=this.value)};

},{}],225:[function(require,module,exports){
"use strict";function h(e,r,i){var t,n,o,s,a=[];return!i&&isChildren(r)&&(i=r,n={}),n=n||r||{},t=parseTag(e,n),n.hasOwnProperty("key")&&(o=n.key,n.key=void 0),n.hasOwnProperty("namespace")&&(s=n.namespace,n.namespace=void 0),"INPUT"!==t||s||!n.hasOwnProperty("value")||void 0===n.value||isHook(n.value)||(n.value=softSetHook(n.value)),transformProperties(n),void 0!==i&&null!==i&&addChild(i,a,t,n),new VNode(t,n,a,o,s)}function addChild(e,r,i,t){if("string"==typeof e)r.push(new VText(e));else if("number"==typeof e)r.push(new VText(String(e)));else if(isChild(e))r.push(e);else{if(!isArray(e)){if(null===e||void 0===e)return;throw UnexpectedVirtualElement({foreignObject:e,parentVnode:{tagName:i,properties:t}})}for(var n=0;n<e.length;n++)addChild(e[n],r,i,t)}}function transformProperties(e){for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if(isHook(i))continue;"ev-"===r.substr(0,3)&&(e[r]=evHook(i))}}function isChild(e){return isVNode(e)||isVText(e)||isWidget(e)||isVThunk(e)}function isChildren(e){return"string"==typeof e||isArray(e)||isChild(e)}function UnexpectedVirtualElement(e){var r=new Error;return r.type="virtual-hyperscript.unexpected.virtual-element",r.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+errorString(e.foreignObject)+".\nThe parent vnode is:\n"+errorString(e.parentVnode),r.foreignObject=e.foreignObject,r.parentVnode=e.parentVnode,r}function errorString(e){try{return JSON.stringify(e,null,"    ")}catch(r){return String(e)}}var isArray=require("x-is-array"),VNode=require("../vnode/vnode.js"),VText=require("../vnode/vtext.js"),isVNode=require("../vnode/is-vnode"),isVText=require("../vnode/is-vtext"),isWidget=require("../vnode/is-widget"),isHook=require("../vnode/is-vhook"),isVThunk=require("../vnode/is-thunk"),parseTag=require("./parse-tag.js"),softSetHook=require("./hooks/soft-set-hook.js"),evHook=require("./hooks/ev-hook.js");module.exports=h;

},{"../vnode/is-thunk":228,"../vnode/is-vhook":229,"../vnode/is-vnode":230,"../vnode/is-vtext":231,"../vnode/is-widget":232,"../vnode/vnode.js":234,"../vnode/vtext.js":236,"./hooks/ev-hook.js":223,"./hooks/soft-set-hook.js":224,"./parse-tag.js":226,"x-is-array":245}],226:[function(require,module,exports){
"use strict";function parseTag(s,a){if(!s)return"DIV";var t=!a.hasOwnProperty("id"),e=split(s,classIdSplit),r=null;notClassId.test(e[1])&&(r="DIV");var l,n,i,p;for(p=0;p<e.length;p++)(n=e[p])&&(i=n.charAt(0),r?"."===i?(l=l||[],l.push(n.substring(1,n.length))):"#"===i&&t&&(a.id=n.substring(1,n.length)):r=n);return l&&(a.className&&l.push(a.className),a.className=l.join(" ")),a.namespace?r:r.toUpperCase()}var split=require("browser-split"),classIdSplit=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,notClassId=/^\.|#/;module.exports=parseTag;

},{"browser-split":76}],227:[function(require,module,exports){
function handleThunk(e,n){var r=e,i=n;return isThunk(n)&&(i=renderThunk(n,e)),isThunk(e)&&(r=renderThunk(e,null)),{a:r,b:i}}function renderThunk(e,n){var r=e.vnode;if(r||(r=e.vnode=e.render(n)),!(isVNode(r)||isVText(r)||isWidget(r)))throw new Error("thunk did not return a valid node");return r}var isVNode=require("./is-vnode"),isVText=require("./is-vtext"),isWidget=require("./is-widget"),isThunk=require("./is-thunk");module.exports=handleThunk;

},{"./is-thunk":228,"./is-vnode":230,"./is-vtext":231,"./is-widget":232}],228:[function(require,module,exports){
function isThunk(n){return n&&"Thunk"===n.type}module.exports=isThunk;

},{}],229:[function(require,module,exports){
function isHook(o){return o&&("function"==typeof o.hook&&!o.hasOwnProperty("hook")||"function"==typeof o.unhook&&!o.hasOwnProperty("unhook"))}module.exports=isHook;

},{}],230:[function(require,module,exports){
function isVirtualNode(e){return e&&"VirtualNode"===e.type&&e.version===version}var version=require("./version");module.exports=isVirtualNode;

},{"./version":233}],231:[function(require,module,exports){
function isVirtualText(e){return e&&"VirtualText"===e.type&&e.version===version}var version=require("./version");module.exports=isVirtualText;

},{"./version":233}],232:[function(require,module,exports){
function isWidget(e){return e&&"Widget"===e.type}module.exports=isWidget;

},{}],233:[function(require,module,exports){
module.exports="2";

},{}],234:[function(require,module,exports){
function VirtualNode(e,i,o,s,r){this.tagName=e,this.properties=i||noProperties,this.children=o||noChildren,this.key=null!=s?String(s):void 0,this.namespace="string"==typeof r?r:null;var t,n=o&&o.length||0,h=0,a=!1,d=!1,u=!1;for(var k in i)if(i.hasOwnProperty(k)){var l=i[k];isVHook(l)&&l.unhook&&(t||(t={}),t[k]=l)}for(var p=0;p<n;p++){var v=o[p];isVNode(v)?(h+=v.count||0,!a&&v.hasWidgets&&(a=!0),!d&&v.hasThunks&&(d=!0),u||!v.hooks&&!v.descendantHooks||(u=!0)):!a&&isWidget(v)?"function"==typeof v.destroy&&(a=!0):!d&&isThunk(v)&&(d=!0)}this.count=n+h,this.hasWidgets=a,this.hasThunks=d,this.hooks=t,this.descendantHooks=u}var version=require("./version"),isVNode=require("./is-vnode"),isWidget=require("./is-widget"),isThunk=require("./is-thunk"),isVHook=require("./is-vhook");module.exports=VirtualNode;var noProperties={},noChildren=[];VirtualNode.prototype.version=version,VirtualNode.prototype.type="VirtualNode";

},{"./is-thunk":228,"./is-vhook":229,"./is-vnode":230,"./is-widget":232,"./version":233}],235:[function(require,module,exports){
function VirtualPatch(t,a,r){this.type=Number(t),this.vNode=a,this.patch=r}var version=require("./version");VirtualPatch.NONE=0,VirtualPatch.VTEXT=1,VirtualPatch.VNODE=2,VirtualPatch.WIDGET=3,VirtualPatch.PROPS=4,VirtualPatch.ORDER=5,VirtualPatch.INSERT=6,VirtualPatch.REMOVE=7,VirtualPatch.THUNK=8,module.exports=VirtualPatch,VirtualPatch.prototype.version=version,VirtualPatch.prototype.type="VirtualPatch";

},{"./version":233}],236:[function(require,module,exports){
function VirtualText(t){this.text=String(t)}var version=require("./version");module.exports=VirtualText,VirtualText.prototype.version=version,VirtualText.prototype.type="VirtualText";

},{"./version":233}],237:[function(require,module,exports){
function diffProps(o,t){var e;for(var r in o){r in t||(e=e||{},e[r]=void 0);var i=o[r],f=t[r];if(i!==f)if(isObject(i)&&isObject(f))if(getPrototype(f)!==getPrototype(i))e=e||{},e[r]=f;else if(isHook(f))e=e||{},e[r]=f;else{var s=diffProps(i,f);s&&(e=e||{},e[r]=s)}else e=e||{},e[r]=f}for(var n in t)n in o||(e=e||{},e[n]=t[n]);return e}function getPrototype(o){return Object.getPrototypeOf?Object.getPrototypeOf(o):o.__proto__?o.__proto__:o.constructor?o.constructor.prototype:void 0}var isObject=require("is-object"),isHook=require("../vnode/is-vhook");module.exports=diffProps;

},{"../vnode/is-vhook":229,"is-object":161}],238:[function(require,module,exports){
function diff(e,n){var t={a:e};return walk(e,n,t,0),t}function walk(e,n,t,r){if(e!==n){var h=t[r],a=!1;if(isThunk(e)||isThunk(n))thunks(e,n,t,r);else if(null==n)isWidget(e)||(clearState(e,t,r),h=t[r]),h=appendPatch(h,new VPatch(VPatch.REMOVE,e,n));else if(isVNode(n))if(isVNode(e))if(e.tagName===n.tagName&&e.namespace===n.namespace&&e.key===n.key){var i=diffProps(e.properties,n.properties);i&&(h=appendPatch(h,new VPatch(VPatch.PROPS,e,i))),h=diffChildren(e,n,t,h,r)}else h=appendPatch(h,new VPatch(VPatch.VNODE,e,n)),a=!0;else h=appendPatch(h,new VPatch(VPatch.VNODE,e,n)),a=!0;else isVText(n)?isVText(e)?e.text!==n.text&&(h=appendPatch(h,new VPatch(VPatch.VTEXT,e,n))):(h=appendPatch(h,new VPatch(VPatch.VTEXT,e,n)),a=!0):isWidget(n)&&(isWidget(e)||(a=!0),h=appendPatch(h,new VPatch(VPatch.WIDGET,e,n)));h&&(t[r]=h),a&&clearState(e,t,r)}}function diffChildren(e,n,t,r,h){for(var a=e.children,i=reorder(a,n.children),s=i.children,o=a.length,u=s.length,c=o>u?o:u,d=0;d<c;d++){var l=a[d],f=s[d];h+=1,l?walk(l,f,t,h):f&&(r=appendPatch(r,new VPatch(VPatch.INSERT,null,f))),isVNode(l)&&l.count&&(h+=l.count)}return i.moves&&(r=appendPatch(r,new VPatch(VPatch.ORDER,e,i.moves))),r}function clearState(e,n,t){unhook(e,n,t),destroyWidgets(e,n,t)}function destroyWidgets(e,n,t){if(isWidget(e))"function"==typeof e.destroy&&(n[t]=appendPatch(n[t],new VPatch(VPatch.REMOVE,e,null)));else if(isVNode(e)&&(e.hasWidgets||e.hasThunks))for(var r=e.children,h=r.length,a=0;a<h;a++){var i=r[a];t+=1,destroyWidgets(i,n,t),isVNode(i)&&i.count&&(t+=i.count)}else isThunk(e)&&thunks(e,null,n,t)}function thunks(e,n,t,r){var h=handleThunk(e,n),a=diff(h.a,h.b);hasPatches(a)&&(t[r]=new VPatch(VPatch.THUNK,null,a))}function hasPatches(e){for(var n in e)if("a"!==n)return!0;return!1}function unhook(e,n,t){if(isVNode(e)){if(e.hooks&&(n[t]=appendPatch(n[t],new VPatch(VPatch.PROPS,e,undefinedKeys(e.hooks)))),e.descendantHooks||e.hasThunks)for(var r=e.children,h=r.length,a=0;a<h;a++){var i=r[a];t+=1,unhook(i,n,t),isVNode(i)&&i.count&&(t+=i.count)}}else isThunk(e)&&thunks(e,null,n,t)}function undefinedKeys(e){var n={};for(var t in e)n[t]=void 0;return n}function reorder(e,n){var t=keyIndex(n),r=t.keys,h=t.free;if(h.length===n.length)return{children:n,moves:null};var a=keyIndex(e),i=a.keys;if(a.free.length===e.length)return{children:n,moves:null};for(var s=[],o=0,u=h.length,c=0,d=0;d<e.length;d++){var l,f=e[d];f.key?r.hasOwnProperty(f.key)?(l=r[f.key],s.push(n[l])):(l=d-c++,s.push(null)):o<u?(l=h[o++],s.push(n[l])):(l=d-c++,s.push(null))}for(var k=o>=h.length?n.length:h[o],p=0;p<n.length;p++){var P=n[p];P.key?i.hasOwnProperty(P.key)||s.push(P):p>=k&&s.push(P)}for(var v,y=s.slice(),V=0,g=[],T=[],m=0;m<n.length;){var w=n[m];for(v=y[V];null===v&&y.length;)g.push(remove(y,V,null)),v=y[V];v&&v.key===w.key?(V++,m++):w.key?(v&&v.key&&r[v.key]!==m+1?(g.push(remove(y,V,v.key)),v=y[V],v&&v.key===w.key?V++:T.push({key:w.key,to:m})):T.push({key:w.key,to:m}),m++):v&&v.key&&g.push(remove(y,V,v.key))}for(;V<y.length;)v=y[V],g.push(remove(y,V,v&&v.key));return g.length!==c||T.length?{children:s,moves:{removes:g,inserts:T}}:{children:s,moves:null}}function remove(e,n,t){return e.splice(n,1),{from:n,key:t}}function keyIndex(e){for(var n={},t=[],r=e.length,h=0;h<r;h++){var a=e[h];a.key?n[a.key]=h:t.push(h)}return{keys:n,free:t}}function appendPatch(e,n){return e?(isArray(e)?e.push(n):e=[e,n],e):n}var isArray=require("x-is-array"),VPatch=require("../vnode/vpatch"),isVNode=require("../vnode/is-vnode"),isVText=require("../vnode/is-vtext"),isWidget=require("../vnode/is-widget"),isThunk=require("../vnode/is-thunk"),handleThunk=require("../vnode/handle-thunk"),diffProps=require("./diff-props");module.exports=diff;

},{"../vnode/handle-thunk":227,"../vnode/is-thunk":228,"../vnode/is-vnode":230,"../vnode/is-vtext":231,"../vnode/is-widget":232,"../vnode/vpatch":235,"./diff-props":237,"x-is-array":245}],239:[function(require,module,exports){
function Context(){}var indexOf=require("indexof"),Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,n=r.eval,o=r.execScript;!n&&o&&(o.call(r,"null"),n=r.eval),forEach(Object_keys(e),function(t){r[t]=e[t]}),forEach(globals,function(t){e[t]&&(r[t]=e[t])});var c=Object_keys(r),i=n.call(r,this.code);return forEach(Object_keys(r),function(t){(t in e||indexOf(c,t)===-1)&&(e[t]=r[t])}),forEach(globals,function(t){t in e||defineProp(e,t,r[t])}),document.body.removeChild(t),i},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return forEach(Object_keys(t),function(r){e[r]=t[r]}),r},forEach(Object_keys(Script.prototype),function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}}),exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),function(r){t[r]=e[r]}),t};

},{"indexof":156}],240:[function(require,module,exports){
!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function n(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function i(t){var e=new FileReader;return e.readAsArrayBuffer(t),s(e)}function a(t){var e=new FileReader;return e.readAsText(t),s(e)}function h(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(c.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(c.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(t){if(!c.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type&&this.headers.set("content-type",this._bodyBlob.type))},c.blob?(this.blob=function(){var t=n(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(i)},this.text=function(){var t=n(this);if(t)return t;if(this._bodyBlob)return a(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=n(this);return t?t:Promise.resolve(this._bodyText)},c.formData&&(this.formData=function(){return this.text().then(f)}),this.json=function(){return this.text().then(JSON.parse)},this}function u(t){var e=t.toUpperCase();return y.indexOf(e)>-1?e:t}function d(t,e){e=e||{};var r=e.body;if(d.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=u(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function f(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),o=r.shift().replace(/\+/g," "),n=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(o),decodeURIComponent(n))}}),e}function p(t){var e=new o;return(t.getAllResponseHeaders()||"").trim().split("\n").forEach(function(t){var r=t.trim().split(":"),o=r.shift().trim(),n=r.join(":").trim();e.append(o,n)}),e}function l(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof o?e.headers:new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){o.prototype.append=function(t,o){t=e(t),o=r(o);var n=this.map[t];n||(n=[],this.map[t]=n),n.push(o)},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){var r=this.map[e(t)];return r?r[0]:null},o.prototype.getAll=function(t){return this.map[e(t)]||[]},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,o){this.map[e(t)]=[r(o)]},o.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach(function(r){this.map[r].forEach(function(o){t.call(e,o,r,this)},this)},this)};var c={blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t},y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this)},h.call(d.prototype),h.call(l.prototype),l.prototype.clone=function(){return new l(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},l.error=function(){var t=new l(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];l.redirect=function(t,e){if(b.indexOf(e)===-1)throw new RangeError("Invalid status code");return new l(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=l,t.fetch=function(t,e){return new Promise(function(r,o){function n(){return"responseURL"in i?i.responseURL:/^X-Request-URL:/m.test(i.getAllResponseHeaders())?i.getResponseHeader("X-Request-URL"):void 0}var s;s=d.prototype.isPrototypeOf(t)&&!e?t:new d(t,e);var i=new XMLHttpRequest;i.onload=function(){var t=1223===i.status?204:i.status;if(t<100||t>599)return void o(new TypeError("Network request failed"));var e={status:t,statusText:i.statusText,headers:p(i),url:n()};r(new l("response"in i?i.response:i.responseText,e))},i.onerror=function(){o(new TypeError("Network request failed"))},i.ontimeout=function(){o(new TypeError("Network request failed"))},i.open(s.method,s.url,!0),"include"===s.credentials&&(i.withCredentials=!0),"responseType"in i&&c.blob&&(i.responseType="blob"),s.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send(void 0===s._bodyInit?null:s._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this);

},{}],241:[function(require,module,exports){
(function (Buffer){
function decodeRaw(e,o){if(void 0!==o&&e[0]!==o)throw new Error("Invalid network version");if(33===e.length)return{version:e[0],privateKey:e.slice(1,33),compressed:!1};if(34!==e.length)throw new Error("Invalid WIF length");if(1!==e[33])throw new Error("Invalid compression flag");return{version:e[0],privateKey:e.slice(1,33),compressed:!0}}function encodeRaw(e,o,r){var n=new Buffer(r?34:33);return n.writeUInt8(e,0),o.copy(n,1),r&&(n[33]=1),n}function decode(e,o){return decodeRaw(bs58check.decode(e),o)}function encode(e,o,r){return"number"==typeof e?bs58check.encode(encodeRaw(e,o,r)):bs58check.encode(encodeRaw(e.version,e.privateKey,e.compressed))}var bs58check=require("bs58check");module.exports={decode:decode,decodeRaw:decodeRaw,encode:encode,encodeRaw:encodeRaw};

}).call(this,require("buffer").Buffer)

},{"bs58check":244,"buffer":104}],242:[function(require,module,exports){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var a="",u=0;0===e[u]&&u<e.length-1;++u)a+=r[0];for(var l=n.length-1;l>=0;--l)a+=r[n[l]];return a}function n(r){if(0===r.length)return[];for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var a=0,u=t;a<e.length;++a)u+=e[a]*f,e[a]=255&u,u>>=8;for(;u>0;)e.push(255&u),u>>=8}for(var l=0;r[l]===h&&l<r.length-1;++l)e.push(0);return e.reverse()}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),a=0;a<r.length;a++)o[r.charAt(a)]=a;return{encode:e,decodeUnsafe:n,decode:t}};

},{}],243:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":242}],244:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a){return decodeRaw(new Buffer(a))}}function decode(e){var a=base58.decode(e),d=new Buffer(a),c=decodeRaw(d);if(!c)throw new Error("Invalid checksum");return c}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":243,"buffer":104,"create-hash":108}],245:[function(require,module,exports){
function isArray(r){return"[object Array]"===toString.call(r)}var nativeIsArray=Array.isArray,toString=Object.prototype.toString;module.exports=nativeIsArray||isArray;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
