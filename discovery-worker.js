(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";function compare(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function isBuffer(e){return global.Buffer&&"function"==typeof global.Buffer.isBuffer?global.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}function pToString(e){return Object.prototype.toString.call(e)}function isView(e){return!isBuffer(e)&&("function"==typeof global.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}function getName(e){if(util.isFunction(e)){if(functionsHaveNames)return e.name;var t=e.toString(),r=t.match(regex);return r&&r[1]}}function truncate(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function inspect(e){if(functionsHaveNames||!util.isFunction(e))return util.inspect(e);var t=getName(e);return"[Function"+(t?": "+t:"")+"]"}function getMessage(e){return truncate(inspect(e.actual),128)+" "+e.operator+" "+truncate(inspect(e.expected),128)}function fail(e,t,r,n,i){throw new assert.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ok(e,t){e||fail(e,!0,t,"==",assert.ok)}function _deepEqual(e,t,r,n){if(e===t)return!0;if(isBuffer(e)&&isBuffer(t))return 0===compare(e,t);if(util.isDate(e)&&util.isDate(t))return e.getTime()===t.getTime();if(util.isRegExp(e)&&util.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(isView(e)&&isView(t)&&pToString(e)===pToString(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===compare(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(isBuffer(e)!==isBuffer(t))return!1;n=n||{actual:[],expected:[]};var i=n.actual.indexOf(e);return i!==-1&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),objEquiv(e,t,r,n))}return r?e===t:e==t}function isArguments(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function objEquiv(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(util.isPrimitive(e)||util.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=isArguments(e),a=isArguments(t);if(i&&!a||!i&&a)return!1;if(i)return e=pSlice.call(e),t=pSlice.call(t),_deepEqual(e,t,r);var s,u,o=objectKeys(e),f=objectKeys(t);if(o.length!==f.length)return!1;for(o.sort(),f.sort(),u=o.length-1;u>=0;u--)if(o[u]!==f[u])return!1;for(u=o.length-1;u>=0;u--)if(s=o[u],!_deepEqual(e[s],t[s],r,n))return!1;return!0}function notDeepStrictEqual(e,t,r){_deepEqual(e,t,!0)&&fail(e,t,r,"notDeepStrictEqual",notDeepStrictEqual)}function expectedException(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&t.call({},e)===!0}function _tryBlock(e){var t;try{e()}catch(e){t=e}return t}function _throws(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=_tryBlock(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&fail(i,r,"Missing expected exception"+n);var a="string"==typeof n,s=!e&&util.isError(i),u=!e&&i&&!r;if((s&&a&&expectedException(i,r)||u)&&fail(i,r,"Got unwanted exception"+n),e&&i&&r&&!expectedException(i,r)||!e&&i)throw i}var util=require("util/"),hasOwn=Object.prototype.hasOwnProperty,pSlice=Array.prototype.slice,functionsHaveNames=function(){return"foo"===function(){}.name}(),assert=module.exports=ok,regex=/\s*function\s+([^\(\s]*)\s*/;assert.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var t=e.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=getName(t),a=n.indexOf("\n"+i);if(a>=0){var s=n.indexOf("\n",a+1);n=n.substring(s+1)}this.stack=n}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(e,t,r){e!=t&&fail(e,t,r,"==",assert.equal)},assert.notEqual=function(e,t,r){e==t&&fail(e,t,r,"!=",assert.notEqual)},assert.deepEqual=function(e,t,r){_deepEqual(e,t,!1)||fail(e,t,r,"deepEqual",assert.deepEqual)},assert.deepStrictEqual=function(e,t,r){_deepEqual(e,t,!0)||fail(e,t,r,"deepStrictEqual",assert.deepStrictEqual)},assert.notDeepEqual=function(e,t,r){_deepEqual(e,t,!1)&&fail(e,t,r,"notDeepEqual",assert.notDeepEqual)},assert.notDeepStrictEqual=notDeepStrictEqual,assert.strictEqual=function(e,t,r){e!==t&&fail(e,t,r,"===",assert.strictEqual)},assert.notStrictEqual=function(e,t,r){e===t&&fail(e,t,r,"!==",assert.notStrictEqual)},assert.throws=function(e,t,r){_throws(!0,e,t,r)},assert.doesNotThrow=function(e,t,r){_throws(!1,e,t,r)},assert.ifError=function(e){if(e)throw e};var objectKeys=Object.keys||function(e){var t=[];for(var r in e)hasOwn.call(e,r)&&t.push(r);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"util/":101}],2:[function(require,module,exports){
(function (Buffer){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var u="",a=0;0===e[a]&&a<e.length-1;++a)u+=r[0];for(var v=n.length-1;v>=0;--v)u+=r[n[v]];return u}function n(r){if(0===r.length)return new Buffer(0);for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var u=0,a=t;u<e.length;++u)a+=e[u]*f,e[u]=255&a,a>>=8;for(;a>0;)e.push(255&a),a>>=8}for(var v=0;r[v]===h&&v<r.length-1;++v)e.push(0);return new Buffer(e.reverse())}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),u=0;u<r.length;u++){var a=r.charAt(u);if(void 0!==o[a])throw new TypeError(a+" is ambiguous");o[a]=u}return{encode:e,decodeUnsafe:n,decode:t}};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],3:[function(require,module,exports){
"use strict";function placeHoldersCount(o){var r=o.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===o[r-2]?2:"="===o[r-1]?1:0}function byteLength(o){return 3*o.length/4-placeHoldersCount(o)}function toByteArray(o){var r,e,t,u,n,p,a=o.length;n=placeHoldersCount(o),p=new Arr(3*a/4-n),t=n>0?a-4:a;var l=0;for(r=0,e=0;r<t;r+=4,e+=3)u=revLookup[o.charCodeAt(r)]<<18|revLookup[o.charCodeAt(r+1)]<<12|revLookup[o.charCodeAt(r+2)]<<6|revLookup[o.charCodeAt(r+3)],p[l++]=u>>16&255,p[l++]=u>>8&255,p[l++]=255&u;return 2===n?(u=revLookup[o.charCodeAt(r)]<<2|revLookup[o.charCodeAt(r+1)]>>4,p[l++]=255&u):1===n&&(u=revLookup[o.charCodeAt(r)]<<10|revLookup[o.charCodeAt(r+1)]<<4|revLookup[o.charCodeAt(r+2)]>>2,p[l++]=u>>8&255,p[l++]=255&u),p}function tripletToBase64(o){return lookup[o>>18&63]+lookup[o>>12&63]+lookup[o>>6&63]+lookup[63&o]}function encodeChunk(o,r,e){for(var t,u=[],n=r;n<e;n+=3)t=(o[n]<<16)+(o[n+1]<<8)+o[n+2],u.push(tripletToBase64(t));return u.join("")}function fromByteArray(o){for(var r,e=o.length,t=e%3,u="",n=[],p=0,a=e-t;p<a;p+=16383)n.push(encodeChunk(o,p,p+16383>a?a:p+16383));return 1===t?(r=o[e-1],u+=lookup[r>>2],u+=lookup[r<<4&63],u+="=="):2===t&&(r=(o[e-2]<<8)+o[e-1],u+=lookup[r>>10],u+=lookup[r>>4&63],u+=lookup[r<<2&63],u+="="),n.push(u),n.join("")}exports.byteLength=byteLength,exports.toByteArray=toByteArray,exports.fromByteArray=fromByteArray;for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;

},{}],4:[function(require,module,exports){
function BigInteger(t,r,o){if(!(this instanceof BigInteger))return new BigInteger(t,r,o);null!=t&&("number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function am1(t,r,o,n,i,e){for(;--e>=0;){var s=r*this[t++]+o[n]+i;i=Math.floor(s/67108864),o[n++]=67108863&s}return i}function am2(t,r,o,n,i,e){for(var s=32767&r,u=r>>15;--e>=0;){var h=32767&this[t],f=this[t++]>>15,p=u*h+f*s;h=s*h+((32767&p)<<15)+o[n]+(1073741823&i),i=(h>>>30)+(p>>>15)+u*f+(i>>>30),o[n++]=1073741823&h}return i}function am3(t,r,o,n,i,e){for(var s=16383&r,u=r>>14;--e>=0;){var h=16383&this[t],f=this[t++]>>14,p=u*h+f*s;h=s*h+((16383&p)<<14)+o[n]+i,i=(h>>28)+(p>>14)+u*f,o[n++]=268435455&h}return i}function int2char(t){return BI_RM.charAt(t)}function intAt(t,r){var o=BI_RC[t.charCodeAt(r)];return null==o?-1:o}function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s}function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+DV:this.t=0}function nbv(t){var r=new BigInteger;return r.fromInt(t),r}function bnpFromString(t,r){var o,n=this;if(16==r)o=4;else if(8==r)o=3;else if(256==r)o=8;else if(2==r)o=1;else if(32==r)o=5;else{if(4!=r)return void n.fromRadix(t,r);o=2}n.t=0,n.s=0;for(var i=t.length,e=!1,s=0;--i>=0;){var u=8==o?255&t[i]:intAt(t,i);u<0?"-"==t.charAt(i)&&(e=!0):(e=!1,0==s?n[n.t++]=u:s+o>n.DB?(n[n.t-1]|=(u&(1<<n.DB-s)-1)<<s,n[n.t++]=u>>n.DB-s):n[n.t-1]|=u<<s,(s+=o)>=n.DB&&(s-=n.DB))}8==o&&0!=(128&t[0])&&(n.s=-1,s>0&&(n[n.t-1]|=(1<<n.DB-s)-1<<s)),n.clamp(),e&&BigInteger.ZERO.subTo(n,n)}function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t}function bnToString(t){var r=this;if(r.s<0)return"-"+r.negate().toString(t);var o;if(16==t)o=4;else if(8==t)o=3;else if(2==t)o=1;else if(32==t)o=5;else{if(4!=t)return r.toRadix(t);o=2}var n,i=(1<<o)-1,e=!1,s="",u=r.t,h=r.DB-u*r.DB%o;if(u-- >0)for(h<r.DB&&(n=r[u]>>h)>0&&(e=!0,s=int2char(n));u>=0;)h<o?(n=(r[u]&(1<<h)-1)<<o-h,n|=r[--u]>>(h+=r.DB-o)):(n=r[u]>>(h-=o)&i,h<=0&&(h+=r.DB,--u)),n>0&&(e=!0),e&&(s+=int2char(n));return e?s:"0"}function bnNegate(){var t=new BigInteger;return BigInteger.ZERO.subTo(this,t),t}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var o=this.t;if(0!=(r=o-t.t))return this.s<0?-r:r;for(;--o>=0;)if(0!=(r=this[o]-t[o]))return r;return 0}function nbits(t){var r,o=1;return 0!=(r=t>>>16)&&(t=r,o+=16),0!=(r=t>>8)&&(t=r,o+=8),0!=(r=t>>4)&&(t=r,o+=4),0!=(r=t>>2)&&(t=r,o+=2),0!=(r=t>>1)&&(t=r,o+=1),o}function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnByteLength(){return this.bitLength()>>3}function bnpDLShiftTo(t,r){var o;for(o=this.t-1;o>=0;--o)r[o+t]=this[o];for(o=t-1;o>=0;--o)r[o]=0;r.t=this.t+t,r.s=this.s}function bnpDRShiftTo(t,r){for(var o=t;o<this.t;++o)r[o-t]=this[o];r.t=Math.max(this.t-t,0),r.s=this.s}function bnpLShiftTo(t,r){var o,n=this,i=t%n.DB,e=n.DB-i,s=(1<<e)-1,u=Math.floor(t/n.DB),h=n.s<<i&n.DM;for(o=n.t-1;o>=0;--o)r[o+u+1]=n[o]>>e|h,h=(n[o]&s)<<i;for(o=u-1;o>=0;--o)r[o]=0;r[u]=h,r.t=n.t+u+1,r.s=n.s,r.clamp()}function bnpRShiftTo(t,r){var o=this;r.s=o.s;var n=Math.floor(t/o.DB);if(n>=o.t)return void(r.t=0);var i=t%o.DB,e=o.DB-i,s=(1<<i)-1;r[0]=o[n]>>i;for(var u=n+1;u<o.t;++u)r[u-n-1]|=(o[u]&s)<<e,r[u-n]=o[u]>>i;i>0&&(r[o.t-n-1]|=(o.s&s)<<e),r.t=o.t-n,r.clamp()}function bnpSubTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]-t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i-=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i-=t[n],r[n++]=i&o.DM,i>>=o.DB;i-=t.s}r.s=i<0?-1:0,i<-1?r[n++]=o.DV+i:i>0&&(r[n++]=i),r.t=n,r.clamp()}function bnpMultiplyTo(t,r){var o=this.abs(),n=t.abs(),i=o.t;for(r.t=i+n.t;--i>=0;)r[i]=0;for(i=0;i<n.t;++i)r[i+o.t]=o.am(0,n[i],r,i,0,o.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(t){for(var r=this.abs(),o=t.t=2*r.t;--o>=0;)t[o]=0;for(o=0;o<r.t-1;++o){var n=r.am(o,r[o],t,2*o,0,1);(t[o+r.t]+=r.am(o+1,2*r[o],t,2*o+1,n,r.t-o-1))>=r.DV&&(t[o+r.t]-=r.DV,t[o+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(o,r[o],t,2*o,0,1)),t.s=0,t.clamp()}function bnpDivRemTo(t,r,o){var n=this,i=t.abs();if(!(i.t<=0)){var e=n.abs();if(e.t<i.t)return null!=r&&r.fromInt(0),void(null!=o&&n.copyTo(o));null==o&&(o=new BigInteger);var s=new BigInteger,u=n.s,h=t.s,f=n.DB-nbits(i[i.t-1]);f>0?(i.lShiftTo(f,s),e.lShiftTo(f,o)):(i.copyTo(s),e.copyTo(o));var p=s.t,a=s[p-1];if(0!=a){var b=a*(1<<n.F1)+(p>1?s[p-2]>>n.F2:0),l=n.FV/b,m=(1<<n.F1)/b,g=1<<n.F2,c=o.t,v=c-p,T=null==r?new BigInteger:r;for(s.dlShiftTo(v,T),o.compareTo(T)>=0&&(o[o.t++]=1,o.subTo(T,o)),BigInteger.ONE.dlShiftTo(p,T),T.subTo(s,s);s.t<p;)s[s.t++]=0;for(;--v>=0;){var B=o[--c]==a?n.DM:Math.floor(o[c]*l+(o[c-1]+g)*m);if((o[c]+=s.am(0,B,o,v,0,p))<B)for(s.dlShiftTo(v,T),o.subTo(T,o);o[c]<--B;)o.subTo(T,o)}null!=r&&(o.drShiftTo(p,r),u!=h&&BigInteger.ZERO.subTo(r,r)),o.t=p,o.clamp(),f>0&&o.rShiftTo(f,o),u<0&&BigInteger.ZERO.subTo(o,o)}}}function bnMod(t){var r=new BigInteger;return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r}function Classic(t){this.m=t}function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t}function cRevert(t){return t}function cReduce(t){t.divRemTo(this.m,null,t)}function cMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function cSqrTo(t,r){t.squareTo(r),this.reduce(r)}function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return r=r*(2-(15&t)*r)&15,r=r*(2-(255&t)*r)&255,r=r*(2-((65535&t)*r&65535))&65535,r=r*(2-t*r%this.DV)%this.DV,r>0?this.DV-r:-r}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function montConvert(t){var r=new BigInteger;return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r}function montRevert(t){var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var o=32767&t[r],n=o*this.mpl+((o*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(o=r+this.m.t,t[o]+=this.m.am(0,n,t,r,0,this.m.t);t[o]>=t.DV;)t[o]-=t.DV,t[++o]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)}function montSqrTo(t,r){t.squareTo(r),this.reduce(r)}function montMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)}function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var o=new BigInteger,n=new BigInteger,i=r.convert(this),e=nbits(t)-1;for(i.copyTo(o);--e>=0;)if(r.sqrTo(o,n),(t&1<<e)>0)r.mulTo(n,i,o);else{var s=o;o=n,n=s}return r.revert(o)}function bnModPowInt(t,r){var o;return o=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,o)}function bnClone(){var t=new BigInteger;return this.copyTo(t),t}function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24}function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16}function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))}function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1}function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),o=Math.pow(t,r),n=nbv(o),i=new BigInteger,e=new BigInteger,s="";for(this.divRemTo(n,i,e);i.signum()>0;)s=(o+e.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,e);return e.intValue().toString(t)+s}function bnpFromRadix(t,r){var o=this;o.fromInt(0),null==r&&(r=10);for(var n=o.chunkSize(r),i=Math.pow(r,n),e=!1,s=0,u=0,h=0;h<t.length;++h){var f=intAt(t,h);f<0?"-"==t.charAt(h)&&0==o.signum()&&(e=!0):(u=r*u+f,++s>=n&&(o.dMultiply(i),o.dAddOffset(u,0),s=0,u=0))}s>0&&(o.dMultiply(Math.pow(r,s)),o.dAddOffset(u,0)),e&&BigInteger.ZERO.subTo(o,o)}function bnpFromNumber(t,r,o){var n=this;if("number"==typeof r)if(t<2)n.fromInt(1);else for(n.fromNumber(t,o),n.testBit(t-1)||n.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,n),n.isEven()&&n.dAddOffset(1,0);!n.isProbablePrime(r);)n.dAddOffset(2,0),n.bitLength()>t&&n.subTo(BigInteger.ONE.shiftLeft(t-1),n);else{var i=new Array,e=7&t;i.length=1+(t>>3),r.nextBytes(i),e>0?i[0]&=(1<<e)-1:i[0]=0,n.fromString(i,256)}}function bnToByteArray(){var t=this,r=t.t,o=new Array;o[0]=t.s;var n,i=t.DB-r*t.DB%8,e=0;if(r-- >0)for(i<t.DB&&(n=t[r]>>i)!=(t.s&t.DM)>>i&&(o[e++]=n|t.s<<t.DB-i);r>=0;)i<8?(n=(t[r]&(1<<i)-1)<<8-i,n|=t[--r]>>(i+=t.DB-8)):(n=t[r]>>(i-=8)&255,i<=0&&(i+=t.DB,--r)),0!=(128&n)&&(n|=-256),0===e&&(128&t.s)!=(128&n)&&++e,(e>0||n!=t.s)&&(o[e++]=n);return o}function bnEquals(t){return 0==this.compareTo(t)}function bnMin(t){return this.compareTo(t)<0?this:t}function bnMax(t){return this.compareTo(t)>0?this:t}function bnpBitwiseTo(t,r,o){var n,i,e=this,s=Math.min(t.t,e.t);for(n=0;n<s;++n)o[n]=r(e[n],t[n]);if(t.t<e.t){for(i=t.s&e.DM,n=s;n<e.t;++n)o[n]=r(e[n],i);o.t=e.t}else{for(i=e.s&e.DM,n=s;n<t.t;++n)o[n]=r(i,t[n]);o.t=t.t}o.s=r(e.s,t.s),o.clamp()}function op_and(t,r){return t&r}function bnAnd(t){var r=new BigInteger;return this.bitwiseTo(t,op_and,r),r}function op_or(t,r){return t|r}function bnOr(t){var r=new BigInteger;return this.bitwiseTo(t,op_or,r),r}function op_xor(t,r){return t^r}function bnXor(t){var r=new BigInteger;return this.bitwiseTo(t,op_xor,r),r}function op_andnot(t,r){return t&~r}function bnAndNot(t){var r=new BigInteger;return this.bitwiseTo(t,op_andnot,r),r}function bnNot(){for(var t=new BigInteger,r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t}function bnShiftLeft(t){var r=new BigInteger;return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r}function bnShiftRight(t){var r=new BigInteger;return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function bnBitCount(){for(var t=0,r=this.s&this.DM,o=0;o<this.t;++o)t+=cbit(this[o]^r);return t}function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)}function bnpChangeBit(t,r){var o=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(o,r,o),o}function bnSetBit(t){return this.changeBit(t,op_or)}function bnClearBit(t){return this.changeBit(t,op_andnot)}function bnFlipBit(t){return this.changeBit(t,op_xor)}function bnpAddTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]+t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i+=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i+=t[n],r[n++]=i&o.DM,i>>=o.DB;i+=t.s}r.s=i<0?-1:0,i>0?r[n++]=i:i<-1&&(r[n++]=o.DV+i),r.t=n,r.clamp()}function bnAdd(t){var r=new BigInteger;return this.addTo(t,r),r}function bnSubtract(t){var r=new BigInteger;return this.subTo(t,r),r}function bnMultiply(t){var r=new BigInteger;return this.multiplyTo(t,r),r}function bnSquare(){var t=new BigInteger;return this.squareTo(t),t}function bnDivide(t){var r=new BigInteger;return this.divRemTo(t,r,null),r}function bnRemainder(t){var r=new BigInteger;return this.divRemTo(t,null,r),r}function bnDivideAndRemainder(t){var r=new BigInteger,o=new BigInteger;return this.divRemTo(t,r,o),new Array(r,o)}function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()}function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}}function NullExp(){}function nNop(t){return t}function nMulTo(t,r,o){t.multiplyTo(r,o)}function nSqrTo(t,r){t.squareTo(r)}function bnPow(t){return this.exp(t,new NullExp)}function bnpMultiplyLowerTo(t,r,o){var n=Math.min(this.t+t.t,r);for(o.s=0,o.t=n;n>0;)o[--n]=0;var i;for(i=o.t-this.t;n<i;++n)o[n+this.t]=this.am(0,t[n],o,n,0,this.t);for(i=Math.min(t.t,r);n<i;++n)this.am(0,t[n],o,n,0,r-n);o.clamp()}function bnpMultiplyUpperTo(t,r,o){--r;var n=o.t=this.t+t.t-r;for(o.s=0;--n>=0;)o[n]=0;for(n=Math.max(r-this.t,0);n<t.t;++n)o[this.t+n-r]=this.am(r-n,t[n],o,0,0,this.t+n-r);o.clamp(),o.drShiftTo(1,o)}function Barrett(t){this.r2=new BigInteger,this.q3=new BigInteger,BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function barrettRevert(t){return t}function barrettReduce(t){var r=this;for(t.drShiftTo(r.m.t-1,r.r2),t.t>r.m.t+1&&(t.t=r.m.t+1,t.clamp()),r.mu.multiplyUpperTo(r.r2,r.m.t+1,r.q3),r.m.multiplyLowerTo(r.q3,r.m.t+1,r.r2);t.compareTo(r.r2)<0;)t.dAddOffset(1,r.m.t+1);for(t.subTo(r.r2,t);t.compareTo(r.m)>=0;)t.subTo(r.m,t)}function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)}function barrettMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnModPow(t,r){var o,n,i=t.bitLength(),e=nbv(1);if(i<=0)return e;o=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var s=new Array,u=3,h=o-1,f=(1<<o)-1;if(s[1]=n.convert(this),o>1){var p=new BigInteger;for(n.sqrTo(s[1],p);u<=f;)s[u]=new BigInteger,n.mulTo(p,s[u-2],s[u]),u+=2}var a,b,l=t.t-1,m=!0,g=new BigInteger;for(i=nbits(t[l])-1;l>=0;){for(i>=h?a=t[l]>>i-h&f:(a=(t[l]&(1<<i+1)-1)<<h-i,l>0&&(a|=t[l-1]>>this.DB+i-h)),u=o;0==(1&a);)a>>=1,--u;if((i-=u)<0&&(i+=this.DB,--l),m)s[a].copyTo(e),m=!1;else{for(;u>1;)n.sqrTo(e,g),n.sqrTo(g,e),u-=2;u>0?n.sqrTo(e,g):(b=e,e=g,g=b),n.mulTo(g,s[a],e)}for(;l>=0&&0==(t[l]&1<<i);)n.sqrTo(e,g),b=e,e=g,g=b,--i<0&&(i=this.DB-1,--l)}return n.revert(e)}function bnGCD(t){var r=this.s<0?this.negate():this.clone(),o=t.s<0?t.negate():t.clone();if(r.compareTo(o)<0){var n=r;r=o,o=n}var i=r.getLowestSetBit(),e=o.getLowestSetBit();if(e<0)return r;for(i<e&&(e=i),e>0&&(r.rShiftTo(e,r),o.rShiftTo(e,o));r.signum()>0;)(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),(i=o.getLowestSetBit())>0&&o.rShiftTo(i,o),r.compareTo(o)>=0?(r.subTo(o,r),r.rShiftTo(1,r)):(o.subTo(r,o),o.rShiftTo(1,o));return e>0&&o.lShiftTo(e,o),o}function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,o=this.s<0?t-1:0;if(this.t>0)if(0==r)o=this[0]%t;else for(var n=this.t-1;n>=0;--n)o=(r*o+this[n])%t;return o}function bnModInverse(t){var r=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var o=t.clone(),n=this.clone(),i=nbv(1),e=nbv(0),s=nbv(0),u=nbv(1);0!=o.signum();){for(;o.isEven();)o.rShiftTo(1,o),r?(i.isEven()&&e.isEven()||(i.addTo(this,i),e.subTo(t,e)),i.rShiftTo(1,i)):e.isEven()||e.subTo(t,e),e.rShiftTo(1,e);for(;n.isEven();)n.rShiftTo(1,n),r?(s.isEven()&&u.isEven()||(s.addTo(this,s),u.subTo(t,u)),s.rShiftTo(1,s)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);o.compareTo(n)>=0?(o.subTo(n,o),r&&i.subTo(s,i),e.subTo(u,e)):(n.subTo(o,n),r&&s.subTo(i,s),u.subTo(e,u))}if(0!=n.compareTo(BigInteger.ONE))return BigInteger.ZERO;for(;u.compareTo(t)>=0;)u.subTo(t,u);for(;u.signum()<0;)u.addTo(t,u);return u}function bnIsProbablePrime(t){var r,o=this.abs();if(1==o.t&&o[0]<=lowprimes[lowprimes.length-1]){for(r=0;r<lowprimes.length;++r)if(o[0]==lowprimes[r])return!0;return!1}if(o.isEven())return!1;for(r=1;r<lowprimes.length;){for(var n=lowprimes[r],i=r+1;i<lowprimes.length&&n<lplim;)n*=lowprimes[i++];for(n=o.modInt(n);r<i;)if(n%lowprimes[r++]==0)return!1}return o.millerRabin(t)}function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),o=r.getLowestSetBit();if(o<=0)return!1;var n=r.shiftRight(o);(t=t+1>>1)>lowprimes.length&&(t=lowprimes.length);for(var i,e=new BigInteger(null),s=[],u=0;u<t;++u){for(;i=lowprimes[Math.floor(Math.random()*lowprimes.length)],s.indexOf(i)!=-1;);s.push(i),e.fromInt(i);var h=e.modPow(n,this);if(0!=h.compareTo(BigInteger.ONE)&&0!=h.compareTo(r)){for(var i=1;i++<o&&0!=h.compareTo(r);)if(h=h.modPowInt(2,this),0==h.compareTo(BigInteger.ONE))return!1;if(0!=h.compareTo(r))return!1}}return!0}var proto=BigInteger.prototype;proto.__bigi=require("../package.json").version,BigInteger.isBigInteger=function(t,r){return t&&t.__bigi&&(!r||t.__bigi===proto.__bigi)};var dbits;BigInteger.prototype.am=am1,dbits=26,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1;var DV=BigInteger.prototype.DV=1<<dbits,BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz",BI_RC=new Array,rr,vv;for(rr="0".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr="a".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr="A".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;Classic.prototype.convert=cConvert,Classic.prototype.revert=cRevert,Classic.prototype.reduce=cReduce,Classic.prototype.mulTo=cMulTo,Classic.prototype.sqrTo=cSqrTo,Montgomery.prototype.convert=montConvert,Montgomery.prototype.revert=montRevert,Montgomery.prototype.reduce=montReduce,Montgomery.prototype.mulTo=montMulTo,Montgomery.prototype.sqrTo=montSqrTo,proto.copyTo=bnpCopyTo,proto.fromInt=bnpFromInt,proto.fromString=bnpFromString,proto.clamp=bnpClamp,proto.dlShiftTo=bnpDLShiftTo,proto.drShiftTo=bnpDRShiftTo,proto.lShiftTo=bnpLShiftTo,proto.rShiftTo=bnpRShiftTo,proto.subTo=bnpSubTo,proto.multiplyTo=bnpMultiplyTo,proto.squareTo=bnpSquareTo,proto.divRemTo=bnpDivRemTo,proto.invDigit=bnpInvDigit,proto.isEven=bnpIsEven,proto.exp=bnpExp,proto.toString=bnToString,proto.negate=bnNegate,proto.abs=bnAbs,proto.compareTo=bnCompareTo,proto.bitLength=bnBitLength,proto.byteLength=bnByteLength,proto.mod=bnMod,proto.modPowInt=bnModPowInt,NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=nMulTo,NullExp.prototype.sqrTo=nSqrTo,Barrett.prototype.convert=barrettConvert,Barrett.prototype.revert=barrettRevert,Barrett.prototype.reduce=barrettReduce,Barrett.prototype.mulTo=barrettMulTo,Barrett.prototype.sqrTo=barrettSqrTo;var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1];proto.chunkSize=bnpChunkSize,proto.toRadix=bnpToRadix,proto.fromRadix=bnpFromRadix,proto.fromNumber=bnpFromNumber,proto.bitwiseTo=bnpBitwiseTo,proto.changeBit=bnpChangeBit,proto.addTo=bnpAddTo,proto.dMultiply=bnpDMultiply,proto.dAddOffset=bnpDAddOffset,proto.multiplyLowerTo=bnpMultiplyLowerTo,proto.multiplyUpperTo=bnpMultiplyUpperTo,proto.modInt=bnpModInt,proto.millerRabin=bnpMillerRabin,proto.clone=bnClone,proto.intValue=bnIntValue,proto.byteValue=bnByteValue,proto.shortValue=bnShortValue,proto.signum=bnSigNum,proto.toByteArray=bnToByteArray,proto.equals=bnEquals,proto.min=bnMin,proto.max=bnMax,proto.and=bnAnd,proto.or=bnOr,proto.xor=bnXor,proto.andNot=bnAndNot,proto.not=bnNot,proto.shiftLeft=bnShiftLeft,proto.shiftRight=bnShiftRight,proto.getLowestSetBit=bnGetLowestSetBit,proto.bitCount=bnBitCount,proto.testBit=bnTestBit,proto.setBit=bnSetBit,proto.clearBit=bnClearBit,proto.flipBit=bnFlipBit,proto.add=bnAdd,proto.subtract=bnSubtract,proto.multiply=bnMultiply,proto.divide=bnDivide,proto.remainder=bnRemainder,proto.divideAndRemainder=bnDivideAndRemainder,proto.modPow=bnModPow,proto.modInverse=bnModInverse,proto.pow=bnPow,proto.gcd=bnGCD,proto.isProbablePrime=bnIsProbablePrime,proto.square=bnSquare,BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),BigInteger.valueOf=nbv,module.exports=BigInteger;

},{"../package.json":7}],5:[function(require,module,exports){
(function (Buffer){
var assert=require("assert"),BigInteger=require("./bigi");BigInteger.fromByteArrayUnsigned=function(e){return new BigInteger(128&e[0]?[0].concat(e):e)},BigInteger.prototype.toByteArrayUnsigned=function(){var e=this.toByteArray();return 0===e[0]?e.slice(1):e},BigInteger.fromDERInteger=function(e){return new BigInteger(e)},BigInteger.prototype.toDERInteger=BigInteger.prototype.toByteArray,BigInteger.fromBuffer=function(e){if(128&e[0]){var t=Array.prototype.slice.call(e);return new BigInteger([0].concat(t))}return new BigInteger(e)},BigInteger.fromHex=function(e){return""===e?BigInteger.ZERO:(assert.equal(e,e.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),assert.equal(e.length%2,0,"Incomplete hex"),new BigInteger(e,16))},BigInteger.prototype.toBuffer=function(e){for(var t=this.toByteArrayUnsigned(),r=[],n=e-t.length;r.length<n;)r.push(0);return new Buffer(r.concat(t))},BigInteger.prototype.toHex=function(e){return this.toBuffer(e).toString("hex")};

}).call(this,require("buffer").Buffer)

},{"./bigi":4,"assert":1,"buffer":51}],6:[function(require,module,exports){
var BigInteger=require("./bigi");require("./convert"),module.exports=BigInteger;

},{"./bigi":4,"./convert":5}],7:[function(require,module,exports){
module.exports={
  "name": "bigi",
  "version": "1.4.2",
  "description": "Big integers.",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "jshint": "^2.5.1",
    "mocha": "^2.1.0",
    "mochify": "^2.1.0"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/bigi",
    "type": "git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "browser-test": "./node_modules/.bin/mochify --wd -R spec",
    "test": "./node_modules/.bin/_mocha -- test/*.js",
    "jshint": "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
    "unit": "./node_modules/.bin/mocha",
    "coverage": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
  },
  "dependencies": {},
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  }
}

},{}],8:[function(require,module,exports){
(function (Buffer){
function check(e){if(e.length<8)return!1;if(e.length>72)return!1;if(48!==e[0])return!1;if(e[1]!==e.length-2)return!1;if(2!==e[2])return!1;var r=e[3];if(0===r)return!1;if(5+r>=e.length)return!1;if(2!==e[4+r])return!1;var n=e[5+r];return 0!==n&&(6+r+n===e.length&&(!(128&e[4])&&(!(r>1&&0===e[4]&&!(128&e[5]))&&(!(128&e[r+6])&&!(n>1&&0===e[r+6]&&!(128&e[r+7]))))))}function decode(e){if(e.length<8)throw new Error("DER sequence length is too short");if(e.length>72)throw new Error("DER sequence length is too long");if(48!==e[0])throw new Error("Expected DER sequence");if(e[1]!==e.length-2)throw new Error("DER sequence length is invalid");if(2!==e[2])throw new Error("Expected DER integer");var r=e[3];if(0===r)throw new Error("R length is zero");if(5+r>=e.length)throw new Error("R length is too long");if(2!==e[4+r])throw new Error("Expected DER integer (2)");var n=e[5+r];if(0===n)throw new Error("S length is zero");if(6+r+n!==e.length)throw new Error("S length is invalid");if(128&e[4])throw new Error("R value is negative");if(r>1&&0===e[4]&&!(128&e[5]))throw new Error("R value excessively padded");if(128&e[r+6])throw new Error("S value is negative");if(n>1&&0===e[r+6]&&!(128&e[r+7]))throw new Error("S value excessively padded");return{r:e.slice(4,4+r),s:e.slice(6+r)}}function encode(e,r){var n=e.length,t=r.length;if(0===n)throw new Error("R length is zero");if(0===t)throw new Error("S length is zero");if(n>33)throw new Error("R length is too long");if(t>33)throw new Error("S length is too long");if(128&e[0])throw new Error("R value is negative");if(128&r[0])throw new Error("S value is negative");if(n>1&&0===e[0]&&!(128&e[1]))throw new Error("R value excessively padded");if(t>1&&0===r[0]&&!(128&r[1]))throw new Error("S value excessively padded");var o=new Buffer(6+n+t);return o[0]=48,o[1]=o.length-2,o[2]=2,o[3]=e.length,e.copy(o,4),o[4+n]=2,o[5+n]=r.length,r.copy(o,6+n),o}module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],9:[function(require,module,exports){
module.exports={
  "OP_FALSE": 0,
  "OP_0": 0,
  "OP_PUSHDATA1": 76,
  "OP_PUSHDATA2": 77,
  "OP_PUSHDATA4": 78,
  "OP_1NEGATE": 79,
  "OP_RESERVED": 80,
  "OP_1": 81,
  "OP_TRUE": 81,
  "OP_2": 82,
  "OP_3": 83,
  "OP_4": 84,
  "OP_5": 85,
  "OP_6": 86,
  "OP_7": 87,
  "OP_8": 88,
  "OP_9": 89,
  "OP_10": 90,
  "OP_11": 91,
  "OP_12": 92,
  "OP_13": 93,
  "OP_14": 94,
  "OP_15": 95,
  "OP_16": 96,

  "OP_NOP": 97,
  "OP_VER": 98,
  "OP_IF": 99,
  "OP_NOTIF": 100,
  "OP_VERIF": 101,
  "OP_VERNOTIF": 102,
  "OP_ELSE": 103,
  "OP_ENDIF": 104,
  "OP_VERIFY": 105,
  "OP_RETURN": 106,

  "OP_TOALTSTACK": 107,
  "OP_FROMALTSTACK": 108,
  "OP_2DROP": 109,
  "OP_2DUP": 110,
  "OP_3DUP": 111,
  "OP_2OVER": 112,
  "OP_2ROT": 113,
  "OP_2SWAP": 114,
  "OP_IFDUP": 115,
  "OP_DEPTH": 116,
  "OP_DROP": 117,
  "OP_DUP": 118,
  "OP_NIP": 119,
  "OP_OVER": 120,
  "OP_PICK": 121,
  "OP_ROLL": 122,
  "OP_ROT": 123,
  "OP_SWAP": 124,
  "OP_TUCK": 125,

  "OP_CAT": 126,
  "OP_SUBSTR": 127,
  "OP_LEFT": 128,
  "OP_RIGHT": 129,
  "OP_SIZE": 130,

  "OP_INVERT": 131,
  "OP_AND": 132,
  "OP_OR": 133,
  "OP_XOR": 134,
  "OP_EQUAL": 135,
  "OP_EQUALVERIFY": 136,
  "OP_RESERVED1": 137,
  "OP_RESERVED2": 138,

  "OP_1ADD": 139,
  "OP_1SUB": 140,
  "OP_2MUL": 141,
  "OP_2DIV": 142,
  "OP_NEGATE": 143,
  "OP_ABS": 144,
  "OP_NOT": 145,
  "OP_0NOTEQUAL": 146,
  "OP_ADD": 147,
  "OP_SUB": 148,
  "OP_MUL": 149,
  "OP_DIV": 150,
  "OP_MOD": 151,
  "OP_LSHIFT": 152,
  "OP_RSHIFT": 153,

  "OP_BOOLAND": 154,
  "OP_BOOLOR": 155,
  "OP_NUMEQUAL": 156,
  "OP_NUMEQUALVERIFY": 157,
  "OP_NUMNOTEQUAL": 158,
  "OP_LESSTHAN": 159,
  "OP_GREATERTHAN": 160,
  "OP_LESSTHANOREQUAL": 161,
  "OP_GREATERTHANOREQUAL": 162,
  "OP_MIN": 163,
  "OP_MAX": 164,

  "OP_WITHIN": 165,

  "OP_RIPEMD160": 166,
  "OP_SHA1": 167,
  "OP_SHA256": 168,
  "OP_HASH160": 169,
  "OP_HASH256": 170,
  "OP_CODESEPARATOR": 171,
  "OP_CHECKSIG": 172,
  "OP_CHECKSIGVERIFY": 173,
  "OP_CHECKMULTISIG": 174,
  "OP_CHECKMULTISIGVERIFY": 175,

  "OP_NOP1": 176,
  "OP_NOP2": 177,
  "OP_CHECKLOCKTIMEVERIFY": 177,

  "OP_NOP3": 178,
  "OP_NOP4": 179,
  "OP_NOP5": 180,
  "OP_NOP6": 181,
  "OP_NOP7": 182,
  "OP_NOP8": 183,
  "OP_NOP9": 184,
  "OP_NOP10": 185,

  "OP_PUBKEYHASH": 253,
  "OP_PUBKEY": 254,
  "OP_INVALIDOPCODE": 255
}

},{}],10:[function(require,module,exports){
var OPS=require("./index.json"),map={};for(var op in OPS){map[OPS[op]]=op}module.exports=map;

},{"./index.json":9}],11:[function(require,module,exports){
(function (Buffer){
function fromBase58Check(t){var e=bs58check.decode(t);if(e.length<21)throw new TypeError(t+" is too short");if(e.length>22)throw new TypeError(t+" is too long");var r=22===e.length,c=r?2:1,o=r?e.readUInt16BE(0):e[0];return{hash:e.slice(c),version:o}}function toBase58Check(t,e){typeforce(types.tuple(types.Hash160bit,types.UInt16),arguments);var r=e>255,c=r?22:21,o=r?2:1,s=new Buffer(c);return r?s.writeUInt16BE(e,0):s.writeUInt8(e,0),t.copy(s,o),bs58check.encode(s)}function fromOutputScript(t,e){if(e=e||networks.bitcoin,bscript.pubKeyHash.output.check(t))return toBase58Check(bscript.compile(t).slice(3,23),e.pubKeyHash);if(bscript.scriptHash.output.check(t))return toBase58Check(bscript.compile(t).slice(2,22),e.scriptHash);throw new Error(bscript.toASM(t)+" has no matching Address")}function toOutputScript(t,e){e=e||networks.bitcoin;var r=fromBase58Check(t);if(r.version===e.pubKeyHash)return bscript.pubKeyHash.output.encode(r.hash);if(r.version===e.scriptHash)return bscript.scriptHash.output.encode(r.hash);throw new Error(t+" has no matching Script")}var bs58check=require("bs58check"),bscript=require("./script"),networks=require("./networks"),typeforce=require("typeforce"),types=require("./types");module.exports={fromBase58Check:fromBase58Check,fromOutputScript:fromOutputScript,toBase58Check:toBase58Check,toOutputScript:toOutputScript};

}).call(this,require("buffer").Buffer)

},{"./networks":20,"./script":21,"./types":47,"bs58check":50,"buffer":51,"typeforce":96}],12:[function(require,module,exports){
(function (Buffer){
function Block(){this.version=1,this.prevHash=null,this.merkleRoot=null,this.timestamp=0,this.bits=0,this.nonce=0}var bufferutils=require("./bufferutils"),bcrypto=require("./crypto"),fastMerkleRoot=require("merkle-lib/fastRoot"),typeforce=require("typeforce"),types=require("./types"),Transaction=require("./transaction");Block.fromBuffer=function(t){function r(r){return o+=r,t.slice(o-r,o)}function e(){var r=t.readUInt32LE(o);return o+=4,r}if(t.length<80)throw new Error("Buffer too small (< 80 bytes)");var o=0,n=new Block;if(n.version=function(){var r=t.readInt32LE(o);return o+=4,r}(),n.prevHash=r(32),n.merkleRoot=r(32),n.timestamp=e(),n.bits=e(),n.nonce=e(),80===t.length)return n;var i=function(){var r=bufferutils.readVarInt(t,o);return o+=r.size,r.number}();n.transactions=[];for(var s=0;s<i;++s){var c=function(){var r=Transaction.fromBuffer(t.slice(o),!1,!0);return o+=r.byteLength(),r}();n.transactions.push(c)}return n},Block.fromHex=function(t){return Block.fromBuffer(new Buffer(t,"hex"))},Block.prototype.getHash=function(){return bcrypto.hash256(this.toBuffer(!0))},Block.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Block.prototype.getUTCDate=function(){var t=new Date(0);return t.setUTCSeconds(this.timestamp),t},Block.prototype.toBuffer=function(t){function r(t){t.copy(o,n),n+=t.length}function e(t){o.writeUInt32LE(t,n),n+=4}var o=new Buffer(80),n=0;if(function(t){o.writeInt32LE(t,n),n+=4}(this.version),r(this.prevHash),r(this.merkleRoot),e(this.timestamp),e(this.bits),e(this.nonce),t||!this.transactions)return o;var i=bufferutils.varIntBuffer(this.transactions.length),s=this.transactions.map(function(t){return t.toBuffer()});return Buffer.concat([o,i].concat(s))},Block.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")},Block.calculateTarget=function(t){var r=((4278190080&t)>>24)-3,e=8388607&t,o=new Buffer(32);return o.fill(0),o.writeUInt32BE(e,28-r),o},Block.calculateMerkleRoot=function(t){if(typeforce([{getHash:types.Function}],t),0===t.length)throw TypeError("Cannot compute merkle root for zero transactions");return fastMerkleRoot(t.map(function(t){return t.getHash()}),bcrypto.hash256)},Block.prototype.checkMerkleRoot=function(){if(!this.transactions)return!1;var t=Block.calculateMerkleRoot(this.transactions);return 0===this.merkleRoot.compare(t)},Block.prototype.checkProofOfWork=function(){var t=this.getHash().reverse(),r=Block.calculateTarget(this.bits);return t.compare(r)<=0},module.exports=Block;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":13,"./crypto":14,"./transaction":45,"./types":47,"buffer":51,"merkle-lib/fastRoot":67,"typeforce":96}],13:[function(require,module,exports){
function verifuint(r,n){if("number"!=typeof r)throw new Error("cannot write a non-number as a number");if(r<0)throw new Error("specified a negative value for writing an unsigned value");if(r>n)throw new Error("RangeError: value out of range");if(Math.floor(r)!==r)throw new Error("value has a fractional component")}function readUInt64LE(r,n){var t=r.readUInt32LE(n),e=r.readUInt32LE(n+4);return e*=4294967296,verifuint(e+t,9007199254740991),e+t}function writeUInt64LE(r,n,t){return verifuint(n,9007199254740991),r.writeInt32LE(n&-1,t),r.writeUInt32LE(Math.floor(n/4294967296),t+4),t+8}function readVarInt(r,n){return{number:varuint.decode(r,n),size:varuint.decode.bytes}}function writeVarInt(r,n,t){return varuint.encode(n,r,t),varuint.encode.bytes}var pushdata=require("pushdata-bitcoin"),varuint=require("varuint-bitcoin");module.exports={pushDataSize:pushdata.encodingLength,readPushDataInt:pushdata.decode,readUInt64LE:readUInt64LE,readVarInt:readVarInt,varIntBuffer:varuint.encode,varIntSize:varuint.encodingLength,writePushDataInt:pushdata.encode,writeUInt64LE:writeUInt64LE,writeVarInt:writeVarInt};

},{"pushdata-bitcoin":70,"varuint-bitcoin":102}],14:[function(require,module,exports){
function ripemd160(a){return createHash("rmd160").update(a).digest()}function sha1(a){return createHash("sha1").update(a).digest()}function sha256(a){return createHash("sha256").update(a).digest()}function hash160(a){return ripemd160(sha256(a))}function hash256(a){return sha256(sha256(a))}var createHash=require("create-hash");module.exports={hash160:hash160,hash256:hash256,ripemd160:ripemd160,sha1:sha1,sha256:sha256};

},{"create-hash":54}],15:[function(require,module,exports){
(function (Buffer){
function deterministicGenerateK(e,t,r){typeforce(types.tuple(types.Hash256bit,types.Buffer256bit,types.Function),arguments);var i=new Buffer(32),a=new Buffer(32);a.fill(1),i.fill(0),i=createHmac("sha256",i).update(a).update(ZERO).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),i=createHmac("sha256",i).update(a).update(ONE).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest();for(var u=BigInteger.fromBuffer(a);u.signum()<=0||u.compareTo(secp256k1.n)>=0||!r(u);)i=createHmac("sha256",i).update(a).update(ZERO).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest(),u=BigInteger.fromBuffer(a);return u}function sign(e,t){typeforce(types.tuple(types.Hash256bit,types.BigInt),arguments);var r,i,a=t.toBuffer(32),u=BigInteger.fromBuffer(e),s=secp256k1.n,n=secp256k1.G;return deterministicGenerateK(e,a,function(e){var a=n.multiply(e);return!secp256k1.isInfinity(a)&&(r=a.affineX.mod(s),0!==r.signum()&&(i=e.modInverse(s).multiply(u.add(t.multiply(r))).mod(s),0!==i.signum()))}),i.compareTo(N_OVER_TWO)>0&&(i=s.subtract(i)),new ECSignature(r,i)}function verify(e,t,r){typeforce(types.tuple(types.Hash256bit,types.ECSignature,types.ECPoint),arguments);var i=secp256k1.n,a=secp256k1.G,u=t.r,s=t.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var n=BigInteger.fromBuffer(e),p=s.modInverse(i),c=n.multiply(p).mod(i),f=u.multiply(p).mod(i),m=a.multiplyTwo(c,r,f);return!secp256k1.isInfinity(m)&&m.affineX.mod(i).equals(u)}var createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi"),ECSignature=require("./ecsignature"),ZERO=new Buffer([0]),ONE=new Buffer([1]),ecurve=require("ecurve"),secp256k1=ecurve.getCurveByName("secp256k1"),N_OVER_TWO=secp256k1.n.shiftRight(1);module.exports={deterministicGenerateK:deterministicGenerateK,sign:sign,verify:verify,__curve:secp256k1};

}).call(this,require("buffer").Buffer)

},{"./ecsignature":17,"./types":47,"bigi":6,"buffer":51,"create-hmac":57,"ecurve":60,"typeforce":96}],16:[function(require,module,exports){
function ECPair(e,r,t){if(t&&typeforce({compressed:types.maybe(types.Boolean),network:types.maybe(types.Network)},t),t=t||{},e){if(e.signum()<=0)throw new Error("Private key must be greater than 0");if(e.compareTo(secp256k1.n)>=0)throw new Error("Private key must be less than the curve order");if(r)throw new TypeError("Unexpected publicKey parameter");this.d=e}else typeforce(types.ECPoint,r),this.__Q=r;this.compressed=void 0===t.compressed||t.compressed,this.network=t.network||NETWORKS.bitcoin}var baddress=require("./address"),bcrypto=require("./crypto"),ecdsa=require("./ecdsa"),randomBytes=require("randombytes"),typeforce=require("typeforce"),types=require("./types"),wif=require("wif"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ecurve=require("ecurve"),secp256k1=ecdsa.__curve;Object.defineProperty(ECPair.prototype,"Q",{get:function(){return!this.__Q&&this.d&&(this.__Q=secp256k1.G.multiply(this.d)),this.__Q}}),ECPair.fromPublicKeyBuffer=function(e,r){var t=ecurve.Point.decodeFrom(secp256k1,e);return new ECPair(null,t,{compressed:t.compressed,network:r})},ECPair.fromWIF=function(e,r){var t=wif.decode(e),i=t.version;if(types.Array(r)){if(!(r=r.filter(function(e){return i===e.wif}).pop()))throw new Error("Unknown network version")}else if(r=r||NETWORKS.bitcoin,i!==r.wif)throw new Error("Invalid network version");return new ECPair(BigInteger.fromBuffer(t.privateKey),null,{compressed:t.compressed,network:r})},ECPair.makeRandom=function(e){e=e||{};var r,t=e.rng||randomBytes;do{var i=t(32);typeforce(types.Buffer256bit,i),r=BigInteger.fromBuffer(i)}while(r.signum()<=0||r.compareTo(secp256k1.n)>=0);return new ECPair(r,null,e)},ECPair.prototype.getAddress=function(){return baddress.toBase58Check(bcrypto.hash160(this.getPublicKeyBuffer()),this.getNetwork().pubKeyHash)},ECPair.prototype.getNetwork=function(){return this.network},ECPair.prototype.getPublicKeyBuffer=function(){return this.Q.getEncoded(this.compressed)},ECPair.prototype.sign=function(e){if(!this.d)throw new Error("Missing private key");return ecdsa.sign(e,this.d)},ECPair.prototype.toWIF=function(){if(!this.d)throw new Error("Missing private key");return wif.encode(this.network.wif,this.d.toBuffer(32),this.compressed)},ECPair.prototype.verify=function(e,r){return ecdsa.verify(e,r,this.Q)},module.exports=ECPair;

},{"./address":11,"./crypto":14,"./ecdsa":15,"./networks":20,"./types":47,"bigi":6,"ecurve":60,"randombytes":71,"typeforce":96,"wif":103}],17:[function(require,module,exports){
(function (Buffer){
function ECSignature(e,r){typeforce(types.tuple(types.BigInt,types.BigInt),arguments),this.r=e,this.s=r}var bip66=require("bip66"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi");ECSignature.parseCompact=function(e){if(65!==e.length)throw new Error("Invalid signature length");var r=e.readUInt8(0)-27;if(r!==(7&r))throw new Error("Invalid signature parameter");return{compressed:!!(4&r),i:3&r,signature:new ECSignature(BigInteger.fromBuffer(e.slice(1,33)),BigInteger.fromBuffer(e.slice(33)))}},ECSignature.fromDER=function(e){var r=bip66.decode(e);return new ECSignature(BigInteger.fromDERInteger(r.r),BigInteger.fromDERInteger(r.s))},ECSignature.parseScriptSignature=function(e){var r=e.readUInt8(e.length-1),t=r&-129;if(t<=0||t>=4)throw new Error("Invalid hashType "+r);return{signature:ECSignature.fromDER(e.slice(0,-1)),hashType:r}},ECSignature.prototype.toCompact=function(e,r){r&&(e+=4),e+=27;var t=new Buffer(65);return t.writeUInt8(e,0),this.r.toBuffer(32).copy(t,1),this.s.toBuffer(32).copy(t,33),t},ECSignature.prototype.toDER=function(){var e=new Buffer(this.r.toDERInteger()),r=new Buffer(this.s.toDERInteger());return bip66.encode(e,r)},ECSignature.prototype.toScriptSignature=function(e){var r=e&-129;if(r<=0||r>=4)throw new Error("Invalid hashType "+e);var t=new Buffer(1);return t.writeUInt8(e,0),Buffer.concat([this.toDER(),t])},module.exports=ECSignature;

}).call(this,require("buffer").Buffer)

},{"./types":47,"bigi":6,"bip66":8,"buffer":51,"typeforce":96}],18:[function(require,module,exports){
(function (Buffer){
function HDNode(e,r){if(typeforce(types.tuple("ECPair",types.Buffer256bit),arguments),!e.compressed)throw new TypeError("BIP32 only allows compressed keyPairs");this.keyPair=e,this.chainCode=r,this.depth=0,this.index=0,this.parentFingerprint=0}var base58check=require("bs58check"),bcrypto=require("./crypto"),createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ECPair=require("./ecpair"),ecurve=require("ecurve"),curve=ecurve.getCurveByName("secp256k1");HDNode.HIGHEST_BIT=2147483648,HDNode.LENGTH=78,HDNode.MASTER_SECRET=new Buffer("Bitcoin seed"),HDNode.fromSeedBuffer=function(e,r){if(typeforce(types.tuple(types.Buffer,types.maybe(types.Network)),arguments),e.length<16)throw new TypeError("Seed should be at least 128 bits");if(e.length>64)throw new TypeError("Seed should be at most 512 bits");var t=createHmac("sha512",HDNode.MASTER_SECRET).update(e).digest(),i=t.slice(0,32),n=t.slice(32);return new HDNode(new ECPair(BigInteger.fromBuffer(i),null,{network:r}),n)},HDNode.fromSeedHex=function(e,r){return HDNode.fromSeedBuffer(new Buffer(e,"hex"),r)},HDNode.fromBase58=function(e,r,t){var i=base58check.decode(e);if(78!==i.length)throw new Error("Invalid buffer length");var n,o=i.readUInt32BE(0);if(Array.isArray(r)){if(!(n=r.filter(function(e){return o===e.bip32.private||o===e.bip32.public}).pop()))throw new Error("Unknown network version")}else n=r||NETWORKS.bitcoin;if(o!==n.bip32.private&&o!==n.bip32.public)throw new Error("Invalid network version");var d=i[4],s=i.readUInt32BE(5);if(0===d&&0!==s)throw new Error("Invalid parent fingerprint");var a=i.readUInt32BE(9);if(0===d&&0!==a)throw new Error("Invalid index");var p,u=i.slice(13,45);if(o===n.bip32.private){if(0!==i.readUInt8(45))throw new Error("Invalid private key");p=new ECPair(BigInteger.fromBuffer(i.slice(46,78)),null,{network:n})}else{var f=ecurve.Point.decodeFrom(curve,i.slice(45,78));t||curve.validate(f),p=new ECPair(null,f,{network:n})}var c=new HDNode(p,u);return c.depth=d,c.index=a,c.parentFingerprint=s,c},HDNode.prototype.getAddress=function(){return this.keyPair.getAddress()},HDNode.prototype.getIdentifier=function(){return bcrypto.hash160(this.keyPair.getPublicKeyBuffer())},HDNode.prototype.getFingerprint=function(){return this.getIdentifier().slice(0,4)},HDNode.prototype.getNetwork=function(){return this.keyPair.getNetwork()},HDNode.prototype.getPublicKeyBuffer=function(){return this.keyPair.getPublicKeyBuffer()},HDNode.prototype.neutered=function(){var e=new ECPair(null,this.keyPair.Q,{network:this.keyPair.network}),r=new HDNode(e,this.chainCode);return r.depth=this.depth,r.index=this.index,r.parentFingerprint=this.parentFingerprint,r},HDNode.prototype.sign=function(e){return this.keyPair.sign(e)},HDNode.prototype.verify=function(e,r){return this.keyPair.verify(e,r)},HDNode.prototype.toBase58=function(e){if(void 0!==e)throw new TypeError("Unsupported argument in 2.0.0");var r=this.keyPair.network,t=this.isNeutered()?r.bip32.public:r.bip32.private,i=new Buffer(78);return i.writeUInt32BE(t,0),i.writeUInt8(this.depth,4),i.writeUInt32BE(this.parentFingerprint,5),i.writeUInt32BE(this.index,9),this.chainCode.copy(i,13),this.isNeutered()?this.keyPair.getPublicKeyBuffer().copy(i,45):(i.writeUInt8(0,45),this.keyPair.d.toBuffer(32).copy(i,46)),base58check.encode(i)},HDNode.prototype.derive=function(e){typeforce(types.UInt32,e);var r=e>=HDNode.HIGHEST_BIT,t=new Buffer(37);if(r){if(this.isNeutered())throw new TypeError("Could not derive hardened child key");t[0]=0,this.keyPair.d.toBuffer(32).copy(t,1),t.writeUInt32BE(e,33)}else this.keyPair.getPublicKeyBuffer().copy(t,0),t.writeUInt32BE(e,33);var i=createHmac("sha512",this.chainCode).update(t).digest(),n=i.slice(0,32),o=i.slice(32),d=BigInteger.fromBuffer(n);if(d.compareTo(curve.n)>=0)return this.derive(e+1);var s;if(this.isNeutered()){var a=curve.G.multiply(d).add(this.keyPair.Q);if(curve.isInfinity(a))return this.derive(e+1);s=new ECPair(null,a,{network:this.keyPair.network})}else{var p=d.add(this.keyPair.d).mod(curve.n);if(0===p.signum())return this.derive(e+1);s=new ECPair(p,null,{network:this.keyPair.network})}var u=new HDNode(s,o);return u.depth=this.depth+1,u.index=e,u.parentFingerprint=this.getFingerprint().readUInt32BE(0),u},HDNode.prototype.deriveHardened=function(e){return typeforce(types.UInt31,e),this.derive(e+HDNode.HIGHEST_BIT)},HDNode.prototype.isNeutered=function(){return!this.keyPair.d},HDNode.prototype.derivePath=function(e){typeforce(types.BIP32Path,e);var r=e.split("/");if("m"===r[0]){if(this.parentFingerprint)throw new Error("Not a master node");r=r.slice(1)}return r.reduce(function(e,r){var t;return"'"===r.slice(-1)?(t=parseInt(r.slice(0,-1),10),e.deriveHardened(t)):(t=parseInt(r,10),e.derive(t))},this)},module.exports=HDNode;

}).call(this,require("buffer").Buffer)

},{"./crypto":14,"./ecpair":16,"./networks":20,"./types":47,"bigi":6,"bs58check":50,"buffer":51,"create-hmac":57,"ecurve":60,"typeforce":96}],19:[function(require,module,exports){
module.exports={Block:require("./block"),ECPair:require("./ecpair"),ECSignature:require("./ecsignature"),HDNode:require("./hdnode"),Transaction:require("./transaction"),TransactionBuilder:require("./transaction_builder"),address:require("./address"),bufferutils:require("./bufferutils"),crypto:require("./crypto"),networks:require("./networks"),opcodes:require("bitcoin-ops"),script:require("./script")};

},{"./address":11,"./block":12,"./bufferutils":13,"./crypto":14,"./ecpair":16,"./ecsignature":17,"./hdnode":18,"./networks":20,"./script":21,"./transaction":45,"./transaction_builder":46,"bitcoin-ops":9}],20:[function(require,module,exports){
module.exports={bitcoin:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:76067358,private:76066276},pubKeyHash:0,scriptHash:5,wif:128},testnet:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:70617039,private:70615956},pubKeyHash:111,scriptHash:196,wif:239},litecoin:{messagePrefix:"Litecoin Signed Message:\n",bip32:{public:27108450,private:27106558},pubKeyHash:48,scriptHash:5,wif:176}};

},{}],21:[function(require,module,exports){
(function (Buffer){
function isOPInt(e){return types.Number(e)&&(e===OPS.OP_0||e>=OPS.OP_1&&e<=OPS.OP_16||e===OPS.OP_1NEGATE)}function isPushOnlyChunk(e){return types.Buffer(e)||isOPInt(e)}function isPushOnly(e){return types.Array(e)&&e.every(isPushOnlyChunk)}function compile(e){if(Buffer.isBuffer(e))return e;typeforce(types.Array,e);var r=e.reduce(function(e,r){return Buffer.isBuffer(r)?1===r.length&&(129===r[0]||r[0]>=1&&r[0]<=16)?e+1:e+pushdata.encodingLength(r.length)+r.length:e+1},0),n=new Buffer(r),t=0;if(e.forEach(function(e){if(Buffer.isBuffer(e)){if(1===e.length&&e[0]>=1&&e[0]<=16){var r=OP_INT_BASE+e[0];return n.writeUInt8(r,t),void(t+=1)}if(1===e.length&&129===e[0])return n.writeUInt8(OPS.OP_1NEGATE,t),void(t+=1);t+=pushdata.encode(n,e.length,t),e.copy(n,t),t+=e.length}else n.writeUInt8(e,t),t+=1}),t!==n.length)throw new Error("Could not decode chunks");return n}function decompile(e){if(types.Array(e))return e;typeforce(types.Buffer,e);for(var r=[],n=0;n<e.length;){var t=e[n];if(t>OPS.OP_0&&t<=OPS.OP_PUSHDATA4){var i=pushdata.decode(e,n);if(null===i)return[];if((n+=i.size)+i.number>e.length)return[];var u=e.slice(n,n+i.number);n+=i.number,r.push(u)}else r.push(t),n+=1}return r}function toASM(e){return Buffer.isBuffer(e)&&(e=decompile(e)),e.map(function(e){return Buffer.isBuffer(e)?e.toString("hex"):REVERSE_OPS[e]}).join(" ")}function fromASM(e){return typeforce(types.String,e),compile(e.split(" ").map(function(e){return void 0!==OPS[e]?OPS[e]:(typeforce(types.Hex,e),new Buffer(e,"hex"))}))}function toStack(e){return e=decompile(e),typeforce(isPushOnly,e),e.map(function(e){return Buffer.isBuffer(e)?e:e===OPS.OP_0?new Buffer(0):scriptNumber.encode(e-OP_INT_BASE)})}function isCanonicalPubKey(e){if(!Buffer.isBuffer(e))return!1;if(e.length<33)return!1;switch(e[0]){case 2:case 3:return 33===e.length;case 4:return 65===e.length}return!1}function isDefinedHashType(e){var r=e&-129;return r>0&&r<4}function isCanonicalSignature(e){return!!Buffer.isBuffer(e)&&(!!isDefinedHashType(e[e.length-1])&&bip66.check(e.slice(0,-1)))}var bip66=require("bip66"),pushdata=require("pushdata-bitcoin"),typeforce=require("typeforce"),types=require("./types"),scriptNumber=require("./script_number"),OPS=require("bitcoin-ops"),REVERSE_OPS=require("bitcoin-ops/map"),OP_INT_BASE=OPS.OP_RESERVED;module.exports={compile:compile,decompile:decompile,fromASM:fromASM,toASM:toASM,toStack:toStack,number:require("./script_number"),isCanonicalPubKey:isCanonicalPubKey,isCanonicalSignature:isCanonicalSignature,isPushOnly:isPushOnly,isDefinedHashType:isDefinedHashType};var templates=require("./templates");for(var key in templates)module.exports[key]=templates[key];

}).call(this,require("buffer").Buffer)

},{"./script_number":22,"./templates":23,"./types":47,"bip66":8,"bitcoin-ops":9,"bitcoin-ops/map":10,"buffer":51,"pushdata-bitcoin":70,"typeforce":96}],22:[function(require,module,exports){
(function (Buffer){
function decode(r,e,n){e=e||4,n=void 0===n||n;var t=r.length;if(0===t)return 0;if(t>e)throw new TypeError("Script number overflow");if(n&&0==(127&r[t-1])&&(t<=1||0==(128&r[t-2])))throw new Error("Non-minimally encoded script number");if(5===t){var o=r.readUInt32LE(0),i=r.readUInt8(4);return 128&i?-(4294967296*(i&-129)+o):4294967296*i+o}for(var d=0,c=0;c<t;++c)d|=r[c]<<8*c;return 128&r[t-1]?-(d&~(128<<8*(t-1))):d}function scriptNumSize(r){return r>2147483647?5:r>8388607?4:r>32767?3:r>127?2:r>0?1:0}function encode(r){for(var e=Math.abs(r),n=scriptNumSize(e),t=new Buffer(n),o=r<0,i=0;i<n;++i)t.writeUInt8(255&e,i),e>>=8;return 128&t[n-1]?t.writeUInt8(o?128:0,n-1):o&&(t[n-1]|=128),t}module.exports={decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],23:[function(require,module,exports){
function classifyOutput(s){if(witnessPubKeyHash.output.check(s))return types.P2WPKH;if(witnessScriptHash.output.check(s))return types.P2WSH;if(pubKeyHash.output.check(s))return types.P2PKH;if(scriptHash.output.check(s))return types.P2SH;var t=decompile(s);return multisig.output.check(t)?types.MULTISIG:pubKey.output.check(t)?types.P2PK:witnessCommitment.output.check(t)?types.WITNESS_COMMITMENT:nullData.output.check(t)?types.NULLDATA:types.NONSTANDARD}function classifyInput(s,t){var e=decompile(s);return pubKeyHash.input.check(e)?types.P2PKH:scriptHash.input.check(e,t)?types.P2SH:multisig.input.check(e,t)?types.MULTISIG:pubKey.input.check(e)?types.P2PK:types.NONSTANDARD}function classifyWitness(s,t){var e=decompile(s);return witnessPubKeyHash.input.check(e)?types.P2WPKH:witnessScriptHash.input.check(e)?types.P2WSH:types.NONSTANDARD}var decompile=require("../script").decompile,multisig=require("./multisig"),nullData=require("./nulldata"),pubKey=require("./pubkey"),pubKeyHash=require("./pubkeyhash"),scriptHash=require("./scripthash"),witnessPubKeyHash=require("./witnesspubkeyhash"),witnessScriptHash=require("./witnessscripthash"),witnessCommitment=require("./witnesscommitment"),types={MULTISIG:"multisig",NONSTANDARD:"nonstandard",NULLDATA:"nulldata",P2PK:"pubkey",P2PKH:"pubkeyhash",P2SH:"scripthash",P2WPKH:"witnesspubkeyhash",P2WSH:"witnessscripthash",WITNESS_COMMITMENT:"witnesscommitment"};module.exports={classifyInput:classifyInput,classifyOutput:classifyOutput,classifyWitness:classifyWitness,multisig:multisig,nullData:nullData,pubKey:pubKey,pubKeyHash:pubKeyHash,scriptHash:scriptHash,witnessPubKeyHash:witnessPubKeyHash,witnessScriptHash:witnessScriptHash,witnessCommitment:witnessCommitment,types:types};

},{"../script":21,"./multisig":24,"./nulldata":27,"./pubkey":28,"./pubkeyhash":31,"./scripthash":34,"./witnesscommitment":37,"./witnesspubkeyhash":39,"./witnessscripthash":42}],24:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":25,"./output":26}],25:[function(require,module,exports){
(function (Buffer){
function partialSignature(e){return e===OPS.OP_0||bscript.isCanonicalSignature(e)}function check(e,c){var t=bscript.decompile(e);return!(t.length<2)&&(t[0]===OPS.OP_0&&(c?t.slice(1).every(partialSignature):t.slice(1).every(bscript.isCanonicalSignature)))}function encodeStack(e,c){if(typeforce([partialSignature],e),c){var t=bscript.multisig.output.decode(c);if(e.length<t.m)throw new TypeError("Not enough signatures provided");if(e.length>t.pubKeys.length)throw new TypeError("Too many signatures provided")}return[].concat(new Buffer(0),e)}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e,c){return typeforce(check,e,c),e.slice(1)}function decode(e,c){return decodeStack(bscript.decompile(e),c)}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"multisig input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,require("buffer").Buffer)

},{"../../script":21,"bitcoin-ops":9,"buffer":51,"typeforce":96}],26:[function(require,module,exports){
function check(e,r){var t=bscript.decompile(e);if(t.length<4)return!1;if(t[t.length-1]!==OPS.OP_CHECKMULTISIG)return!1;if(!types.Number(t[0]))return!1;if(!types.Number(t[t.length-2]))return!1;var c=t[0]-OP_INT_BASE,i=t[t.length-2]-OP_INT_BASE;return!(c<=0)&&(!(i>16)&&(!(c>i)&&(i===t.length-3&&(!!r||t.slice(1,-2).every(bscript.isCanonicalPubKey)))))}function encode(e,r){typeforce({m:types.Number,pubKeys:[bscript.isCanonicalPubKey]},{m:e,pubKeys:r});var t=r.length;if(t<e)throw new TypeError("Not enough pubKeys provided");return bscript.compile([].concat(OP_INT_BASE+e,r,OP_INT_BASE+t,OPS.OP_CHECKMULTISIG))}function decode(e,r){var t=bscript.decompile(e);return typeforce(check,t,r),{m:t[0]-OP_INT_BASE,pubKeys:t.slice(1,-2)}}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),OP_INT_BASE=OPS.OP_RESERVED;check.toJSON=function(){return"multi-sig output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],27:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return c.length>1&&c[0]===OPS.OP_RETURN}function encode(e){return typeforce(types.Buffer,e),bscript.compile([OPS.OP_RETURN,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../script"),types=require("../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"null data output"},module.exports={output:{check:check,decode:decode,encode:encode}};

},{"../script":21,"../types":47,"bitcoin-ops":9,"typeforce":96}],28:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":29,"./output":30}],29:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 1===c.length&&bscript.isCanonicalSignature(c[0])}function encodeStack(e){return typeforce(types.Buffer,e),[e]}function encode(e){return bscript.compile(encodeStack(e))}function decodeStack(e){return typeforce(check,e),e[0]}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKey input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":21,"../../types":47,"typeforce":96}],30:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalPubKey(c[0])&&c[1]===OPS.OP_CHECKSIG}function encode(e){return typeforce(bscript.isCanonicalPubKey,e),bscript.compile([e,OPS.OP_CHECKSIG])}function decode(e){var c=bscript.decompile(e);return typeforce(check,c),c[0]}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKey output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"bitcoin-ops":9,"typeforce":96}],31:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":32,"./output":33}],32:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalSignature(c[0])&&bscript.isCanonicalPubKey(c[1])}function encodeStack(e,c){return typeforce({signature:types.Buffer,pubKey:types.Buffer},{signature:e,pubKey:c}),[e,c]}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e){return typeforce(check,e),{signature:e[0],pubKey:e[1]}}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKeyHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":21,"../../types":47,"typeforce":96}],33:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 25===c.length&&c[0]===OPS.OP_DUP&&c[1]===OPS.OP_HASH160&&20===c[2]&&c[23]===OPS.OP_EQUALVERIFY&&c[24]===OPS.OP_CHECKSIG}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_DUP,OPS.OP_HASH160,e,OPS.OP_EQUALVERIFY,OPS.OP_CHECKSIG])}function decode(e){return typeforce(check,e),e.slice(3,23)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],34:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":35,"./output":36}],35:[function(require,module,exports){
(function (Buffer){
function check(e,c){var t=bscript.decompile(e);if(t.length<1)return!1;var r=t[t.length-1];if(!Buffer.isBuffer(r))return!1;var i=bscript.decompile(bscript.compile(t.slice(0,-1))),p=bscript.decompile(r);if(0===p.length)return!1;if(!bscript.isPushOnly(i))return!1;var n=bscript.classifyInput(i,c),o=bscript.classifyOutput(p);return 1===t.length?o===bscript.types.P2WSH||o===bscript.types.P2WPKH:n===o}function encodeStack(e,c){var t=bscript.compile(c);return[].concat(e,t)}function encode(e,c){var t=bscript.decompile(e);return bscript.compile(encodeStack(t,c))}function decodeStack(e){return typeforce(check,e),{redeemScriptStack:e.slice(0,-1),redeemScript:e[e.length-1]}}function decode(e){var c=bscript.decompile(e),t=decodeStack(c);return t.redeemScriptSig=bscript.compile(t.redeemScriptStack),delete t.redeemScriptStack,t}var bscript=require("../../script"),typeforce=require("typeforce");check.toJSON=function(){return"scriptHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,{"isBuffer":require("../../../../is-buffer/index.js")})

},{"../../../../is-buffer/index.js":66,"../../script":21,"typeforce":96}],36:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 23===c.length&&c[0]===OPS.OP_HASH160&&20===c[1]&&c[22]===OPS.OP_EQUAL}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_HASH160,e,OPS.OP_EQUAL])}function decode(e){return typeforce(check,e),e.slice(2,22)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],37:[function(require,module,exports){
module.exports={output:require("./output")};

},{"./output":38}],38:[function(require,module,exports){
(function (Buffer){
function check(e){var c=bscript.compile(e);return c.length>37&&c[0]===OPS.OP_RETURN&&36===c[1]&&c.slice(2,6).equals(HEADER)}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_RETURN,Buffer.concat([HEADER,e])])}function decode(e){return typeforce(check,e),bscript.decompile(e)[1].slice(4,36)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),HEADER=new Buffer("aa21a9ed","hex");check.toJSON=function(){return"Witness commitment output"},module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],39:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":40,"./output":41}],40:[function(require,module,exports){
var pkh=require("../pubkeyhash/input");module.exports={check:pkh.check,decodeStack:pkh.decodeStack,encodeStack:pkh.encodeStack};

},{"../pubkeyhash/input":32}],41:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 22===c.length&&c[0]===OPS.OP_0&&20===c[1]}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],42:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":43,"./output":44}],43:[function(require,module,exports){
var p2sh=require("../scripthash/input");module.exports={check:p2sh.check,decodeStack:p2sh.decodeStack,encodeStack:p2sh.encodeStack};

},{"../scripthash/input":35}],44:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 34===c.length&&c[0]===OPS.OP_0&&32===c[1]}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],45:[function(require,module,exports){
(function (Buffer){
function varSliceSize(t){var n=t.length;return bufferutils.varIntSize(n)+n}function vectorSize(t){var n=t.length;return bufferutils.varIntSize(n)+t.reduce(function(t,n){return t+varSliceSize(n)},0)}function Transaction(){this.version=1,this.locktime=0,this.ins=[],this.outs=[],this.joinsplits=[]}var bcrypto=require("./crypto"),bscript=require("./script"),bufferutils=require("./bufferutils"),opcodes=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types");Transaction.DEFAULT_SEQUENCE=4294967295,Transaction.SIGHASH_ALL=1,Transaction.SIGHASH_NONE=2,Transaction.SIGHASH_SINGLE=3,Transaction.SIGHASH_ANYONECANPAY=128,Transaction.ADVANCED_TRANSACTION_MARKER=0,Transaction.ADVANCED_TRANSACTION_FLAG=1;var EMPTY_SCRIPT=new Buffer(0),EMPTY_WITNESS=[],ZERO=new Buffer("0000000000000000000000000000000000000000000000000000000000000000","hex"),ONE=new Buffer("0000000000000000000000000000000000000000000000000000000000000001","hex"),VALUE_UINT64_MAX=new Buffer("ffffffffffffffff","hex"),BLANK_OUTPUT={script:EMPTY_SCRIPT,valueBuffer:VALUE_UINT64_MAX};Transaction.ZCASH_NUM_JS_INPUTS=2,Transaction.ZCASH_NUM_JS_OUTPUTS=2,Transaction.ZCASH_NOTECIPHERTEXT_SIZE=601,Transaction.ZCASH_G1_PREFIX_MASK=2,Transaction.ZCASH_G2_PREFIX_MASK=10,Transaction.fromBuffer=function(t,n,e){function r(n){return f+=n,t.slice(f-n,f)}function i(){var n=t.readUInt8(f);return f+=1,n}function s(){var n=t.readUInt32LE(f);return f+=4,n}function o(){var n=bufferutils.readUInt64LE(t,f);return f+=8,n}function a(){var n=bufferutils.readVarInt(t,f);return f+=n.size,n.number}function u(){return r(a())}function c(){var t=1&i();return{x:r(32),yLsb:t}}var f=0,h=new Transaction;h.version=function(){var n=t.readInt32LE(f);return f+=4,n}();var p=t.readUInt8(f),T=t.readUInt8(f+1),S=!1;n||p===Transaction.ADVANCED_TRANSACTION_MARKER&&T===Transaction.ADVANCED_TRANSACTION_FLAG&&(f+=2,S=!0);for(var l=a(),_=0;_<l;++_)h.ins.push({hash:r(32),index:s(),script:u(),sequence:s(),witness:EMPTY_WITNESS});var E=a();for(_=0;_<E;++_)h.outs.push({value:o(),script:u()});if(S){for(_=0;_<l;++_)h.ins[_].witness=function(){for(var t=a(),n=[],e=0;e<t;e++)n.push(u());return n}();if(!h.hasWitnesses())throw new Error("Transaction has superfluous witness data")}if(h.locktime=s(),h.version>=2&&n){var A=a();for(_=0;_<A;++_){for(var y=o(),I=o(),v=r(32),N=[],g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)N.push(r(32));var H=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)H.push(r(32));var b=r(32),C=r(32),m=[];for(g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)m.push(r(32));var U={gA:c(),gAPrime:c(),gB:function(){var t=1&i();return{x:r(64),yLsb:t}}(),gBPrime:c(),gC:c(),gCPrime:c(),gK:c(),gH:c()},d=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)d.push(r(Transaction.ZCASH_NOTECIPHERTEXT_SIZE));h.joinsplits.push({vpubOld:y,vpubNew:I,anchor:v,nullifiers:N,commitments:H,ephemeralKey:b,randomSeed:C,macs:m,zproof:U,ciphertexts:d})}A>0&&(h.joinsplitPubkey=r(32),h.joinsplitSig=r(64))}if(h.zcash=!!n,e)return h;if(f!==t.length)throw new Error("Transaction has unexpected data");return h},Transaction.fromHex=function(t,n){return Transaction.fromBuffer(new Buffer(t,"hex"),n)},Transaction.isCoinbaseHash=function(t){typeforce(types.Hash256bit,t);for(var n=0;n<32;++n)if(0!==t[n])return!1;return!0},Transaction.prototype.isCoinbase=function(){return 1===this.ins.length&&Transaction.isCoinbaseHash(this.ins[0].hash)},Transaction.prototype.addInput=function(t,n,e,r){return typeforce(types.tuple(types.Hash256bit,types.UInt32,types.maybe(types.UInt32),types.maybe(types.Buffer)),arguments),types.Null(e)&&(e=Transaction.DEFAULT_SEQUENCE),this.ins.push({hash:t,index:n,script:r||EMPTY_SCRIPT,sequence:e,witness:EMPTY_WITNESS})-1},Transaction.prototype.addOutput=function(t,n){return typeforce(types.tuple(types.Buffer,types.Satoshi),arguments),this.outs.push({script:t,value:n})-1},Transaction.prototype.hasWitnesses=function(){return this.ins.some(function(t){return 0!==t.witness.length})},Transaction.prototype.byteLength=function(){return this.__byteLength(!0)},Transaction.prototype.joinsplitByteLength=function(){if(this.version<2)return 0;if(!this.zcash)return 0;var t=this.joinsplits.length>0?96:0;return bufferutils.varIntSize(this.joinsplits.length)+this.joinsplits.reduce(function(t,n){return t+8+8+32+32*n.nullifiers.length+32*n.commitments.length+32+32+32*n.macs.length+65+231+n.ciphertexts.length*Transaction.ZCASH_NOTECIPHERTEXT_SIZE},0)+t},Transaction.prototype.__byteLength=function(t){var n=t&&this.hasWitnesses();return(n?10:8)+bufferutils.varIntSize(this.ins.length)+bufferutils.varIntSize(this.outs.length)+this.ins.reduce(function(t,n){return t+40+varSliceSize(n.script)},0)+this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0)+(n?this.ins.reduce(function(t,n){return t+vectorSize(n.witness)},0):0)+this.joinsplitByteLength()},Transaction.prototype.clone=function(){var t=new Transaction;return t.version=this.version,t.locktime=this.locktime,t.zcash=this.zcash,t.ins=this.ins.map(function(t){return{hash:t.hash,index:t.index,script:t.script,sequence:t.sequence,witness:t.witness}}),t.outs=this.outs.map(function(t){return{script:t.script,value:t.value}}),t},Transaction.prototype.hashForSignature=function(t,n,e){if(typeforce(types.tuple(types.UInt32,types.Buffer,types.Number),arguments),t>=this.ins.length)return ONE;var r=bscript.compile(bscript.decompile(n).filter(function(t){return t!==opcodes.OP_CODESEPARATOR})),i=this.clone();if((31&e)===Transaction.SIGHASH_NONE)i.outs=[],i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)});else if((31&e)===Transaction.SIGHASH_SINGLE){if(t>=this.outs.length)return ONE;i.outs.length=t+1;for(var s=0;s<t;s++)i.outs[s]=BLANK_OUTPUT;i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)})}e&Transaction.SIGHASH_ANYONECANPAY?(i.ins=[i.ins[t]],i.ins[0].script=r):(i.ins.forEach(function(t){t.script=EMPTY_SCRIPT}),i.ins[t].script=r);var o=new Buffer(i.__byteLength(!1)+4);return o.writeInt32LE(e,o.length-4),i.__toBuffer(o,0,!1),bcrypto.hash256(o)},Transaction.prototype.hashForWitnessV0=function(t,n,e,r){function i(t){f+=t.copy(c,f)}function s(t){f=c.writeUInt32LE(t,f)}function o(t){f=bufferutils.writeUInt64LE(c,t,f)}function a(t){f+=bufferutils.writeVarInt(c,t,f)}function u(t){a(t.length),i(t)}typeforce(types.tuple(types.UInt32,types.Buffer,types.Satoshi,types.UInt32),arguments);var c,f,h=ZERO,p=ZERO,T=ZERO;if(r&Transaction.SIGHASH_ANYONECANPAY||(c=new Buffer(36*this.ins.length),f=0,this.ins.forEach(function(t){i(t.hash),s(t.index)}),p=bcrypto.hash256(c)),r&Transaction.SIGHASH_ANYONECANPAY||(31&r)===Transaction.SIGHASH_SINGLE||(31&r)===Transaction.SIGHASH_NONE||(c=new Buffer(4*this.ins.length),f=0,this.ins.forEach(function(t){s(t.sequence)}),T=bcrypto.hash256(c)),(31&r)!==Transaction.SIGHASH_SINGLE&&(31&r)!==Transaction.SIGHASH_NONE){var S=this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0);c=new Buffer(S),f=0,this.outs.forEach(function(t){o(t.value),u(t.script)}),h=bcrypto.hash256(c)}else if((31&r)===Transaction.SIGHASH_SINGLE&&t<this.outs.length){var l=this.outs[t];c=new Buffer(8+varSliceSize(l.script)),f=0,o(l.value),u(l.script),h=bcrypto.hash256(c)}c=new Buffer(156+varSliceSize(n)),f=0;var _=this.ins[t];return s(this.version),i(p),i(T),i(_.hash),s(_.index),u(n),o(e),s(_.sequence),i(h),s(this.locktime),s(r),bcrypto.hash256(c)},Transaction.prototype.getHash=function(){return bcrypto.hash256(this.__toBuffer(void 0,void 0,!1))},Transaction.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Transaction.prototype.toBuffer=function(t,n){return this.__toBuffer(t,n,!0)},Transaction.prototype.__toBuffer=function(t,n,e){function r(n){p+=n.copy(t,p)}function i(n){p=t.writeUInt8(n,p)}function s(n){p=t.writeUInt32LE(n,p)}function o(n){p=bufferutils.writeUInt64LE(t,n,p)}function a(n){p+=bufferutils.writeVarInt(t,n,p)}function u(t){a(t.length),r(t)}function c(t){a(t.length),t.forEach(u)}function f(t){i(Transaction.ZCASH_G1_PREFIX_MASK|t.yLsb),r(t.x)}function h(t){i(Transaction.ZCASH_G2_PREFIX_MASK|t.yLsb),r(t.x)}t||(t=new Buffer(this.__byteLength(e)));var p=n||0;!function(n){p=t.writeInt32LE(n,p)}(this.version);var T=e&&this.hasWitnesses();return T&&(i(Transaction.ADVANCED_TRANSACTION_MARKER),i(Transaction.ADVANCED_TRANSACTION_FLAG)),a(this.ins.length),this.ins.forEach(function(t){r(t.hash),s(t.index),u(t.script),s(t.sequence)}),a(this.outs.length),this.outs.forEach(function(t){t.valueBuffer?r(t.valueBuffer):o(t.value),u(t.script)}),T&&this.ins.forEach(function(t){c(t.witness)}),s(this.locktime),this.version>=2&&this.zcash&&(a(this.joinsplits.length),this.joinsplits.forEach(function(t){o(t.vpubOld),o(t.vpubNew),r(t.anchor),t.nullifiers.forEach(function(t){r(t)}),t.commitments.forEach(function(t){r(t)}),r(t.ephemeralKey),r(t.randomSeed),t.macs.forEach(function(t){r(t)}),f(t.zproof.gA),f(t.zproof.gAPrime),h(t.zproof.gB),f(t.zproof.gBPrime),f(t.zproof.gC),f(t.zproof.gCPrime),f(t.zproof.gK),f(t.zproof.gH),t.ciphertexts.forEach(function(t){r(t)})}),this.joinsplits.length>0&&(r(this.joinsplitPubkey),r(this.joinsplitSig))),void 0!==n?t.slice(n,p):t},Transaction.prototype.toHex=function(){return this.toBuffer().toString("hex")},Transaction.prototype.setInputScript=function(t,n){typeforce(types.tuple(types.Number,types.Buffer),arguments),this.ins[t].script=n},Transaction.prototype.setWitness=function(t,n){typeforce(types.tuple(types.Number,[types.Buffer]),arguments),this.ins[t].witness=n},module.exports=Transaction;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":13,"./crypto":14,"./script":21,"./types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],46:[function(require,module,exports){
(function (Buffer){
function extractChunks(t,e,r){var i=[],s=[];switch(t){case scriptTypes.P2PKH:i=e.slice(1),s=e.slice(0,1);break;case scriptTypes.P2PK:i[0]=r?bscript.pubKey.output.decode(r):void 0,s=e.slice(0,1);break;case scriptTypes.MULTISIG:if(r){i=bscript.multisig.output.decode(r).pubKeys}s=e.slice(1).map(function(t){return 0===t.length?void 0:t})}return{pubKeys:i,signatures:s}}function expandInput(t,e){var r,i,s,n,p,u,c,o,a,y,h=!1,d=!1,f=bscript.decompile(t);bscript.classifyInput(f,!0)===scriptTypes.P2SH&&(d=!0,p=f[f.length-1],o=bscript.classifyOutput(p),r=bscript.scriptHash.output.encode(bcrypto.hash160(p)),i=scriptTypes.P2SH,n=p);var S=bscript.classifyWitness(e);if(S===scriptTypes.P2WSH){if(u=e[e.length-1],c=bscript.classifyOutput(u),h=!0,0===t.length){if(r=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),i=scriptTypes.P2WSH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WSH, but scriptSig non-empty");if(a=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),!p.equals(a))throw new Error("Redeem script didn't match witnessScript")}if(SIGNABLE.indexOf(bscript.classifyOutput(u))===-1)throw new Error("unsupported witness script");n=u,s=c,y=e.slice(0,-1)}else if(S===scriptTypes.P2WPKH){var b=e[e.length-1],w=bcrypto.hash160(b);if(0===t.length){if(r=bscript.witnessPubKeyHash.output.encode(w),i=scriptTypes.P2WPKH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WPKH, but scriptSig wasn't empty");if(a=bscript.witnessPubKeyHash.output.encode(w),!p.equals(a))throw new Error("Redeem script did not have the right witness program")}s=scriptTypes.P2PKH,y=e}else if(p){if(P2SH.indexOf(o)===-1)throw new Error("Bad redeemscript!");n=p,s=o,y=f.slice(0,-1)}else i=s=bscript.classifyInput(t),y=f;var l=extractChunks(s,y,n),v={pubKeys:l.pubKeys,signatures:l.signatures,prevOutScript:r,prevOutType:i,signType:s,signScript:n,witness:Boolean(!1)};return d&&(v.redeemScript=p,v.redeemScriptType=o),h&&(v.witnessScript=u,v.witnessScriptType=c),v}function fixMultisigOrder(t,e,r){if(t.redeemScriptType===scriptTypes.MULTISIG&&t.redeemScript&&t.pubKeys.length!==t.signatures.length){var i=t.signatures.concat();t.signatures=t.pubKeys.map(function(s,n){var p,u=ECPair.fromPublicKeyBuffer(s);return i.some(function(s,n){if(!s)return!1;var c=ECSignature.parseScriptSignature(s),o=e.hashForSignature(r,t.redeemScript,c.hashType);return!!u.verify(o,c.signature)&&(i[n]=void 0,p=s,!0)}),p})}}function expandOutput(t,e,r){typeforce(types.Buffer,t);var i=bscript.decompile(t);e||(e=bscript.classifyOutput(t));var s=[];switch(e){case scriptTypes.P2PKH:if(!r)break;var n=i[2],p=bcrypto.hash160(r);n.equals(p)&&(s=[r]);break;case scriptTypes.P2WPKH:if(!r)break;var u=i[1],c=bcrypto.hash160(r);u.equals(c)&&(s=[r]);break;case scriptTypes.P2PK:s=i.slice(0,1);break;case scriptTypes.MULTISIG:s=i.slice(1,-2);break;default:return{scriptType:e}}return{pubKeys:s,scriptType:e,signatures:s.map(function(){})}}function checkP2shInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2SH)throw new Error("PrevOutScript must be P2SH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent hash160(RedeemScript)")}}function checkP2WSHInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2WSH)throw new Error("PrevOutScript must be P2WSH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent sha25(WitnessScript)")}}function prepareInput(t,e,r,i,s){var n,p,u,c,o,a,y,h,d,f=!1,S=!1,b=!1;if(r&&s){if(o=bcrypto.hash160(r),y=bcrypto.sha256(s),checkP2shInput(t,o),!r.equals(bscript.witnessScriptHash.output.encode(y)))throw new Error("Witness script inconsistent with redeem script");if(n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=S=b=!0,c=bscript.types.P2WSH,h=a=n.scriptType,d=s}else if(r){if(o=bcrypto.hash160(r),checkP2shInput(t,o),n=expandOutput(r,void 0,e),!n.pubKeys)throw new Error('RedeemScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=!0,h=c=n.scriptType,d=r,S=h===bscript.types.P2WPKH}else if(s){if(y=bcrypto.sha256(s),checkP2WSHInput(t,y),n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2WSH,u=bscript.witnessScriptHash.output.encode(y),S=b=!0,h=a=n.scriptType,d=s}else if(t.prevOutType){if(t.prevOutType===scriptTypes.P2SH||t.prevOutType===scriptTypes.P2WSH)throw new Error("PrevOutScript is "+t.prevOutType+", requires redeemScript");if(p=t.prevOutType,u=t.prevOutScript,n=expandOutput(t.prevOutScript,t.prevOutType,e),!n.pubKeys)return;S=t.prevOutType===scriptTypes.P2WPKH,h=p,d=u}else u=bscript.pubKeyHash.output.encode(bcrypto.hash160(e)),n=expandOutput(u,scriptTypes.P2PKH,e),p=scriptTypes.P2PKH,S=!1,h=p,d=u;if(S&&!types.Satoshi(i))throw new Error("Input was witness but not given witness value");h===scriptTypes.P2WPKH&&(d=bscript.pubKeyHash.output.encode(bscript.witnessPubKeyHash.output.decode(d))),f&&(t.redeemScript=r,t.redeemScriptType=c),b&&(t.witnessScript=s,t.witnessScriptType=a),t.pubKeys=n.pubKeys,t.signatures=n.signatures,t.signScript=d,t.signType=h,t.prevOutScript=u,t.prevOutType=p,t.witness=S}function buildStack(t,e,r,i){if(t===scriptTypes.P2PKH){if(1===e.length&&e[0]instanceof Buffer&&1===r.length)return bscript.pubKeyHash.input.encodeStack(e[0],r[0])}else if(t===scriptTypes.P2PK){if(1===e.length&&e[0]instanceof Buffer)return bscript.pubKey.input.encodeStack(e[0])}else{if(t!==scriptTypes.MULTISIG)throw new Error("Not yet supported");if(e.length>0)return e=e.map(function(t){return t||ops.OP_0}),i||(e=e.filter(function(t){return t!==ops.OP_0})),bscript.multisig.input.encodeStack(e)}if(!i)throw new Error("Not enough signatures provided");return[]}function buildInput(t,e){var r=t.prevOutType,i=[],s=[];SIGNABLE.indexOf(r)!==-1&&(i=buildStack(r,t.signatures,t.pubKeys,t.script,e));var n=!1;if(r===bscript.types.P2SH){if(P2SH.indexOf(t.redeemScriptType)===-1)throw new Error("Impossible to sign this type");n=!0,SIGNABLE.indexOf(t.redeemScriptType)!==-1&&(i=buildStack(t.redeemScriptType,t.signatures,t.pubKeys,e)),r=t.redeemScriptType}if(r===bscript.types.P2WPKH)s=buildStack(bscript.types.P2PKH,t.signatures,t.pubKeys,e);else if(r===bscript.types.P2WSH){if(SIGNABLE.indexOf(t.witnessScriptType)===-1)throw new Error;s=buildStack(t.witnessScriptType,t.signatures,t.pubKeys,e),s.push(t.witnessScript),r=t.witnessScriptType}return n&&i.push(t.redeemScript),{type:r,script:bscript.compile(i),witness:s}}function TransactionBuilder(t,e){this.prevTxMap={},this.network=t||networks.bitcoin,this.maximumFeeRate=e||1e3,this.inputs=[],this.tx=new Transaction}function canSign(t){return void 0!==t.prevOutScript&&void 0!==t.signScript&&void 0!==t.pubKeys&&void 0!==t.signatures&&t.signatures.length===t.pubKeys.length&&t.pubKeys.length>0&&void 0!==t.witness}function signatureHashType(t){return t.readUInt8(t.length-1)}var baddress=require("./address"),bcrypto=require("./crypto"),bscript=require("./script"),networks=require("./networks"),ops=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types"),scriptTypes=bscript.types,SIGNABLE=[bscript.types.P2PKH,bscript.types.P2PK,bscript.types.MULTISIG],P2SH=SIGNABLE.concat([bscript.types.P2WPKH,bscript.types.P2WSH]),ECPair=require("./ecpair"),ECSignature=require("./ecsignature"),Transaction=require("./transaction");TransactionBuilder.prototype.setLockTime=function(t){if(typeforce(types.UInt32,t),this.inputs.some(function(t){return!!t.signatures&&t.signatures.some(function(t){return t})}))throw new Error("No, this would invalidate signatures");this.tx.locktime=t},TransactionBuilder.prototype.setVersion=function(t){typeforce(types.UInt32,t),this.tx.version=t},TransactionBuilder.fromTransaction=function(t,e){var r=new TransactionBuilder(e);return r.setVersion(t.version),r.setLockTime(t.locktime),t.outs.forEach(function(t){r.addOutput(t.script,t.value)}),t.ins.forEach(function(t){r.__addInputUnsafe(t.hash,t.index,{sequence:t.sequence,script:t.script,witness:t.witness})}),r.inputs.forEach(function(e,r){fixMultisigOrder(e,t,r)}),r},TransactionBuilder.prototype.addInput=function(t,e,r,i){if(!this.__canModifyInputs())throw new Error("No, this would invalidate signatures");var s;if("string"==typeof t)t=new Buffer(t,"hex").reverse();else if(t instanceof Transaction){var n=t.outs[e];i=n.script,s=n.value,t=t.getHash()}return this.__addInputUnsafe(t,e,{sequence:r,prevOutScript:i,value:s})},TransactionBuilder.prototype.__addInputUnsafe=function(t,e,r){if(Transaction.isCoinbaseHash(t))throw new Error("coinbase inputs not supported");var i=t.toString("hex")+":"+e;if(void 0!==this.prevTxMap[i])throw new Error("Duplicate TxOut: "+i);var s={};if(void 0!==r.script&&(s=expandInput(r.script,r.witness)),void 0!==r.value&&(s.value=r.value),!s.prevOutScript&&r.prevOutScript){var n;if(!s.pubKeys&&!s.signatures){var p=expandOutput(r.prevOutScript);p.pubKeys&&(s.pubKeys=p.pubKeys,s.signatures=p.signatures),n=p.scriptType}s.prevOutScript=r.prevOutScript,s.prevOutType=n||bscript.classifyOutput(r.prevOutScript)}var u=this.tx.addInput(t,e,r.sequence,r.scriptSig);return this.inputs[u]=s,this.prevTxMap[i]=u,u},TransactionBuilder.prototype.addOutput=function(t,e){if(!this.__canModifyOutputs())throw new Error("No, this would invalidate signatures");return"string"==typeof t&&(t=baddress.toOutputScript(t,this.network)),this.tx.addOutput(t,e)},TransactionBuilder.prototype.build=function(){return this.__build(!1)},TransactionBuilder.prototype.buildIncomplete=function(){return this.__build(!0)},TransactionBuilder.prototype.__build=function(t){if(!t){if(!this.tx.ins.length)throw new Error("Transaction has no inputs");if(!this.tx.outs.length)throw new Error("Transaction has no outputs")}var e=this.tx.clone();if(this.inputs.forEach(function(r,i){if(!(r.witnessScriptType||r.redeemScriptType||r.prevOutType||t))throw new Error("Transaction is not complete");var s=buildInput(r,t);if(!t&&SIGNABLE.indexOf(s.type)===-1&&s.type!==bscript.types.P2WPKH)throw new Error(s.type+" not supported");e.setInputScript(i,s.script),e.setWitness(i,s.witness)}),!t&&this.__overMaximumFees(e.byteLength()))throw new Error("Transaction has absurd fees");return e},TransactionBuilder.prototype.sign=function(t,e,r,i,s,n){if(e.network!==this.network)throw new Error("Inconsistent network");if(!this.inputs[t])throw new Error("No input at index: "+t);i=i||Transaction.SIGHASH_ALL;var p=this.inputs[t];if(void 0!==p.redeemScript&&r&&!p.redeemScript.equals(r))throw new Error("Inconsistent redeemScript");var u=e.getPublicKeyBuffer();if(!canSign(p)&&(prepareInput(p,u,r,s,n),!canSign(p)))throw Error(p.prevOutType+" not supported");var c;if(c=p.witness?this.tx.hashForWitnessV0(t,p.signScript,s,i):this.tx.hashForSignature(t,p.signScript,i),!p.pubKeys.some(function(t,r){if(!u.equals(t))return!1;if(p.signatures[r])throw new Error("Signature already exists");return p.signatures[r]=e.sign(c).toScriptSignature(i),!0}))throw new Error("Key pair cannot sign for this input")},TransactionBuilder.prototype.__canModifyInputs=function(){return this.inputs.every(function(t){return void 0===t.signatures||t.signatures.every(function(t){return!t||signatureHashType(t)&Transaction.SIGHASH_ANYONECANPAY})})},TransactionBuilder.prototype.__canModifyOutputs=function(){var t=this.tx.ins.length,e=this.tx.outs.length;return this.inputs.every(function(r){return void 0===r.signatures||r.signatures.every(function(r){if(!r)return!0;var i=signatureHashType(r),s=31&i;return s===Transaction.SIGHASH_NONE||(s===Transaction.SIGHASH_SINGLE?t<=e:void 0)})})},TransactionBuilder.prototype.__overMaximumFees=function(t){return(this.inputs.reduce(function(t,e){return t+(e.value>>>0)},0)-this.tx.outs.reduce(function(t,e){return t+e.value},0))/t>this.maximumFeeRate},module.exports=TransactionBuilder;

}).call(this,require("buffer").Buffer)

},{"./address":11,"./crypto":14,"./ecpair":16,"./ecsignature":17,"./networks":20,"./script":21,"./transaction":45,"./types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],47:[function(require,module,exports){
function UInt31(e){return typeforce.UInt32(e)&&e<=UINT31_MAX}function BIP32Path(e){return typeforce.String(e)&&e.match(/^(m\/)?(\d+'?\/)*\d+'?$/)}function Satoshi(e){return typeforce.UInt53(e)&&e<=SATOSHI_MAX}var typeforce=require("typeforce"),UINT31_MAX=Math.pow(2,31)-1;BIP32Path.toJSON=function(){return"BIP32 derivation path"};var SATOSHI_MAX=21e14,BigInt=typeforce.quacksLike("BigInteger"),ECPoint=typeforce.quacksLike("Point"),ECSignature=typeforce.compile({r:BigInt,s:BigInt}),Network=typeforce.compile({messagePrefix:typeforce.oneOf(typeforce.Buffer,typeforce.String),bip32:{public:typeforce.UInt32,private:typeforce.UInt32},pubKeyHash:typeforce.UInt16,scriptHash:typeforce.UInt16,wif:typeforce.UInt8}),types={BigInt:BigInt,BIP32Path:BIP32Path,Buffer256bit:typeforce.BufferN(32),ECPoint:ECPoint,ECSignature:ECSignature,Hash160bit:typeforce.BufferN(20),Hash256bit:typeforce.BufferN(32),Network:Network,Satoshi:Satoshi,UInt31:UInt31};for(var typeName in typeforce)types[typeName]=typeforce[typeName];module.exports=types;

},{"typeforce":96}],48:[function(require,module,exports){

},{}],49:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":2}],50:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a)return decodeRaw(a)}function decode(e){var a=base58.decode(e),d=decodeRaw(a);if(!d)throw new Error("Invalid checksum");return d}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":49,"buffer":51,"create-hash":54}],51:[function(require,module,exports){
"use strict";function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}function createBuffer(e){if(e>K_MAX_LENGTH)throw new RangeError("Invalid typed array length");var t=new Uint8Array(e);return t.__proto__=Buffer.prototype,t}function Buffer(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(e)}return from(e,t,r)}function from(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return e instanceof ArrayBuffer?fromArrayBuffer(e,t,r):"string"==typeof e?fromString(e,t):fromObject(e)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r){return assertSize(e),e<=0?createBuffer(e):void 0!==t?"string"==typeof r?createBuffer(e).fill(t,r):createBuffer(e).fill(t):createBuffer(e)}function allocUnsafe(e){return assertSize(e),createBuffer(e<0?0:0|checked(e))}function fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(e,t),n=createBuffer(r),f=n.write(e,t);return f!==r&&(n=n.slice(0,f)),n}function fromArrayLike(e){for(var t=e.length<0?0:0|checked(e.length),r=createBuffer(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError("'offset' is out of bounds");if(e.byteLength<t+(r||0))throw new RangeError("'length' is out of bounds");var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),n.__proto__=Buffer.prototype,n}function fromObject(e){if(Buffer.isBuffer(e)){var t=0|checked(e.length),r=createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(e){if(isArrayBufferView(e)||"length"in e)return"number"!=typeof e.length||numberIsNaN(e.length)?createBuffer(0):fromArrayLike(e);if("Buffer"===e.type&&Array.isArray(e.data))return fromArrayLike(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|e}function SlowBuffer(e){return+e!=e&&(e=0),Buffer.alloc(+e)}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if(isArrayBufferView(e)||e instanceof ArrayBuffer)return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if(r>>>=0,t>>>=0,r<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,f){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,numberIsNaN(r)&&(r=f?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(f)return-1;r=e.length-1}else if(r<0){if(!f)return-1;r=0}if("string"==typeof t&&(t=Buffer.from(t,n)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,f);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?f?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,f);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,f){function i(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}var o=1,u=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,u/=2,s/=2,r/=2}var a;if(f){var h=-1;for(a=r;a<u;a++)if(i(e,a)===i(t,h===-1?0:a-h)){if(h===-1&&(h=a),a-h+1===s)return h*o}else h!==-1&&(a-=a-h),h=-1}else for(r+s>u&&(r=u-s),a=r;a>=0;a--){for(var c=!0,l=0;l<s;l++)if(i(e,a+l)!==i(t,l)){c=!1;break}if(c)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var f=e.length-r;n?(n=Number(n))>f&&(n=f):n=f;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var o=0;o<n;++o){var u=parseInt(t.substr(2*o,2),16);if(numberIsNaN(u))return o;e[r+o]=u}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?base64.fromByteArray(e):base64.fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],f=t;f<r;){var i=e[f],o=null,u=i>239?4:i>223?3:i>191?2:1;if(f+u<=r){var s,a,h,c;switch(u){case 1:i<128&&(o=i);break;case 2:s=e[f+1],128==(192&s)&&(c=(31&i)<<6|63&s)>127&&(o=c);break;case 3:s=e[f+1],a=e[f+2],128==(192&s)&&128==(192&a)&&(c=(15&i)<<12|(63&s)<<6|63&a)>2047&&(c<55296||c>57343)&&(o=c);break;case 4:s=e[f+1],a=e[f+2],h=e[f+3],128==(192&s)&&128==(192&a)&&128==(192&h)&&(c=(15&i)<<18|(63&s)<<12|(63&a)<<6|63&h)>65535&&c<1114112&&(o=c)}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),f+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(127&e[f]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(e[f]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var f="",i=t;i<r;++i)f+=toHex(e[i]);return f}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),f="",i=0;i<n.length;i+=2)f+=String.fromCharCode(n[i]+256*n[i+1]);return f}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,f,i){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>f||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function checkIEEE754(e,t,r,n,f,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(e,t,r,n,52,8),r+8}function base64clean(e){if(e=e.trim().replace(INVALID_BASE64_RE,""),e.length<2)return"";for(;e.length%4!=0;)e+="=";return e}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){t=t||1/0;for(var r,n=e.length,f=null,i=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!f){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}f=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),f=r;continue}r=65536+(f-55296<<10|r-56320)}else f&&(t-=3)>-1&&i.push(239,191,189);if(f=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,f,i=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,f=r%256,i.push(f),i.push(n);return i}function base64ToBytes(e){return base64.toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var f=0;f<n&&!(f+r>=t.length||f>=e.length);++f)t[f+r]=e[f];return f}function isArrayBufferView(e){return"function"==typeof ArrayBuffer.isView&&ArrayBuffer.isView(e)}function numberIsNaN(e){return e!==e}var base64=require("base64-js"),ieee754=require("ieee754");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH,Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),Buffer.poolSize=8192,Buffer.from=function(e,t,r){return from(e,t,r)},Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,Buffer.alloc=function(e,t,r){return alloc(e,t,r)},Buffer.allocUnsafe=function(e){return allocUnsafe(e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)},Buffer.isBuffer=function(e){return null!=e&&e._isBuffer===!0},Buffer.compare=function(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,f=0,i=Math.min(r,n);f<i;++f)if(e[f]!==t[f]){r=e[f],n=t[f];break}return r<n?-1:n<r?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer.allocUnsafe(t),f=0;for(r=0;r<e.length;++r){var i=e[r];if(!Buffer.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,f),f+=i.length}return n},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=exports.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,r,n,f){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===f&&(f=this.length),t<0||r>e.length||n<0||f>this.length)throw new RangeError("out of range index");if(n>=f&&t>=r)return 0;if(n>=f)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,f>>>=0,this===e)return 0;for(var i=f-n,o=r-t,u=Math.min(i,o),s=this.slice(n,f),a=e.slice(t,r),h=0;h<u;++h)if(s[h]!==a[h]){i=s[h],o=a[h];break}return i<o?-1:o<i?1:0},Buffer.prototype.includes=function(e,t,r){return this.indexOf(e,t,r)!==-1},Buffer.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(e,t){var r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=Buffer.prototype,n},Buffer.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n},Buffer.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],f=1;t>0&&(f*=256);)n+=this[e+--t]*f;return n},Buffer.prototype.readUInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return f*=128,n>=f&&(n-=Math.pow(2,8*t)),n},Buffer.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=t,f=1,i=this[e+--n];n>0&&(f*=256);)i+=this[e+--n]*f;return f*=128,i>=f&&(i-=Math.pow(2,8*t)),i},Buffer.prototype.readInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),128&this[e]?(255-this[e]+1)*-1:this[e]},Buffer.prototype.readInt16LE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=1,i=0;for(this[t]=255&e;++i<r&&(f*=256);)this[t+i]=e/f&255;return t+r},Buffer.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=r-1,i=1;for(this[t+f]=255&e;--f>=0&&(i*=256);)this[t+f]=e/i&255;return t+r},Buffer.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,255,0),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Buffer.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=0,o=1,u=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=r-1,o=1,u=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Buffer.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var f,i=n-r;if(this===e&&r<t&&t<n)for(f=i-1;f>=0;--f)e[f+t]=this[f+r];else if(i<1e3)for(f=0;f<i;++f)e[f+t]=this[f+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},Buffer.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var f=e.charCodeAt(0);f<256&&(e=f)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var i;if("number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var o=Buffer.isBuffer(e)?e:new Buffer(e,n),u=o.length;for(i=0;i<r-t;++i)this[i+t]=o[i%u]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;

},{"base64-js":3,"ieee754":64}],52:[function(require,module,exports){
(function (Buffer){
function CipherBase(t){Transform.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._decoder=null,this._encoding=null}var Transform=require("stream").Transform,inherits=require("inherits"),StringDecoder=require("string_decoder").StringDecoder;module.exports=CipherBase,inherits(CipherBase,Transform),CipherBase.prototype.update=function(t,e,r){"string"==typeof t&&(t=new Buffer(t,e));var i=this._update(t);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},CipherBase.prototype.setAutoPadding=function(){},CipherBase.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},CipherBase.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},CipherBase.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},CipherBase.prototype._transform=function(t,e,r){var i;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){i=t}finally{r(i)}},CipherBase.prototype._flush=function(t){var e;try{this.push(this._final())}catch(t){e=t}finally{t(e)}},CipherBase.prototype._finalOrDigest=function(t){var e=this._final()||new Buffer("");return t&&(e=this._toString(e,t,!0)),e},CipherBase.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new StringDecoder(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var i=this._decoder.write(t);return r&&(i+=this._decoder.end()),i};

}).call(this,require("buffer").Buffer)

},{"buffer":51,"inherits":65,"stream":92,"string_decoder":93}],53:[function(require,module,exports){
(function (Buffer){
function isArray(r){return Array.isArray?Array.isArray(r):"[object Array]"===objectToString(r)}function isBoolean(r){return"boolean"==typeof r}function isNull(r){return null===r}function isNullOrUndefined(r){return null==r}function isNumber(r){return"number"==typeof r}function isString(r){return"string"==typeof r}function isSymbol(r){return"symbol"==typeof r}function isUndefined(r){return void 0===r}function isRegExp(r){return"[object RegExp]"===objectToString(r)}function isObject(r){return"object"==typeof r&&null!==r}function isDate(r){return"[object Date]"===objectToString(r)}function isError(r){return"[object Error]"===objectToString(r)||r instanceof Error}function isFunction(r){return"function"==typeof r}function isPrimitive(r){return null===r||"boolean"==typeof r||"number"==typeof r||"string"==typeof r||"symbol"==typeof r||void 0===r}function objectToString(r){return Object.prototype.toString.call(r)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=Buffer.isBuffer;

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":66}],54:[function(require,module,exports){
(function (Buffer){
"use strict";function HashNoConstructor(s){Base.call(this,"digest"),this._hash=s,this.buffers=[]}function Hash(s){Base.call(this,"digest"),this._hash=s}var inherits=require("inherits"),md5=require("./md5"),rmd160=require("ripemd160"),sha=require("sha.js"),Base=require("cipher-base");inherits(HashNoConstructor,Base),HashNoConstructor.prototype._update=function(s){this.buffers.push(s)},HashNoConstructor.prototype._final=function(){var s=Buffer.concat(this.buffers),t=this._hash(s);return this.buffers=null,t},inherits(Hash,Base),Hash.prototype._update=function(s){this._hash.update(s)},Hash.prototype._final=function(){return this._hash.digest()},module.exports=function(s){return s=s.toLowerCase(),"md5"===s?new HashNoConstructor(md5):"rmd160"===s||"ripemd160"===s?new HashNoConstructor(rmd160):new Hash(sha(s))};

}).call(this,require("buffer").Buffer)

},{"./md5":56,"buffer":51,"cipher-base":52,"inherits":65,"ripemd160":83,"sha.js":85}],55:[function(require,module,exports){
(function (Buffer){
"use strict";function toArray(r,e){if(r.length%intSize!=0){var t=r.length+(intSize-r.length%intSize);r=Buffer.concat([r,zeroBuffer],t)}for(var f=[],n=e?r.readInt32BE:r.readInt32LE,i=0;i<r.length;i+=intSize)f.push(n.call(r,i));return f}function toBuffer(r,e,t){for(var f=new Buffer(e),n=t?f.writeInt32BE:f.writeInt32LE,i=0;i<r.length;i++)n.call(f,r[i],4*i,!0);return f}function hash(r,e,t,f){return Buffer.isBuffer(r)||(r=new Buffer(r)),toBuffer(e(toArray(r,f),r.length*chrsz),t,f)}var intSize=4,zeroBuffer=new Buffer(intSize);zeroBuffer.fill(0);var chrsz=8;exports.hash=hash;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],56:[function(require,module,exports){
"use strict";function core_md5(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,i=-1732584194,h=271733878,r=0;r<d.length;r+=16){var g=m,n=f,e=i,a=h;m=md5_ff(m,f,i,h,d[r+0],7,-680876936),h=md5_ff(h,m,f,i,d[r+1],12,-389564586),i=md5_ff(i,h,m,f,d[r+2],17,606105819),f=md5_ff(f,i,h,m,d[r+3],22,-1044525330),m=md5_ff(m,f,i,h,d[r+4],7,-176418897),h=md5_ff(h,m,f,i,d[r+5],12,1200080426),i=md5_ff(i,h,m,f,d[r+6],17,-1473231341),f=md5_ff(f,i,h,m,d[r+7],22,-45705983),m=md5_ff(m,f,i,h,d[r+8],7,1770035416),h=md5_ff(h,m,f,i,d[r+9],12,-1958414417),i=md5_ff(i,h,m,f,d[r+10],17,-42063),f=md5_ff(f,i,h,m,d[r+11],22,-1990404162),m=md5_ff(m,f,i,h,d[r+12],7,1804603682),h=md5_ff(h,m,f,i,d[r+13],12,-40341101),i=md5_ff(i,h,m,f,d[r+14],17,-1502002290),f=md5_ff(f,i,h,m,d[r+15],22,1236535329),m=md5_gg(m,f,i,h,d[r+1],5,-165796510),h=md5_gg(h,m,f,i,d[r+6],9,-1069501632),i=md5_gg(i,h,m,f,d[r+11],14,643717713),f=md5_gg(f,i,h,m,d[r+0],20,-373897302),m=md5_gg(m,f,i,h,d[r+5],5,-701558691),h=md5_gg(h,m,f,i,d[r+10],9,38016083),i=md5_gg(i,h,m,f,d[r+15],14,-660478335),f=md5_gg(f,i,h,m,d[r+4],20,-405537848),m=md5_gg(m,f,i,h,d[r+9],5,568446438),h=md5_gg(h,m,f,i,d[r+14],9,-1019803690),i=md5_gg(i,h,m,f,d[r+3],14,-187363961),f=md5_gg(f,i,h,m,d[r+8],20,1163531501),m=md5_gg(m,f,i,h,d[r+13],5,-1444681467),h=md5_gg(h,m,f,i,d[r+2],9,-51403784),i=md5_gg(i,h,m,f,d[r+7],14,1735328473),f=md5_gg(f,i,h,m,d[r+12],20,-1926607734),m=md5_hh(m,f,i,h,d[r+5],4,-378558),h=md5_hh(h,m,f,i,d[r+8],11,-2022574463),i=md5_hh(i,h,m,f,d[r+11],16,1839030562),f=md5_hh(f,i,h,m,d[r+14],23,-35309556),m=md5_hh(m,f,i,h,d[r+1],4,-1530992060),h=md5_hh(h,m,f,i,d[r+4],11,1272893353),i=md5_hh(i,h,m,f,d[r+7],16,-155497632),f=md5_hh(f,i,h,m,d[r+10],23,-1094730640),m=md5_hh(m,f,i,h,d[r+13],4,681279174),h=md5_hh(h,m,f,i,d[r+0],11,-358537222),i=md5_hh(i,h,m,f,d[r+3],16,-722521979),f=md5_hh(f,i,h,m,d[r+6],23,76029189),m=md5_hh(m,f,i,h,d[r+9],4,-640364487),h=md5_hh(h,m,f,i,d[r+12],11,-421815835),i=md5_hh(i,h,m,f,d[r+15],16,530742520),f=md5_hh(f,i,h,m,d[r+2],23,-995338651),m=md5_ii(m,f,i,h,d[r+0],6,-198630844),h=md5_ii(h,m,f,i,d[r+7],10,1126891415),i=md5_ii(i,h,m,f,d[r+14],15,-1416354905),f=md5_ii(f,i,h,m,d[r+5],21,-57434055),m=md5_ii(m,f,i,h,d[r+12],6,1700485571),h=md5_ii(h,m,f,i,d[r+3],10,-1894986606),i=md5_ii(i,h,m,f,d[r+10],15,-1051523),f=md5_ii(f,i,h,m,d[r+1],21,-2054922799),m=md5_ii(m,f,i,h,d[r+8],6,1873313359),h=md5_ii(h,m,f,i,d[r+15],10,-30611744),i=md5_ii(i,h,m,f,d[r+6],15,-1560198380),f=md5_ii(f,i,h,m,d[r+13],21,1309151649),m=md5_ii(m,f,i,h,d[r+4],6,-145523070),h=md5_ii(h,m,f,i,d[r+11],10,-1120210379),i=md5_ii(i,h,m,f,d[r+2],15,718787259),f=md5_ii(f,i,h,m,d[r+9],21,-343485551),m=safe_add(m,g),f=safe_add(f,n),i=safe_add(i,e),h=safe_add(h,a)}return Array(m,f,i,h)}function md5_cmn(d,_,m,f,i,h){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,h)),i),m)}function md5_ff(d,_,m,f,i,h,r){return md5_cmn(_&m|~_&f,d,_,i,h,r)}function md5_gg(d,_,m,f,i,h,r){return md5_cmn(_&f|m&~f,d,_,i,h,r)}function md5_hh(d,_,m,f,i,h,r){return md5_cmn(_^m^f,d,_,i,h,r)}function md5_ii(d,_,m,f,i,h,r){return md5_cmn(m^(_|~f),d,_,i,h,r)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}var helpers=require("./helpers");module.exports=function(d){return helpers.hash(d,core_md5,16)};

},{"./helpers":55}],57:[function(require,module,exports){
(function (Buffer){
"use strict";function Hmac(t,e){Transform.call(this),t=t.toLowerCase(),"string"==typeof e&&(e=new Buffer(e));var r="sha512"===t||"sha384"===t?128:64;this._alg=t,this._key=e,e.length>r?e=createHash(t).update(e).digest():e.length<r&&(e=Buffer.concat([e,ZEROS],r));for(var a=this._ipad=new Buffer(r),s=this._opad=new Buffer(r),i=0;i<r;i++)a[i]=54^e[i],s[i]=92^e[i];this._hash=createHash(t).update(a)}var createHash=require("create-hash/browser"),inherits=require("inherits"),Transform=require("stream").Transform,ZEROS=new Buffer(128);ZEROS.fill(0),inherits(Hmac,Transform),Hmac.prototype.update=function(t,e){return this._hash.update(t,e),this},Hmac.prototype._transform=function(t,e,r){this._hash.update(t),r()},Hmac.prototype._flush=function(t){this.push(this.digest()),t()},Hmac.prototype.digest=function(t){var e=this._hash.digest();return createHash(this._alg).update(this._opad).update(e).digest(t)},module.exports=function(t,e){return new Hmac(t,e)};

}).call(this,require("buffer").Buffer)

},{"buffer":51,"create-hash/browser":54,"inherits":65,"stream":92}],58:[function(require,module,exports){
function Curve(i,t,n,r,s,e,o){this.p=i,this.a=t,this.b=n,this.G=Point.fromAffine(this,r,s),this.n=e,this.h=o,this.infinity=new Point(this,null,null,BigInteger.ZERO),this.pOverFour=i.add(BigInteger.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}var assert=require("assert"),BigInteger=require("bigi"),Point=require("./point");Curve.prototype.pointFromX=function(i,t){var n=t.pow(3).add(this.a.multiply(t)).add(this.b).mod(this.p),r=n.modPow(this.pOverFour,this.p),s=r;return r.isEven()^!i&&(s=this.p.subtract(s)),Point.fromAffine(this,t,s)},Curve.prototype.isInfinity=function(i){return i===this.infinity||0===i.z.signum()&&0!==i.y.signum()},Curve.prototype.isOnCurve=function(i){if(this.isInfinity(i))return!0;var t=i.affineX,n=i.affineY,r=this.a,s=this.b,e=this.p;if(t.signum()<0||t.compareTo(e)>=0)return!1;if(n.signum()<0||n.compareTo(e)>=0)return!1;var o=n.square().mod(e),u=t.pow(3).add(r.multiply(t)).add(s).mod(e);return o.equals(u)},Curve.prototype.validate=function(i){assert(!this.isInfinity(i),"Point is at infinity"),assert(this.isOnCurve(i),"Point is not on the curve");var t=i.multiply(this.n);return assert(this.isInfinity(t),"Point is not a scalar multiple of G"),!0},module.exports=Curve;

},{"./point":62,"assert":1,"bigi":6}],59:[function(require,module,exports){
module.exports={
  "secp128r1": {
    "p": "fffffffdffffffffffffffffffffffff",
    "a": "fffffffdfffffffffffffffffffffffc",
    "b": "e87579c11079f43dd824993c2cee5ed3",
    "n": "fffffffe0000000075a30d1b9038a115",
    "h": "01",
    "Gx": "161ff7528b899b2d0c28607ca52c5b86",
    "Gy": "cf5ac8395bafeb13c02da292dded7a83"
  },
  "secp160k1": {
    "p": "fffffffffffffffffffffffffffffffeffffac73",
    "a": "00",
    "b": "07",
    "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
    "h": "01",
    "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
    "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
  },
  "secp160r1": {
    "p": "ffffffffffffffffffffffffffffffff7fffffff",
    "a": "ffffffffffffffffffffffffffffffff7ffffffc",
    "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
    "n": "0100000000000000000001f4c8f927aed3ca752257",
    "h": "01",
    "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
    "Gy": "23a628553168947d59dcc912042351377ac5fb32"
  },
  "secp192k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
    "a": "00",
    "b": "03",
    "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
    "h": "01",
    "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
    "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
  },
  "secp192r1": {
    "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
    "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
    "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
    "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
    "h": "01",
    "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
    "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
  },
  "secp256k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "a": "00",
    "b": "07",
    "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
    "h": "01",
    "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
  },
  "secp256r1": {
    "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
    "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
    "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
    "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
    "h": "01",
    "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
    "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
  }
}

},{}],60:[function(require,module,exports){
var Point=require("./point"),Curve=require("./curve"),getCurveByName=require("./names");module.exports={Curve:Curve,Point:Point,getCurveByName:getCurveByName};

},{"./curve":58,"./names":61,"./point":62}],61:[function(require,module,exports){
function getCurveByName(e){var r=curves[e];if(!r)return null;var n=new BigInteger(r.p,16),g=new BigInteger(r.a,16),u=new BigInteger(r.b,16),i=new BigInteger(r.n,16),t=new BigInteger(r.h,16);return new Curve(n,g,u,new BigInteger(r.Gx,16),new BigInteger(r.Gy,16),i,t)}var BigInteger=require("bigi"),curves=require("./curves.json"),Curve=require("./curve");module.exports=getCurveByName;

},{"./curve":58,"./curves.json":59,"bigi":6}],62:[function(require,module,exports){
(function (Buffer){
function Point(t,i,e,r){assert.notStrictEqual(r,void 0,"Missing Z coordinate"),this.curve=t,this.x=i,this.y=e,this.z=r,this._zInv=null,this.compressed=!0}var assert=require("assert"),BigInteger=require("bigi"),THREE=BigInteger.valueOf(3);Object.defineProperty(Point.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(Point.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(Point.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),Point.fromAffine=function(t,i,e){return new Point(t,i,e,BigInteger.ONE)},Point.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},Point.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new Point(this.curve,this.x,t,this.z)},Point.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var i=this.x,e=this.y,r=t.x,n=t.y,s=n.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p),u=r.multiply(this.z).subtract(i.multiply(t.z)).mod(this.curve.p);if(0===u.signum())return 0===s.signum()?this.twice():this.curve.infinity;var h=u.square(),o=h.multiply(u),l=i.multiply(h),f=s.square().multiply(this.z),p=f.subtract(l.shiftLeft(1)).multiply(t.z).subtract(o).multiply(u).mod(this.curve.p),c=l.multiply(THREE).multiply(s).subtract(e.multiply(o)).subtract(f.multiply(s)).multiply(t.z).add(s.multiply(o)).mod(this.curve.p),y=o.multiply(this.z).multiply(t.z).mod(this.curve.p);return new Point(this.curve,p,c,y)},Point.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,i=this.y,e=i.multiply(this.z).mod(this.curve.p),r=e.multiply(i).mod(this.curve.p),n=this.curve.a,s=t.square().multiply(THREE);0!==n.signum()&&(s=s.add(this.z.square().multiply(n))),s=s.mod(this.curve.p);var u=s.square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(e).mod(this.curve.p),h=s.multiply(THREE).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(s.pow(3)).mod(this.curve.p),o=e.pow(3).shiftLeft(3).mod(this.curve.p);return new Point(this.curve,u,h,o)},Point.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var i=t,e=i.multiply(THREE),r=this.negate(),n=this,s=e.bitLength()-2;s>0;--s){var u=e.testBit(s),h=i.testBit(s);n=n.twice(),u!==h&&(n=n.add(u?this:r))}return n},Point.prototype.multiplyTwo=function(t,i,e){for(var r=Math.max(t.bitLength(),e.bitLength())-1,n=this.curve.infinity,s=this.add(i);r>=0;){var u=t.testBit(r),h=e.testBit(r);n=n.twice(),u?n=h?n.add(s):n.add(this):h&&(n=n.add(i)),--r}return n},Point.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return new Buffer("00","hex");var i,e=this.affineX,r=this.affineY,n=this.curve.pLength;return t?(i=new Buffer(1+n),i.writeUInt8(r.isEven()?2:3,0)):(i=new Buffer(1+n+n),i.writeUInt8(4,0),r.toBuffer(n).copy(i,1+n)),e.toBuffer(n).copy(i,1),i},Point.decodeFrom=function(t,i){var e,r=i.readUInt8(0),n=4!==r,s=Math.floor((t.p.bitLength()+7)/8),u=BigInteger.fromBuffer(i.slice(1,1+s));if(n){assert.equal(i.length,s+1,"Invalid sequence length"),assert(2===r||3===r,"Invalid sequence tag");var h=3===r;e=t.pointFromX(h,u)}else{assert.equal(i.length,1+s+s,"Invalid sequence length");var o=BigInteger.fromBuffer(i.slice(1+s));e=Point.fromAffine(t,u,o)}return e.compressed=n,e},Point.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},module.exports=Point;

}).call(this,require("buffer").Buffer)

},{"assert":1,"bigi":6,"buffer":51}],63:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(i=this._events[e],isUndefined(i))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),o=i.slice(),n=o.length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var n=!1;return i.listener=t,this.on(e,i),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=this._events[e],s=i.length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i=this._events[e],isFunction(i))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){return this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],64:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:1/0*(s?-1:1);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=o<0||0===o&&1/o<0?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],65:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],66:[function(require,module,exports){
function isBuffer(f){return!!f.constructor&&"function"==typeof f.constructor.isBuffer&&f.constructor.isBuffer(f)}function isSlowBuffer(f){return"function"==typeof f.readFloatLE&&"function"==typeof f.slice&&isBuffer(f.slice(0,0))}module.exports=function(f){return null!=f&&(isBuffer(f)||isSlowBuffer(f)||!!f._isBuffer)};

},{}],67:[function(require,module,exports){
(function (Buffer){
module.exports=function(r,e){if(!Array.isArray(r))throw TypeError("Expected values Array");if("function"!=typeof e)throw TypeError("Expected digest Function");for(var o=r.length,t=r.concat();o>1;){for(var n=0,a=0;a<o;a+=2,++n){var c=Buffer.concat([t[a],a+1!==o?t[a+1]:t[a]]);t[n]=e(c)}o=n}return t[0]};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],68:[function(require,module,exports){
(function (process){
"use strict";function nextTick(e,n,c,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var s,t,o=arguments.length;switch(o){case 0:case 1:return process.nextTick(e);case 2:return process.nextTick(function(){e.call(null,n)});case 3:return process.nextTick(function(){e.call(null,n,c)});case 4:return process.nextTick(function(){e.call(null,n,c,r)});default:for(s=new Array(o-1),t=0;t<s.length;)s[t++]=arguments[t];return process.nextTick(function(){e.apply(null,s)})}}!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?module.exports=nextTick:module.exports=process.nextTick;

}).call(this,require('_process'))

},{"_process":69}],69:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],70:[function(require,module,exports){
function encodingLength(e){return e<OPS.OP_PUSHDATA1?1:e<=255?2:e<=65535?3:5}function encode(e,n,t){var r=encodingLength(n);return 1===r?e.writeUInt8(n,t):2===r?(e.writeUInt8(OPS.OP_PUSHDATA1,t),e.writeUInt8(n,t+1)):3===r?(e.writeUInt8(OPS.OP_PUSHDATA2,t),e.writeUInt16LE(n,t+1)):(e.writeUInt8(OPS.OP_PUSHDATA4,t),e.writeUInt32LE(n,t+1)),r}function decode(e,n){var t,r,i=e.readUInt8(n);if(i<OPS.OP_PUSHDATA1)t=i,r=1;else if(i===OPS.OP_PUSHDATA1){if(n+2>e.length)return null;t=e.readUInt8(n+1),r=2}else if(i===OPS.OP_PUSHDATA2){if(n+3>e.length)return null;t=e.readUInt16LE(n+1),r=3}else{if(n+5>e.length)return null;if(i!==OPS.OP_PUSHDATA4)throw new Error("Unexpected opcode");t=e.readUInt32LE(n+1),r=5}return{opcode:i,number:t,size:r}}var OPS=require("bitcoin-ops");module.exports={encodingLength:encodingLength,encode:encode,decode:decode};

},{"bitcoin-ops":9}],71:[function(require,module,exports){
(function (process,global,Buffer){
"use strict";function oldBrowser(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}function randomBytes(r,o){if(r>65536)throw new Error("requested too many random bytes");var e=new global.Uint8Array(r);r>0&&crypto.getRandomValues(e);var t=new Buffer(e.buffer);return"function"==typeof o?process.nextTick(function(){o(null,t)}):t}var crypto=global.crypto||global.msCrypto;crypto&&crypto.getRandomValues?module.exports=randomBytes:module.exports=oldBrowser;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":69,"buffer":51}],72:[function(require,module,exports){
module.exports=require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":73}],73:[function(require,module,exports){
"use strict";function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||processNextTick(onEndNT,this)}function onEndNT(e){e.end()}function forEach(e,t){for(var r=0,i=e.length;r<i;r++)t(e[r],r)}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};module.exports=Duplex;var processNextTick=require("process-nextick-args"),util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}

},{"./_stream_readable":75,"./_stream_writable":77,"core-util-is":53,"inherits":65,"process-nextick-args":68}],74:[function(require,module,exports){
"use strict";function PassThrough(r){if(!(this instanceof PassThrough))return new PassThrough(r);Transform.call(this,r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":76,"core-util-is":53,"inherits":65}],75:[function(require,module,exports){
(function (process){
"use strict";function ReadableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Readable))return new Readable(e);this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),Stream.call(this)}function readableAddChunk(e,t,r,n,a){var i=chunkInvalid(t,r);if(i)e.emit("error",i);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!a){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&a){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else{var o;!t.decoder||a||n||(r=t.decoder.write(r),o=!t.objectMode&&0===r.length),a||(t.reading=!1),o||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,a?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e))),maybeReadMore(e,t)}else a||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function computeNewHighWaterMark(e){return e>=MAX_HWM?e=MAX_HWM:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:null===e||isNaN(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:e<=0?0:(e>t.highWaterMark&&(t.highWaterMark=computeNewHighWaterMark(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var r=null;return Buffer.isBuffer(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?processNextTick(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,processNextTick(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EElistenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,processNextTick(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do{var r=e.read()}while(null!==r&&t.flowing)}function fromList(e,t){var r,n=t.buffer,a=t.length,i=!!t.decoder,d=!!t.objectMode;if(0===n.length)return null;if(0===a)r=null;else if(d)r=n.shift();else if(!e||e>=a)r=i?n.join(""):1===n.length?n[0]:Buffer.concat(n,a),n.length=0;else if(e<n[0].length){var o=n[0];r=o.slice(0,e),n[0]=o.slice(e)}else if(e===n[0].length)r=n.shift();else{r=i?"":new Buffer(e);for(var l=0,u=0,s=n.length;u<s&&l<e;u++){var o=n[0],h=Math.min(e-l,o.length);i?r+=o.slice(0,h):o.copy(r,l,0,h),h<o.length?n[0]=o.slice(h):n.shift(),l+=h}}return r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,processNextTick(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}module.exports=Readable;var processNextTick=require("process-nextick-args"),isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events"),EElistenerCount=function(e,t){return e.listeners(t).length},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer,util=require("core-util-is");util.inherits=require("inherits");var debugUtil=require("util"),debug=void 0;debug=debugUtil&&debugUtil.debuglog?debugUtil.debuglog("stream"):function(){};var StringDecoder;util.inherits(Readable,Stream);var Duplex,Duplex;Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=new Buffer(e,t),t=""),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){return readableAddChunk(this,this._readableState,e,"",!0)},Readable.prototype.isPaused=function(){return this._readableState.flowing===!1},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,r=e;if(("number"!=typeof e||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(0===(e=howMuchToRead(e,t))&&t.ended)return 0===t.length&&endReadable(this),null;var n=t.needReadable;debug("need readable",n),(0===t.length||t.length-e<t.highWaterMark)&&(n=!0,debug("length less than watermark",n)),(t.ended||t.reading)&&(n=!1,debug("reading or ended",n)),n&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),n&&!t.reading&&(e=howMuchToRead(r,t));var a;return a=e>0?fromList(e,t):null,null===a&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),r!==e&&t.ended&&0===t.length&&endReadable(this),null!==a&&this.emit("data",a),a},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function r(e){debug("onunpipe"),e===s&&a()}function n(){debug("onend"),e.end()}function a(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",c),e.removeListener("error",d),e.removeListener("unpipe",r),s.removeListener("end",n),s.removeListener("end",a),s.removeListener("data",i),b=!0,!h.awaitDrain||e._writableState&&!e._writableState.needDrain||c()}function i(t){debug("ondata"),!1===e.write(t)&&(1!==h.pipesCount||h.pipes[0]!==e||1!==s.listenerCount("data")||b||(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++),s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EElistenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,p=f?n:a;h.endEmitted?processNextTick(p):s.once("end",p),e.on("unpipe",r);var c=pipeOnDrain(s);e.on("drain",c);var b=!1;return s.on("data",i),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<n;a++)r[a].emit("unpipe",this);return this}var i=indexOf(t.pipes,e);return i===-1?this:(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&!this._readableState.endEmitted){var n=this._readableState;n.readableListening||(n.readableListening=!0,n.emittedReadable=!1,n.needReadable=!0,n.reading?n.length&&emitReadable(this,n):processNextTick(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(a){if(debug("wrapped data"),t.decoder&&(a=t.decoder.write(a)),(!t.objectMode||null!==a&&void 0!==a)&&(t.objectMode||a&&a.length)){n.push(a)||(r=!0,e.pause())}});for(var a in e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));return forEach(["error","close","destroy","pause","resume"],function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":73,"_process":69,"buffer":51,"core-util-is":53,"events":63,"inherits":65,"isarray":78,"process-nextick-args":68,"stream":92,"string_decoder/":93,"util":48}],76:[function(require,module,exports){
"use strict";function TransformState(r){this.afterTransform=function(t,n){return afterTransform(r,t,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var i=e.writecb;if(!i)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,null!==n&&void 0!==n&&r.push(n),i(t);var a=r._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&r._read(a.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,r&&("function"==typeof r.transform&&(this._transform=r.transform),"function"==typeof r.flush&&(this._flush=r.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var i=this._readableState;(e.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0};

},{"./_stream_duplex":73,"core-util-is":53,"inherits":65}],77:[function(require,module,exports){
(function (process){
"use strict";function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var n=e.decodeStrings===!1;this.decodeStrings=!n,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this),this.corkedRequestsFree.next=new CorkedRequest(this)}function Writable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Writable||this instanceof Duplex))return new Writable(e);this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),Stream.call(this)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),processNextTick(t,r)}function validChunk(e,t,r,i){var n=!0;if(!Buffer.isBuffer(r)&&"string"!=typeof r&&null!==r&&void 0!==r&&!t.objectMode){var s=new TypeError("Invalid non-string/buffer chunk");e.emit("error",s),processNextTick(i,s),n=!1}return n}function decodeChunk(e,t,r){return e.objectMode||e.decodeStrings===!1||"string"!=typeof t||(t=new Buffer(t,r)),t}function writeOrBuffer(e,t,r,i,n){r=decodeChunk(t,r,i),Buffer.isBuffer(r)&&(i="buffer");var s=t.objectMode?1:r.length;t.length+=s;var f=t.length<t.highWaterMark;if(f||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,i,n),u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else doWrite(e,t,!1,s,r,i,n);return f}function doWrite(e,t,r,i,n,s,f){t.writelen=i,t.writecb=f,t.writing=!0,t.sync=!0,r?e._writev(n,t.onwrite):e._write(n,s,t.onwrite),t.sync=!1}function onwriteError(e,t,r,i,n){--t.pendingcb,r?processNextTick(n,i):n(i),e._writableState.errorEmitted=!0,e.emit("error",i)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,i=r.sync,n=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,i,t,n);else{var s=needFinish(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),i?asyncWrite(afterWrite,e,r,s,n):afterWrite(e,r,s,n)}}function afterWrite(e,t,r,i){r||onwriteDrain(e,t),t.pendingcb--,i(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var i=t.bufferedRequestCount,n=new Array(i),s=t.corkedRequestsFree;s.entry=r;for(var f=0;r;)n[f]=r,r=r.next,f+=1;doWrite(e,t,!0,t.length,n,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,t.corkedRequestsFree=s.next,s.next=null}else{for(;r;){var u=r.chunk,o=r.encoding,a=r.callback;if(doWrite(e,t,!1,t.objectMode?1:u.length,u,o,a),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?processNextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}function CorkedRequest(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var i=t.entry;for(t.entry=null;i;){var n=i.callback;e.pendingcb--,n(r),i=i.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}module.exports=Writable;var processNextTick=require("process-nextick-args"),asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick,Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var internalUtil={deprecate:require("util-deprecate")},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer;util.inherits(Writable,Stream);var Duplex;WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(e){}}();var Duplex;Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,t,r){var i=this._writableState,n=!1;return"function"==typeof t&&(r=t,t=null),Buffer.isBuffer(e)?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=nop),i.ended?writeAfterEnd(this,r):validChunk(this,i,e,r)&&(i.pendingcb++,n=writeOrBuffer(this,i,e,t,r)),n},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);this._writableState.defaultEncoding=e},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var i=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||endWritable(this,i,r)};

}).call(this,require('_process'))

},{"./_stream_duplex":73,"_process":69,"buffer":51,"core-util-is":53,"events":63,"inherits":65,"process-nextick-args":68,"stream":92,"util-deprecate":98}],78:[function(require,module,exports){
var toString={}.toString;module.exports=Array.isArray||function(r){return"[object Array]"==toString.call(r)};

},{}],79:[function(require,module,exports){
module.exports=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":74}],80:[function(require,module,exports){
var Stream=function(){try{return require("stream")}catch(r){}}();exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=Stream||exports,exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":73,"./lib/_stream_passthrough.js":74,"./lib/_stream_readable.js":75,"./lib/_stream_transform.js":76,"./lib/_stream_writable.js":77,"stream":92}],81:[function(require,module,exports){
module.exports=require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":76}],82:[function(require,module,exports){
module.exports=require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":77}],83:[function(require,module,exports){
(function (Buffer){
function bytesToWords(r){for(var f=[],n=0,t=0;n<r.length;n++,t+=8)f[t>>>5]|=r[n]<<24-t%32;return f}function wordsToBytes(r){for(var f=[],n=0;n<32*r.length;n+=8)f.push(r[n>>>5]>>>24-n%32&255);return f}function processBlock(r,f,n){for(var t=0;t<16;t++){var o=n+t,e=f[o];f[o]=16711935&(e<<8|e>>>24)|4278255360&(e<<24|e>>>8)}var u,l,s,h,c,i,a,v,d,p;i=u=r[0],a=l=r[1],v=s=r[2],d=h=r[3],p=c=r[4];var g;for(t=0;t<80;t+=1)g=u+f[n+zl[t]]|0,g+=t<16?f1(l,s,h)+hl[0]:t<32?f2(l,s,h)+hl[1]:t<48?f3(l,s,h)+hl[2]:t<64?f4(l,s,h)+hl[3]:f5(l,s,h)+hl[4],g|=0,g=rotl(g,sl[t]),g=g+c|0,u=c,c=h,h=rotl(s,10),s=l,l=g,g=i+f[n+zr[t]]|0,g+=t<16?f5(a,v,d)+hr[0]:t<32?f4(a,v,d)+hr[1]:t<48?f3(a,v,d)+hr[2]:t<64?f2(a,v,d)+hr[3]:f1(a,v,d)+hr[4],g|=0,g=rotl(g,sr[t]),g=g+p|0,i=p,p=d,d=rotl(v,10),v=a,a=g;g=r[1]+s+d|0,r[1]=r[2]+h+p|0,r[2]=r[3]+c+i|0,r[3]=r[4]+u+a|0,r[4]=r[0]+l+v|0,r[0]=g}function f1(r,f,n){return r^f^n}function f2(r,f,n){return r&f|~r&n}function f3(r,f,n){return(r|~f)^n}function f4(r,f,n){return r&n|f&~n}function f5(r,f,n){return r^(f|~n)}function rotl(r,f){return r<<f|r>>>32-f}function ripemd160(r){var f=[1732584193,4023233417,2562383102,271733878,3285377520];"string"==typeof r&&(r=new Buffer(r,"utf8"));var n=bytesToWords(r),t=8*r.length,o=8*r.length;n[t>>>5]|=128<<24-t%32,n[14+(t+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);for(var e=0;e<n.length;e+=16)processBlock(f,n,e);for(e=0;e<5;e++){var u=f[e];f[e]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}var l=wordsToBytes(f);return new Buffer(l)}var zl=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],zr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],sl=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],sr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],hl=[0,1518500249,1859775393,2400959708,2840853838],hr=[1352829926,1548603684,1836072691,2053994217,0];module.exports=ripemd160;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],84:[function(require,module,exports){
(function (Buffer){
function Hash(t,i){this._block=new Buffer(t),this._finalSize=i,this._blockSize=t,this._len=0,this._s=0}Hash.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=new Buffer(t,i));for(var s=this._len+=t.length,e=this._s||0,h=0,o=this._block;e<s;){for(var l=Math.min(t.length,h+this._blockSize-e%this._blockSize),_=l-h,n=0;n<_;n++)o[e%this._blockSize+n]=t[n+h];e+=_,h+=_,e%this._blockSize==0&&this._update(o)}return this._s=e,this},Hash.prototype.digest=function(t){var i=8*this._len;this._block[this._len%this._blockSize]=128,this._block.fill(0,this._len%this._blockSize+1),i%(8*this._blockSize)>=8*this._finalSize&&(this._update(this._block),this._block.fill(0)),this._block.writeInt32BE(i,this._blockSize-4);var s=this._update(this._block)||this._hash();return t?s.toString(t):s},Hash.prototype._update=function(){throw new Error("_update must be implemented by subclass")},module.exports=Hash;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],85:[function(require,module,exports){
var exports=module.exports=function(e){e=e.toLowerCase();var r=exports[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r};exports.sha=require("./sha"),exports.sha1=require("./sha1"),exports.sha224=require("./sha224"),exports.sha256=require("./sha256"),exports.sha384=require("./sha384"),exports.sha512=require("./sha512");

},{"./sha":86,"./sha1":87,"./sha224":88,"./sha256":89,"./sha384":90,"./sha512":91}],86:[function(require,module,exports){
(function (Buffer){
function Sha(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha,Hash),Sha.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,e=0|this._d,n=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=i[_-3]^i[_-8]^i[_-14]^i[_-16];for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,e)+n+i[a]+K[o]|0;n=e,e=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=e+this._d|0,this._e=n+this._e|0},Sha.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],87:[function(require,module,exports){
(function (Buffer){
function Sha1(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl1(t){return t<<1|t>>>31}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha1,Hash),Sha1.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha1.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,n=0|this._d,e=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=rotl1(i[_-3]^i[_-8]^i[_-14]^i[_-16]);for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,n)+e+i[a]+K[o]|0;e=n,n=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=n+this._d|0,this._e=e+this._e|0},Sha1.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha1;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],88:[function(require,module,exports){
(function (Buffer){
function Sha224(){this.init(),this._w=W,Hash.call(this,64,56)}var inherits=require("inherits"),Sha256=require("./sha256"),Hash=require("./hash"),W=new Array(64);inherits(Sha224,Sha256),Sha224.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},Sha224.prototype._hash=function(){var t=new Buffer(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},module.exports=Sha224;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"./sha256":89,"buffer":51,"inherits":65}],89:[function(require,module,exports){
(function (Buffer){
function Sha256(){this.init(),this._w=W,Hash.call(this,64,56)}function ch(t,i,h){return h^t&(i^h)}function maj(t,i,h){return t&i|h&(t|i)}function sigma0(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function sigma1(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function gamma0(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function gamma1(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],W=new Array(64);inherits(Sha256,Hash),Sha256.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},Sha256.prototype._update=function(t){for(var i=this._w,h=0|this._a,s=0|this._b,r=0|this._c,n=0|this._d,_=0|this._e,a=0|this._f,e=0|this._g,u=0|this._h,o=0;o<16;++o)i[o]=t.readInt32BE(4*o);for(;o<64;++o)i[o]=gamma1(i[o-2])+i[o-7]+gamma0(i[o-15])+i[o-16]|0;for(var f=0;f<64;++f){var c=u+sigma1(_)+ch(_,a,e)+K[f]+i[f]|0,m=sigma0(h)+maj(h,s,r)|0;u=e,e=a,a=_,_=n+c|0,n=r,r=s,s=h,h=c+m|0}this._a=h+this._a|0,this._b=s+this._b|0,this._c=r+this._c|0,this._d=n+this._d|0,this._e=_+this._e|0,this._f=a+this._f|0,this._g=e+this._g|0,this._h=u+this._h|0},Sha256.prototype._hash=function(){var t=new Buffer(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},module.exports=Sha256;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],90:[function(require,module,exports){
(function (Buffer){
function Sha384(){this.init(),this._w=W,Hash.call(this,128,112)}var inherits=require("inherits"),SHA512=require("./sha512"),Hash=require("./hash"),W=new Array(160);inherits(Sha384,SHA512),Sha384.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},Sha384.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(48);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),t},module.exports=Sha384;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"./sha512":91,"buffer":51,"inherits":65}],91:[function(require,module,exports){
(function (Buffer){
function Sha512(){this.init(),this._w=W,Hash.call(this,128,112)}function Ch(h,t,i){return i^h&(t^i)}function maj(h,t,i){return h&t|i&(h|t)}function sigma0(h,t){return(h>>>28|t<<4)^(t>>>2|h<<30)^(t>>>7|h<<25)}function sigma1(h,t){return(h>>>14|t<<18)^(h>>>18|t<<14)^(t>>>9|h<<23)}function Gamma0(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^h>>>7}function Gamma0l(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^(h>>>7|t<<25)}function Gamma1(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^h>>>6}function Gamma1l(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^(h>>>6|t<<26)}function getCarry(h,t){return h>>>0<t>>>0?1:0}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],W=new Array(160);inherits(Sha512,Hash),Sha512.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},Sha512.prototype._update=function(h){for(var t=this._w,i=0|this._ah,s=0|this._bh,_=0|this._ch,r=0|this._dh,a=0|this._eh,e=0|this._fh,l=0|this._gh,n=0|this._hh,g=0|this._al,f=0|this._bl,u=0|this._cl,c=0|this._dl,m=0|this._el,o=0|this._fl,y=0|this._gl,C=0|this._hl,d=0;d<32;d+=2)t[d]=h.readInt32BE(4*d),t[d+1]=h.readInt32BE(4*d+4);for(;d<160;d+=2){var b=t[d-30],p=t[d-30+1],v=Gamma0(b,p),G=Gamma0l(p,b);b=t[d-4],p=t[d-4+1];var w=Gamma1(b,p),S=Gamma1l(p,b),B=t[d-14],E=t[d-14+1],I=t[d-32],j=t[d-32+1],H=G+E|0,q=v+B+getCarry(H,G)|0;H=H+S|0,q=q+w+getCarry(H,S)|0,H=H+j|0,q=q+I+getCarry(H,j)|0,t[d]=q,t[d+1]=H}for(var W=0;W<160;W+=2){q=t[W],H=t[W+1];var x=maj(i,s,_),A=maj(g,f,u),k=sigma0(i,g),z=sigma0(g,i),D=sigma1(a,m),F=sigma1(m,a),J=K[W],L=K[W+1],M=Ch(a,e,l),N=Ch(m,o,y),O=C+F|0,P=n+D+getCarry(O,C)|0;O=O+N|0,P=P+M+getCarry(O,N)|0,O=O+L|0,P=P+J+getCarry(O,L)|0,O=O+H|0,P=P+q+getCarry(O,H)|0;var Q=z+A|0,R=k+x+getCarry(Q,z)|0;n=l,C=y,l=e,y=o,e=a,o=m,m=c+O|0,a=r+P+getCarry(m,c)|0,r=_,c=u,_=s,u=f,s=i,f=g,g=O+Q|0,i=P+R+getCarry(g,O)|0}this._al=this._al+g|0,this._bl=this._bl+f|0,this._cl=this._cl+u|0,this._dl=this._dl+c|0,this._el=this._el+m|0,this._fl=this._fl+o|0,this._gl=this._gl+y|0,this._hl=this._hl+C|0,this._ah=this._ah+i+getCarry(this._al,g)|0,this._bh=this._bh+s+getCarry(this._bl,f)|0,this._ch=this._ch+_+getCarry(this._cl,u)|0,this._dh=this._dh+r+getCarry(this._dl,c)|0,this._eh=this._eh+a+getCarry(this._el,m)|0,this._fh=this._fh+e+getCarry(this._fl,o)|0,this._gh=this._gh+l+getCarry(this._gl,y)|0,this._hh=this._hh+n+getCarry(this._hl,C)|0},Sha512.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(64);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),h(this._gh,this._gl,48),h(this._hh,this._hl,56),t},module.exports=Sha512;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],92:[function(require,module,exports){
function Stream(){EE.call(this)}module.exports=Stream;var EE=require("events").EventEmitter;require("inherits")(Stream,EE),Stream.Readable=require("readable-stream/readable.js"),Stream.Writable=require("readable-stream/writable.js"),Stream.Duplex=require("readable-stream/duplex.js"),Stream.Transform=require("readable-stream/transform.js"),Stream.PassThrough=require("readable-stream/passthrough.js"),Stream.Stream=Stream,Stream.prototype.pipe=function(e,r){function t(r){e.writable&&!1===e.write(r)&&m.pause&&m.pause()}function a(){m.readable&&m.resume&&m.resume()}function n(){u||(u=!0,e.end())}function o(){u||(u=!0,"function"==typeof e.destroy&&e.destroy())}function s(e){if(i(),0===EE.listenerCount(this,"error"))throw e}function i(){m.removeListener("data",t),e.removeListener("drain",a),m.removeListener("end",n),m.removeListener("close",o),m.removeListener("error",s),e.removeListener("error",s),m.removeListener("end",i),m.removeListener("close",i),e.removeListener("close",i)}var m=this;m.on("data",t),e.on("drain",a),e._isStdio||r&&r.end===!1||(m.on("end",n),m.on("close",o));var u=!1;return m.on("error",s),e.on("error",s),m.on("end",i),m.on("close",i),e.on("close",i),e.emit("pipe",m),e};

},{"events":63,"inherits":65,"readable-stream/duplex.js":72,"readable-stream/passthrough.js":79,"readable-stream/readable.js":80,"readable-stream/transform.js":81,"readable-stream/writable.js":82}],93:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&h<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&h<=56319){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":51}],94:[function(require,module,exports){
function TfTypeError(r,e,t){this.__error=Error.call(this),this.__type=r,this.__value=e,this.__valueTypeName=t;var o;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return o?o:(t=t||getValueTypeName(e),o=tfErrorString(r,e,t))}})}function TfPropertyTypeError(r,e,t,o,n,i){this.__error=n||Error.call(this),this.__label=t,this.__property=e,this.__type=r,this.__value=o,this.__valueTypeName=i;var a;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return a?a:(r?(i=i||getValueTypeName(o),a=tfPropertyErrorString(r,t,e,o,i)):a='Unexpected property "'+e+'"',a)}})}function tfCustomError(r,e){return new TfTypeError(r,{},e)}function tfSubError(r,e,t){return r instanceof TfPropertyTypeError?(e=e+"."+r.__property,t=r.__label,new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName)):r instanceof TfTypeError?new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName):r}function getTypeName(r){return r.name||r.toString().match(/function (.*?)\s*\(/)[1]}function getValueTypeName(r){return native.Null(r)?"":getTypeName(r.constructor)}function getValue(r){return native.Function(r)?"":native.String(r)?JSON.stringify(r):r&&native.Object(r)?"":r}function tfJSON(r){return native.Function(r)?r.toJSON?r.toJSON():getTypeName(r):native.Array(r)?"Array":r&&native.Object(r)?"Object":void 0!==r?r:""}function tfErrorString(r,e,t){var o=getValue(e);return"Expected "+tfJSON(r)+", got"+(""!==t?" "+t:"")+(""!==o?" "+o:"")}function tfPropertyErrorString(r,e,t,o,n){var i='" of type ';return"key"===e&&(i='" with key type '),tfErrorString('property "'+tfJSON(t)+i+tfJSON(r),o,n)}var inherits=require("inherits"),native=require("./native");[TfTypeError,TfPropertyTypeError].forEach(function(r){inherits(r,Error),Object.defineProperty(r,"stack",{get:function(){return this.__error.stack}})}),module.exports={TfTypeError:TfTypeError,TfPropertyTypeError:TfPropertyTypeError,tfCustomError:tfCustomError,tfSubError:tfSubError,tfJSON:tfJSON,getValueTypeName:getValueTypeName};

},{"./native":97,"inherits":65}],95:[function(require,module,exports){
(function (Buffer){
function _Buffer(n){return Buffer.isBuffer(n)}function _BufferN(n){function t(t){if(!Buffer.isBuffer(t))return!1;if(t.length!==n)throw errors.tfCustomError("Buffer(Length: "+n+")","Buffer(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Buffer"},t}function Hex(n){return"string"==typeof n&&/^([0-9a-f]{2})+$/i.test(n)}function _HexN(n){function t(t){if(!Hex(t))return!1;if(t.length!==n)throw errors.tfCustomError("Hex(Length: "+n+")","Hex(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Hex"},t}function Finite(n){return"number"==typeof n&&isFinite(n)}function Int8(n){return n<<24>>24===n}function Int16(n){return n<<16>>16===n}function Int32(n){return(0|n)===n}function UInt8(n){return(255&n)===n}function UInt16(n){return(65535&n)===n}function UInt32(n){return n>>>0===n}function UInt53(n){return"number"==typeof n&&n>=0&&n<=UINT53_MAX&&Math.floor(n)===n}var errors=require("./errors");_Buffer.toJSON=function(){return"Buffer"};var UINT53_MAX=Math.pow(2,53)-1;module.exports={Buffer:_Buffer,BufferN:_BufferN,Finite:Finite,Hex:Hex,HexN:_HexN,Int8:Int8,Int16:Int16,Int32:Int32,UInt8:UInt8,UInt16:UInt16,UInt32:UInt32,UInt53:UInt53};

}).call(this,{"isBuffer":require("../is-buffer/index.js")})

},{"../is-buffer/index.js":66,"./errors":94}],96:[function(require,module,exports){
function compile(r){return NATIVE.String(r)?"?"===r[0]?TYPES.maybe(compile(r.slice(1))):NATIVE[r]||TYPES.quacksLike(r):r&&NATIVE.Object(r)?NATIVE.Array(r)?TYPES.arrayOf(compile(r[0])):TYPES.object(r):NATIVE.Function(r)?r:TYPES.value(r)}function typeforce(r,e,t,n){if(NATIVE.Function(r)){if(r(e,t))return!0;throw new TfTypeError(n||r,e)}return typeforce(compile(r),e,t)}function __async(r,e,t,n){if("function"==typeof t)return __async(r,e,!1,t);try{typeforce(r,e,t)}catch(r){return n(r)}n()}var ERRORS=require("./errors"),NATIVE=require("./native"),tfJSON=ERRORS.tfJSON,TfTypeError=ERRORS.TfTypeError,TfPropertyTypeError=ERRORS.TfPropertyTypeError,tfSubError=ERRORS.tfSubError,getValueTypeName=ERRORS.getValueTypeName,TYPES={arrayOf:function(r){function e(e,t){return!!NATIVE.Array(e)&&e.every(function(e,n){try{return typeforce(r,e,t)}catch(r){throw tfSubError(r,n)}})}return r=compile(r),e.toJSON=function(){return"["+tfJSON(r)+"]"},e},maybe:function r(e){function t(t,n){return NATIVE.Null(t)||e(t,n,r)}return e=compile(e),t.toJSON=function(){return"?"+tfJSON(e)},t},map:function(r,e){function t(t,n){if(!NATIVE.Object(t,n))return!1;if(NATIVE.Null(t,n))return!1;for(var o in t){try{e&&typeforce(e,o,n)}catch(r){throw tfSubError(r,o,"key")}try{typeforce(r,t[o],n)}catch(r){throw tfSubError(r,o)}}return!0}return r=compile(r),e&&(e=compile(e)),t.toJSON=e?function(){return"{"+tfJSON(e)+": "+tfJSON(r)+"}"}:function(){return"{"+tfJSON(r)+"}"},t},object:function(r){function e(r,e){if(!NATIVE.Object(r))return!1;if(NATIVE.Null(r))return!1;var n;try{for(n in t){typeforce(t[n],r[n],e)}}catch(r){throw tfSubError(r,n)}if(e)for(n in r)if(!t[n])throw new TfPropertyTypeError(void 0,n);return!0}var t={};for(var n in r)t[n]=compile(r[n]);return e.toJSON=function(){return tfJSON(t)},e},oneOf:function(){function r(r,t){return e.some(function(e){try{return typeforce(e,r,t)}catch(r){return!1}})}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return e.map(tfJSON).join("|")},r},quacksLike:function(r){function e(e){return r===getValueTypeName(e)}return e.toJSON=function(){return r},e},tuple:function(){function r(r,t){return e.every(function(e,n){try{return typeforce(e,r[n],t)}catch(r){throw tfSubError(r,n)}})&&(!t||r.length===arguments.length)}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return"("+e.map(tfJSON).join(", ")+")"},r},value:function(r){function e(e){return e===r}return e.toJSON=function(){return r},e}};for(var typeName in NATIVE)typeforce[typeName]=NATIVE[typeName];for(typeName in TYPES)typeforce[typeName]=TYPES[typeName];var extra=require("./extra");for(typeName in extra)typeforce[typeName]=extra[typeName];typeforce.async=__async,typeforce.compile=compile,typeforce.TfTypeError=TfTypeError,typeforce.TfPropertyTypeError=TfPropertyTypeError,module.exports=typeforce;

},{"./errors":94,"./extra":95,"./native":97}],97:[function(require,module,exports){
var types={Array:function(n){return null!==n&&void 0!==n&&n.constructor===Array},Boolean:function(n){return"boolean"==typeof n},Function:function(n){return"function"==typeof n},Null:function(n){return void 0===n||null===n},Number:function(n){return"number"==typeof n},Object:function(n){return"object"==typeof n},String:function(n){return"string"==typeof n},"":function(){return!0}};for(var typeName in types)types[typeName].toJSON=function(n){return n}.bind(null,typeName);module.exports=types;

},{}],98:[function(require,module,exports){
(function (global){
function deprecate(r,e){function o(){if(!t){if(config("throwDeprecation"))throw new Error(e);config("traceDeprecation")?console.trace(e):console.warn(e),t=!0}return r.apply(this,arguments)}if(config("noDeprecation"))return r;var t=!1;return o}function config(r){try{if(!global.localStorage)return!1}catch(r){return!1}var e=global.localStorage[r];return null!=e&&"true"===String(e).toLowerCase()}module.exports=deprecate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],99:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],100:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],101:[function(require,module,exports){
(function (process,global){
function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c="",a=!1,l=["{","}"];if(isArray(r)&&(a=!0,l=["[","]"]),isFunction(r)){c=" [Function"+(r.name?": "+r.name:"")+"]"}if(isRegExp(r)&&(c=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(c=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(c=" "+formatError(r)),0===o.length&&(!a||0==r.length))return l[0]+c+l[1];if(t<0)return isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special");e.seen.push(r);var p;return p=a?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,a)}),e.seen.pop(),reduceToSingleString(p,c,l)}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if(c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;s=JSON.stringify(""+i),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){var n=0;return e.reduce(function(e,r){return n++,r.indexOf("\n")>=0&&n++,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}for(var t=1,n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])o+=isNull(s)||!isObject(s)?" "+s:" "+inspect(s);return o},exports.deprecate=function(e,r){function t(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(process.noDeprecation===!0)return e;var n=!1;return t};var debugs={},debugEnviron;exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":100,"_process":69,"inherits":99}],102:[function(require,module,exports){
(function (Buffer){
"use strict";function checkUInt53(e){if(e<0||e>MAX_SAFE_INTEGER||e%1!=0)throw new RangeError("value out of range")}function encode(e,n,t){if(checkUInt53(e),n||(n=new Buffer(encodingLength(e))),!Buffer.isBuffer(n))throw new TypeError("buffer must be a Buffer instance");return t||(t=0),e<253?(n.writeUInt8(e,t),encode.bytes=1):e<=65535?(n.writeUInt8(253,t),n.writeUInt16LE(e,t+1),encode.bytes=3):e<=4294967295?(n.writeUInt8(254,t),n.writeUInt32LE(e,t+1),encode.bytes=5):(n.writeUInt8(255,t),n.writeUInt32LE(e>>>0,t+1),n.writeUInt32LE(e/4294967296|0,t+5),encode.bytes=9),n}function decode(e,n){if(!Buffer.isBuffer(e))throw new TypeError("buffer must be a Buffer instance");n||(n=0);var t=e.readUInt8(n);if(t<253)return decode.bytes=1,t;if(253===t)return decode.bytes=3,e.readUInt16LE(n+1);if(254===t)return decode.bytes=5,e.readUInt32LE(n+1);decode.bytes=9;var r=e.readUInt32LE(n+1),c=e.readUInt32LE(n+5),o=4294967296*c+r;return checkUInt53(o),o}function encodingLength(e){return checkUInt53(e),e<253?1:e<=65535?3:e<=4294967295?5:9}var MAX_SAFE_INTEGER=9007199254740991;module.exports={encode:encode,decode:decode,encodingLength:encodingLength};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],103:[function(require,module,exports){
(function (Buffer){
function decodeRaw(e,o){if(void 0!==o&&e[0]!==o)throw new Error("Invalid network version");if(33===e.length)return{version:e[0],privateKey:e.slice(1,33),compressed:!1};if(34!==e.length)throw new Error("Invalid WIF length");if(1!==e[33])throw new Error("Invalid compression flag");return{version:e[0],privateKey:e.slice(1,33),compressed:!0}}function encodeRaw(e,o,r){var n=new Buffer(r?34:33);return n.writeUInt8(e,0),o.copy(n,1),r&&(n[33]=1),n}function decode(e,o){return decodeRaw(bs58check.decode(e),o)}function encode(e,o,r){return"number"==typeof e?bs58check.encode(encodeRaw(e,o,r)):bs58check.encode(encodeRaw(e.version,e.privateKey,e.compressed))}var bs58check=require("bs58check");module.exports={decode:decode,decodeRaw:decodeRaw,encode:encode,encodeRaw:encodeRaw};

}).call(this,require("buffer").Buffer)

},{"bs58check":106,"buffer":51}],104:[function(require,module,exports){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var a="",u=0;0===e[u]&&u<e.length-1;++u)a+=r[0];for(var l=n.length-1;l>=0;--l)a+=r[n[l]];return a}function n(r){if(0===r.length)return[];for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var a=0,u=t;a<e.length;++a)u+=e[a]*f,e[a]=255&u,u>>=8;for(;u>0;)e.push(255&u),u>>=8}for(var l=0;r[l]===h&&l<r.length-1;++l)e.push(0);return e.reverse()}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),a=0;a<r.length;a++)o[r.charAt(a)]=a;return{encode:e,decodeUnsafe:n,decode:t}};

},{}],105:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":104}],106:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a){return decodeRaw(new Buffer(a))}}function decode(e){var a=base58.decode(e),d=new Buffer(a),c=decodeRaw(d);if(!c)throw new Error("Invalid checksum");return c}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":105,"buffer":51,"create-hash":54}],107:[function(require,module,exports){
"use strict";function loadBlockRange(r){var t=r.lastBlock;return getBlock(0).then(function(r){return getCurrentBlock().then(function(e){var n=0!==t.height?getBlock(t.height).then(function(e){return e.hash===t.hash?e:(console.warn("Blockhash mismatch",t,e),r)},function(e){if("RPCError: Block height out of range"===e.message)return console.warn("Block height out of range",t.height),r;throw e}):Promise.resolve(r);return Promise.all([n,e]).then(function(t){var e=_slicedToArray(t,2);return{first:e[0],last:e[1],nullBlock:r}})})})}function getBlock(r){return(0,_channel.lookupBlockHash)(r).then(function(t){return{hash:t,height:r}})}function getCurrentBlock(){return(0,_channel.lookupSyncStatus)().then(function(r){return getBlock(r)})}Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function r(r,t){var e=[],n=!0,o=!1,a=void 0;try{for(var l,c=r[Symbol.iterator]();!(n=(l=c.next()).done)&&(e.push(l.value),!t||e.length!==t);n=!0);}catch(r){o=!0,a=r}finally{try{!n&&c.return&&c.return()}finally{if(o)throw a}}return e}return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return r(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();exports.loadBlockRange=loadBlockRange;var _channel=require("./channel");

},{"./channel":108}],108:[function(require,module,exports){
"use strict";function askPromise(e){var t=lastId+1;lastId++,doPostMessage({type:"promiseRequest",request:e,id:t});var s=(0,_deferred.deferred)();return messageEmitter.attach(function(r,o){"promiseResponseSuccess"===r.type&&r.response.type===e.type&&r.id===t&&(o(),s.resolve(r.response.response)),"promiseResponseFailure"===r.type&&r.id===t&&(o(),s.reject(new Error(r.failure)))}),s.promise}function askStream(e){var t=lastId+1;return lastId++,doPostMessage({type:"streamRequest",request:e,id:t}),new _stream.Stream(function(s,r){var o=function(){};return messageEmitter.attach(function(n,i){o=i,"streamResponseUpdate"===n.type&&n.update.type===e.type&&n.id===t&&s(n.update.response),"streamResponseFinish"===n.type&&n.id===t&&(i(),r())}),function(){o()}})}function lookupSyncStatus(){return askPromise({type:"lookupSyncStatus"})}function lookupBlockHash(e){return askPromise({type:"lookupBlockHash",height:e})}function doesTransactionExist(e){return askPromise({type:"doesTransactionExist",txid:e})}function chunkTransactions(e,t,s,r,o,n,i){return askStream({type:"chunkTransactions",chainId:e,firstIndex:t,lastIndex:s,startBlock:r,endBlock:o,pseudoCount:n,addresses:i}).map(function(e){return"string"==typeof e?new Error(e):e})}function returnSuccess(e){doPostMessage({type:"result",result:e})}function returnError(e){doPostMessage({type:"error",error:e instanceof Error?e.message:e.toString()})}function doPostMessage(e){self.postMessage(e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.startDiscoveryPromise=exports.initPromise=void 0,exports.lookupSyncStatus=lookupSyncStatus,exports.lookupBlockHash=lookupBlockHash,exports.doesTransactionExist=doesTransactionExist,exports.chunkTransactions=chunkTransactions,exports.returnSuccess=returnSuccess,exports.returnError=returnError;var _deferred=require("../../../utils/deferred"),_stream=require("../../../utils/stream"),lastId=0,messageEmitter=new _stream.Emitter;self.onmessage=function(e){var t=e.data;messageEmitter.emit(t)};var initDfd=(0,_deferred.deferred)(),initPromise=exports.initPromise=initDfd.promise;messageEmitter.attach(function(e,t){"init"===e.type&&(t(),initDfd.resolve({accountInfo:e.state,network:e.network,xpub:e.xpub,segwit:e.segwit,webassembly:e.webassembly}))});var startDiscoveryDfd=(0,_deferred.deferred)(),startDiscoveryPromise=exports.startDiscoveryPromise=startDiscoveryDfd.promise;messageEmitter.attach(function(e,t){"startDiscovery"===e.type&&(t(),startDiscoveryDfd.resolve())});

},{"../../../utils/deferred":116,"../../../utils/stream":117}],109:[function(require,module,exports){
"use strict";function deriveDateFormats(t){if(null==t)return{dateInfo:null,dateInfoDayFormat:null,dateInfoTimeFormat:null};var e=t,o=new Date(1e3*e);return{dateInfo:o.toString(),dateInfoDayFormat:dateToDayFormat(o),dateInfoTimeFormat:dateToTimeFormat(o)}}function dateToTimeFormat(t){return addZero(t.getHours().toString())+":"+addZero(t.getMinutes().toString())+":"+addZero(t.getSeconds().toString())}function dateToDayFormat(t){return t.getFullYear().toString()+"-"+addZero((t.getMonth()+1).toString())+"-"+addZero(t.getDate().toString())}function addZero(t){return 1===t.length?"0"+t:t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deriveDateFormats=deriveDateFormats;

},{}],110:[function(require,module,exports){
"use strict";function deriveAnalysis(e,n,t){return deriveFullInfo(deriveBalancelessAnalysisMap(e,n,deriveOutputsForAnalysisMap(e,n),t))}function deriveOutputsForAnalysisMap(e,n){function t(e){var n=[];return Object.keys(e.myOutputs).forEach(function(t){n[parseInt(t)]=e.myOutputs[parseInt(t)]}),{txid:e.hash,outputs:n}}function r(e){for(var n=[],t=0;t<e.tx.outs.length;t++){var r=e.tx.outs[t],s=e.outputAddresses[t];n.push({address:s,value:r.value})}return{txid:e.hash,outputs:n}}var s={},u=(0,_utils.objectValues)(e).map(function(e){return r(e)});return n.map(function(e){return t(e)}).concat(u).forEach(function(e){var n=e.txid,t=e.outputs;s[n]=t}),s}function deriveBalancelessAnalysisMap(e,n,t,r){var s={};return n.forEach(function(e){s[e.hash]=e}),Object.keys(e).forEach(function(n){s[n]=analyzeTransaction(e[n],t,r)}),s}function analyzeTransaction(e,n,t){var r=e.tx.ins.map(function(e){return{id:(0,_utils.getInputId)(e),index:e.index}}),s=null==e.tx.joinsplits||e.tx.joinsplits.length>0,u=e.tx.ins.some(function(e){return _bitcoinjsLibZcash.Transaction.isCoinbaseHash(e.hash)}),a=e.hash,i=getTargetsFromTransaction(r,n,t,a,s);return _extends({isCoinbase:u},(0,_dates.deriveDateFormats)(e.timestamp),{height:e.height,hash:a},i,{inputs:r,tsize:e.tx.byteLength(),vsize:e.vsize,fee:e.fee})}function getTargetsFromTransaction(e,n,t,r,s){function u(e){return null!=e&&null!=t[e]&&0===t[e][0]}function a(e){return null!=e&&null!=t[e]&&1===t[e][0]}function i(e){return null!=e&&null!=t[e]}function l(e){return!i(e)}function o(e){var n=[];return c.forEach(function(t,r){if(null!=t){var s=t.address,u=t.value;e(s)&&n.push({address:s,value:u,i:r})}}),n}var c=n[r],f=0,d=0,v=0;e.forEach(function(e){var t=e.id,r=e.index,s=n[t];if(s){var u=s[r];u&&i(u.address)&&(v-=u.value,d++)}});var h={};c.forEach(function(e,n){null!=e&&i(e.address)&&(v+=e.value,f++,h[n]={address:e.address,value:e.value,i:n})});var p=[],y=void 0,g=e.length,x=c.length;return d!==g||s||f!==x?v>0?(y="recv",p=o(function(e){return u(e)}),0===p.length&&(p=o(function(e){return a(e)}))):(y="sent",p=o(function(e){return l(e)}),0===p.length&&(y="self",p=[])):(y="self",p=[]),{targets:p,type:y,value:v,myOutputs:h}}function deriveFullInfo(e){var n=(0,_utils.objectValues)(e).sort(compareByOldestAndType),t=null;return n.map(function(e){return t=_extends({},e,{balance:null!=t?t.balance+e.value:e.value})}).reverse()}function compareByOldestAndType(e,n){return(null!=e.height?e.height:1/0)-(null!=n.height?n.height:1/0)||0||IMPACT_ORDERING.indexOf(e.type)-IMPACT_ORDERING.indexOf(n.type)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};exports.deriveAnalysis=deriveAnalysis;var _utils=require("../utils"),_dates=require("./dates"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),IMPACT_ORDERING=["recv","self","sent"];

},{"../utils":115,"./dates":109,"bitcoinjs-lib-zcash":19}],111:[function(require,module,exports){
"use strict";function deriveUtxos(n,t,e,i){var s=deriveAllTransactionHashes(n.main.newTransactions,n.change.newTransactions,t.transactions),a=deriveSpentOutputs(s,n.main.newTransactions,n.change.newTransactions,t.transactions);return _deriveUtxos(t.utxos,i,e,a)}function deriveAllTransactionHashes(n,t,e){var i=new Set;return Object.keys(n).forEach(function(n){i.add(n)}),Object.keys(t).forEach(function(n){i.add(n)}),e.forEach(function(n){i.add(n.hash)}),i}function deriveSpentOutputs(n,t,e,i){function s(t){return n.has(t)}function a(n){(0,_utils.objectValues)(n).forEach(function(n){n.tx.ins.forEach(function(n){var t=n.index,e=(0,_utils.getInputId)(n);s(e)&&r.add(e+":"+t)})})}var r=new Set;return i.forEach(function(n){n.inputs.forEach(function(n){var t=n.id,e=n.index;s(t)&&r.add(t+":"+e)})}),a(t),a(e),r}function _deriveUtxos(n,t,e,i){var s={},a=function(n){return n&&null!=e[n]},r=function(n){return n.ins.some(function(n){return _bitcoinjsLibZcash.Transaction.isCoinbaseHash(n.hash)})};return n.filter(function(n){var t=n.transactionHash+":"+n.index;return!i.has(t)}).forEach(function(n){s[n.transactionHash+":"+n.index]=n}),(0,_utils.objectValues)(t).forEach(function(n){var t=n.hash,o=n.tx,c=n.height,u=n.outputAddresses,f=(n.inputAddresses,n.vsize),h=n.fee,d=r(o),v=u.some(function(n){return a(n)});o.outs.forEach(function(n,r){var l=t+":"+r,b=u[r];if(!i.has(l)&&a(b)){var x=e[b],p={index:r,value:n.value,transactionHash:t,height:c,coinbase:d,addressPath:x,vsize:f,tsize:o.byteLength(),fee:h,own:v};s[l]=p}})}),(0,_utils.objectValues)(s)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deriveUtxos=deriveUtxos;var _utils=require("../utils"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash");

},{"../utils":115,"bitcoinjs-lib-zcash":19}],112:[function(require,module,exports){
(function (Buffer){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function findDeleted(e,t){var s=[];return _stream.Stream.fromArray(e).mapPromiseError(function(e){return t(e).then(function(t){t||s.push(e)})}).awaitFinish().then(function(){return s})}function deriveTxidSet(e){var t=new Set;return e.forEach(function(e){t.add(e.hash)}),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.GetChainTransactions=void 0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(e[i]=s[i])}return e},_createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,s,i){return s&&e(t.prototype,s),i&&e(t,i),t}}();exports.findDeleted=findDeleted;var _deferred=require("../../../utils/deferred"),_stream=require("../../../utils/stream"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),GAP_SIZE=20,GetChainTransactions=exports.GetChainTransactions=function(){function e(t,s,i,r,a,n,h,c,o,d){_classCallCheck(this,e),this.allCheckedAddresses=[],this.backSearch={},this.newTransactions={},this.lastSearched=-1,this.dfd=(0,_deferred.deferred)(),this.originalLastConfirmed=i,this.lastConfirmed=i,this.chainId=t,this.range=s,this.getStream=r,this.txids=deriveTxidSet(a),this.allAddresses=n,this.network=h,this.xpub=c,this.segwit=o,this.webassembly=d}return _createClass(e,[{key:"originalLastSearched",value:function(){return this.originalLastConfirmed+GAP_SIZE}},{key:"nullRange",value:function(){var e=this.range;return _extends({},e,{since:e.nullBlock})}}]),_createClass(e,[{key:"discover",value:function(){var e=GAP_SIZE-1;return this.iterate(0,e,this.range),this.dfd.promise}},{key:"iterate",value:function(e,t,s){var i=this,r=null;if(this.allAddresses.length-1>=t)r=this.allAddresses.slice(e,t+1);else if(!this.webassembly){r=[];for(var a=_bitcoinjsLibZcash.HDNode.fromBase58(this.xpub,this.network).derive(this.chainId),n=e;n<=t;n++){var h=a.derive(n),c="";if(this.segwit){var o=h.getIdentifier(),d=new Buffer(o.length+2);d[0]=0,d[1]=20,o.copy(d,2);var l=_bitcoinjsLibZcash.crypto.hash160(d);c=_bitcoinjsLibZcash.address.toBase58Check(l,this.network.scriptHash)}else c=h.getAddress();r[n-e]=c}}var u=this.getStream(this.chainId,e,t,s.first.height,s.last.height,this.txids.size,r);u.values.attach(function(t){if(t instanceof Error)return i.dfd.reject(t),void u.dispose();var s=t;i.handleTransactions(s,e)}),u.finish.attach(function(){i.handleFinish(t)})}},{key:"handleTransactions",value:function(e,t){var s=this;e.addresses.forEach(function(e,i){s.allAddresses[i+t]=e,s.allCheckedAddresses[i+t]=e,s.backSearch[e]=i+t}),e.transactions.forEach(function(e){var t=_bitcoinjsLibZcash.Transaction.fromHex(e.hex,e.zcash),i=[];t.outs.forEach(function(t){var r=void 0;try{if(r=_bitcoinjsLibZcash.address.fromOutputScript(t.script,s.network),null!=s.backSearch[r]&&null!=e.height){var a=s.backSearch[r];a>s.lastConfirmed&&(s.lastConfirmed=a)}}catch(e){var n=_bitcoinjsLibZcash.script.classifyOutput(t.script);if("nulldata"===n){var h=_bitcoinjsLibZcash.script.nullData.output.decode(t.script),c="";if(0!==h)if(h.every(function(e){return e>=32&&e<=126})){var o=h.toString("ascii");c=o.slice(0,40)}else{var d="0x"+h.toString("hex");c=d.slice(0,40)}r="OP_RETURN ("+c+")"}else r="UNKNOWN"}i.push(r)});var r={tx:t,outputAddresses:i,height:e.height,timestamp:e.timestamp,hash:e.hash,fee:e.fee,vsize:e.vsize,inputAddresses:e.inputAddresses};s.newTransactions[r.hash]=r,s.txids.add(r.hash)})}},{key:"handleFinish",value:function(e){this.lastSearched=e;var t=this.lastConfirmed+GAP_SIZE,s=this.lastSearched+GAP_SIZE,i=t<s?t:s,r=this.lastSearched+1;i>=r?i>this.originalLastSearched()?r>=this.originalLastSearched()+1?this.iterate(r,i,this.nullRange()):this.iterate(r,this.originalLastSearched(),this.range):this.iterate(r,i,this.range):this.dfd.resolve({newTransactions:this.newTransactions,allAddresses:this.allAddresses})}}]),e}();

}).call(this,require("buffer").Buffer)

},{"../../../utils/deferred":116,"../../../utils/stream":117,"bitcoinjs-lib-zcash":19,"buffer":51}],113:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n.default=e,n}function discoverAccount(e,n,r,t,a){return Promise.all([new _getChainTransactions.GetChainTransactions(0,e,n[0],channel.chunkTransactions,r,t,recvNetwork,recvXpub,recvSegwit,recvWebAssembly).discover(),new _getChainTransactions.GetChainTransactions(1,e,n[1],channel.chunkTransactions,[],a,recvNetwork,recvXpub,recvSegwit,recvWebAssembly).discover()]).then(function(e){var n=_slicedToArray(e,2);return{main:n[0],change:n[1]}})}var _slicedToArray=function(){function e(e,n){var r=[],t=!0,a=!1,s=void 0;try{for(var i,c=e[Symbol.iterator]();!(t=(i=c.next()).done)&&(r.push(i.value),!n||r.length!==n);t=!0);}catch(e){a=!0,s=e}finally{try{!t&&c.return&&c.return()}finally{if(a)throw s}}return r}return function(n,r){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return e(n,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_channel=require("./channel"),channel=_interopRequireWildcard(_channel),_blocks=require("./blocks"),_getChainTransactions=require("./get-chain-transactions"),_integrateNewTxs=require("./integrate-new-txs"),defaultInfo={utxos:[],transactions:[],usedAddresses:[],unusedAddresses:[],changeIndex:0,balance:0,sentAddresses:{},lastBlock:{height:0,hash:"abcd"},transactionHashes:{},changeAddresses:[],allowChange:!1,lastConfirmedChange:-1,lastConfirmedMain:-1,version:3},recvInfo=void 0,recvNetwork=void 0,recvXpub=void 0,recvSegwit=void 0,recvWebAssembly=void 0;channel.initPromise.then(function(e){var n=e.accountInfo,r=e.network,t=e.xpub,a=e.segwit,s=e.webassembly;recvInfo=n,recvNetwork=r,recvSegwit=a,recvXpub=t,recvWebAssembly=s}),channel.startDiscoveryPromise.then(function(){var e=null==recvInfo?defaultInfo:recvInfo;(null==e.version||e.version<3)&&(e=defaultInfo),(0,_blocks.loadBlockRange)(e).then(function(n){var r=0===n.first.height?defaultInfo:e,t=r.usedAddresses.length-1,a=r.changeIndex-1,s=null==r.lastConfirmedMain?t:r.lastConfirmedMain,i=null==r.lastConfirmedChange?a:r.lastConfirmedChange,c=r.transactions.filter(function(e){return null==e.height}).map(function(e){return e.hash}),o=r.usedAddresses.map(function(e){return e.address}).concat(r.unusedAddresses),u=r.changeAddresses;return discoverAccount(n,[s,i],r.transactions,o,u).then(function(e){return(0,_getChainTransactions.findDeleted)(c,channel.doesTransactionExist).then(function(t){return(0,_integrateNewTxs.integrateNewTxs)(e,r,n.last,t)})})}).then(function(e){return channel.returnSuccess(e)},function(e){return channel.returnError(e)})});

},{"./blocks":107,"./channel":108,"./get-chain-transactions":112,"./integrate-new-txs":114}],114:[function(require,module,exports){
"use strict";function deleteTxs(e,s){var r=new Set(s);return _extends({},e,{utxos:e.utxos.filter(function(e){return!r.has(e.transactionHash)}),transactions:e.transactions.filter(function(e){return!r.has(e.hash)})})}function integrateNewTxs(e,s,r,n){var t=0!==n.length?deleteTxs(s,n):s,a=deriveAddressToPath(e.main.allAddresses,e.change.allAddresses),d=deriveJoined(e.main.newTransactions,e.change.newTransactions),i=(0,_deriveUtxos.deriveUtxos)(e,t,a,d),o=(0,_deriveAnalysis.deriveAnalysis)(d,t.transactions,a),u=deriveUsedAddresses(o,a,e.main.allAddresses,0),c=u.usedAddresses,l=u.unusedAddresses,f=u.lastConfirmed,v=deriveUsedAddresses(o,a,e.change.allAddresses,1),h=o.length>0?o[0].balance:0;if(h!==i.reduce(function(e,s){return s.value+e},0))throw new Error("Inconsistent info.");var A=deriveSentAddresses(o),g=e.change.allAddresses,x=v.usedAddresses.length,_=v.unusedAddresses.length>0;return{utxos:i,transactions:o,usedAddresses:c,unusedAddresses:l,lastConfirmedMain:f,lastConfirmedChange:v.lastConfirmed,changeIndex:x,balance:h,lastBlock:r,sentAddresses:A,changeAddresses:g,allowChange:_,version:s.version}}function deriveAddressToPath(e,s){var r={};return e.forEach(function(e,s){r[e]=[0,s]}),s.forEach(function(e,s){r[e]=[1,s]}),r}function deriveJoined(e,s){var r={};return Object.keys(e).forEach(function(s){r[s]=e[s]}),Object.keys(s).forEach(function(e){r[e]=s[e]}),r}function deriveSentAddresses(e){var s={};return e.forEach(function(e){"sent"===e.type&&e.targets.forEach(function(r){var n=r.address,t=r.i;s[e.hash+":"+t]=n})}),s}function deriveUsedAddresses(e,s,r,n){var t=[],a=-1,d=-1;e.forEach(function(e){(0,_utils.objectValues)(e.myOutputs).forEach(function(r){var i=r.address,o=r.value,u=s[i];if(u[0]===n){var c=u[1];null==t[c]?t[c]=o:t[c]+=o,a<c&&(a=c),e.height&&d<c&&(d=c)}})});for(var i=[],o=0;o<=a;o++){var u=r[o],c=null==t[o]?0:t[o];i.push({address:u,received:c})}for(var l=[],f=a+1;f<=d+GAP_SIZE;f++)l.push(r[f]);return{usedAddresses:i,unusedAddresses:l,lastConfirmed:d}}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var s=1;s<arguments.length;s++){var r=arguments[s];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};exports.integrateNewTxs=integrateNewTxs;var _deriveUtxos=require("./derive-utxos"),_deriveAnalysis=require("./derive-analysis"),_utils=require("../utils"),GAP_SIZE=20;

},{"../utils":115,"./derive-analysis":110,"./derive-utxos":111}],115:[function(require,module,exports){
"use strict";function getInputId(e){var t=e.hash;Array.prototype.reverse.call(t);var r=t.toString("hex");return Array.prototype.reverse.call(t),r}function objectValues(e){return Object.keys(e).map(function(t){return e[t]})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getInputId=getInputId,exports.objectValues=objectValues;

},{}],116:[function(require,module,exports){
"use strict";function deferred(){var e=function(e){},r=function(e){};return{promise:new Promise(function(t,n){e=t,r=n}),resolve:e,reject:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deferred=deferred;

},{}],117:[function(require,module,exports){
"use strict";function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.StreamWithEnding=exports.Stream=exports.Queue=exports.Emitter=void 0;var _createClass=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),_deferred=require("./deferred"),Emitter=exports.Emitter=function(){function t(){_classCallCheck(this,t),this.listeners=[]}return _createClass(t,[{key:"destroy",value:function(){var t=this;this.listeners.forEach(function(n){return t.detach(n.handler)}),this.listeners=[]}},{key:"attach",value:function(t){this.listeners=this.listeners.concat([{handler:t,detached:!1}])}},{key:"detach",value:function(t){this.listeners=this.listeners.filter(function(n){return n.handler!==t||(n.detached=!0,!1)})}},{key:"emit",value:function(t){var n=this;this.listeners.forEach(function(e){e.detached||e.handler(t,function(){n.detach(e.handler)})})}}]),t}(),Queue=exports.Queue=function(){function t(){_classCallCheck(this,t),this.buffer=[],this.takers=[]}return _createClass(t,[{key:"put",value:function(t){this.buffer.push(t),this.shift()}},{key:"take",value:function(t){this.takers.push(t),this.shift()}},{key:"shift",value:function(){if(this.buffer.length>0&&this.takers.length>0){var t=this.buffer.shift();this.takers.shift()(t)}}}]),t}(),Stream=function(){function t(n){var e=this;_classCallCheck(this,t),this.values=new Emitter,this.finish=new Emitter,this.dispose=n(function(t){e.values.emit(t)},function(){e.finish.emit()})}return _createClass(t,null,[{key:"fromEmitter",value:function(n,e){return new t(function(t,i){var r=!1,u=function(n){r||t(n)};return n.attach(u),function(){r=!0,n.detach(u),e()}})}},{key:"fromEmitterFinish",value:function(n,e,i){return new t(function(t,r){var u=!1,a=function(n){u||t(n)};return n.attach(a),e.attach(function(t,e){r(),e(),n.detach(a)}),function(){u=!0,n.detach(a),i()}})}},{key:"fromArray",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(n.forEach(function(n){t(n)}),e())},0),function(){i=!0}})}},{key:"fromPromise",value:function(n){return new t(function(t,e){var i=void 0,r=!1;return n.then(function(n){r||(n.values.attach(function(n){return t(n)}),n.finish.attach(function(){return e()}),i=n)},function(){setTimeout(function(){return e()},1)}),function(){r=!0,null!=i&&i.dispose()}})}},{key:"generate",value:function(n,e,i){return new t(function(t,r){var u=!1;return function n(a){e(a).then(function(e){u||(t(e),i(e)?n(e):r())})}(n),function(){u=!0}})}},{key:"setLater",value:function(){var n=(0,_deferred.deferred)(),e=!1,i=function(t){if(e)throw new Error("Setting stream twice.");e=!0,n.resolve(t)};return{stream:new t(function(t,e){var i=null;return n.promise.then(function(n){i=n,n.values.attach(function(n){t(n)}),n.finish.attach(function(){e()})}),function(){null!=i&&i.dispose()}}),setter:i}}},{key:"simple",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(t(n),setTimeout(function(){i||e()},1))},1),function(){i=!0}})}},{key:"combine",value:function(n){return new t(function(t,e){var i=new Array(n.length),r=new Set,u=new Set;return n.forEach(function(a,c){a.values.attach(function(e){i[c]=e,r.add(c),r.size>=n.length&&t(i)}),a.finish.attach(function(){u.add(c),u.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"combineFlat",value:function(n){return new t(function(t,e){var i=new Set;return n.forEach(function(r,u){r.values.attach(function(n){t(n)}),r.finish.attach(function(){i.add(u),i.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"filterNull",value:function(n){return new t(function(t,e){return n.values.attach(function(n){null!=n&&t(n)}),n.finish.attach(e),n.dispose})}}]),_createClass(t,[{key:"awaitFirst",value:function(){var t=this;return new Promise(function(n,e){var i=function(){},r=function e(r){t.values.detach(e),t.finish.detach(i),n(r)};i=function(){t.values.detach(r),t.finish.detach(i),e(new Error("No first value."))},t.values.attach(r),t.finish.attach(i)})}},{key:"awaitFinish",value:function(){var t=this;return new Promise(function(n){var e=function e(i){t.finish.detach(e),n()};t.finish.attach(e)})}},{key:"awaitLast",value:function(){var t=this;return new Promise(function(n,e){var i=void 0,r=function(t){i=t},u=function u(a){t.values.detach(r),t.finish.detach(u),null==i?e(new Error("No last value.")):n(i)};t.values.attach(r),t.finish.attach(u)})}},{key:"map",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){t(n(e))}),e.finish.attach(i),e.dispose})}},{key:"mapPromise",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"mapPromiseError",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})},function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"filter",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){n(e)&&t(e)}),e.finish.attach(i),e.dispose})}},{key:"reduce",value:function(t,n){var e=this;return new Promise(function(i,r){var u=n;e.values.attach(function(n){u=t(u,n)}),e.finish.attach(function(){i(u)})})}},{key:"concat",value:function(n){var e=this;return new t(function(t,i){var r=0;e.values.attach(function(n){t(n)}),n.values.attach(function(n){t(n)});var u=function(){2===++r&&i()};return e.finish.attach(u),n.finish.attach(u),function(){e.dispose(),n.dispose()}})}}]),t}();exports.Stream=Stream;var StreamWithEnding=exports.StreamWithEnding=function(){function t(){_classCallCheck(this,t)}return _createClass(t,null,[{key:"fromStreamAndPromise",value:function(n,e){var i=new t;i.stream=n;var r=(0,_deferred.deferred)();return i.dispose=function(t){r.reject(t),n.dispose()},n.awaitFinish().then(function(){r.resolve()}),i.ending=r.promise.then(function(){return e}),i}}]),t}();

},{"./deferred":116}]},{},[113])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iYXNlLXgvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpZ2kvbGliL2JpZ2kuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYmlnaS9saWIvY29udmVydC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaWdpL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iaWdpL3BhY2thZ2UuanNvbiIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXA2Ni9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iaXRjb2luLW9wcy9pbmRleC5qc29uIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW4tb3BzL21hcC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy9hZGRyZXNzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL2Jsb2NrLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL2J1ZmZlcnV0aWxzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL2NyeXB0by5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy9lY2RzYS5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy9lY3BhaXIuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvZWNzaWduYXR1cmUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvaGRub2RlLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL25ldHdvcmtzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3NjcmlwdC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy9zY3JpcHRfbnVtYmVyLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvbXVsdGlzaWcvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL211bHRpc2lnL2lucHV0LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy9tdWx0aXNpZy9vdXRwdXQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL251bGxkYXRhLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy9wdWJrZXkvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3B1YmtleS9pbnB1dC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvcHVia2V5L291dHB1dC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvcHVia2V5aGFzaC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvcHVia2V5aGFzaC9pbnB1dC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvcHVia2V5aGFzaC9vdXRwdXQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3NjcmlwdGhhc2gvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3NjcmlwdGhhc2gvaW5wdXQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3NjcmlwdGhhc2gvb3V0cHV0LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy93aXRuZXNzY29tbWl0bWVudC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvd2l0bmVzc2NvbW1pdG1lbnQvb3V0cHV0LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy93aXRuZXNzcHVia2V5aGFzaC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvd2l0bmVzc3B1YmtleWhhc2gvaW5wdXQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3dpdG5lc3NwdWJrZXloYXNoL291dHB1dC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90ZW1wbGF0ZXMvd2l0bmVzc3NjcmlwdGhhc2gvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdGVtcGxhdGVzL3dpdG5lc3NzY3JpcHRoYXNoL2lucHV0LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2JpdGNvaW5qcy1saWItemNhc2gvc3JjL3RlbXBsYXRlcy93aXRuZXNzc2NyaXB0aGFzaC9vdXRwdXQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdHJhbnNhY3Rpb24uanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYml0Y29pbmpzLWxpYi16Y2FzaC9zcmMvdHJhbnNhY3Rpb25fYnVpbGRlci5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iaXRjb2luanMtbGliLXpjYXNoL3NyYy90eXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXJlc29sdmUvZW1wdHkuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYnM1OC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9iczU4Y2hlY2svaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9icm93c2VyLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2hlbHBlcnMuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2Jyb3dzZXIuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvZWN1cnZlL2xpYi9jdXJ2ZS5qcyIsIm5vZGVfbW9kdWxlcy9lY3VydmUvbGliL2N1cnZlcy5qc29uIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2VjdXJ2ZS9saWIvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvZWN1cnZlL2xpYi9uYW1lcy5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9lY3VydmUvbGliL3BvaW50LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9tZXJrbGUtbGliL2Zhc3RSb290LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9wdXNoZGF0YS1iaXRjb2luL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3JhbmRvbWJ5dGVzL2Jyb3dzZXIuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvcmlwZW1kMTYwL2xpYi9yaXBlbWQxNjAuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTEuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy90eXBlZm9yY2UvZXJyb3JzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3R5cGVmb3JjZS9leHRyYS5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy90eXBlZm9yY2UvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvdHlwZWZvcmNlL25hdGl2ZS5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvdmFydWludC1iaXRjb2luL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvbm9kZV9tb2R1bGVzL3dpZi9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy93aWYvbm9kZV9tb2R1bGVzL2Jhc2UteC9pbmRleC5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L25vZGVfbW9kdWxlcy93aWYvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9ub2RlX21vZHVsZXMvd2lmL25vZGVfbW9kdWxlcy9iczU4Y2hlY2svaW5kZXguanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9zcmMvZGlzY292ZXJ5L3dvcmtlci9pbnNpZGUvYmxvY2tzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvc3JjL2Rpc2NvdmVyeS93b3JrZXIvaW5zaWRlL2NoYW5uZWwuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9zcmMvZGlzY292ZXJ5L3dvcmtlci9pbnNpZGUvZGF0ZXMuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9zcmMvZGlzY292ZXJ5L3dvcmtlci9pbnNpZGUvZGVyaXZlLWFuYWx5c2lzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvc3JjL2Rpc2NvdmVyeS93b3JrZXIvaW5zaWRlL2Rlcml2ZS11dHhvcy5qcyIsIi9ob21lL3BlZXBlZS9kZXYvaGQtd2FsbGV0LTMvaGQtd2FsbGV0L3NyYy9kaXNjb3Zlcnkvd29ya2VyL2luc2lkZS9nZXQtY2hhaW4tdHJhbnNhY3Rpb25zLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvc3JjL2Rpc2NvdmVyeS93b3JrZXIvaW5zaWRlL2luZGV4LmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvc3JjL2Rpc2NvdmVyeS93b3JrZXIvaW5zaWRlL2ludGVncmF0ZS1uZXctdHhzLmpzIiwiL2hvbWUvcGVlcGVlL2Rldi9oZC13YWxsZXQtMy9oZC13YWxsZXQvc3JjL2Rpc2NvdmVyeS93b3JrZXIvdXRpbHMuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9zcmMvdXRpbHMvZGVmZXJyZWQuanMiLCIvaG9tZS9wZWVwZWUvZGV2L2hkLXdhbGxldC0zL2hkLXdhbGxldC9zcmMvdXRpbHMvc3RyZWFtLmpzIl0sIm5hbWVzIjpbXSwibWFw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RyxHQUFJLEdBQUssWUFDckMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxZQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxJQUFJLFVBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEVBQUssWUFDckMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxZQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxJQUFJLE9BQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRSxJQUFLLElBQUksWUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssRUFBSyxZQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxJQUFJLFVBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRSxJQUFLLElBQUksWUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssR0FBSyxZQUVyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxHQUFJLFdBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUksWUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssR0FBSyxXQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxJQUFJLFdBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssRUFBSyxVQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxJQUFJLFdBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksRUFBSyxXQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxHQUFJLFlBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksR0FBSyxZQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxHQUFJLFlBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUksVUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksR0FBSyxZQUNyQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxJQUFJLFlBRXBDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUksUUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxZQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxHQUFLLFlBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRSxJQUFLLElBQUksVUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksR0FBSSxZQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxHQUFLLFlBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssSUFBSSxZQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxFQUFLLFdBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxXQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxHQUFLLFVBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUksV0FDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssSUFBSSxXQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxHQUFLLFdBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksV0FFcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksR0FBSSxXQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxHQUFLLFlBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRSxJQUFLLElBQUksWUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxVQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxFQUFLLFlBQ3JDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLElBQUksWUFDcEMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssSUFBSSxTQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxJQUFJLFlBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEVBQUssWUFDckMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLElBQUssSUFBSSxVQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUcsR0FBSSxJQUFJLFlBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRSxJQUFLLEdBQUssWUFDckMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksR0FBSSxXQUNwQyxFQUFJLE9BQU8sRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFFLEVBQUUsSUFBSyxJQUFJLFlBQ3BDLEVBQUksT0FBTyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUUsRUFBRyxHQUFJLEdBQUssV0FDckMsRUFBSSxPQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRSxFQUFHLEdBQUksSUFBSSxXQUVwQyxFQUFJLFNBQVMsRUFBRyxHQUNoQixFQUFJLFNBQVMsRUFBRyxHQUNoQixFQUFJLFNBQVMsRUFBRyxHQUNoQixFQUFJLFNBQVMsRUFBRyxHQUVsQixNQUFPLE9BQU0sRUFBRyxFQUFHLEVBQUcsR0FPeEIsUUFBUyxTQUFRLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUU5QixNQUFPLFVBQVMsUUFBUSxTQUFTLFNBQVMsRUFBRyxHQUFJLFNBQVMsRUFBRyxJQUFLLEdBQUcsR0FFdkUsUUFBUyxRQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWhDLE1BQU8sU0FBUyxFQUFJLEdBQVEsRUFBSyxFQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFbkQsUUFBUyxRQUFPLEVBQUcs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RUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNuRCxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUNsRCxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUNsRCxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUdoRCxJQUNGLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQ3BELEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ3JELEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3BELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBR25ELElBQ0YsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFDckQsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FDcEQsRUFBRyxFQUFH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QUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFVBQVksVUFDcEMsVUFBWSxXQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksVUFDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsVUFBWSxXQUFZLFVBQVksV0FDcEMsVUFBWSxXQUFZLFVBQVksVUFDcEMsVUFBWSxVQUFZLFVBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksV0FDcEMsV0FBWSxXQUFZLFdBQVksV0FDcEMsV0FBWSxVQUFZLFdBQVksWUFHbEMsRUFBSSxHQUFJLE9BQU0sSUFTbEIsVUFBUyxPQUFRLE1BRWpCLE9BQU8sVUFBVSxLQUFPLFdBbUJ0QixNQWxCQSxNQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sVUFDWCxLQUFLLElBQU0sV0FFWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sVUFDWCxLQUFLLElBQU0sV0FDWCxLQUFLLElBQU0sVUFFSixNQXVDVCxPQUFPLFVBQVUsUUFBVSxTQUFVLEdBcUJuQyxJQUFLLEdBcEJELEdBQUksS0FBSyxHQUVULEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJQUNWLEVBQWdCLEVBQVgsS0FBSyxJ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LFNBQVUsR0FDMUIsRUFBTyxJQUdYLElBQUksR0FBWSxXQUVLLE1BRGpCLEdBRUksSUFPUixPQUhBLEdBQVEsT0FBTyxPQUFPLEdBQ3RCLEVBQU0sT0FBTyxPQUFPLEdBRWIsV0FDSCxFQUFRLFVBQ1IsRUFBTSxpQkFNZixJQUdYLFNBQVEsT0FBUyxNQUVqQixJQUFJLGtCQUFtQixRQUFRLGlCQUFtQixXQUM5QyxRQUFTLEtBQ0wsZ0JBQWdCLEtBQU0sR0EwQjFCLE1BdkJBLGNBQWEsRUFBa0IsT0FDM0IsSUFBSyx1QkFDTCxNQUFPLFNBQThCLEVBQUcsR0FDcEMsR0FBSSxHQUFNLEdBQUksRUFDZCxHQUFJLE9BQVMsQ0FFYixJQUFJLElBQU0sRUFBSSxVQUFVLFdBWXhCLE9BWEEsR0FBSSxRQUFVLFNBQVUsR0FDcEIsRUFBSSxPQUFPLEdBQ1gsRUFBRSxXQUVOLEVBQUUsY0FBYyxLQUFLLFdBQ2pCLEVBQUksWUFHUixFQUFJLE9BQVMsRUFBSSxRQUFRLEtBQUssV0FDMUIsTUFBTyxLQUVKLE1BS1IiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG59KCkpO1xuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xufVxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xuICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYnVmKTtcbiAgfVxuICBpZiAoIWFycmJ1Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcbmZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcbiAgfVxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzIHx8ICF1dGlsLmlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcbiAgfVxuICB2YXIgcmF3bmFtZSA9IGdldE5hbWUoc29tZXRoaW5nKTtcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKChhY3R1YWwgPT09IG51bGwgfHwgdHlwZW9mIGFjdHVhbCAhPT0gJ29iamVjdCcpICYmXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuICAvLyBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGUgYXJyYXlzIHRvIGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBjaGVja2VkIGJ5XG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuICAvLyBiaXQgcGF0dGVybnMgYXJlIG5vdCBpZGVudGljYWwuXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgIShhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcbiAgICAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShleHBlY3RlZC5idWZmZXIpKSA9PT0gMDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoYWN0dWFsSW5kZXggPT09IG1lbW9zLmV4cGVjdGVkLmluZGV4T2YoZXhwZWN0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG4gICAgbWVtb3MuZXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG5cbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59XG5cblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIF90cnlCbG9jayhibG9jaykge1xuICB2YXIgZXJyb3I7XG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MoZmFsc2UsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB0aHJvdyBlcnI7IH07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59O1xuIiwiLy8gYmFzZS14IGVuY29kaW5nXG4vLyBGb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvY29pbmpzL2JzNThcbi8vIE9yaWdpbmFsbHkgd3JpdHRlbiBieSBNaWtlIEhlYXJuIGZvciBCaXRjb2luSlxuLy8gQ29weXJpZ2h0IChjKSAyMDExIEdvb2dsZSBJbmNcbi8vIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IFN0ZWZhbiBUaG9tYXNcbi8vIE1lcmdlZCBCdWZmZXIgcmVmYWN0b3JpbmdzIGZyb20gYmFzZTU4LW5hdGl2ZSBieSBTdGVwaGVuIFBhaXJcbi8vIENvcHlyaWdodCAoYykgMjAxMyBCaXRQYXkgSW5jXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZSAoQUxQSEFCRVQpIHtcbiAgdmFyIEFMUEhBQkVUX01BUCA9IHt9XG4gIHZhciBCQVNFID0gQUxQSEFCRVQubGVuZ3RoXG4gIHZhciBMRUFERVIgPSBBTFBIQUJFVC5jaGFyQXQoMClcblxuICAvLyBwcmUtY29tcHV0ZSBsb29rdXAgdGFibGVcbiAgZm9yICh2YXIgeiA9IDA7IHogPCBBTFBIQUJFVC5sZW5ndGg7IHorKykge1xuICAgIHZhciB4ID0gQUxQSEFCRVQuY2hhckF0KHopXG5cbiAgICBpZiAoQUxQSEFCRVRfTUFQW3hdICE9PSB1bmRlZmluZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoeCArICcgaXMgYW1iaWd1b3VzJylcbiAgICBBTFBIQUJFVF9NQVBbeF0gPSB6XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGUgKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gJydcblxuICAgIHZhciBkaWdpdHMgPSBbMF1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gc291cmNlW2ldOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGRpZ2l0c1tqXSA8PCA4XG4gICAgICAgIGRpZ2l0c1tqXSA9IGNhcnJ5ICUgQkFTRVxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGRpZ2l0cy5wdXNoKGNhcnJ5ICUgQkFTRSlcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSB8IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gJydcblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHNvdXJjZVtrXSA9PT0gMCAmJiBrIDwgc291cmNlLmxlbmd0aCAtIDE7ICsraykgc3RyaW5nICs9IEFMUEhBQkVUWzBdXG4gICAgLy8gY29udmVydCBkaWdpdHMgdG8gYSBzdHJpbmdcbiAgICBmb3IgKHZhciBxID0gZGlnaXRzLmxlbmd0aCAtIDE7IHEgPj0gMDsgLS1xKSBzdHJpbmcgKz0gQUxQSEFCRVRbZGlnaXRzW3FdXVxuXG4gICAgcmV0dXJuIHN0cmluZ1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlVW5zYWZlIChzdHJpbmcpIHtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCdWZmZXIoMClcblxuICAgIHZhciBieXRlcyA9IFswXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBBTFBIQUJFVF9NQVBbc3RyaW5nW2ldXVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSB2YWx1ZTsgaiA8IGJ5dGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGJ5dGVzW2pdICogQkFTRVxuICAgICAgICBieXRlc1tqXSA9IGNhcnJ5ICYgMHhmZlxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2FycnkgJiAweGZmKVxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHN0cmluZ1trXSA9PT0gTEVBREVSICYmIGsgPCBzdHJpbmcubGVuZ3RoIC0gMTsgKytrKSB7XG4gICAgICBieXRlcy5wdXNoKDApXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYnl0ZXMucmV2ZXJzZSgpKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZylcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gYnVmZmVyXG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1iYXNlJyArIEJBU0UgKyAnIGNoYXJhY3RlcicpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIHBsYWNlSG9sZGVyc0NvdW50IChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gIC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcbiAgLy8gcmVwcmVzZW50IG9uZSBieXRlXG4gIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG4gIHJldHVybiBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICAvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgcmV0dXJuIGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cbiAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG5mdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJpZ0ludGVnZXIpKVxuICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihhLCBiLCBjKVxuXG4gIGlmIChhICE9IG51bGwpIHtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsIGIsIGMpXG4gICAgZWxzZSBpZiAoYiA9PSBudWxsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHRoaXMuZnJvbVN0cmluZyhhLCAyNTYpXG4gICAgZWxzZSB0aGlzLmZyb21TdHJpbmcoYSwgYilcbiAgfVxufVxuXG52YXIgcHJvdG8gPSBCaWdJbnRlZ2VyLnByb3RvdHlwZVxuXG4vLyBkdWNrLXR5cGVkIGlzQmlnSW50ZWdlclxucHJvdG8uX19iaWdpID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuQmlnSW50ZWdlci5pc0JpZ0ludGVnZXIgPSBmdW5jdGlvbiAob2JqLCBjaGVja192ZXIpIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19iaWdpICYmICghY2hlY2tfdmVyIHx8IG9iai5fX2JpZ2kgPT09IHByb3RvLl9fYmlnaSlcbn1cblxuLy8gQml0cyBwZXIgZGlnaXRcbnZhciBkYml0c1xuXG4vLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4vLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuXG4vLyBjIDwgMypkdmFsdWUsIHggPCAyKmR2YWx1ZSwgdGhpc19pIDwgZHZhbHVlXG4vLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXG4vLyBhbTE6IHVzZSBhIHNpbmdsZSBtdWx0IGFuZCBkaXZpZGUgdG8gZ2V0IHRoZSBoaWdoIGJpdHMsXG4vLyBtYXggZGlnaXQgYml0cyBzaG91bGQgYmUgMjYgYmVjYXVzZVxuLy8gbWF4IGludGVybmFsIHZhbHVlID0gMipkdmFsdWVeMi0yKmR2YWx1ZSAoPCAyXjUzKVxuZnVuY3Rpb24gYW0xKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGNcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKVxuICAgIHdbaisrXSA9IHYgJiAweDNmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4vLyBNYXggZGlnaXQgYml0cyBzaG91bGQgYmUgPD0gMzAgYmVjYXVzZSB3ZSBkbyBiaXR3aXNlIG9wc1xuLy8gb24gdmFsdWVzIHVwIHRvIDIqaGR2YWx1ZV4yLWhkdmFsdWUtMSAoPCAyXjMxKVxuZnVuY3Rpb24gYW0yKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4N2ZmZixcbiAgICB4aCA9IHggPj4gMTVcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHg3ZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTVcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDdmZmYpIDw8IDE1KSArIHdbal0gKyAoYyAmIDB4M2ZmZmZmZmYpXG4gICAgYyA9IChsID4+PiAzMCkgKyAobSA+Pj4gMTUpICsgeGggKiBoICsgKGMgPj4+IDMwKVxuICAgIHdbaisrXSA9IGwgJiAweDNmZmZmZmZmXG4gIH1cbiAgcmV0dXJuIGNcbn1cbi8vIEFsdGVybmF0ZWx5LCBzZXQgbWF4IGRpZ2l0IGJpdHMgdG8gMjggc2luY2Ugc29tZVxuLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuZnVuY3Rpb24gYW0zKGksIHgsIHcsIGosIGMsIG4pIHtcbiAgdmFyIHhsID0geCAmIDB4M2ZmZixcbiAgICB4aCA9IHggPj4gMTRcbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgdmFyIGwgPSB0aGlzW2ldICYgMHgzZmZmXG4gICAgdmFyIGggPSB0aGlzW2krK10gPj4gMTRcbiAgICB2YXIgbSA9IHhoICogbCArIGggKiB4bFxuICAgIGwgPSB4bCAqIGwgKyAoKG0gJiAweDNmZmYpIDw8IDE0KSArIHdbal0gKyBjXG4gICAgYyA9IChsID4+IDI4KSArIChtID4+IDE0KSArIHhoICogaFxuICAgIHdbaisrXSA9IGwgJiAweGZmZmZmZmZcbiAgfVxuICByZXR1cm4gY1xufVxuXG4vLyB3dGY/XG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMVxuZGJpdHMgPSAyNlxuXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5EQiA9IGRiaXRzXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5ETSA9ICgoMSA8PCBkYml0cykgLSAxKVxudmFyIERWID0gQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMSA8PCBkYml0cylcblxudmFyIEJJX0ZQID0gNTJcbkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQIC0gZGJpdHNcbkJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMiAqIGRiaXRzIC0gQklfRlBcblxuLy8gRGlnaXQgY29udmVyc2lvbnNcbnZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJcbnZhciBCSV9SQyA9IG5ldyBBcnJheSgpXG52YXIgcnIsIHZ2XG5yciA9IFwiMFwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2XG5yciA9IFwiYVwiLmNoYXJDb2RlQXQoMClcbmZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2dlxucnIgPSBcIkFcIi5jaGFyQ29kZUF0KDApXG5mb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnZcblxuZnVuY3Rpb24gaW50MmNoYXIobikge1xuICByZXR1cm4gQklfUk0uY2hhckF0KG4pXG59XG5cbmZ1bmN0aW9uIGludEF0KHMsIGkpIHtcbiAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldXG4gIHJldHVybiAoYyA9PSBudWxsKSA/IC0xIDogY1xufVxuXG4vLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuZnVuY3Rpb24gYm5wQ29weVRvKHIpIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gdGhpc1tpXVxuICByLnQgPSB0aGlzLnRcbiAgci5zID0gdGhpcy5zXG59XG5cbi8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIGludGVnZXIgdmFsdWUgeCwgLURWIDw9IHggPCBEVlxuZnVuY3Rpb24gYm5wRnJvbUludCh4KSB7XG4gIHRoaXMudCA9IDFcbiAgdGhpcy5zID0gKHggPCAwKSA/IC0xIDogMFxuICBpZiAoeCA+IDApIHRoaXNbMF0gPSB4XG4gIGVsc2UgaWYgKHggPCAtMSkgdGhpc1swXSA9IHggKyBEVlxuICBlbHNlIHRoaXMudCA9IDBcbn1cblxuLy8gcmV0dXJuIGJpZ2ludCBpbml0aWFsaXplZCB0byB2YWx1ZVxuZnVuY3Rpb24gbmJ2KGkpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHIuZnJvbUludChpKVxuICByZXR1cm4gclxufVxuXG4vLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5mdW5jdGlvbiBibnBGcm9tU3RyaW5nKHMsIGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgdmFyIGtcbiAgaWYgKGIgPT0gMTYpIGsgPSA0XG4gIGVsc2UgaWYgKGIgPT0gOCkgayA9IDNcbiAgZWxzZSBpZiAoYiA9PSAyNTYpIGsgPSA4OyAvLyBieXRlIGFycmF5XG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHtcbiAgICBzZWxmLmZyb21SYWRpeChzLCBiKVxuICAgIHJldHVyblxuICB9XG4gIHNlbGYudCA9IDBcbiAgc2VsZi5zID0gMFxuICB2YXIgaSA9IHMubGVuZ3RoLFxuICAgIG1pID0gZmFsc2UsXG4gICAgc2ggPSAwXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHZhciB4ID0gKGsgPT0gOCkgPyBzW2ldICYgMHhmZiA6IGludEF0KHMsIGkpXG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBpZiAocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgbWkgPSBmYWxzZVxuICAgIGlmIChzaCA9PSAwKVxuICAgICAgc2VsZltzZWxmLnQrK10gPSB4XG4gICAgZWxzZSBpZiAoc2ggKyBrID4gc2VsZi5EQikge1xuICAgICAgc2VsZltzZWxmLnQgLSAxXSB8PSAoeCAmICgoMSA8PCAoc2VsZi5EQiAtIHNoKSkgLSAxKSkgPDwgc2hcbiAgICAgIHNlbGZbc2VsZi50KytdID0gKHggPj4gKHNlbGYuREIgLSBzaCkpXG4gICAgfSBlbHNlXG4gICAgICBzZWxmW3NlbGYudCAtIDFdIHw9IHggPDwgc2hcbiAgICBzaCArPSBrXG4gICAgaWYgKHNoID49IHNlbGYuREIpIHNoIC09IHNlbGYuREJcbiAgfVxuICBpZiAoayA9PSA4ICYmIChzWzBdICYgMHg4MCkgIT0gMCkge1xuICAgIHNlbGYucyA9IC0xXG4gICAgaWYgKHNoID4gMCkgc2VsZltzZWxmLnQgLSAxXSB8PSAoKDEgPDwgKHNlbGYuREIgLSBzaCkpIC0gMSkgPDwgc2hcbiAgfVxuICBzZWxmLmNsYW1wKClcbiAgaWYgKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oc2VsZiwgc2VsZilcbn1cblxuLy8gKHByb3RlY3RlZCkgY2xhbXAgb2ZmIGV4Y2VzcyBoaWdoIHdvcmRzXG5mdW5jdGlvbiBibnBDbGFtcCgpIHtcbiAgdmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNXG4gIHdoaWxlICh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50IC0gMV0gPT0gYyktLXRoaXMudFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIGdpdmVuIHJhZGl4XG5mdW5jdGlvbiBiblRvU3RyaW5nKGIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLnMgPCAwKSByZXR1cm4gXCItXCIgKyBzZWxmLm5lZ2F0ZSgpXG4gICAgLnRvU3RyaW5nKGIpXG4gIHZhciBrXG4gIGlmIChiID09IDE2KSBrID0gNFxuICBlbHNlIGlmIChiID09IDgpIGsgPSAzXG4gIGVsc2UgaWYgKGIgPT0gMikgayA9IDFcbiAgZWxzZSBpZiAoYiA9PSAzMikgayA9IDVcbiAgZWxzZSBpZiAoYiA9PSA0KSBrID0gMlxuICBlbHNlIHJldHVybiBzZWxmLnRvUmFkaXgoYilcbiAgdmFyIGttID0gKDEgPDwgaykgLSAxLFxuICAgIGQsIG0gPSBmYWxzZSxcbiAgICByID0gXCJcIixcbiAgICBpID0gc2VsZi50XG4gIHZhciBwID0gc2VsZi5EQiAtIChpICogc2VsZi5EQikgJSBrXG4gIGlmIChpLS0gPiAwKSB7XG4gICAgaWYgKHAgPCBzZWxmLkRCICYmIChkID0gc2VsZltpXSA+PiBwKSA+IDApIHtcbiAgICAgIG0gPSB0cnVlXG4gICAgICByID0gaW50MmNoYXIoZClcbiAgICB9XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgaWYgKHAgPCBrKSB7XG4gICAgICAgIGQgPSAoc2VsZltpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoayAtIHApXG4gICAgICAgIGQgfD0gc2VsZlstLWldID4+IChwICs9IHNlbGYuREIgLSBrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZCA9IChzZWxmW2ldID4+IChwIC09IGspKSAmIGttXG4gICAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgICBwICs9IHNlbGYuREJcbiAgICAgICAgICAtLWlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGQgPiAwKSBtID0gdHJ1ZVxuICAgICAgaWYgKG0pIHIgKz0gaW50MmNoYXIoZClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG0gPyByIDogXCIwXCJcbn1cblxuLy8gKHB1YmxpYykgLXRoaXNcbmZ1bmN0aW9uIGJuTmVnYXRlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHx0aGlzfFxuZnVuY3Rpb24gYm5BYnMoKSB7XG4gIHJldHVybiAodGhpcy5zIDwgMCkgPyB0aGlzLm5lZ2F0ZSgpIDogdGhpc1xufVxuXG4vLyAocHVibGljKSByZXR1cm4gKyBpZiB0aGlzID4gYSwgLSBpZiB0aGlzIDwgYSwgMCBpZiBlcXVhbFxuZnVuY3Rpb24gYm5Db21wYXJlVG8oYSkge1xuICB2YXIgciA9IHRoaXMucyAtIGEuc1xuICBpZiAociAhPSAwKSByZXR1cm4gclxuICB2YXIgaSA9IHRoaXMudFxuICByID0gaSAtIGEudFxuICBpZiAociAhPSAwKSByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByXG4gIHdoaWxlICgtLWkgPj0gMClcbiAgICBpZiAoKHIgPSB0aGlzW2ldIC0gYVtpXSkgIT0gMCkgcmV0dXJuIHJcbiAgcmV0dXJuIDBcbn1cblxuLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHhcbmZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgdmFyIHIgPSAxLFxuICAgIHRcbiAgaWYgKCh0ID0geCA+Pj4gMTYpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMTZcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDgpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gOFxuICB9XG4gIGlmICgodCA9IHggPj4gNCkgIT0gMCkge1xuICAgIHggPSB0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh0ID0geCA+PiAyKSAhPSAwKSB7XG4gICAgeCA9IHRcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHQgPSB4ID4+IDEpICE9IDApIHtcbiAgICB4ID0gdFxuICAgIHIgKz0gMVxuICB9XG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHJldHVybiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQml0TGVuZ3RoKCkge1xuICBpZiAodGhpcy50IDw9IDApIHJldHVybiAwXG4gIHJldHVybiB0aGlzLkRCICogKHRoaXMudCAtIDEpICsgbmJpdHModGhpc1t0aGlzLnQgLSAxXSBeICh0aGlzLnMgJiB0aGlzLkRNKSlcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgaW4gXCJ0aGlzXCJcbmZ1bmN0aW9uIGJuQnl0ZUxlbmd0aCgpIHtcbiAgcmV0dXJuIHRoaXMuYml0TGVuZ3RoKCkgPj4gM1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuKkRCXG5mdW5jdGlvbiBibnBETFNoaWZ0VG8obiwgcikge1xuICB2YXIgaVxuICBmb3IgKGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkgcltpICsgbl0gPSB0aGlzW2ldXG4gIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkgcltpXSA9IDBcbiAgci50ID0gdGhpcy50ICsgblxuICByLnMgPSB0aGlzLnNcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gbipEQlxuZnVuY3Rpb24gYm5wRFJTaGlmdFRvKG4sIHIpIHtcbiAgZm9yICh2YXIgaSA9IG47IGkgPCB0aGlzLnQ7ICsraSkgcltpIC0gbl0gPSB0aGlzW2ldXG4gIHIudCA9IE1hdGgubWF4KHRoaXMudCAtIG4sIDApXG4gIHIucyA9IHRoaXMuc1xufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5mdW5jdGlvbiBibnBMU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGNicykgLSAxXG4gIHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHNlbGYuREIpLFxuICAgIGMgPSAoc2VsZi5zIDw8IGJzKSAmIHNlbGYuRE0sXG4gICAgaVxuICBmb3IgKGkgPSBzZWxmLnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgIHJbaSArIGRzICsgMV0gPSAoc2VsZltpXSA+PiBjYnMpIHwgY1xuICAgIGMgPSAoc2VsZltpXSAmIGJtKSA8PCBic1xuICB9XG4gIGZvciAoaSA9IGRzIC0gMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSAwXG4gIHJbZHNdID0gY1xuICByLnQgPSBzZWxmLnQgKyBkcyArIDFcbiAgci5zID0gc2VsZi5zXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuXG5mdW5jdGlvbiBibnBSU2hpZnRUbyhuLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByLnMgPSBzZWxmLnNcbiAgdmFyIGRzID0gTWF0aC5mbG9vcihuIC8gc2VsZi5EQilcbiAgaWYgKGRzID49IHNlbGYudCkge1xuICAgIHIudCA9IDBcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnMgPSBuICUgc2VsZi5EQlxuICB2YXIgY2JzID0gc2VsZi5EQiAtIGJzXG4gIHZhciBibSA9ICgxIDw8IGJzKSAtIDFcbiAgclswXSA9IHNlbGZbZHNdID4+IGJzXG4gIGZvciAodmFyIGkgPSBkcyArIDE7IGkgPCBzZWxmLnQ7ICsraSkge1xuICAgIHJbaSAtIGRzIC0gMV0gfD0gKHNlbGZbaV0gJiBibSkgPDwgY2JzXG4gICAgcltpIC0gZHNdID0gc2VsZltpXSA+PiBic1xuICB9XG4gIGlmIChicyA+IDApIHJbc2VsZi50IC0gZHMgLSAxXSB8PSAoc2VsZi5zICYgYm0pIDw8IGNic1xuICByLnQgPSBzZWxmLnQgLSBkc1xuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG5mdW5jdGlvbiBibnBTdWJUbyhhLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gLSBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgLT0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjIC09IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgLT0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICBlbHNlIGlmIChjID4gMCkgcltpKytdID0gY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVRvKGEsIHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpLFxuICAgIHkgPSBhLmFicygpXG4gIHZhciBpID0geC50XG4gIHIudCA9IGkgKyB5LnRcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgeS50OyArK2kpIHJbaSArIHgudF0gPSB4LmFtKDAsIHlbaV0sIHIsIGksIDAsIHgudClcbiAgci5zID0gMFxuICByLmNsYW1wKClcbiAgaWYgKHRoaXMucyAhPSBhLnMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpc14yLCByICE9IHRoaXMgKEhBQyAxNC4xNilcbmZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHtcbiAgdmFyIHggPSB0aGlzLmFicygpXG4gIHZhciBpID0gci50ID0gMiAqIHgudFxuICB3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwXG4gIGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpIHtcbiAgICB2YXIgYyA9IHguYW0oaSwgeFtpXSwgciwgMiAqIGksIDAsIDEpXG4gICAgaWYgKChyW2kgKyB4LnRdICs9IHguYW0oaSArIDEsIDIgKiB4W2ldLCByLCAyICogaSArIDEsIGMsIHgudCAtIGkgLSAxKSkgPj0geC5EVikge1xuICAgICAgcltpICsgeC50XSAtPSB4LkRWXG4gICAgICByW2kgKyB4LnQgKyAxXSA9IDFcbiAgICB9XG4gIH1cbiAgaWYgKHIudCA+IDApIHJbci50IC0gMV0gKz0geC5hbShpLCB4W2ldLCByLCAyICogaSwgMCwgMSlcbiAgci5zID0gMFxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgZGl2aWRlIHRoaXMgYnkgbSwgcXVvdGllbnQgYW5kIHJlbWFpbmRlciB0byBxLCByIChIQUMgMTQuMjApXG4vLyByICE9IHEsIHRoaXMgIT0gbS4gIHEgb3IgciBtYXkgYmUgbnVsbC5cbmZ1bmN0aW9uIGJucERpdlJlbVRvKG0sIHEsIHIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwbSA9IG0uYWJzKClcbiAgaWYgKHBtLnQgPD0gMCkgcmV0dXJuXG4gIHZhciBwdCA9IHNlbGYuYWJzKClcbiAgaWYgKHB0LnQgPCBwbS50KSB7XG4gICAgaWYgKHEgIT0gbnVsbCkgcS5mcm9tSW50KDApXG4gICAgaWYgKHIgIT0gbnVsbCkgc2VsZi5jb3B5VG8ocilcbiAgICByZXR1cm5cbiAgfVxuICBpZiAociA9PSBudWxsKSByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB2YXIgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdHMgPSBzZWxmLnMsXG4gICAgbXMgPSBtLnNcbiAgdmFyIG5zaCA9IHNlbGYuREIgLSBuYml0cyhwbVtwbS50IC0gMV0pOyAvLyBub3JtYWxpemUgbW9kdWx1c1xuICBpZiAobnNoID4gMCkge1xuICAgIHBtLmxTaGlmdFRvKG5zaCwgeSlcbiAgICBwdC5sU2hpZnRUbyhuc2gsIHIpXG4gIH0gZWxzZSB7XG4gICAgcG0uY29weVRvKHkpXG4gICAgcHQuY29weVRvKHIpXG4gIH1cbiAgdmFyIHlzID0geS50XG4gIHZhciB5MCA9IHlbeXMgLSAxXVxuICBpZiAoeTAgPT0gMCkgcmV0dXJuXG4gIHZhciB5dCA9IHkwICogKDEgPDwgc2VsZi5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gc2VsZi5GMiA6IDApXG4gIHZhciBkMSA9IHNlbGYuRlYgLyB5dCxcbiAgICBkMiA9ICgxIDw8IHNlbGYuRjEpIC8geXQsXG4gICAgZSA9IDEgPDwgc2VsZi5GMlxuICB2YXIgaSA9IHIudCxcbiAgICBqID0gaSAtIHlzLFxuICAgIHQgPSAocSA9PSBudWxsKSA/IG5ldyBCaWdJbnRlZ2VyKCkgOiBxXG4gIHkuZGxTaGlmdFRvKGosIHQpXG4gIGlmIChyLmNvbXBhcmVUbyh0KSA+PSAwKSB7XG4gICAgcltyLnQrK10gPSAxXG4gICAgci5zdWJUbyh0LCByKVxuICB9XG4gIEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyh5cywgdClcbiAgdC5zdWJUbyh5LCB5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcbiAgd2hpbGUgKHkudCA8IHlzKSB5W3kudCsrXSA9IDBcbiAgd2hpbGUgKC0taiA+PSAwKSB7XG4gICAgLy8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcbiAgICB2YXIgcWQgPSAoclstLWldID09IHkwKSA/IHNlbGYuRE0gOiBNYXRoLmZsb29yKHJbaV0gKiBkMSArIChyW2kgLSAxXSArIGUpICogZDIpXG4gICAgaWYgKChyW2ldICs9IHkuYW0oMCwgcWQsIHIsIGosIDAsIHlzKSkgPCBxZCkgeyAvLyBUcnkgaXQgb3V0XG4gICAgICB5LmRsU2hpZnRUbyhqLCB0KVxuICAgICAgci5zdWJUbyh0LCByKVxuICAgICAgd2hpbGUgKHJbaV0gPCAtLXFkKSByLnN1YlRvKHQsIHIpXG4gICAgfVxuICB9XG4gIGlmIChxICE9IG51bGwpIHtcbiAgICByLmRyU2hpZnRUbyh5cywgcSlcbiAgICBpZiAodHMgIT0gbXMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhxLCBxKVxuICB9XG4gIHIudCA9IHlzXG4gIHIuY2xhbXAoKVxuICBpZiAobnNoID4gMCkgci5yU2hpZnRUbyhuc2gsIHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcbiAgaWYgKHRzIDwgMCkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgbW9kIGFcbmZ1bmN0aW9uIGJuTW9kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYWJzKClcbiAgICAuZGl2UmVtVG8oYSwgbnVsbCwgcilcbiAgaWYgKHRoaXMucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIGEuc3ViVG8ociwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gTW9kdWxhciByZWR1Y3Rpb24gdXNpbmcgXCJjbGFzc2ljXCIgYWxnb3JpdGhtXG5mdW5jdGlvbiBDbGFzc2ljKG0pIHtcbiAgdGhpcy5tID0gbVxufVxuXG5mdW5jdGlvbiBjQ29udmVydCh4KSB7XG4gIGlmICh4LnMgPCAwIHx8IHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgcmV0dXJuIHgubW9kKHRoaXMubSlcbiAgZWxzZSByZXR1cm4geFxufVxuXG5mdW5jdGlvbiBjUmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gY1JlZHVjZSh4KSB7XG4gIHguZGl2UmVtVG8odGhpcy5tLCBudWxsLCB4KVxufVxuXG5mdW5jdGlvbiBjTXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuZnVuY3Rpb24gY1NxclRvKHgsIHIpIHtcbiAgeC5zcXVhcmVUbyhyKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5DbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0ID0gY0NvbnZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGNSZXZlcnRcbkNsYXNzaWMucHJvdG90eXBlLnJlZHVjZSA9IGNSZWR1Y2VcbkNsYXNzaWMucHJvdG90eXBlLm11bFRvID0gY011bFRvXG5DbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuLy8ganVzdGlmaWNhdGlvbjpcbi8vICAgICAgICAgeHkgPT0gMSAobW9kIG0pXG4vLyAgICAgICAgIHh5ID0gIDEra21cbi8vICAgeHkoMi14eSkgPSAoMStrbSkoMS1rbSlcbi8vIHhbeSgyLXh5KV0gPSAxLWteMm1eMlxuLy8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuLy8gaWYgeSBpcyAxL3ggbW9kIG0sIHRoZW4geSgyLXh5KSBpcyAxL3ggbW9kIG1eMlxuLy8gc2hvdWxkIHJlZHVjZSB4IGFuZCB5KDIteHkpIGJ5IG1eMiBhdCBlYWNoIHN0ZXAgdG8ga2VlcCBzaXplIGJvdW5kZWQuXG4vLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG5mdW5jdGlvbiBibnBJbnZEaWdpdCgpIHtcbiAgaWYgKHRoaXMudCA8IDEpIHJldHVybiAwXG4gIHZhciB4ID0gdGhpc1swXVxuICBpZiAoKHggJiAxKSA9PSAwKSByZXR1cm4gMFxuICB2YXIgeSA9IHggJiAzOyAvLyB5ID09IDEveCBtb2QgMl4yXG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGYpICogeSkpICYgMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG4gIHkgPSAoeSAqICgyIC0gKHggJiAweGZmKSAqIHkpKSAmIDB4ZmY7IC8vIHkgPT0gMS94IG1vZCAyXjhcbiAgeSA9ICh5ICogKDIgLSAoKCh4ICYgMHhmZmZmKSAqIHkpICYgMHhmZmZmKSkpICYgMHhmZmZmOyAvLyB5ID09IDEveCBtb2QgMl4xNlxuICAvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHlcbiAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG4gIHkgPSAoeSAqICgyIC0geCAqIHkgJSB0aGlzLkRWKSkgJSB0aGlzLkRWOyAvLyB5ID09IDEveCBtb2QgMl5kYml0c1xuICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVlxuICByZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXlcbn1cblxuLy8gTW9udGdvbWVyeSByZWR1Y3Rpb25cbmZ1bmN0aW9uIE1vbnRnb21lcnkobSkge1xuICB0aGlzLm0gPSBtXG4gIHRoaXMubXAgPSBtLmludkRpZ2l0KClcbiAgdGhpcy5tcGwgPSB0aGlzLm1wICYgMHg3ZmZmXG4gIHRoaXMubXBoID0gdGhpcy5tcCA+PiAxNVxuICB0aGlzLnVtID0gKDEgPDwgKG0uREIgLSAxNSkpIC0gMVxuICB0aGlzLm10MiA9IDIgKiBtLnRcbn1cblxuLy8geFIgbW9kIG1cbmZ1bmN0aW9uIG1vbnRDb252ZXJ0KHgpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHguYWJzKClcbiAgICAuZGxTaGlmdFRvKHRoaXMubS50LCByKVxuICByLmRpdlJlbVRvKHRoaXMubSwgbnVsbCwgcilcbiAgaWYgKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLCByKVxuICByZXR1cm4gclxufVxuXG4vLyB4L1IgbW9kIG1cbmZ1bmN0aW9uIG1vbnRSZXZlcnQoeCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgeC5jb3B5VG8ocilcbiAgdGhpcy5yZWR1Y2UocilcbiAgcmV0dXJuIHJcbn1cblxuLy8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7XG4gIHdoaWxlICh4LnQgPD0gdGhpcy5tdDIpIC8vIHBhZCB4IHNvIGFtIGhhcyBlbm91Z2ggcm9vbSBsYXRlclxuICAgIHhbeC50KytdID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpIHtcbiAgICAvLyBmYXN0ZXIgd2F5IG9mIGNhbGN1bGF0aW5nIHUwID0geFtpXSptcCBtb2QgRFZcbiAgICB2YXIgaiA9IHhbaV0gJiAweDdmZmZcbiAgICB2YXIgdTAgPSAoaiAqIHRoaXMubXBsICsgKCgoaiAqIHRoaXMubXBoICsgKHhbaV0gPj4gMTUpICogdGhpcy5tcGwpICYgdGhpcy51bSkgPDwgMTUpKSAmIHguRE1cbiAgICAvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcbiAgICBqID0gaSArIHRoaXMubS50XG4gICAgeFtqXSArPSB0aGlzLm0uYW0oMCwgdTAsIHgsIGksIDAsIHRoaXMubS50KVxuICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgIHdoaWxlICh4W2pdID49IHguRFYpIHtcbiAgICAgIHhbal0gLT0geC5EVlxuICAgICAgeFsrK2pdKytcbiAgICB9XG4gIH1cbiAgeC5jbGFtcCgpXG4gIHguZHJTaGlmdFRvKHRoaXMubS50LCB4KVxuICBpZiAoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSwgeClcbn1cblxuLy8gciA9IFwieF4yL1IgbW9kIG1cIjsgeCAhPSByXG5mdW5jdGlvbiBtb250U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbmZ1bmN0aW9uIG1vbnRNdWxUbyh4LCB5LCByKSB7XG4gIHgubXVsdGlwbHlUbyh5LCByKVxuICB0aGlzLnJlZHVjZShyKVxufVxuXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5jb252ZXJ0ID0gbW9udENvbnZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJldmVydCA9IG1vbnRSZXZlcnRcbk1vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZSA9IG1vbnRSZWR1Y2Vcbk1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gbW9udE11bFRvXG5Nb250Z29tZXJ5LnByb3RvdHlwZS5zcXJUbyA9IG1vbnRTcXJUb1xuXG4vLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW5cbmZ1bmN0aW9uIGJucElzRXZlbigpIHtcbiAgcmV0dXJuICgodGhpcy50ID4gMCkgPyAodGhpc1swXSAmIDEpIDogdGhpcy5zKSA9PSAwXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXNeZSwgZSA8IDJeMzIsIGRvaW5nIHNxciBhbmQgbXVsIHdpdGggXCJyXCIgKEhBQyAxNC43OSlcbmZ1bmN0aW9uIGJucEV4cChlLCB6KSB7XG4gIGlmIChlID4gMHhmZmZmZmZmZiB8fCBlIDwgMSkgcmV0dXJuIEJpZ0ludGVnZXIuT05FXG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgZyA9IHouY29udmVydCh0aGlzKSxcbiAgICBpID0gbmJpdHMoZSkgLSAxXG4gIGcuY29weVRvKHIpXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIHouc3FyVG8ociwgcjIpXG4gICAgaWYgKChlICYgKDEgPDwgaSkpID4gMCkgei5tdWxUbyhyMiwgZywgcilcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbmZ1bmN0aW9uIGJuTW9kUG93SW50KGUsIG0pIHtcbiAgdmFyIHpcbiAgaWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pXG4gIGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pXG4gIHJldHVybiB0aGlzLmV4cChlLCB6KVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNvcHlUbyA9IGJucENvcHlUb1xucHJvdG8uZnJvbUludCA9IGJucEZyb21JbnRcbnByb3RvLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nXG5wcm90by5jbGFtcCA9IGJucENsYW1wXG5wcm90by5kbFNoaWZ0VG8gPSBibnBETFNoaWZ0VG9cbnByb3RvLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUb1xucHJvdG8ubFNoaWZ0VG8gPSBibnBMU2hpZnRUb1xucHJvdG8uclNoaWZ0VG8gPSBibnBSU2hpZnRUb1xucHJvdG8uc3ViVG8gPSBibnBTdWJUb1xucHJvdG8ubXVsdGlwbHlUbyA9IGJucE11bHRpcGx5VG9cbnByb3RvLnNxdWFyZVRvID0gYm5wU3F1YXJlVG9cbnByb3RvLmRpdlJlbVRvID0gYm5wRGl2UmVtVG9cbnByb3RvLmludkRpZ2l0ID0gYm5wSW52RGlnaXRcbnByb3RvLmlzRXZlbiA9IGJucElzRXZlblxucHJvdG8uZXhwID0gYm5wRXhwXG5cbi8vIHB1YmxpY1xucHJvdG8udG9TdHJpbmcgPSBiblRvU3RyaW5nXG5wcm90by5uZWdhdGUgPSBibk5lZ2F0ZVxucHJvdG8uYWJzID0gYm5BYnNcbnByb3RvLmNvbXBhcmVUbyA9IGJuQ29tcGFyZVRvXG5wcm90by5iaXRMZW5ndGggPSBibkJpdExlbmd0aFxucHJvdG8uYnl0ZUxlbmd0aCA9IGJuQnl0ZUxlbmd0aFxucHJvdG8ubW9kID0gYm5Nb2RcbnByb3RvLm1vZFBvd0ludCA9IGJuTW9kUG93SW50XG5cbi8vIChwdWJsaWMpXG5mdW5jdGlvbiBibkNsb25lKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5jb3B5VG8ocilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbmZ1bmN0aW9uIGJuSW50VmFsdWUoKSB7XG4gIGlmICh0aGlzLnMgPCAwKSB7XG4gICAgaWYgKHRoaXMudCA9PSAxKSByZXR1cm4gdGhpc1swXSAtIHRoaXMuRFZcbiAgICBlbHNlIGlmICh0aGlzLnQgPT0gMCkgcmV0dXJuIC0xXG4gIH0gZWxzZSBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdXG4gIGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gMFxuICAvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuICByZXR1cm4gKCh0aGlzWzFdICYgKCgxIDw8ICgzMiAtIHRoaXMuREIpKSAtIDEpKSA8PCB0aGlzLkRCKSB8IHRoaXNbMF1cbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbmZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDI0KSA+PiAyNFxufVxuXG4vLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuZnVuY3Rpb24gYm5TaG9ydFZhbHVlKCkge1xuICByZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDE2KSA+PiAxNlxufVxuXG4vLyAocHJvdGVjdGVkKSByZXR1cm4geCBzLnQuIHJeeCA8IERWXG5mdW5jdGlvbiBibnBDaHVua1NpemUocikge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMiAqIHRoaXMuREIgLyBNYXRoLmxvZyhyKSlcbn1cblxuLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbmZ1bmN0aW9uIGJuU2lnTnVtKCkge1xuICBpZiAodGhpcy5zIDwgMCkgcmV0dXJuIC0xXG4gIGVsc2UgaWYgKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMFxuICBlbHNlIHJldHVybiAxXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5mdW5jdGlvbiBibnBUb1JhZGl4KGIpIHtcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIGlmICh0aGlzLnNpZ251bSgpID09IDAgfHwgYiA8IDIgfHwgYiA+IDM2KSByZXR1cm4gXCIwXCJcbiAgdmFyIGNzID0gdGhpcy5jaHVua1NpemUoYilcbiAgdmFyIGEgPSBNYXRoLnBvdyhiLCBjcylcbiAgdmFyIGQgPSBuYnYoYSksXG4gICAgeSA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgeiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgciA9IFwiXCJcbiAgdGhpcy5kaXZSZW1UbyhkLCB5LCB6KVxuICB3aGlsZSAoeS5zaWdudW0oKSA+IDApIHtcbiAgICByID0gKGEgKyB6LmludFZhbHVlKCkpXG4gICAgICAudG9TdHJpbmcoYilcbiAgICAgIC5zdWJzdHIoMSkgKyByXG4gICAgeS5kaXZSZW1UbyhkLCB5LCB6KVxuICB9XG4gIHJldHVybiB6LmludFZhbHVlKClcbiAgICAudG9TdHJpbmcoYikgKyByXG59XG5cbi8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbmZ1bmN0aW9uIGJucEZyb21SYWRpeChzLCBiKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLmZyb21JbnQoMClcbiAgaWYgKGIgPT0gbnVsbCkgYiA9IDEwXG4gIHZhciBjcyA9IHNlbGYuY2h1bmtTaXplKGIpXG4gIHZhciBkID0gTWF0aC5wb3coYiwgY3MpLFxuICAgIG1pID0gZmFsc2UsXG4gICAgaiA9IDAsXG4gICAgdyA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHggPSBpbnRBdChzLCBpKVxuICAgIGlmICh4IDwgMCkge1xuICAgICAgaWYgKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHNlbGYuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICB3ID0gYiAqIHcgKyB4XG4gICAgaWYgKCsraiA+PSBjcykge1xuICAgICAgc2VsZi5kTXVsdGlwbHkoZClcbiAgICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICAgICAgaiA9IDBcbiAgICAgIHcgPSAwXG4gICAgfVxuICB9XG4gIGlmIChqID4gMCkge1xuICAgIHNlbGYuZE11bHRpcGx5KE1hdGgucG93KGIsIGopKVxuICAgIHNlbGYuZEFkZE9mZnNldCh3LCAwKVxuICB9XG4gIGlmIChtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHNlbGYsIHNlbGYpXG59XG5cbi8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuZnVuY3Rpb24gYm5wRnJvbU51bWJlcihhLCBiLCBjKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYikge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgIGlmIChhIDwgMikgc2VsZi5mcm9tSW50KDEpXG4gICAgZWxzZSB7XG4gICAgICBzZWxmLmZyb21OdW1iZXIoYSwgYylcbiAgICAgIGlmICghc2VsZi50ZXN0Qml0KGEgLSAxKSkgLy8gZm9yY2UgTVNCIHNldFxuICAgICAgICBzZWxmLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYSAtIDEpLCBvcF9vciwgc2VsZilcbiAgICAgIGlmIChzZWxmLmlzRXZlbigpKSBzZWxmLmRBZGRPZmZzZXQoMSwgMCk7IC8vIGZvcmNlIG9kZFxuICAgICAgd2hpbGUgKCFzZWxmLmlzUHJvYmFibGVQcmltZShiKSkge1xuICAgICAgICBzZWxmLmRBZGRPZmZzZXQoMiwgMClcbiAgICAgICAgaWYgKHNlbGYuYml0TGVuZ3RoKCkgPiBhKSBzZWxmLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIHNlbGYpXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgdmFyIHggPSBuZXcgQXJyYXkoKSxcbiAgICAgIHQgPSBhICYgN1xuICAgIHgubGVuZ3RoID0gKGEgPj4gMykgKyAxXG4gICAgYi5uZXh0Qnl0ZXMoeClcbiAgICBpZiAodCA+IDApIHhbMF0gJj0gKCgxIDw8IHQpIC0gMSlcbiAgICBlbHNlIHhbMF0gPSAwXG4gICAgc2VsZi5mcm9tU3RyaW5nKHgsIDI1NilcbiAgfVxufVxuXG4vLyAocHVibGljKSBjb252ZXJ0IHRvIGJpZ2VuZGlhbiBieXRlIGFycmF5XG5mdW5jdGlvbiBiblRvQnl0ZUFycmF5KCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGkgPSBzZWxmLnQsXG4gICAgciA9IG5ldyBBcnJheSgpXG4gIHJbMF0gPSBzZWxmLnNcbiAgdmFyIHAgPSBzZWxmLkRCIC0gKGkgKiBzZWxmLkRCKSAlIDgsXG4gICAgZCwgayA9IDBcbiAgaWYgKGktLSA+IDApIHtcbiAgICBpZiAocCA8IHNlbGYuREIgJiYgKGQgPSBzZWxmW2ldID4+IHApICE9IChzZWxmLnMgJiBzZWxmLkRNKSA+PiBwKVxuICAgICAgcltrKytdID0gZCB8IChzZWxmLnMgPDwgKHNlbGYuREIgLSBwKSlcbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBpZiAocCA8IDgpIHtcbiAgICAgICAgZCA9IChzZWxmW2ldICYgKCgxIDw8IHApIC0gMSkpIDw8ICg4IC0gcClcbiAgICAgICAgZCB8PSBzZWxmWy0taV0gPj4gKHAgKz0gc2VsZi5EQiAtIDgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkID0gKHNlbGZbaV0gPj4gKHAgLT0gOCkpICYgMHhmZlxuICAgICAgICBpZiAocCA8PSAwKSB7XG4gICAgICAgICAgcCArPSBzZWxmLkRCXG4gICAgICAgICAgLS1pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoZCAmIDB4ODApICE9IDApIGQgfD0gLTI1NlxuICAgICAgaWYgKGsgPT09IDAgJiYgKHNlbGYucyAmIDB4ODApICE9IChkICYgMHg4MCkpKytrXG4gICAgICBpZiAoayA+IDAgfHwgZCAhPSBzZWxmLnMpIHJbaysrXSA9IGRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuZnVuY3Rpb24gYm5FcXVhbHMoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID09IDApXG59XG5cbmZ1bmN0aW9uIGJuTWluKGEpIHtcbiAgcmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA8IDApID8gdGhpcyA6IGFcbn1cblxuZnVuY3Rpb24gYm5NYXgoYSkge1xuICByZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYVxufVxuXG4vLyAocHJvdGVjdGVkKSByID0gdGhpcyBvcCBhIChiaXR3aXNlKVxuZnVuY3Rpb24gYm5wQml0d2lzZVRvKGEsIG9wLCByKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgYVtpXSlcbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGYgPSBhLnMgJiBzZWxmLkRNXG4gICAgZm9yIChpID0gbTsgaSA8IHNlbGYudDsgKytpKSByW2ldID0gb3Aoc2VsZltpXSwgZilcbiAgICByLnQgPSBzZWxmLnRcbiAgfSBlbHNlIHtcbiAgICBmID0gc2VsZi5zICYgc2VsZi5ETVxuICAgIGZvciAoaSA9IG07IGkgPCBhLnQ7ICsraSkgcltpXSA9IG9wKGYsIGFbaV0pXG4gICAgci50ID0gYS50XG4gIH1cbiAgci5zID0gb3Aoc2VsZi5zLCBhLnMpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgYVxuZnVuY3Rpb24gb3BfYW5kKHgsIHkpIHtcbiAgcmV0dXJuIHggJiB5XG59XG5cbmZ1bmN0aW9uIGJuQW5kKGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyB8IGFcbmZ1bmN0aW9uIG9wX29yKHgsIHkpIHtcbiAgcmV0dXJuIHggfCB5XG59XG5cbmZ1bmN0aW9uIGJuT3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiBhXG5mdW5jdGlvbiBvcF94b3IoeCwgeSkge1xuICByZXR1cm4geCBeIHlcbn1cblxuZnVuY3Rpb24gYm5Yb3IoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfeG9yLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfmFcbmZ1bmN0aW9uIG9wX2FuZG5vdCh4LCB5KSB7XG4gIHJldHVybiB4ICYgfnlcbn1cblxuZnVuY3Rpb24gYm5BbmROb3QoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB+dGhpc1xuZnVuY3Rpb24gYm5Ob3QoKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gdGhpcy5ETSAmIH50aGlzW2ldXG4gIHIudCA9IHRoaXMudFxuICByLnMgPSB+dGhpcy5zXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgPDwgblxuZnVuY3Rpb24gYm5TaGlmdExlZnQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLnJTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMubFNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdGhpcyA+PiBuXG5mdW5jdGlvbiBiblNoaWZ0UmlnaHQobikge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgaWYgKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLCByKVxuICBlbHNlIHRoaXMuclNoaWZ0VG8obiwgcilcbiAgcmV0dXJuIHJcbn1cblxuLy8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuZnVuY3Rpb24gbGJpdCh4KSB7XG4gIGlmICh4ID09IDApIHJldHVybiAtMVxuICB2YXIgciA9IDBcbiAgaWYgKCh4ICYgMHhmZmZmKSA9PSAwKSB7XG4gICAgeCA+Pj0gMTZcbiAgICByICs9IDE2XG4gIH1cbiAgaWYgKCh4ICYgMHhmZikgPT0gMCkge1xuICAgIHggPj49IDhcbiAgICByICs9IDhcbiAgfVxuICBpZiAoKHggJiAweGYpID09IDApIHtcbiAgICB4ID4+PSA0XG4gICAgciArPSA0XG4gIH1cbiAgaWYgKCh4ICYgMykgPT0gMCkge1xuICAgIHggPj49IDJcbiAgICByICs9IDJcbiAgfVxuICBpZiAoKHggJiAxKSA9PSAwKSsrclxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSByZXR1cm5zIGluZGV4IG9mIGxvd2VzdCAxLWJpdCAob3IgLTEgaWYgbm9uZSlcbmZ1bmN0aW9uIGJuR2V0TG93ZXN0U2V0Qml0KCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKVxuICAgIGlmICh0aGlzW2ldICE9IDApIHJldHVybiBpICogdGhpcy5EQiArIGxiaXQodGhpc1tpXSlcbiAgaWYgKHRoaXMucyA8IDApIHJldHVybiB0aGlzLnQgKiB0aGlzLkRCXG4gIHJldHVybiAtMVxufVxuXG4vLyByZXR1cm4gbnVtYmVyIG9mIDEgYml0cyBpbiB4XG5mdW5jdGlvbiBjYml0KHgpIHtcbiAgdmFyIHIgPSAwXG4gIHdoaWxlICh4ICE9IDApIHtcbiAgICB4ICY9IHggLSAxXG4gICAgKytyXG4gIH1cbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuZnVuY3Rpb24gYm5CaXRDb3VudCgpIHtcbiAgdmFyIHIgPSAwLFxuICAgIHggPSB0aGlzLnMgJiB0aGlzLkRNXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldIF4geClcbiAgcmV0dXJuIHJcbn1cblxuLy8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcbmZ1bmN0aW9uIGJuVGVzdEJpdChuKSB7XG4gIHZhciBqID0gTWF0aC5mbG9vcihuIC8gdGhpcy5EQilcbiAgaWYgKGogPj0gdGhpcy50KSByZXR1cm4gKHRoaXMucyAhPSAwKVxuICByZXR1cm4gKCh0aGlzW2pdICYgKDEgPDwgKG4gJSB0aGlzLkRCKSkpICE9IDApXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG5mdW5jdGlvbiBibnBDaGFuZ2VCaXQobiwgb3ApIHtcbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQobilcbiAgdGhpcy5iaXR3aXNlVG8ociwgb3AsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgfCAoMTw8bilcbmZ1bmN0aW9uIGJuU2V0Qml0KG4pIHtcbiAgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKVxufVxuXG4vLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuZnVuY3Rpb24gYm5DbGVhckJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF9hbmRub3QpXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgXiAoMTw8bilcbmZ1bmN0aW9uIGJuRmxpcEJpdChuKSB7XG4gIHJldHVybiB0aGlzLmNoYW5nZUJpdChuLCBvcF94b3IpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICsgYVxuZnVuY3Rpb24gYm5wQWRkVG8oYSwgcikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIgaSA9IDAsXG4gICAgYyA9IDAsXG4gICAgbSA9IE1hdGgubWluKGEudCwgc2VsZi50KVxuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBjICs9IHNlbGZbaV0gKyBhW2ldXG4gICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICBjID4+PSBzZWxmLkRCXG4gIH1cbiAgaWYgKGEudCA8IHNlbGYudCkge1xuICAgIGMgKz0gYS5zXG4gICAgd2hpbGUgKGkgPCBzZWxmLnQpIHtcbiAgICAgIGMgKz0gc2VsZltpXVxuICAgICAgcltpKytdID0gYyAmIHNlbGYuRE1cbiAgICAgIGMgPj49IHNlbGYuREJcbiAgICB9XG4gICAgYyArPSBzZWxmLnNcbiAgfSBlbHNlIHtcbiAgICBjICs9IHNlbGYuc1xuICAgIHdoaWxlIChpIDwgYS50KSB7XG4gICAgICBjICs9IGFbaV1cbiAgICAgIHJbaSsrXSA9IGMgJiBzZWxmLkRNXG4gICAgICBjID4+PSBzZWxmLkRCXG4gICAgfVxuICAgIGMgKz0gYS5zXG4gIH1cbiAgci5zID0gKGMgPCAwKSA/IC0xIDogMFxuICBpZiAoYyA+IDApIHJbaSsrXSA9IGNcbiAgZWxzZSBpZiAoYyA8IC0xKSByW2krK10gPSBzZWxmLkRWICsgY1xuICByLnQgPSBpXG4gIHIuY2xhbXAoKVxufVxuXG4vLyAocHVibGljKSB0aGlzICsgYVxuZnVuY3Rpb24gYm5BZGQoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5hZGRUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC0gYVxuZnVuY3Rpb24gYm5TdWJ0cmFjdChhKSB7XG4gIHZhciByID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnN1YlRvKGEsIHIpXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIHRoaXMgKiBhXG5mdW5jdGlvbiBibk11bHRpcGx5KGEpIHtcbiAgdmFyIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMubXVsdGlwbHlUbyhhLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzXjJcbmZ1bmN0aW9uIGJuU3F1YXJlKCkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5zcXVhcmVUbyhyKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzIC8gYVxuZnVuY3Rpb24gYm5EaXZpZGUoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSB0aGlzICUgYVxuZnVuY3Rpb24gYm5SZW1haW5kZXIoYSkge1xuICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgdGhpcy5kaXZSZW1UbyhhLCBudWxsLCByKVxuICByZXR1cm4gclxufVxuXG4vLyAocHVibGljKSBbdGhpcy9hLHRoaXMlYV1cbmZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGEpIHtcbiAgdmFyIHEgPSBuZXcgQmlnSW50ZWdlcigpLFxuICAgIHIgPSBuZXcgQmlnSW50ZWdlcigpXG4gIHRoaXMuZGl2UmVtVG8oYSwgcSwgcilcbiAgcmV0dXJuIG5ldyBBcnJheShxLCByKVxufVxuXG4vLyAocHJvdGVjdGVkKSB0aGlzICo9IG4sIHRoaXMgPj0gMCwgMSA8IG4gPCBEVlxuZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pIHtcbiAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLCBuIC0gMSwgdGhpcywgMCwgMCwgdGhpcy50KVxuICArK3RoaXMudFxuICB0aGlzLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuZnVuY3Rpb24gYm5wREFkZE9mZnNldChuLCB3KSB7XG4gIGlmIChuID09IDApIHJldHVyblxuICB3aGlsZSAodGhpcy50IDw9IHcpIHRoaXNbdGhpcy50KytdID0gMFxuICB0aGlzW3ddICs9IG5cbiAgd2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVikge1xuICAgIHRoaXNbd10gLT0gdGhpcy5EVlxuICAgIGlmICgrK3cgPj0gdGhpcy50KSB0aGlzW3RoaXMudCsrXSA9IDBcbiAgICArK3RoaXNbd11cbiAgfVxufVxuXG4vLyBBIFwibnVsbFwiIHJlZHVjZXJcbmZ1bmN0aW9uIE51bGxFeHAoKSB7fVxuXG5mdW5jdGlvbiBuTm9wKHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuZnVuY3Rpb24gbk11bFRvKHgsIHksIHIpIHtcbiAgeC5tdWx0aXBseVRvKHksIHIpXG59XG5cbmZ1bmN0aW9uIG5TcXJUbyh4LCByKSB7XG4gIHguc3F1YXJlVG8ocilcbn1cblxuTnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3Bcbk51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvXG5OdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUb1xuXG4vLyAocHVibGljKSB0aGlzXmVcbmZ1bmN0aW9uIGJuUG93KGUpIHtcbiAgcmV0dXJuIHRoaXMuZXhwKGUsIG5ldyBOdWxsRXhwKCkpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHIgPSBsb3dlciBuIHdvcmRzIG9mIFwidGhpcyAqIGFcIiwgYS50IDw9IG5cbi8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbmZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLCBuLCByKSB7XG4gIHZhciBpID0gTWF0aC5taW4odGhpcy50ICsgYS50LCBuKVxuICByLnMgPSAwOyAvLyBhc3N1bWVzIGEsdGhpcyA+PSAwXG4gIHIudCA9IGlcbiAgd2hpbGUgKGkgPiAwKSByWy0taV0gPSAwXG4gIHZhciBqXG4gIGZvciAoaiA9IHIudCAtIHRoaXMudDsgaSA8IGo7ICsraSkgcltpICsgdGhpcy50XSA9IHRoaXMuYW0oMCwgYVtpXSwgciwgaSwgMCwgdGhpcy50KVxuICBmb3IgKGogPSBNYXRoLm1pbihhLnQsIG4pOyBpIDwgajsgKytpKSB0aGlzLmFtKDAsIGFbaV0sIHIsIGksIDAsIG4gLSBpKVxuICByLmNsYW1wKClcbn1cblxuLy8gKHByb3RlY3RlZCkgciA9IFwidGhpcyAqIGFcIiB3aXRob3V0IGxvd2VyIG4gd29yZHMsIG4gPiAwXG4vLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5mdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSwgbiwgcikge1xuICAtLW5cbiAgdmFyIGkgPSByLnQgPSB0aGlzLnQgKyBhLnQgLSBuXG4gIHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcbiAgd2hpbGUgKC0taSA+PSAwKSByW2ldID0gMFxuICBmb3IgKGkgPSBNYXRoLm1heChuIC0gdGhpcy50LCAwKTsgaSA8IGEudDsgKytpKVxuICAgIHJbdGhpcy50ICsgaSAtIG5dID0gdGhpcy5hbShuIC0gaSwgYVtpXSwgciwgMCwgMCwgdGhpcy50ICsgaSAtIG4pXG4gIHIuY2xhbXAoKVxuICByLmRyU2hpZnRUbygxLCByKVxufVxuXG4vLyBCYXJyZXR0IG1vZHVsYXIgcmVkdWN0aW9uXG5mdW5jdGlvbiBCYXJyZXR0KG0pIHtcbiAgLy8gc2V0dXAgQmFycmV0dFxuICB0aGlzLnIyID0gbmV3IEJpZ0ludGVnZXIoKVxuICB0aGlzLnEzID0gbmV3IEJpZ0ludGVnZXIoKVxuICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiAqIG0udCwgdGhpcy5yMilcbiAgdGhpcy5tdSA9IHRoaXMucjIuZGl2aWRlKG0pXG4gIHRoaXMubSA9IG1cbn1cblxuZnVuY3Rpb24gYmFycmV0dENvbnZlcnQoeCkge1xuICBpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pXG4gIGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSByZXR1cm4geFxuICBlbHNlIHtcbiAgICB2YXIgciA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB4LmNvcHlUbyhyKVxuICAgIHRoaXMucmVkdWNlKHIpXG4gICAgcmV0dXJuIHJcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpIHtcbiAgcmV0dXJuIHhcbn1cblxuLy8geCA9IHggbW9kIG0gKEhBQyAxNC40MilcbmZ1bmN0aW9uIGJhcnJldHRSZWR1Y2UoeCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgeC5kclNoaWZ0VG8oc2VsZi5tLnQgLSAxLCBzZWxmLnIyKVxuICBpZiAoeC50ID4gc2VsZi5tLnQgKyAxKSB7XG4gICAgeC50ID0gc2VsZi5tLnQgKyAxXG4gICAgeC5jbGFtcCgpXG4gIH1cbiAgc2VsZi5tdS5tdWx0aXBseVVwcGVyVG8oc2VsZi5yMiwgc2VsZi5tLnQgKyAxLCBzZWxmLnEzKVxuICBzZWxmLm0ubXVsdGlwbHlMb3dlclRvKHNlbGYucTMsIHNlbGYubS50ICsgMSwgc2VsZi5yMilcbiAgd2hpbGUgKHguY29tcGFyZVRvKHNlbGYucjIpIDwgMCkgeC5kQWRkT2Zmc2V0KDEsIHNlbGYubS50ICsgMSlcbiAgeC5zdWJUbyhzZWxmLnIyLCB4KVxuICB3aGlsZSAoeC5jb21wYXJlVG8oc2VsZi5tKSA+PSAwKSB4LnN1YlRvKHNlbGYubSwgeClcbn1cblxuLy8gciA9IHheMiBtb2QgbTsgeCAhPSByXG5mdW5jdGlvbiBiYXJyZXR0U3FyVG8oeCwgcikge1xuICB4LnNxdWFyZVRvKHIpXG4gIHRoaXMucmVkdWNlKHIpXG59XG5cbi8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5mdW5jdGlvbiBiYXJyZXR0TXVsVG8oeCwgeSwgcikge1xuICB4Lm11bHRpcGx5VG8oeSwgcilcbiAgdGhpcy5yZWR1Y2Uocilcbn1cblxuQmFycmV0dC5wcm90b3R5cGUuY29udmVydCA9IGJhcnJldHRDb252ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQgPSBiYXJyZXR0UmV2ZXJ0XG5CYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2UgPSBiYXJyZXR0UmVkdWNlXG5CYXJyZXR0LnByb3RvdHlwZS5tdWxUbyA9IGJhcnJldHRNdWxUb1xuQmFycmV0dC5wcm90b3R5cGUuc3FyVG8gPSBiYXJyZXR0U3FyVG9cblxuLy8gKHB1YmxpYykgdGhpc15lICUgbSAoSEFDIDE0Ljg1KVxuZnVuY3Rpb24gYm5Nb2RQb3coZSwgbSkge1xuICB2YXIgaSA9IGUuYml0TGVuZ3RoKCksXG4gICAgaywgciA9IG5idigxKSxcbiAgICB6XG4gIGlmIChpIDw9IDApIHJldHVybiByXG4gIGVsc2UgaWYgKGkgPCAxOCkgayA9IDFcbiAgZWxzZSBpZiAoaSA8IDQ4KSBrID0gM1xuICBlbHNlIGlmIChpIDwgMTQ0KSBrID0gNFxuICBlbHNlIGlmIChpIDwgNzY4KSBrID0gNVxuICBlbHNlIGsgPSA2XG4gIGlmIChpIDwgOClcbiAgICB6ID0gbmV3IENsYXNzaWMobSlcbiAgZWxzZSBpZiAobS5pc0V2ZW4oKSlcbiAgICB6ID0gbmV3IEJhcnJldHQobSlcbiAgZWxzZVxuICAgIHogPSBuZXcgTW9udGdvbWVyeShtKVxuXG4gIC8vIHByZWNvbXB1dGF0aW9uXG4gIHZhciBnID0gbmV3IEFycmF5KCksXG4gICAgbiA9IDMsXG4gICAgazEgPSBrIC0gMSxcbiAgICBrbSA9ICgxIDw8IGspIC0gMVxuICBnWzFdID0gei5jb252ZXJ0KHRoaXMpXG4gIGlmIChrID4gMSkge1xuICAgIHZhciBnMiA9IG5ldyBCaWdJbnRlZ2VyKClcbiAgICB6LnNxclRvKGdbMV0sIGcyKVxuICAgIHdoaWxlIChuIDw9IGttKSB7XG4gICAgICBnW25dID0gbmV3IEJpZ0ludGVnZXIoKVxuICAgICAgei5tdWxUbyhnMiwgZ1tuIC0gMl0sIGdbbl0pXG4gICAgICBuICs9IDJcbiAgICB9XG4gIH1cblxuICB2YXIgaiA9IGUudCAtIDEsXG4gICAgdywgaXMxID0gdHJ1ZSxcbiAgICByMiA9IG5ldyBCaWdJbnRlZ2VyKCksXG4gICAgdFxuICBpID0gbmJpdHMoZVtqXSkgLSAxXG4gIHdoaWxlIChqID49IDApIHtcbiAgICBpZiAoaSA+PSBrMSkgdyA9IChlW2pdID4+IChpIC0gazEpKSAmIGttXG4gICAgZWxzZSB7XG4gICAgICB3ID0gKGVbal0gJiAoKDEgPDwgKGkgKyAxKSkgLSAxKSkgPDwgKGsxIC0gaSlcbiAgICAgIGlmIChqID4gMCkgdyB8PSBlW2ogLSAxXSA+PiAodGhpcy5EQiArIGkgLSBrMSlcbiAgICB9XG5cbiAgICBuID0ga1xuICAgIHdoaWxlICgodyAmIDEpID09IDApIHtcbiAgICAgIHcgPj49IDFcbiAgICAgIC0tblxuICAgIH1cbiAgICBpZiAoKGkgLT0gbikgPCAwKSB7XG4gICAgICBpICs9IHRoaXMuREJcbiAgICAgIC0talxuICAgIH1cbiAgICBpZiAoaXMxKSB7IC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgIGdbd10uY29weVRvKHIpXG4gICAgICBpczEgPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAobiA+IDEpIHtcbiAgICAgICAgei5zcXJUbyhyLCByMilcbiAgICAgICAgei5zcXJUbyhyMiwgcilcbiAgICAgICAgbiAtPSAyXG4gICAgICB9XG4gICAgICBpZiAobiA+IDApIHouc3FyVG8ociwgcjIpXG4gICAgICBlbHNlIHtcbiAgICAgICAgdCA9IHJcbiAgICAgICAgciA9IHIyXG4gICAgICAgIHIyID0gdFxuICAgICAgfVxuICAgICAgei5tdWxUbyhyMiwgZ1t3XSwgcilcbiAgICB9XG5cbiAgICB3aGlsZSAoaiA+PSAwICYmIChlW2pdICYgKDEgPDwgaSkpID09IDApIHtcbiAgICAgIHouc3FyVG8ociwgcjIpXG4gICAgICB0ID0gclxuICAgICAgciA9IHIyXG4gICAgICByMiA9IHRcbiAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgIGkgPSB0aGlzLkRCIC0gMVxuICAgICAgICAtLWpcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHoucmV2ZXJ0KHIpXG59XG5cbi8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG5mdW5jdGlvbiBibkdDRChhKSB7XG4gIHZhciB4ID0gKHRoaXMucyA8IDApID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKVxuICB2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKClcbiAgaWYgKHguY29tcGFyZVRvKHkpIDwgMCkge1xuICAgIHZhciB0ID0geFxuICAgIHggPSB5XG4gICAgeSA9IHRcbiAgfVxuICB2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksXG4gICAgZyA9IHkuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGcgPCAwKSByZXR1cm4geFxuICBpZiAoaSA8IGcpIGcgPSBpXG4gIGlmIChnID4gMCkge1xuICAgIHguclNoaWZ0VG8oZywgeClcbiAgICB5LnJTaGlmdFRvKGcsIHkpXG4gIH1cbiAgd2hpbGUgKHguc2lnbnVtKCkgPiAwKSB7XG4gICAgaWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB4LnJTaGlmdFRvKGksIHgpXG4gICAgaWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGksIHkpXG4gICAgaWYgKHguY29tcGFyZVRvKHkpID49IDApIHtcbiAgICAgIHguc3ViVG8oeSwgeClcbiAgICAgIHguclNoaWZ0VG8oMSwgeClcbiAgICB9IGVsc2Uge1xuICAgICAgeS5zdWJUbyh4LCB5KVxuICAgICAgeS5yU2hpZnRUbygxLCB5KVxuICAgIH1cbiAgfVxuICBpZiAoZyA+IDApIHkubFNoaWZ0VG8oZywgeSlcbiAgcmV0dXJuIHlcbn1cblxuLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG5mdW5jdGlvbiBibnBNb2RJbnQobikge1xuICBpZiAobiA8PSAwKSByZXR1cm4gMFxuICB2YXIgZCA9IHRoaXMuRFYgJSBuLFxuICAgIHIgPSAodGhpcy5zIDwgMCkgPyBuIC0gMSA6IDBcbiAgaWYgKHRoaXMudCA+IDApXG4gICAgaWYgKGQgPT0gMCkgciA9IHRoaXNbMF0gJSBuXG4gICAgZWxzZVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByID0gKGQgKiByICsgdGhpc1tpXSkgJSBuXG4gIHJldHVybiByXG59XG5cbi8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcbmZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gIHZhciBhYyA9IG0uaXNFdmVuKClcbiAgaWYgKHRoaXMuc2lnbnVtKCkgPT09IDApIHRocm93IG5ldyBFcnJvcignZGl2aXNpb24gYnkgemVybycpXG4gIGlmICgodGhpcy5pc0V2ZW4oKSAmJiBhYykgfHwgbS5zaWdudW0oKSA9PSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPXG4gIHZhciB1ID0gbS5jbG9uZSgpLFxuICAgIHYgPSB0aGlzLmNsb25lKClcbiAgdmFyIGEgPSBuYnYoMSksXG4gICAgYiA9IG5idigwKSxcbiAgICBjID0gbmJ2KDApLFxuICAgIGQgPSBuYnYoMSlcbiAgd2hpbGUgKHUuc2lnbnVtKCkgIT0gMCkge1xuICAgIHdoaWxlICh1LmlzRXZlbigpKSB7XG4gICAgICB1LnJTaGlmdFRvKDEsIHUpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFhLmlzRXZlbigpIHx8ICFiLmlzRXZlbigpKSB7XG4gICAgICAgICAgYS5hZGRUbyh0aGlzLCBhKVxuICAgICAgICAgIGIuc3ViVG8obSwgYilcbiAgICAgICAgfVxuICAgICAgICBhLnJTaGlmdFRvKDEsIGEpXG4gICAgICB9IGVsc2UgaWYgKCFiLmlzRXZlbigpKSBiLnN1YlRvKG0sIGIpXG4gICAgICBiLnJTaGlmdFRvKDEsIGIpXG4gICAgfVxuICAgIHdoaWxlICh2LmlzRXZlbigpKSB7XG4gICAgICB2LnJTaGlmdFRvKDEsIHYpXG4gICAgICBpZiAoYWMpIHtcbiAgICAgICAgaWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKSB7XG4gICAgICAgICAgYy5hZGRUbyh0aGlzLCBjKVxuICAgICAgICAgIGQuc3ViVG8obSwgZClcbiAgICAgICAgfVxuICAgICAgICBjLnJTaGlmdFRvKDEsIGMpXG4gICAgICB9IGVsc2UgaWYgKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sIGQpXG4gICAgICBkLnJTaGlmdFRvKDEsIGQpXG4gICAgfVxuICAgIGlmICh1LmNvbXBhcmVUbyh2KSA+PSAwKSB7XG4gICAgICB1LnN1YlRvKHYsIHUpXG4gICAgICBpZiAoYWMpIGEuc3ViVG8oYywgYSlcbiAgICAgIGIuc3ViVG8oZCwgYilcbiAgICB9IGVsc2Uge1xuICAgICAgdi5zdWJUbyh1LCB2KVxuICAgICAgaWYgKGFjKSBjLnN1YlRvKGEsIGMpXG4gICAgICBkLnN1YlRvKGIsIGQpXG4gICAgfVxuICB9XG4gIGlmICh2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCkgcmV0dXJuIEJpZ0ludGVnZXIuWkVST1xuICB3aGlsZSAoZC5jb21wYXJlVG8obSkgPj0gMCkgZC5zdWJUbyhtLCBkKVxuICB3aGlsZSAoZC5zaWdudW0oKSA8IDApIGQuYWRkVG8obSwgZClcbiAgcmV0dXJuIGRcbn1cblxudmFyIGxvd3ByaW1lcyA9IFtcbiAgMiwgMywgNSwgNywgMTEsIDEzLCAxNywgMTksIDIzLCAyOSwgMzEsIDM3LCA0MSwgNDMsIDQ3LCA1MywgNTksIDYxLCA2NywgNzEsXG4gIDczLCA3OSwgODMsIDg5LCA5NywgMTAxLCAxMDMsIDEwNywgMTA5LCAxMTMsIDEyNywgMTMxLCAxMzcsIDEzOSwgMTQ5LCAxNTEsXG4gIDE1NywgMTYzLCAxNjcsIDE3MywgMTc5LCAxODEsIDE5MSwgMTkzLCAxOTcsIDE5OSwgMjExLCAyMjMsIDIyNywgMjI5LCAyMzMsXG4gIDIzOSwgMjQxLCAyNTEsIDI1NywgMjYzLCAyNjksIDI3MSwgMjc3LCAyODEsIDI4MywgMjkzLCAzMDcsIDMxMSwgMzEzLCAzMTcsXG4gIDMzMSwgMzM3LCAzNDcsIDM0OSwgMzUzLCAzNTksIDM2NywgMzczLCAzNzksIDM4MywgMzg5LCAzOTcsIDQwMSwgNDA5LCA0MTksXG4gIDQyMSwgNDMxLCA0MzMsIDQzOSwgNDQzLCA0NDksIDQ1NywgNDYxLCA0NjMsIDQ2NywgNDc5LCA0ODcsIDQ5MSwgNDk5LCA1MDMsXG4gIDUwOSwgNTIxLCA1MjMsIDU0MSwgNTQ3LCA1NTcsIDU2MywgNTY5LCA1NzEsIDU3NywgNTg3LCA1OTMsIDU5OSwgNjAxLCA2MDcsXG4gIDYxMywgNjE3LCA2MTksIDYzMSwgNjQxLCA2NDMsIDY0NywgNjUzLCA2NTksIDY2MSwgNjczLCA2NzcsIDY4MywgNjkxLCA3MDEsXG4gIDcwOSwgNzE5LCA3MjcsIDczMywgNzM5LCA3NDMsIDc1MSwgNzU3LCA3NjEsIDc2OSwgNzczLCA3ODcsIDc5NywgODA5LCA4MTEsXG4gIDgyMSwgODIzLCA4MjcsIDgyOSwgODM5LCA4NTMsIDg1NywgODU5LCA4NjMsIDg3NywgODgxLCA4ODMsIDg4NywgOTA3LCA5MTEsXG4gIDkxOSwgOTI5LCA5MzcsIDk0MSwgOTQ3LCA5NTMsIDk2NywgOTcxLCA5NzcsIDk4MywgOTkxLCA5OTdcbl1cblxudmFyIGxwbGltID0gKDEgPDwgMjYpIC8gbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGggLSAxXVxuXG4vLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbmZ1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKHQpIHtcbiAgdmFyIGksIHggPSB0aGlzLmFicygpXG4gIGlmICh4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbG93cHJpbWVzLmxlbmd0aDsgKytpKVxuICAgICAgaWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmICh4LmlzRXZlbigpKSByZXR1cm4gZmFsc2VcbiAgaSA9IDFcbiAgd2hpbGUgKGkgPCBsb3dwcmltZXMubGVuZ3RoKSB7XG4gICAgdmFyIG0gPSBsb3dwcmltZXNbaV0sXG4gICAgICBqID0gaSArIDFcbiAgICB3aGlsZSAoaiA8IGxvd3ByaW1lcy5sZW5ndGggJiYgbSA8IGxwbGltKSBtICo9IGxvd3ByaW1lc1tqKytdXG4gICAgbSA9IHgubW9kSW50KG0pXG4gICAgd2hpbGUgKGkgPCBqKSBpZiAobSAlIGxvd3ByaW1lc1tpKytdID09IDApIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB4Lm1pbGxlclJhYmluKHQpXG59XG5cbi8vIChwcm90ZWN0ZWQpIHRydWUgaWYgcHJvYmFibHkgcHJpbWUgKEhBQyA0LjI0LCBNaWxsZXItUmFiaW4pXG5mdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KSB7XG4gIHZhciBuMSA9IHRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpXG4gIHZhciBrID0gbjEuZ2V0TG93ZXN0U2V0Qml0KClcbiAgaWYgKGsgPD0gMCkgcmV0dXJuIGZhbHNlXG4gIHZhciByID0gbjEuc2hpZnRSaWdodChrKVxuICB0ID0gKHQgKyAxKSA+PiAxXG4gIGlmICh0ID4gbG93cHJpbWVzLmxlbmd0aCkgdCA9IGxvd3ByaW1lcy5sZW5ndGhcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihudWxsKVxuICB2YXIgaiwgYmFzZXMgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHQ7ICsraSkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGogPSBsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbG93cHJpbWVzLmxlbmd0aCldXG4gICAgICBpZiAoYmFzZXMuaW5kZXhPZihqKSA9PSAtMSkgYnJlYWtcbiAgICB9XG4gICAgYmFzZXMucHVzaChqKVxuICAgIGEuZnJvbUludChqKVxuICAgIHZhciB5ID0gYS5tb2RQb3cociwgdGhpcylcbiAgICBpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgIHZhciBqID0gMVxuICAgICAgd2hpbGUgKGorKyA8IGsgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgeSA9IHkubW9kUG93SW50KDIsIHRoaXMpXG4gICAgICAgIGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCkgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyBwcm90ZWN0ZWRcbnByb3RvLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZVxucHJvdG8udG9SYWRpeCA9IGJucFRvUmFkaXhcbnByb3RvLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeFxucHJvdG8uZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXJcbnByb3RvLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUb1xucHJvdG8uY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0XG5wcm90by5hZGRUbyA9IGJucEFkZFRvXG5wcm90by5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHlcbnByb3RvLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0XG5wcm90by5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG9cbnByb3RvLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUb1xucHJvdG8ubW9kSW50ID0gYm5wTW9kSW50XG5wcm90by5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluXG5cbi8vIHB1YmxpY1xucHJvdG8uY2xvbmUgPSBibkNsb25lXG5wcm90by5pbnRWYWx1ZSA9IGJuSW50VmFsdWVcbnByb3RvLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlXG5wcm90by5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlXG5wcm90by5zaWdudW0gPSBiblNpZ051bVxucHJvdG8udG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5XG5wcm90by5lcXVhbHMgPSBibkVxdWFsc1xucHJvdG8ubWluID0gYm5NaW5cbnByb3RvLm1heCA9IGJuTWF4XG5wcm90by5hbmQgPSBibkFuZFxucHJvdG8ub3IgPSBibk9yXG5wcm90by54b3IgPSBiblhvclxucHJvdG8uYW5kTm90ID0gYm5BbmROb3RcbnByb3RvLm5vdCA9IGJuTm90XG5wcm90by5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdFxucHJvdG8uc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodFxucHJvdG8uZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXRcbnByb3RvLmJpdENvdW50ID0gYm5CaXRDb3VudFxucHJvdG8udGVzdEJpdCA9IGJuVGVzdEJpdFxucHJvdG8uc2V0Qml0ID0gYm5TZXRCaXRcbnByb3RvLmNsZWFyQml0ID0gYm5DbGVhckJpdFxucHJvdG8uZmxpcEJpdCA9IGJuRmxpcEJpdFxucHJvdG8uYWRkID0gYm5BZGRcbnByb3RvLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdFxucHJvdG8ubXVsdGlwbHkgPSBibk11bHRpcGx5XG5wcm90by5kaXZpZGUgPSBibkRpdmlkZVxucHJvdG8ucmVtYWluZGVyID0gYm5SZW1haW5kZXJcbnByb3RvLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyXG5wcm90by5tb2RQb3cgPSBibk1vZFBvd1xucHJvdG8ubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZVxucHJvdG8ucG93ID0gYm5Qb3dcbnByb3RvLmdjZCA9IGJuR0NEXG5wcm90by5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZVxuXG4vLyBKU0JOLXNwZWNpZmljIGV4dGVuc2lvblxucHJvdG8uc3F1YXJlID0gYm5TcXVhcmVcblxuLy8gY29uc3RhbnRzXG5CaWdJbnRlZ2VyLlpFUk8gPSBuYnYoMClcbkJpZ0ludGVnZXIuT05FID0gbmJ2KDEpXG5CaWdJbnRlZ2VyLnZhbHVlT2YgPSBuYnZcblxubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnRlZ2VyXG4iLCIvLyBGSVhNRTogS2luZCBvZiBhIHdlaXJkIHdheSB0byB0aHJvdyBleGNlcHRpb25zLCBjb25zaWRlciByZW1vdmluZ1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJy4vYmlnaScpXG5cbi8qKlxuICogVHVybnMgYSBieXRlIGFycmF5IGludG8gYSBiaWcgaW50ZWdlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgaW50ZXJwcmV0IGEgYnl0ZSBhcnJheSBhcyBhIGJpZyBpbnRlZ2VyIGluIGJpZ1xuICogZW5kaWFuIG5vdGF0aW9uLlxuICovXG5CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZCA9IGZ1bmN0aW9uKGJ5dGVBcnJheSkge1xuICAvLyBCaWdJbnRlZ2VyIGV4cGVjdHMgYSBERVIgaW50ZWdlciBjb25mb3JtYW50IGJ5dGUgYXJyYXlcbiAgaWYgKGJ5dGVBcnJheVswXSAmIDB4ODApIHtcbiAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoWzBdLmNvbmNhdChieXRlQXJyYXkpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGJ5dGVBcnJheSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYnl0ZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgYmlnIGludGVnZXIuXG4gKlxuICogVGhpcyByZXR1cm5zIHRoZSBhYnNvbHV0ZSBvZiB0aGUgY29udGFpbmVkIHZhbHVlIGluIGJpZyBlbmRpYW5cbiAqIGZvcm0uIEEgdmFsdWUgb2YgemVybyByZXN1bHRzIGluIGFuIGVtcHR5IGFycmF5LlxuICovXG5CaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J5dGVBcnJheVVuc2lnbmVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBieXRlQXJyYXkgPSB0aGlzLnRvQnl0ZUFycmF5KClcbiAgcmV0dXJuIGJ5dGVBcnJheVswXSA9PT0gMCA/IGJ5dGVBcnJheS5zbGljZSgxKSA6IGJ5dGVBcnJheVxufVxuXG5CaWdJbnRlZ2VyLmZyb21ERVJJbnRlZ2VyID0gZnVuY3Rpb24oYnl0ZUFycmF5KSB7XG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihieXRlQXJyYXkpXG59XG5cbi8qXG4gKiBDb252ZXJ0cyBCaWdJbnRlZ2VyIHRvIGEgREVSIGludGVnZXIgcmVwcmVzZW50YXRpb24uXG4gKlxuICogVGhlIGZvcm1hdCBmb3IgdGhpcyB2YWx1ZSB1c2VzIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBhcyBhIHNpZ25cbiAqIGJpdC4gIElmIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdCBpcyBhbHJlYWR5IHNldCBhbmQgdGhlIGludGVnZXIgaXNcbiAqIHBvc2l0aXZlLCBhIDB4MDAgaXMgcHJlcGVuZGVkLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgMCA9PiAgICAgMHgwMFxuICogICAgICAxID0+ICAgICAweDAxXG4gKiAgICAgLTEgPT4gICAgIDB4ZmZcbiAqICAgIDEyNyA9PiAgICAgMHg3ZlxuICogICAtMTI3ID0+ICAgICAweDgxXG4gKiAgICAxMjggPT4gICAweDAwODBcbiAqICAgLTEyOCA9PiAgICAgMHg4MFxuICogICAgMjU1ID0+ICAgMHgwMGZmXG4gKiAgIC0yNTUgPT4gICAweGZmMDFcbiAqICAxNjMwMCA9PiAgIDB4M2ZhY1xuICogLTE2MzAwID0+ICAgMHhjMDU0XG4gKiAgNjIzMDAgPT4gMHgwMGYzNWNcbiAqIC02MjMwMCA9PiAweGZmMGNhNFxuKi9cbkJpZ0ludGVnZXIucHJvdG90eXBlLnRvREVSSW50ZWdlciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5XG5cbkJpZ0ludGVnZXIuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAvLyBCaWdJbnRlZ2VyIGV4cGVjdHMgYSBERVIgaW50ZWdlciBjb25mb3JtYW50IGJ5dGUgYXJyYXlcbiAgaWYgKGJ1ZmZlclswXSAmIDB4ODApIHtcbiAgICB2YXIgYnl0ZUFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnVmZmVyKVxuXG4gICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKFswXS5jb25jYXQoYnl0ZUFycmF5KSlcbiAgfVxuXG4gIHJldHVybiBuZXcgQmlnSW50ZWdlcihidWZmZXIpXG59XG5cbkJpZ0ludGVnZXIuZnJvbUhleCA9IGZ1bmN0aW9uKGhleCkge1xuICBpZiAoaGV4ID09PSAnJykgcmV0dXJuIEJpZ0ludGVnZXIuWkVST1xuXG4gIGFzc2VydC5lcXVhbChoZXgsIGhleC5tYXRjaCgvXltBLUZhLWYwLTldKy8pLCAnSW52YWxpZCBoZXggc3RyaW5nJylcbiAgYXNzZXJ0LmVxdWFsKGhleC5sZW5ndGggJSAyLCAwLCAnSW5jb21wbGV0ZSBoZXgnKVxuICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoaGV4LCAxNilcbn1cblxuQmlnSW50ZWdlci5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbihzaXplKSB7XG4gIHZhciBieXRlQXJyYXkgPSB0aGlzLnRvQnl0ZUFycmF5VW5zaWduZWQoKVxuICB2YXIgemVyb3MgPSBbXVxuXG4gIHZhciBwYWRkaW5nID0gc2l6ZSAtIGJ5dGVBcnJheS5sZW5ndGhcbiAgd2hpbGUgKHplcm9zLmxlbmd0aCA8IHBhZGRpbmcpIHplcm9zLnB1c2goMClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcih6ZXJvcy5jb25jYXQoYnl0ZUFycmF5KSlcbn1cblxuQmlnSW50ZWdlci5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbihzaXplKSB7XG4gIHJldHVybiB0aGlzLnRvQnVmZmVyKHNpemUpLnRvU3RyaW5nKCdoZXgnKVxufVxuIiwidmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCcuL2JpZ2knKVxuXG4vL2FkZG9uc1xucmVxdWlyZSgnLi9jb252ZXJ0JylcblxubW9kdWxlLmV4cG9ydHMgPSBCaWdJbnRlZ2VyIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIm5hbWVcIjogXCJiaWdpXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuNC4yXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJCaWcgaW50ZWdlcnMuXCIsXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiY3J5cHRvZ3JhcGh5XCIsXG4gICAgXCJtYXRoXCIsXG4gICAgXCJiaXRjb2luXCIsXG4gICAgXCJhcmJpdHJhcnlcIixcbiAgICBcInByZWNpc2lvblwiLFxuICAgIFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiYmlnXCIsXG4gICAgXCJpbnRlZ2VyXCIsXG4gICAgXCJpbnRcIixcbiAgICBcIm51bWJlclwiLFxuICAgIFwiYmlnaW50ZWdlclwiLFxuICAgIFwiYmlnaW50XCIsXG4gICAgXCJiaWdudW1iZXJcIixcbiAgICBcImRlY2ltYWxcIixcbiAgICBcImZsb2F0XCJcbiAgXSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiY292ZXJhbGxzXCI6IFwiXjIuMTEuMlwiLFxuICAgIFwiaXN0YW5idWxcIjogXCJeMC4zLjVcIixcbiAgICBcImpzaGludFwiOiBcIl4yLjUuMVwiLFxuICAgIFwibW9jaGFcIjogXCJeMi4xLjBcIixcbiAgICBcIm1vY2hpZnlcIjogXCJeMi4xLjBcIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0b2NvaW5qcy9iaWdpXCIsXG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCJcbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9saWIvaW5kZXguanNcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJyb3dzZXItdGVzdFwiOiBcIi4vbm9kZV9tb2R1bGVzLy5iaW4vbW9jaGlmeSAtLXdkIC1SIHNwZWNcIixcbiAgICBcInRlc3RcIjogXCIuL25vZGVfbW9kdWxlcy8uYmluL19tb2NoYSAtLSB0ZXN0LyouanNcIixcbiAgICBcImpzaGludFwiOiBcIi4vbm9kZV9tb2R1bGVzLy5iaW4vanNoaW50IC0tY29uZmlnIGpzaGludC5qc29uIGxpYi8qLmpzIDsgdHJ1ZVwiLFxuICAgIFwidW5pdFwiOiBcIi4vbm9kZV9tb2R1bGVzLy5iaW4vbW9jaGFcIixcbiAgICBcImNvdmVyYWdlXCI6IFwiLi9ub2RlX21vZHVsZXMvLmJpbi9pc3RhbmJ1bCBjb3ZlciAuL25vZGVfbW9kdWxlcy8uYmluL19tb2NoYSAtLSAtLXJlcG9ydGVyIGxpc3QgdGVzdC8qLmpzXCIsXG4gICAgXCJjb3ZlcmFsbHNcIjogXCJucG0gcnVuLXNjcmlwdCBjb3ZlcmFnZSAmJiBub2RlIC4vbm9kZV9tb2R1bGVzLy5iaW4vY292ZXJhbGxzIDwgY292ZXJhZ2UvbGNvdi5pbmZvXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge30sXG4gIFwidGVzdGxpbmdcIjoge1xuICAgIFwiZmlsZXNcIjogXCJ0ZXN0LyouanNcIixcbiAgICBcImhhcm5lc3NcIjogXCJtb2NoYVwiLFxuICAgIFwiYnJvd3NlcnNcIjogW1xuICAgICAgXCJpZS85Li5sYXRlc3RcIixcbiAgICAgIFwiZmlyZWZveC9sYXRlc3RcIixcbiAgICAgIFwiY2hyb21lL2xhdGVzdFwiLFxuICAgICAgXCJzYWZhcmkvNi4wLi5sYXRlc3RcIixcbiAgICAgIFwiaXBob25lLzYuMC4ubGF0ZXN0XCIsXG4gICAgICBcImFuZHJvaWQtYnJvd3Nlci80LjIuLmxhdGVzdFwiXG4gICAgXVxuICB9XG59XG4iLCIvLyBSZWZlcmVuY2UgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDA2Ni5tZWRpYXdpa2lcbi8vIEZvcm1hdDogMHgzMCBbdG90YWwtbGVuZ3RoXSAweDAyIFtSLWxlbmd0aF0gW1JdIDB4MDIgW1MtbGVuZ3RoXSBbU11cbi8vIE5PVEU6IFNJR0hBU0ggYnl0ZSBpZ25vcmVkIEFORCByZXN0cmljdGVkLCB0cnVuY2F0ZSBiZWZvcmUgdXNlXG5cbmZ1bmN0aW9uIGNoZWNrIChidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPCA4KSByZXR1cm4gZmFsc2VcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPiA3MikgcmV0dXJuIGZhbHNlXG4gIGlmIChidWZmZXJbMF0gIT09IDB4MzApIHJldHVybiBmYWxzZVxuICBpZiAoYnVmZmVyWzFdICE9PSBidWZmZXIubGVuZ3RoIC0gMikgcmV0dXJuIGZhbHNlXG4gIGlmIChidWZmZXJbMl0gIT09IDB4MDIpIHJldHVybiBmYWxzZVxuXG4gIHZhciBsZW5SID0gYnVmZmVyWzNdXG4gIGlmIChsZW5SID09PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKDUgKyBsZW5SID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybiBmYWxzZVxuICBpZiAoYnVmZmVyWzQgKyBsZW5SXSAhPT0gMHgwMikgcmV0dXJuIGZhbHNlXG5cbiAgdmFyIGxlblMgPSBidWZmZXJbNSArIGxlblJdXG4gIGlmIChsZW5TID09PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKCg2ICsgbGVuUiArIGxlblMpICE9PSBidWZmZXIubGVuZ3RoKSByZXR1cm4gZmFsc2VcblxuICBpZiAoYnVmZmVyWzRdICYgMHg4MCkgcmV0dXJuIGZhbHNlXG4gIGlmIChsZW5SID4gMSAmJiAoYnVmZmVyWzRdID09PSAweDAwKSAmJiAhKGJ1ZmZlcls1XSAmIDB4ODApKSByZXR1cm4gZmFsc2VcblxuICBpZiAoYnVmZmVyW2xlblIgKyA2XSAmIDB4ODApIHJldHVybiBmYWxzZVxuICBpZiAobGVuUyA+IDEgJiYgKGJ1ZmZlcltsZW5SICsgNl0gPT09IDB4MDApICYmICEoYnVmZmVyW2xlblIgKyA3XSAmIDB4ODApKSByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPCA4KSB0aHJvdyBuZXcgRXJyb3IoJ0RFUiBzZXF1ZW5jZSBsZW5ndGggaXMgdG9vIHNob3J0JylcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPiA3MikgdGhyb3cgbmV3IEVycm9yKCdERVIgc2VxdWVuY2UgbGVuZ3RoIGlzIHRvbyBsb25nJylcbiAgaWYgKGJ1ZmZlclswXSAhPT0gMHgzMCkgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBERVIgc2VxdWVuY2UnKVxuICBpZiAoYnVmZmVyWzFdICE9PSBidWZmZXIubGVuZ3RoIC0gMikgdGhyb3cgbmV3IEVycm9yKCdERVIgc2VxdWVuY2UgbGVuZ3RoIGlzIGludmFsaWQnKVxuICBpZiAoYnVmZmVyWzJdICE9PSAweDAyKSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIERFUiBpbnRlZ2VyJylcblxuICB2YXIgbGVuUiA9IGJ1ZmZlclszXVxuICBpZiAobGVuUiA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdSIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKDUgKyBsZW5SID49IGJ1ZmZlci5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignUiBsZW5ndGggaXMgdG9vIGxvbmcnKVxuICBpZiAoYnVmZmVyWzQgKyBsZW5SXSAhPT0gMHgwMikgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBERVIgaW50ZWdlciAoMiknKVxuXG4gIHZhciBsZW5TID0gYnVmZmVyWzUgKyBsZW5SXVxuICBpZiAobGVuUyA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKCg2ICsgbGVuUiArIGxlblMpICE9PSBidWZmZXIubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ1MgbGVuZ3RoIGlzIGludmFsaWQnKVxuXG4gIGlmIChidWZmZXJbNF0gJiAweDgwKSB0aHJvdyBuZXcgRXJyb3IoJ1IgdmFsdWUgaXMgbmVnYXRpdmUnKVxuICBpZiAobGVuUiA+IDEgJiYgKGJ1ZmZlcls0XSA9PT0gMHgwMCkgJiYgIShidWZmZXJbNV0gJiAweDgwKSkgdGhyb3cgbmV3IEVycm9yKCdSIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpXG5cbiAgaWYgKGJ1ZmZlcltsZW5SICsgNl0gJiAweDgwKSB0aHJvdyBuZXcgRXJyb3IoJ1MgdmFsdWUgaXMgbmVnYXRpdmUnKVxuICBpZiAobGVuUyA+IDEgJiYgKGJ1ZmZlcltsZW5SICsgNl0gPT09IDB4MDApICYmICEoYnVmZmVyW2xlblIgKyA3XSAmIDB4ODApKSB0aHJvdyBuZXcgRXJyb3IoJ1MgdmFsdWUgZXhjZXNzaXZlbHkgcGFkZGVkJylcblxuICAvLyBub24tQklQNjYgLSBleHRyYWN0IFIsIFMgdmFsdWVzXG4gIHJldHVybiB7XG4gICAgcjogYnVmZmVyLnNsaWNlKDQsIDQgKyBsZW5SKSxcbiAgICBzOiBidWZmZXIuc2xpY2UoNiArIGxlblIpXG4gIH1cbn1cblxuLypcbiAqIEV4cGVjdHMgciBhbmQgcyB0byBiZSBwb3NpdGl2ZSBERVIgaW50ZWdlcnMuXG4gKlxuICogVGhlIERFUiBmb3JtYXQgdXNlcyB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXQgYXMgYSBzaWduIGJpdCAoJiAweDgwKS5cbiAqIElmIHRoZSBzaWduaWZpY2FudCBiaXQgaXMgc2V0IEFORCB0aGUgaW50ZWdlciBpcyBwb3NpdGl2ZSwgYSAweDAwIGlzIHByZXBlbmRlZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIDAgPT4gICAgIDB4MDBcbiAqICAgICAgMSA9PiAgICAgMHgwMVxuICogICAgIC0xID0+ICAgICAweGZmXG4gKiAgICAxMjcgPT4gICAgIDB4N2ZcbiAqICAgLTEyNyA9PiAgICAgMHg4MVxuICogICAgMTI4ID0+ICAgMHgwMDgwXG4gKiAgIC0xMjggPT4gICAgIDB4ODBcbiAqICAgIDI1NSA9PiAgIDB4MDBmZlxuICogICAtMjU1ID0+ICAgMHhmZjAxXG4gKiAgMTYzMDAgPT4gICAweDNmYWNcbiAqIC0xNjMwMCA9PiAgIDB4YzA1NFxuICogIDYyMzAwID0+IDB4MDBmMzVjXG4gKiAtNjIzMDAgPT4gMHhmZjBjYTRcbiovXG5mdW5jdGlvbiBlbmNvZGUgKHIsIHMpIHtcbiAgdmFyIGxlblIgPSByLmxlbmd0aFxuICB2YXIgbGVuUyA9IHMubGVuZ3RoXG4gIGlmIChsZW5SID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ1IgbGVuZ3RoIGlzIHplcm8nKVxuICBpZiAobGVuUyA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKGxlblIgPiAzMykgdGhyb3cgbmV3IEVycm9yKCdSIGxlbmd0aCBpcyB0b28gbG9uZycpXG4gIGlmIChsZW5TID4gMzMpIHRocm93IG5ldyBFcnJvcignUyBsZW5ndGggaXMgdG9vIGxvbmcnKVxuICBpZiAoclswXSAmIDB4ODApIHRocm93IG5ldyBFcnJvcignUiB2YWx1ZSBpcyBuZWdhdGl2ZScpXG4gIGlmIChzWzBdICYgMHg4MCkgdGhyb3cgbmV3IEVycm9yKCdTIHZhbHVlIGlzIG5lZ2F0aXZlJylcbiAgaWYgKGxlblIgPiAxICYmIChyWzBdID09PSAweDAwKSAmJiAhKHJbMV0gJiAweDgwKSkgdGhyb3cgbmV3IEVycm9yKCdSIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpXG4gIGlmIChsZW5TID4gMSAmJiAoc1swXSA9PT0gMHgwMCkgJiYgIShzWzFdICYgMHg4MCkpIHRocm93IG5ldyBFcnJvcignUyB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWQnKVxuXG4gIHZhciBzaWduYXR1cmUgPSBuZXcgQnVmZmVyKDYgKyBsZW5SICsgbGVuUylcblxuICAvLyAweDMwIFt0b3RhbC1sZW5ndGhdIDB4MDIgW1ItbGVuZ3RoXSBbUl0gMHgwMiBbUy1sZW5ndGhdIFtTXVxuICBzaWduYXR1cmVbMF0gPSAweDMwXG4gIHNpZ25hdHVyZVsxXSA9IHNpZ25hdHVyZS5sZW5ndGggLSAyXG4gIHNpZ25hdHVyZVsyXSA9IDB4MDJcbiAgc2lnbmF0dXJlWzNdID0gci5sZW5ndGhcbiAgci5jb3B5KHNpZ25hdHVyZSwgNClcbiAgc2lnbmF0dXJlWzQgKyBsZW5SXSA9IDB4MDJcbiAgc2lnbmF0dXJlWzUgKyBsZW5SXSA9IHMubGVuZ3RoXG4gIHMuY29weShzaWduYXR1cmUsIDYgKyBsZW5SKVxuXG4gIHJldHVybiBzaWduYXR1cmVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kZTogZW5jb2RlXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiT1BfRkFMU0VcIjogMCxcbiAgXCJPUF8wXCI6IDAsXG4gIFwiT1BfUFVTSERBVEExXCI6IDc2LFxuICBcIk9QX1BVU0hEQVRBMlwiOiA3NyxcbiAgXCJPUF9QVVNIREFUQTRcIjogNzgsXG4gIFwiT1BfMU5FR0FURVwiOiA3OSxcbiAgXCJPUF9SRVNFUlZFRFwiOiA4MCxcbiAgXCJPUF8xXCI6IDgxLFxuICBcIk9QX1RSVUVcIjogODEsXG4gIFwiT1BfMlwiOiA4MixcbiAgXCJPUF8zXCI6IDgzLFxuICBcIk9QXzRcIjogODQsXG4gIFwiT1BfNVwiOiA4NSxcbiAgXCJPUF82XCI6IDg2LFxuICBcIk9QXzdcIjogODcsXG4gIFwiT1BfOFwiOiA4OCxcbiAgXCJPUF85XCI6IDg5LFxuICBcIk9QXzEwXCI6IDkwLFxuICBcIk9QXzExXCI6IDkxLFxuICBcIk9QXzEyXCI6IDkyLFxuICBcIk9QXzEzXCI6IDkzLFxuICBcIk9QXzE0XCI6IDk0LFxuICBcIk9QXzE1XCI6IDk1LFxuICBcIk9QXzE2XCI6IDk2LFxuXG4gIFwiT1BfTk9QXCI6IDk3LFxuICBcIk9QX1ZFUlwiOiA5OCxcbiAgXCJPUF9JRlwiOiA5OSxcbiAgXCJPUF9OT1RJRlwiOiAxMDAsXG4gIFwiT1BfVkVSSUZcIjogMTAxLFxuICBcIk9QX1ZFUk5PVElGXCI6IDEwMixcbiAgXCJPUF9FTFNFXCI6IDEwMyxcbiAgXCJPUF9FTkRJRlwiOiAxMDQsXG4gIFwiT1BfVkVSSUZZXCI6IDEwNSxcbiAgXCJPUF9SRVRVUk5cIjogMTA2LFxuXG4gIFwiT1BfVE9BTFRTVEFDS1wiOiAxMDcsXG4gIFwiT1BfRlJPTUFMVFNUQUNLXCI6IDEwOCxcbiAgXCJPUF8yRFJPUFwiOiAxMDksXG4gIFwiT1BfMkRVUFwiOiAxMTAsXG4gIFwiT1BfM0RVUFwiOiAxMTEsXG4gIFwiT1BfMk9WRVJcIjogMTEyLFxuICBcIk9QXzJST1RcIjogMTEzLFxuICBcIk9QXzJTV0FQXCI6IDExNCxcbiAgXCJPUF9JRkRVUFwiOiAxMTUsXG4gIFwiT1BfREVQVEhcIjogMTE2LFxuICBcIk9QX0RST1BcIjogMTE3LFxuICBcIk9QX0RVUFwiOiAxMTgsXG4gIFwiT1BfTklQXCI6IDExOSxcbiAgXCJPUF9PVkVSXCI6IDEyMCxcbiAgXCJPUF9QSUNLXCI6IDEyMSxcbiAgXCJPUF9ST0xMXCI6IDEyMixcbiAgXCJPUF9ST1RcIjogMTIzLFxuICBcIk9QX1NXQVBcIjogMTI0LFxuICBcIk9QX1RVQ0tcIjogMTI1LFxuXG4gIFwiT1BfQ0FUXCI6IDEyNixcbiAgXCJPUF9TVUJTVFJcIjogMTI3LFxuICBcIk9QX0xFRlRcIjogMTI4LFxuICBcIk9QX1JJR0hUXCI6IDEyOSxcbiAgXCJPUF9TSVpFXCI6IDEzMCxcblxuICBcIk9QX0lOVkVSVFwiOiAxMzEsXG4gIFwiT1BfQU5EXCI6IDEzMixcbiAgXCJPUF9PUlwiOiAxMzMsXG4gIFwiT1BfWE9SXCI6IDEzNCxcbiAgXCJPUF9FUVVBTFwiOiAxMzUsXG4gIFwiT1BfRVFVQUxWRVJJRllcIjogMTM2LFxuICBcIk9QX1JFU0VSVkVEMVwiOiAxMzcsXG4gIFwiT1BfUkVTRVJWRUQyXCI6IDEzOCxcblxuICBcIk9QXzFBRERcIjogMTM5LFxuICBcIk9QXzFTVUJcIjogMTQwLFxuICBcIk9QXzJNVUxcIjogMTQxLFxuICBcIk9QXzJESVZcIjogMTQyLFxuICBcIk9QX05FR0FURVwiOiAxNDMsXG4gIFwiT1BfQUJTXCI6IDE0NCxcbiAgXCJPUF9OT1RcIjogMTQ1LFxuICBcIk9QXzBOT1RFUVVBTFwiOiAxNDYsXG4gIFwiT1BfQUREXCI6IDE0NyxcbiAgXCJPUF9TVUJcIjogMTQ4LFxuICBcIk9QX01VTFwiOiAxNDksXG4gIFwiT1BfRElWXCI6IDE1MCxcbiAgXCJPUF9NT0RcIjogMTUxLFxuICBcIk9QX0xTSElGVFwiOiAxNTIsXG4gIFwiT1BfUlNISUZUXCI6IDE1MyxcblxuICBcIk9QX0JPT0xBTkRcIjogMTU0LFxuICBcIk9QX0JPT0xPUlwiOiAxNTUsXG4gIFwiT1BfTlVNRVFVQUxcIjogMTU2LFxuICBcIk9QX05VTUVRVUFMVkVSSUZZXCI6IDE1NyxcbiAgXCJPUF9OVU1OT1RFUVVBTFwiOiAxNTgsXG4gIFwiT1BfTEVTU1RIQU5cIjogMTU5LFxuICBcIk9QX0dSRUFURVJUSEFOXCI6IDE2MCxcbiAgXCJPUF9MRVNTVEhBTk9SRVFVQUxcIjogMTYxLFxuICBcIk9QX0dSRUFURVJUSEFOT1JFUVVBTFwiOiAxNjIsXG4gIFwiT1BfTUlOXCI6IDE2MyxcbiAgXCJPUF9NQVhcIjogMTY0LFxuXG4gIFwiT1BfV0lUSElOXCI6IDE2NSxcblxuICBcIk9QX1JJUEVNRDE2MFwiOiAxNjYsXG4gIFwiT1BfU0hBMVwiOiAxNjcsXG4gIFwiT1BfU0hBMjU2XCI6IDE2OCxcbiAgXCJPUF9IQVNIMTYwXCI6IDE2OSxcbiAgXCJPUF9IQVNIMjU2XCI6IDE3MCxcbiAgXCJPUF9DT0RFU0VQQVJBVE9SXCI6IDE3MSxcbiAgXCJPUF9DSEVDS1NJR1wiOiAxNzIsXG4gIFwiT1BfQ0hFQ0tTSUdWRVJJRllcIjogMTczLFxuICBcIk9QX0NIRUNLTVVMVElTSUdcIjogMTc0LFxuICBcIk9QX0NIRUNLTVVMVElTSUdWRVJJRllcIjogMTc1LFxuXG4gIFwiT1BfTk9QMVwiOiAxNzYsXG4gIFwiT1BfTk9QMlwiOiAxNzcsXG4gIFwiT1BfQ0hFQ0tMT0NLVElNRVZFUklGWVwiOiAxNzcsXG5cbiAgXCJPUF9OT1AzXCI6IDE3OCxcbiAgXCJPUF9OT1A0XCI6IDE3OSxcbiAgXCJPUF9OT1A1XCI6IDE4MCxcbiAgXCJPUF9OT1A2XCI6IDE4MSxcbiAgXCJPUF9OT1A3XCI6IDE4MixcbiAgXCJPUF9OT1A4XCI6IDE4MyxcbiAgXCJPUF9OT1A5XCI6IDE4NCxcbiAgXCJPUF9OT1AxMFwiOiAxODUsXG5cbiAgXCJPUF9QVUJLRVlIQVNIXCI6IDI1MyxcbiAgXCJPUF9QVUJLRVlcIjogMjU0LFxuICBcIk9QX0lOVkFMSURPUENPREVcIjogMjU1XG59XG4iLCJ2YXIgT1BTID0gcmVxdWlyZSgnLi9pbmRleC5qc29uJylcblxudmFyIG1hcCA9IHt9XG5mb3IgKHZhciBvcCBpbiBPUFMpIHtcbiAgdmFyIGNvZGUgPSBPUFNbb3BdXG4gIG1hcFtjb2RlXSA9IG9wXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwXG4iLCJ2YXIgYnM1OGNoZWNrID0gcmVxdWlyZSgnYnM1OGNoZWNrJylcbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi9zY3JpcHQnKVxudmFyIG5ldHdvcmtzID0gcmVxdWlyZSgnLi9uZXR3b3JrcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKVxuXG5mdW5jdGlvbiBmcm9tQmFzZTU4Q2hlY2sgKGFkZHJlc3MpIHtcbiAgdmFyIHBheWxvYWQgPSBiczU4Y2hlY2suZGVjb2RlKGFkZHJlc3MpXG4gIGlmIChwYXlsb2FkLmxlbmd0aCA8IDIxKSB0aHJvdyBuZXcgVHlwZUVycm9yKGFkZHJlc3MgKyAnIGlzIHRvbyBzaG9ydCcpXG4gIGlmIChwYXlsb2FkLmxlbmd0aCA+IDIyKSB0aHJvdyBuZXcgVHlwZUVycm9yKGFkZHJlc3MgKyAnIGlzIHRvbyBsb25nJylcblxuICB2YXIgbXVsdGlieXRlID0gcGF5bG9hZC5sZW5ndGggPT09IDIyXG4gIHZhciBvZmZzZXQgPSBtdWx0aWJ5dGUgPyAyIDogMVxuXG4gIHZhciB2ZXJzaW9uID0gbXVsdGlieXRlID8gcGF5bG9hZC5yZWFkVUludDE2QkUoMCkgOiBwYXlsb2FkWzBdXG4gIHZhciBoYXNoID0gcGF5bG9hZC5zbGljZShvZmZzZXQpXG5cbiAgcmV0dXJuIHsgaGFzaDogaGFzaCwgdmVyc2lvbjogdmVyc2lvbiB9XG59XG5cbmZ1bmN0aW9uIHRvQmFzZTU4Q2hlY2sgKGhhc2gsIHZlcnNpb24pIHtcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKHR5cGVzLkhhc2gxNjBiaXQsIHR5cGVzLlVJbnQxNiksIGFyZ3VtZW50cylcblxuICB2YXIgbXVsdGlieXRlID0gdmVyc2lvbiA+IDB4ZmZcbiAgdmFyIHNpemUgPSBtdWx0aWJ5dGUgPyAyMiA6IDIxXG4gIHZhciBvZmZzZXQgPSBtdWx0aWJ5dGUgPyAyIDogMVxuXG4gIHZhciBwYXlsb2FkID0gbmV3IEJ1ZmZlcihzaXplKVxuICBtdWx0aWJ5dGUgPyBwYXlsb2FkLndyaXRlVUludDE2QkUodmVyc2lvbiwgMCkgOiBwYXlsb2FkLndyaXRlVUludDgodmVyc2lvbiwgMClcbiAgaGFzaC5jb3B5KHBheWxvYWQsIG9mZnNldClcblxuICByZXR1cm4gYnM1OGNoZWNrLmVuY29kZShwYXlsb2FkKVxufVxuXG5mdW5jdGlvbiBmcm9tT3V0cHV0U2NyaXB0IChvdXRwdXRTY3JpcHQsIG5ldHdvcmspIHtcbiAgbmV0d29yayA9IG5ldHdvcmsgfHwgbmV0d29ya3MuYml0Y29pblxuXG4gIGlmIChic2NyaXB0LnB1YktleUhhc2gub3V0cHV0LmNoZWNrKG91dHB1dFNjcmlwdCkpIHJldHVybiB0b0Jhc2U1OENoZWNrKGJzY3JpcHQuY29tcGlsZShvdXRwdXRTY3JpcHQpLnNsaWNlKDMsIDIzKSwgbmV0d29yay5wdWJLZXlIYXNoKVxuICBpZiAoYnNjcmlwdC5zY3JpcHRIYXNoLm91dHB1dC5jaGVjayhvdXRwdXRTY3JpcHQpKSByZXR1cm4gdG9CYXNlNThDaGVjayhic2NyaXB0LmNvbXBpbGUob3V0cHV0U2NyaXB0KS5zbGljZSgyLCAyMiksIG5ldHdvcmsuc2NyaXB0SGFzaClcblxuICB0aHJvdyBuZXcgRXJyb3IoYnNjcmlwdC50b0FTTShvdXRwdXRTY3JpcHQpICsgJyBoYXMgbm8gbWF0Y2hpbmcgQWRkcmVzcycpXG59XG5cbmZ1bmN0aW9uIHRvT3V0cHV0U2NyaXB0IChhZGRyZXNzLCBuZXR3b3JrKSB7XG4gIG5ldHdvcmsgPSBuZXR3b3JrIHx8IG5ldHdvcmtzLmJpdGNvaW5cblxuICB2YXIgZGVjb2RlID0gZnJvbUJhc2U1OENoZWNrKGFkZHJlc3MpXG4gIGlmIChkZWNvZGUudmVyc2lvbiA9PT0gbmV0d29yay5wdWJLZXlIYXNoKSByZXR1cm4gYnNjcmlwdC5wdWJLZXlIYXNoLm91dHB1dC5lbmNvZGUoZGVjb2RlLmhhc2gpXG4gIGlmIChkZWNvZGUudmVyc2lvbiA9PT0gbmV0d29yay5zY3JpcHRIYXNoKSByZXR1cm4gYnNjcmlwdC5zY3JpcHRIYXNoLm91dHB1dC5lbmNvZGUoZGVjb2RlLmhhc2gpXG5cbiAgdGhyb3cgbmV3IEVycm9yKGFkZHJlc3MgKyAnIGhhcyBubyBtYXRjaGluZyBTY3JpcHQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbUJhc2U1OENoZWNrOiBmcm9tQmFzZTU4Q2hlY2ssXG4gIGZyb21PdXRwdXRTY3JpcHQ6IGZyb21PdXRwdXRTY3JpcHQsXG4gIHRvQmFzZTU4Q2hlY2s6IHRvQmFzZTU4Q2hlY2ssXG4gIHRvT3V0cHV0U2NyaXB0OiB0b091dHB1dFNjcmlwdFxufVxuIiwidmFyIGJ1ZmZlcnV0aWxzID0gcmVxdWlyZSgnLi9idWZmZXJ1dGlscycpXG52YXIgYmNyeXB0byA9IHJlcXVpcmUoJy4vY3J5cHRvJylcbnZhciBmYXN0TWVya2xlUm9vdCA9IHJlcXVpcmUoJ21lcmtsZS1saWIvZmFzdFJvb3QnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJylcblxudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi90cmFuc2FjdGlvbicpXG5cbmZ1bmN0aW9uIEJsb2NrICgpIHtcbiAgdGhpcy52ZXJzaW9uID0gMVxuICB0aGlzLnByZXZIYXNoID0gbnVsbFxuICB0aGlzLm1lcmtsZVJvb3QgPSBudWxsXG4gIHRoaXMudGltZXN0YW1wID0gMFxuICB0aGlzLmJpdHMgPSAwXG4gIHRoaXMubm9uY2UgPSAwXG59XG5cbkJsb2NrLmZyb21CdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIGlmIChidWZmZXIubGVuZ3RoIDwgODApIHRocm93IG5ldyBFcnJvcignQnVmZmVyIHRvbyBzbWFsbCAoPCA4MCBieXRlcyknKVxuXG4gIHZhciBvZmZzZXQgPSAwXG4gIGZ1bmN0aW9uIHJlYWRTbGljZSAobikge1xuICAgIG9mZnNldCArPSBuXG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZShvZmZzZXQgLSBuLCBvZmZzZXQpXG4gIH1cblxuICBmdW5jdGlvbiByZWFkVUludDMyICgpIHtcbiAgICB2YXIgaSA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0KVxuICAgIG9mZnNldCArPSA0XG4gICAgcmV0dXJuIGlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRJbnQzMiAoKSB7XG4gICAgdmFyIGkgPSBidWZmZXIucmVhZEludDMyTEUob2Zmc2V0KVxuICAgIG9mZnNldCArPSA0XG4gICAgcmV0dXJuIGlcbiAgfVxuXG4gIHZhciBibG9jayA9IG5ldyBCbG9jaygpXG4gIGJsb2NrLnZlcnNpb24gPSByZWFkSW50MzIoKVxuICBibG9jay5wcmV2SGFzaCA9IHJlYWRTbGljZSgzMilcbiAgYmxvY2subWVya2xlUm9vdCA9IHJlYWRTbGljZSgzMilcbiAgYmxvY2sudGltZXN0YW1wID0gcmVhZFVJbnQzMigpXG4gIGJsb2NrLmJpdHMgPSByZWFkVUludDMyKClcbiAgYmxvY2subm9uY2UgPSByZWFkVUludDMyKClcblxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gODApIHJldHVybiBibG9ja1xuXG4gIGZ1bmN0aW9uIHJlYWRWYXJJbnQgKCkge1xuICAgIHZhciB2aSA9IGJ1ZmZlcnV0aWxzLnJlYWRWYXJJbnQoYnVmZmVyLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IHZpLnNpemVcbiAgICByZXR1cm4gdmkubnVtYmVyXG4gIH1cblxuICBmdW5jdGlvbiByZWFkVHJhbnNhY3Rpb24gKCkge1xuICAgIHZhciB0eCA9IFRyYW5zYWN0aW9uLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKG9mZnNldCksIGZhbHNlLCB0cnVlKVxuXG4gICAgb2Zmc2V0ICs9IHR4LmJ5dGVMZW5ndGgoKVxuICAgIHJldHVybiB0eFxuICB9XG5cbiAgdmFyIG5UcmFuc2FjdGlvbnMgPSByZWFkVmFySW50KClcbiAgYmxvY2sudHJhbnNhY3Rpb25zID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5UcmFuc2FjdGlvbnM7ICsraSkge1xuICAgIHZhciB0eCA9IHJlYWRUcmFuc2FjdGlvbigpXG4gICAgYmxvY2sudHJhbnNhY3Rpb25zLnB1c2godHgpXG4gIH1cblxuICByZXR1cm4gYmxvY2tcbn1cblxuQmxvY2suZnJvbUhleCA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgcmV0dXJuIEJsb2NrLmZyb21CdWZmZXIobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSlcbn1cblxuQmxvY2sucHJvdG90eXBlLmdldEhhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBiY3J5cHRvLmhhc2gyNTYodGhpcy50b0J1ZmZlcih0cnVlKSlcbn1cblxuQmxvY2sucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRIYXNoKCkucmV2ZXJzZSgpLnRvU3RyaW5nKCdoZXgnKVxufVxuXG5CbG9jay5wcm90b3R5cGUuZ2V0VVRDRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSAvLyBlcG9jaFxuICBkYXRlLnNldFVUQ1NlY29uZHModGhpcy50aW1lc3RhbXApXG5cbiAgcmV0dXJuIGRhdGVcbn1cblxuQmxvY2sucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKGhlYWRlcnNPbmx5KSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKDgwKVxuXG4gIHZhciBvZmZzZXQgPSAwXG4gIGZ1bmN0aW9uIHdyaXRlU2xpY2UgKHNsaWNlKSB7XG4gICAgc2xpY2UuY29weShidWZmZXIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gc2xpY2UubGVuZ3RoXG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZUludDMyIChpKSB7XG4gICAgYnVmZmVyLndyaXRlSW50MzJMRShpLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IDRcbiAgfVxuICBmdW5jdGlvbiB3cml0ZVVJbnQzMiAoaSkge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkxFKGksIG9mZnNldClcbiAgICBvZmZzZXQgKz0gNFxuICB9XG5cbiAgd3JpdGVJbnQzMih0aGlzLnZlcnNpb24pXG4gIHdyaXRlU2xpY2UodGhpcy5wcmV2SGFzaClcbiAgd3JpdGVTbGljZSh0aGlzLm1lcmtsZVJvb3QpXG4gIHdyaXRlVUludDMyKHRoaXMudGltZXN0YW1wKVxuICB3cml0ZVVJbnQzMih0aGlzLmJpdHMpXG4gIHdyaXRlVUludDMyKHRoaXMubm9uY2UpXG5cbiAgaWYgKGhlYWRlcnNPbmx5IHx8ICF0aGlzLnRyYW5zYWN0aW9ucykgcmV0dXJuIGJ1ZmZlclxuXG4gIHZhciB0eExlbkJ1ZmZlciA9IGJ1ZmZlcnV0aWxzLnZhckludEJ1ZmZlcih0aGlzLnRyYW5zYWN0aW9ucy5sZW5ndGgpXG4gIHZhciB0eEJ1ZmZlcnMgPSB0aGlzLnRyYW5zYWN0aW9ucy5tYXAoZnVuY3Rpb24gKHR4KSB7XG4gICAgcmV0dXJuIHR4LnRvQnVmZmVyKClcbiAgfSlcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCB0eExlbkJ1ZmZlcl0uY29uY2F0KHR4QnVmZmVycykpXG59XG5cbkJsb2NrLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIChoZWFkZXJzT25seSkge1xuICByZXR1cm4gdGhpcy50b0J1ZmZlcihoZWFkZXJzT25seSkudG9TdHJpbmcoJ2hleCcpXG59XG5cbkJsb2NrLmNhbGN1bGF0ZVRhcmdldCA9IGZ1bmN0aW9uIChiaXRzKSB7XG4gIHZhciBleHBvbmVudCA9ICgoYml0cyAmIDB4ZmYwMDAwMDApID4+IDI0KSAtIDNcbiAgdmFyIG1hbnRpc3NhID0gYml0cyAmIDB4MDA3ZmZmZmZcbiAgdmFyIHRhcmdldCA9IG5ldyBCdWZmZXIoMzIpXG4gIHRhcmdldC5maWxsKDApXG4gIHRhcmdldC53cml0ZVVJbnQzMkJFKG1hbnRpc3NhLCAyOCAtIGV4cG9uZW50KVxuICByZXR1cm4gdGFyZ2V0XG59XG5cbkJsb2NrLmNhbGN1bGF0ZU1lcmtsZVJvb3QgPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25zKSB7XG4gIHR5cGVmb3JjZShbeyBnZXRIYXNoOiB0eXBlcy5GdW5jdGlvbiB9XSwgdHJhbnNhY3Rpb25zKVxuICBpZiAodHJhbnNhY3Rpb25zLmxlbmd0aCA9PT0gMCkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29tcHV0ZSBtZXJrbGUgcm9vdCBmb3IgemVybyB0cmFuc2FjdGlvbnMnKVxuXG4gIHZhciBoYXNoZXMgPSB0cmFuc2FjdGlvbnMubWFwKGZ1bmN0aW9uICh0cmFuc2FjdGlvbikge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbi5nZXRIYXNoKClcbiAgfSlcblxuICByZXR1cm4gZmFzdE1lcmtsZVJvb3QoaGFzaGVzLCBiY3J5cHRvLmhhc2gyNTYpXG59XG5cbkJsb2NrLnByb3RvdHlwZS5jaGVja01lcmtsZVJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy50cmFuc2FjdGlvbnMpIHJldHVybiBmYWxzZVxuXG4gIHZhciBhY3R1YWxNZXJrbGVSb290ID0gQmxvY2suY2FsY3VsYXRlTWVya2xlUm9vdCh0aGlzLnRyYW5zYWN0aW9ucylcbiAgcmV0dXJuIHRoaXMubWVya2xlUm9vdC5jb21wYXJlKGFjdHVhbE1lcmtsZVJvb3QpID09PSAwXG59XG5cbkJsb2NrLnByb3RvdHlwZS5jaGVja1Byb29mT2ZXb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGFzaCA9IHRoaXMuZ2V0SGFzaCgpLnJldmVyc2UoKVxuICB2YXIgdGFyZ2V0ID0gQmxvY2suY2FsY3VsYXRlVGFyZ2V0KHRoaXMuYml0cylcblxuICByZXR1cm4gaGFzaC5jb21wYXJlKHRhcmdldCkgPD0gMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrXG4iLCJ2YXIgcHVzaGRhdGEgPSByZXF1aXJlKCdwdXNoZGF0YS1iaXRjb2luJylcbnZhciB2YXJ1aW50ID0gcmVxdWlyZSgndmFydWludC1iaXRjb2luJylcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDExMjdcbmZ1bmN0aW9uIHZlcmlmdWludCAodmFsdWUsIG1heCkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgaWYgKHZhbHVlIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdzcGVjaWZpZWQgYSBuZWdhdGl2ZSB2YWx1ZSBmb3Igd3JpdGluZyBhbiB1bnNpZ25lZCB2YWx1ZScpXG4gIGlmICh2YWx1ZSA+IG1heCkgdGhyb3cgbmV3IEVycm9yKCdSYW5nZUVycm9yOiB2YWx1ZSBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlKSB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIGhhcyBhIGZyYWN0aW9uYWwgY29tcG9uZW50Jylcbn1cblxuZnVuY3Rpb24gcmVhZFVJbnQ2NExFIChidWZmZXIsIG9mZnNldCkge1xuICB2YXIgYSA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0KVxuICB2YXIgYiA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0ICsgNClcbiAgYiAqPSAweDEwMDAwMDAwMFxuXG4gIHZlcmlmdWludChiICsgYSwgMHgwMDFmZmZmZmZmZmZmZmZmKVxuXG4gIHJldHVybiBiICsgYVxufVxuXG5mdW5jdGlvbiB3cml0ZVVJbnQ2NExFIChidWZmZXIsIHZhbHVlLCBvZmZzZXQpIHtcbiAgdmVyaWZ1aW50KHZhbHVlLCAweDAwMWZmZmZmZmZmZmZmZmYpXG5cbiAgYnVmZmVyLndyaXRlSW50MzJMRSh2YWx1ZSAmIC0xLCBvZmZzZXQpXG4gIGJ1ZmZlci53cml0ZVVJbnQzMkxFKE1hdGguZmxvb3IodmFsdWUgLyAweDEwMDAwMDAwMCksIG9mZnNldCArIDQpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbi8vIFRPRE86IHJlbW92ZSBpbiA0LjAuMD9cbmZ1bmN0aW9uIHJlYWRWYXJJbnQgKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gIHZhciByZXN1bHQgPSB2YXJ1aW50LmRlY29kZShidWZmZXIsIG9mZnNldClcblxuICByZXR1cm4ge1xuICAgIG51bWJlcjogcmVzdWx0LFxuICAgIHNpemU6IHZhcnVpbnQuZGVjb2RlLmJ5dGVzXG4gIH1cbn1cblxuLy8gVE9ETzogcmVtb3ZlIGluIDQuMC4wP1xuZnVuY3Rpb24gd3JpdGVWYXJJbnQgKGJ1ZmZlciwgbnVtYmVyLCBvZmZzZXQpIHtcbiAgdmFydWludC5lbmNvZGUobnVtYmVyLCBidWZmZXIsIG9mZnNldClcbiAgcmV0dXJuIHZhcnVpbnQuZW5jb2RlLmJ5dGVzXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwdXNoRGF0YVNpemU6IHB1c2hkYXRhLmVuY29kaW5nTGVuZ3RoLFxuICByZWFkUHVzaERhdGFJbnQ6IHB1c2hkYXRhLmRlY29kZSxcbiAgcmVhZFVJbnQ2NExFOiByZWFkVUludDY0TEUsXG4gIHJlYWRWYXJJbnQ6IHJlYWRWYXJJbnQsXG4gIHZhckludEJ1ZmZlcjogdmFydWludC5lbmNvZGUsXG4gIHZhckludFNpemU6IHZhcnVpbnQuZW5jb2RpbmdMZW5ndGgsXG4gIHdyaXRlUHVzaERhdGFJbnQ6IHB1c2hkYXRhLmVuY29kZSxcbiAgd3JpdGVVSW50NjRMRTogd3JpdGVVSW50NjRMRSxcbiAgd3JpdGVWYXJJbnQ6IHdyaXRlVmFySW50XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcblxuZnVuY3Rpb24gcmlwZW1kMTYwIChidWZmZXIpIHtcbiAgcmV0dXJuIGNyZWF0ZUhhc2goJ3JtZDE2MCcpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG59XG5cbmZ1bmN0aW9uIHNoYTEgKGJ1ZmZlcikge1xuICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG59XG5cbmZ1bmN0aW9uIHNoYTI1NiAoYnVmZmVyKSB7XG4gIHJldHVybiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuXG5mdW5jdGlvbiBoYXNoMTYwIChidWZmZXIpIHtcbiAgcmV0dXJuIHJpcGVtZDE2MChzaGEyNTYoYnVmZmVyKSlcbn1cblxuZnVuY3Rpb24gaGFzaDI1NiAoYnVmZmVyKSB7XG4gIHJldHVybiBzaGEyNTYoc2hhMjU2KGJ1ZmZlcikpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBoYXNoMTYwOiBoYXNoMTYwLFxuICBoYXNoMjU2OiBoYXNoMjU2LFxuICByaXBlbWQxNjA6IHJpcGVtZDE2MCxcbiAgc2hhMTogc2hhMSxcbiAgc2hhMjU2OiBzaGEyNTZcbn1cbiIsInZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJylcblxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcbnZhciBFQ1NpZ25hdHVyZSA9IHJlcXVpcmUoJy4vZWNzaWduYXR1cmUnKVxuXG52YXIgWkVSTyA9IG5ldyBCdWZmZXIoWzBdKVxudmFyIE9ORSA9IG5ldyBCdWZmZXIoWzFdKVxuXG52YXIgZWN1cnZlID0gcmVxdWlyZSgnZWN1cnZlJylcbnZhciBzZWNwMjU2azEgPSBlY3VydmUuZ2V0Q3VydmVCeU5hbWUoJ3NlY3AyNTZrMScpXG5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTc5I3NlY3Rpb24tMy4yXG5mdW5jdGlvbiBkZXRlcm1pbmlzdGljR2VuZXJhdGVLIChoYXNoLCB4LCBjaGVja1NpZykge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUoXG4gICAgdHlwZXMuSGFzaDI1NmJpdCxcbiAgICB0eXBlcy5CdWZmZXIyNTZiaXQsXG4gICAgdHlwZXMuRnVuY3Rpb25cbiAgKSwgYXJndW1lbnRzKVxuXG4gIHZhciBrID0gbmV3IEJ1ZmZlcigzMilcbiAgdmFyIHYgPSBuZXcgQnVmZmVyKDMyKVxuXG4gIC8vIFN0ZXAgQSwgaWdub3JlZCBhcyBoYXNoIGFscmVhZHkgcHJvdmlkZWRcbiAgLy8gU3RlcCBCXG4gIHYuZmlsbCgxKVxuXG4gIC8vIFN0ZXAgQ1xuICBrLmZpbGwoMClcblxuICAvLyBTdGVwIERcbiAgayA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIGspXG4gICAgLnVwZGF0ZSh2KVxuICAgIC51cGRhdGUoWkVSTylcbiAgICAudXBkYXRlKHgpXG4gICAgLnVwZGF0ZShoYXNoKVxuICAgIC5kaWdlc3QoKVxuXG4gIC8vIFN0ZXAgRVxuICB2ID0gY3JlYXRlSG1hYygnc2hhMjU2JywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG5cbiAgLy8gU3RlcCBGXG4gIGsgPSBjcmVhdGVIbWFjKCdzaGEyNTYnLCBrKVxuICAgIC51cGRhdGUodilcbiAgICAudXBkYXRlKE9ORSlcbiAgICAudXBkYXRlKHgpXG4gICAgLnVwZGF0ZShoYXNoKVxuICAgIC5kaWdlc3QoKVxuXG4gIC8vIFN0ZXAgR1xuICB2ID0gY3JlYXRlSG1hYygnc2hhMjU2JywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG5cbiAgLy8gU3RlcCBIMS9IMmEsIGlnbm9yZWQgYXMgdGxlbiA9PT0gcWxlbiAoMjU2IGJpdClcbiAgLy8gU3RlcCBIMmJcbiAgdiA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuXG4gIHZhciBUID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKHYpXG5cbiAgLy8gU3RlcCBIMywgcmVwZWF0IHVudGlsIFQgaXMgd2l0aGluIHRoZSBpbnRlcnZhbCBbMSwgbiAtIDFdIGFuZCBpcyBzdWl0YWJsZSBmb3IgRUNEU0FcbiAgd2hpbGUgKFQuc2lnbnVtKCkgPD0gMCB8fCBULmNvbXBhcmVUbyhzZWNwMjU2azEubikgPj0gMCB8fCAhY2hlY2tTaWcoVCkpIHtcbiAgICBrID0gY3JlYXRlSG1hYygnc2hhMjU2JywgaylcbiAgICAgIC51cGRhdGUodilcbiAgICAgIC51cGRhdGUoWkVSTylcbiAgICAgIC5kaWdlc3QoKVxuXG4gICAgdiA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuXG4gICAgLy8gU3RlcCBIMS9IMmEsIGFnYWluLCBpZ25vcmVkIGFzIHRsZW4gPT09IHFsZW4gKDI1NiBiaXQpXG4gICAgLy8gU3RlcCBIMmIgYWdhaW5cbiAgICB2ID0gY3JlYXRlSG1hYygnc2hhMjU2JywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gICAgVCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcih2KVxuICB9XG5cbiAgcmV0dXJuIFRcbn1cblxudmFyIE5fT1ZFUl9UV08gPSBzZWNwMjU2azEubi5zaGlmdFJpZ2h0KDEpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGQpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKHR5cGVzLkhhc2gyNTZiaXQsIHR5cGVzLkJpZ0ludCksIGFyZ3VtZW50cylcblxuICB2YXIgeCA9IGQudG9CdWZmZXIoMzIpXG4gIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGhhc2gpXG4gIHZhciBuID0gc2VjcDI1NmsxLm5cbiAgdmFyIEcgPSBzZWNwMjU2azEuR1xuXG4gIHZhciByLCBzXG4gIGRldGVybWluaXN0aWNHZW5lcmF0ZUsoaGFzaCwgeCwgZnVuY3Rpb24gKGspIHtcbiAgICB2YXIgUSA9IEcubXVsdGlwbHkoaylcblxuICAgIGlmIChzZWNwMjU2azEuaXNJbmZpbml0eShRKSkgcmV0dXJuIGZhbHNlXG5cbiAgICByID0gUS5hZmZpbmVYLm1vZChuKVxuICAgIGlmIChyLnNpZ251bSgpID09PSAwKSByZXR1cm4gZmFsc2VcblxuICAgIHMgPSBrLm1vZEludmVyc2UobikubXVsdGlwbHkoZS5hZGQoZC5tdWx0aXBseShyKSkpLm1vZChuKVxuICAgIGlmIChzLnNpZ251bSgpID09PSAwKSByZXR1cm4gZmFsc2VcblxuICAgIHJldHVybiB0cnVlXG4gIH0pXG5cbiAgLy8gZW5mb3JjZSBsb3cgUyB2YWx1ZXMsIHNlZSBiaXA2MjogJ2xvdyBzIHZhbHVlcyBpbiBzaWduYXR1cmVzJ1xuICBpZiAocy5jb21wYXJlVG8oTl9PVkVSX1RXTykgPiAwKSB7XG4gICAgcyA9IG4uc3VidHJhY3QocylcbiAgfVxuXG4gIHJldHVybiBuZXcgRUNTaWduYXR1cmUociwgcylcbn1cblxuZnVuY3Rpb24gdmVyaWZ5IChoYXNoLCBzaWduYXR1cmUsIFEpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKFxuICAgIHR5cGVzLkhhc2gyNTZiaXQsXG4gICAgdHlwZXMuRUNTaWduYXR1cmUsXG4gICAgdHlwZXMuRUNQb2ludFxuICApLCBhcmd1bWVudHMpXG5cbiAgdmFyIG4gPSBzZWNwMjU2azEublxuICB2YXIgRyA9IHNlY3AyNTZrMS5HXG5cbiAgdmFyIHIgPSBzaWduYXR1cmUuclxuICB2YXIgcyA9IHNpZ25hdHVyZS5zXG5cbiAgLy8gMS40LjEgRW5mb3JjZSByIGFuZCBzIGFyZSBib3RoIGludGVnZXJzIGluIHRoZSBpbnRlcnZhbCBbMSwgbiDiiJIgMV1cbiAgaWYgKHIuc2lnbnVtKCkgPD0gMCB8fCByLmNvbXBhcmVUbyhuKSA+PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKHMuc2lnbnVtKCkgPD0gMCB8fCBzLmNvbXBhcmVUbyhuKSA+PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyAxLjQuMiBIID0gSGFzaChNKSwgYWxyZWFkeSBkb25lIGJ5IHRoZSB1c2VyXG4gIC8vIDEuNC4zIGUgPSBIXG4gIHZhciBlID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGhhc2gpXG5cbiAgLy8gQ29tcHV0ZSBzXi0xXG4gIHZhciBzSW52ID0gcy5tb2RJbnZlcnNlKG4pXG5cbiAgLy8gMS40LjQgQ29tcHV0ZSB1MSA9IGVzXuKIkjEgbW9kIG5cbiAgLy8gICAgICAgICAgICAgICB1MiA9IHJzXuKIkjEgbW9kIG5cbiAgdmFyIHUxID0gZS5tdWx0aXBseShzSW52KS5tb2QobilcbiAgdmFyIHUyID0gci5tdWx0aXBseShzSW52KS5tb2QobilcblxuICAvLyAxLjQuNSBDb21wdXRlIFIgPSAoeFIsIHlSKVxuICAvLyAgICAgICAgICAgICAgIFIgPSB1MUcgKyB1MlFcbiAgdmFyIFIgPSBHLm11bHRpcGx5VHdvKHUxLCBRLCB1MilcblxuICAvLyAxLjQuNSAoY29udC4pIEVuZm9yY2UgUiBpcyBub3QgYXQgaW5maW5pdHlcbiAgaWYgKHNlY3AyNTZrMS5pc0luZmluaXR5KFIpKSByZXR1cm4gZmFsc2VcblxuICAvLyAxLjQuNiBDb252ZXJ0IHRoZSBmaWVsZCBlbGVtZW50IFIueCB0byBhbiBpbnRlZ2VyXG4gIHZhciB4UiA9IFIuYWZmaW5lWFxuXG4gIC8vIDEuNC43IFNldCB2ID0geFIgbW9kIG5cbiAgdmFyIHYgPSB4Ui5tb2QobilcblxuICAvLyAxLjQuOCBJZiB2ID0gciwgb3V0cHV0IFwidmFsaWRcIiwgYW5kIGlmIHYgIT0gciwgb3V0cHV0IFwiaW52YWxpZFwiXG4gIHJldHVybiB2LmVxdWFscyhyKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSzogZGV0ZXJtaW5pc3RpY0dlbmVyYXRlSyxcbiAgc2lnbjogc2lnbixcbiAgdmVyaWZ5OiB2ZXJpZnksXG5cbiAgLy8gVE9ETzogcmVtb3ZlXG4gIF9fY3VydmU6IHNlY3AyNTZrMVxufVxuIiwidmFyIGJhZGRyZXNzID0gcmVxdWlyZSgnLi9hZGRyZXNzJylcbnZhciBiY3J5cHRvID0gcmVxdWlyZSgnLi9jcnlwdG8nKVxudmFyIGVjZHNhID0gcmVxdWlyZSgnLi9lY2RzYScpXG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKVxudmFyIHdpZiA9IHJlcXVpcmUoJ3dpZicpXG5cbnZhciBORVRXT1JLUyA9IHJlcXVpcmUoJy4vbmV0d29ya3MnKVxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxudmFyIGVjdXJ2ZSA9IHJlcXVpcmUoJ2VjdXJ2ZScpXG52YXIgc2VjcDI1NmsxID0gZWNkc2EuX19jdXJ2ZVxuXG5mdW5jdGlvbiBFQ1BhaXIgKGQsIFEsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0eXBlZm9yY2Uoe1xuICAgICAgY29tcHJlc3NlZDogdHlwZXMubWF5YmUodHlwZXMuQm9vbGVhbiksXG4gICAgICBuZXR3b3JrOiB0eXBlcy5tYXliZSh0eXBlcy5OZXR3b3JrKVxuICAgIH0sIG9wdGlvbnMpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChkKSB7XG4gICAgaWYgKGQuc2lnbnVtKCkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdQcml2YXRlIGtleSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJylcbiAgICBpZiAoZC5jb21wYXJlVG8oc2VjcDI1NmsxLm4pID49IDApIHRocm93IG5ldyBFcnJvcignUHJpdmF0ZSBrZXkgbXVzdCBiZSBsZXNzIHRoYW4gdGhlIGN1cnZlIG9yZGVyJylcbiAgICBpZiAoUSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBwdWJsaWNLZXkgcGFyYW1ldGVyJylcblxuICAgIHRoaXMuZCA9IGRcbiAgfSBlbHNlIHtcbiAgICB0eXBlZm9yY2UodHlwZXMuRUNQb2ludCwgUSlcblxuICAgIHRoaXMuX19RID0gUVxuICB9XG5cbiAgdGhpcy5jb21wcmVzc2VkID0gb3B0aW9ucy5jb21wcmVzc2VkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5jb21wcmVzc2VkXG4gIHRoaXMubmV0d29yayA9IG9wdGlvbnMubmV0d29yayB8fCBORVRXT1JLUy5iaXRjb2luXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFQ1BhaXIucHJvdG90eXBlLCAnUScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fUSAmJiB0aGlzLmQpIHtcbiAgICAgIHRoaXMuX19RID0gc2VjcDI1NmsxLkcubXVsdGlwbHkodGhpcy5kKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fUVxuICB9XG59KVxuXG5FQ1BhaXIuZnJvbVB1YmxpY0tleUJ1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIsIG5ldHdvcmspIHtcbiAgdmFyIFEgPSBlY3VydmUuUG9pbnQuZGVjb2RlRnJvbShzZWNwMjU2azEsIGJ1ZmZlcilcblxuICByZXR1cm4gbmV3IEVDUGFpcihudWxsLCBRLCB7XG4gICAgY29tcHJlc3NlZDogUS5jb21wcmVzc2VkLFxuICAgIG5ldHdvcms6IG5ldHdvcmtcbiAgfSlcbn1cblxuRUNQYWlyLmZyb21XSUYgPSBmdW5jdGlvbiAoc3RyaW5nLCBuZXR3b3JrKSB7XG4gIHZhciBkZWNvZGVkID0gd2lmLmRlY29kZShzdHJpbmcpXG4gIHZhciB2ZXJzaW9uID0gZGVjb2RlZC52ZXJzaW9uXG5cbiAgLy8gW25ldHdvcmssIC4uLl1cbiAgaWYgKHR5cGVzLkFycmF5KG5ldHdvcmspKSB7XG4gICAgbmV0d29yayA9IG5ldHdvcmsuZmlsdGVyKGZ1bmN0aW9uIChuZXR3b3JrKSB7XG4gICAgICByZXR1cm4gdmVyc2lvbiA9PT0gbmV0d29yay53aWZcbiAgICB9KS5wb3AoKVxuXG4gICAgaWYgKCFuZXR3b3JrKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbmV0d29yayB2ZXJzaW9uJylcblxuICAvLyBuZXR3b3JrXG4gIH0gZWxzZSB7XG4gICAgbmV0d29yayA9IG5ldHdvcmsgfHwgTkVUV09SS1MuYml0Y29pblxuXG4gICAgaWYgKHZlcnNpb24gIT09IG5ldHdvcmsud2lmKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbmV0d29yayB2ZXJzaW9uJylcbiAgfVxuXG4gIHZhciBkID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGRlY29kZWQucHJpdmF0ZUtleSlcblxuICByZXR1cm4gbmV3IEVDUGFpcihkLCBudWxsLCB7XG4gICAgY29tcHJlc3NlZDogZGVjb2RlZC5jb21wcmVzc2VkLFxuICAgIG5ldHdvcms6IG5ldHdvcmtcbiAgfSlcbn1cblxuRUNQYWlyLm1ha2VSYW5kb20gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBybmcgPSBvcHRpb25zLnJuZyB8fCByYW5kb21CeXRlc1xuXG4gIHZhciBkXG4gIGRvIHtcbiAgICB2YXIgYnVmZmVyID0gcm5nKDMyKVxuICAgIHR5cGVmb3JjZSh0eXBlcy5CdWZmZXIyNTZiaXQsIGJ1ZmZlcilcblxuICAgIGQgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyKVxuICB9IHdoaWxlIChkLnNpZ251bSgpIDw9IDAgfHwgZC5jb21wYXJlVG8oc2VjcDI1NmsxLm4pID49IDApXG5cbiAgcmV0dXJuIG5ldyBFQ1BhaXIoZCwgbnVsbCwgb3B0aW9ucylcbn1cblxuRUNQYWlyLnByb3RvdHlwZS5nZXRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYmFkZHJlc3MudG9CYXNlNThDaGVjayhiY3J5cHRvLmhhc2gxNjAodGhpcy5nZXRQdWJsaWNLZXlCdWZmZXIoKSksIHRoaXMuZ2V0TmV0d29yaygpLnB1YktleUhhc2gpXG59XG5cbkVDUGFpci5wcm90b3R5cGUuZ2V0TmV0d29yayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubmV0d29ya1xufVxuXG5FQ1BhaXIucHJvdG90eXBlLmdldFB1YmxpY0tleUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuUS5nZXRFbmNvZGVkKHRoaXMuY29tcHJlc3NlZClcbn1cblxuRUNQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gKGhhc2gpIHtcbiAgaWYgKCF0aGlzLmQpIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwcml2YXRlIGtleScpXG5cbiAgcmV0dXJuIGVjZHNhLnNpZ24oaGFzaCwgdGhpcy5kKVxufVxuXG5FQ1BhaXIucHJvdG90eXBlLnRvV0lGID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuZCkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHByaXZhdGUga2V5JylcblxuICByZXR1cm4gd2lmLmVuY29kZSh0aGlzLm5ldHdvcmsud2lmLCB0aGlzLmQudG9CdWZmZXIoMzIpLCB0aGlzLmNvbXByZXNzZWQpXG59XG5cbkVDUGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gKGhhc2gsIHNpZ25hdHVyZSkge1xuICByZXR1cm4gZWNkc2EudmVyaWZ5KGhhc2gsIHNpZ25hdHVyZSwgdGhpcy5RKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVDUGFpclxuIiwidmFyIGJpcDY2ID0gcmVxdWlyZSgnYmlwNjYnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJylcblxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxuZnVuY3Rpb24gRUNTaWduYXR1cmUgKHIsIHMpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKHR5cGVzLkJpZ0ludCwgdHlwZXMuQmlnSW50KSwgYXJndW1lbnRzKVxuXG4gIHRoaXMuciA9IHJcbiAgdGhpcy5zID0gc1xufVxuXG5FQ1NpZ25hdHVyZS5wYXJzZUNvbXBhY3QgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIGlmIChidWZmZXIubGVuZ3RoICE9PSA2NSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZSBsZW5ndGgnKVxuXG4gIHZhciBmbGFnQnl0ZSA9IGJ1ZmZlci5yZWFkVUludDgoMCkgLSAyN1xuICBpZiAoZmxhZ0J5dGUgIT09IChmbGFnQnl0ZSAmIDcpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHBhcmFtZXRlcicpXG5cbiAgdmFyIGNvbXByZXNzZWQgPSAhIShmbGFnQnl0ZSAmIDQpXG4gIHZhciByZWNvdmVyeVBhcmFtID0gZmxhZ0J5dGUgJiAzXG5cbiAgdmFyIHIgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDMzKSlcbiAgdmFyIHMgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDMzKSlcblxuICByZXR1cm4ge1xuICAgIGNvbXByZXNzZWQ6IGNvbXByZXNzZWQsXG4gICAgaTogcmVjb3ZlcnlQYXJhbSxcbiAgICBzaWduYXR1cmU6IG5ldyBFQ1NpZ25hdHVyZShyLCBzKVxuICB9XG59XG5cbkVDU2lnbmF0dXJlLmZyb21ERVIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHZhciBkZWNvZGUgPSBiaXA2Ni5kZWNvZGUoYnVmZmVyKVxuICB2YXIgciA9IEJpZ0ludGVnZXIuZnJvbURFUkludGVnZXIoZGVjb2RlLnIpXG4gIHZhciBzID0gQmlnSW50ZWdlci5mcm9tREVSSW50ZWdlcihkZWNvZGUucylcblxuICByZXR1cm4gbmV3IEVDU2lnbmF0dXJlKHIsIHMpXG59XG5cbi8vIEJJUDYyOiAxIGJ5dGUgaGFzaFR5cGUgZmxhZyAob25seSAweDAxLCAweDAyLCAweDAzLCAweDgxLCAweDgyIGFuZCAweDgzIGFyZSBhbGxvd2VkKVxuRUNTaWduYXR1cmUucGFyc2VTY3JpcHRTaWduYXR1cmUgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHZhciBoYXNoVHlwZSA9IGJ1ZmZlci5yZWFkVUludDgoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIHZhciBoYXNoVHlwZU1vZCA9IGhhc2hUeXBlICYgfjB4ODBcblxuICBpZiAoaGFzaFR5cGVNb2QgPD0gMHgwMCB8fCBoYXNoVHlwZU1vZCA+PSAweDA0KSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGFzaFR5cGUgJyArIGhhc2hUeXBlKVxuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBFQ1NpZ25hdHVyZS5mcm9tREVSKGJ1ZmZlci5zbGljZSgwLCAtMSkpLFxuICAgIGhhc2hUeXBlOiBoYXNoVHlwZVxuICB9XG59XG5cbkVDU2lnbmF0dXJlLnByb3RvdHlwZS50b0NvbXBhY3QgPSBmdW5jdGlvbiAoaSwgY29tcHJlc3NlZCkge1xuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGkgKz0gNFxuICB9XG5cbiAgaSArPSAyN1xuXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKDY1KVxuICBidWZmZXIud3JpdGVVSW50OChpLCAwKVxuXG4gIHRoaXMuci50b0J1ZmZlcigzMikuY29weShidWZmZXIsIDEpXG4gIHRoaXMucy50b0J1ZmZlcigzMikuY29weShidWZmZXIsIDMzKVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxuRUNTaWduYXR1cmUucHJvdG90eXBlLnRvREVSID0gZnVuY3Rpb24gKCkge1xuICB2YXIgciA9IG5ldyBCdWZmZXIodGhpcy5yLnRvREVSSW50ZWdlcigpKVxuICB2YXIgcyA9IG5ldyBCdWZmZXIodGhpcy5zLnRvREVSSW50ZWdlcigpKVxuXG4gIHJldHVybiBiaXA2Ni5lbmNvZGUociwgcylcbn1cblxuRUNTaWduYXR1cmUucHJvdG90eXBlLnRvU2NyaXB0U2lnbmF0dXJlID0gZnVuY3Rpb24gKGhhc2hUeXBlKSB7XG4gIHZhciBoYXNoVHlwZU1vZCA9IGhhc2hUeXBlICYgfjB4ODBcbiAgaWYgKGhhc2hUeXBlTW9kIDw9IDAgfHwgaGFzaFR5cGVNb2QgPj0gNCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhhc2hUeXBlICcgKyBoYXNoVHlwZSlcblxuICB2YXIgaGFzaFR5cGVCdWZmZXIgPSBuZXcgQnVmZmVyKDEpXG4gIGhhc2hUeXBlQnVmZmVyLndyaXRlVUludDgoaGFzaFR5cGUsIDApXG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RoaXMudG9ERVIoKSwgaGFzaFR5cGVCdWZmZXJdKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVDU2lnbmF0dXJlXG4iLCJ2YXIgYmFzZTU4Y2hlY2sgPSByZXF1aXJlKCdiczU4Y2hlY2snKVxudmFyIGJjcnlwdG8gPSByZXF1aXJlKCcuL2NyeXB0bycpXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpXG52YXIgTkVUV09SS1MgPSByZXF1aXJlKCcuL25ldHdvcmtzJylcblxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcbnZhciBFQ1BhaXIgPSByZXF1aXJlKCcuL2VjcGFpcicpXG5cbnZhciBlY3VydmUgPSByZXF1aXJlKCdlY3VydmUnKVxudmFyIGN1cnZlID0gZWN1cnZlLmdldEN1cnZlQnlOYW1lKCdzZWNwMjU2azEnKVxuXG5mdW5jdGlvbiBIRE5vZGUgKGtleVBhaXIsIGNoYWluQ29kZSkge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUoJ0VDUGFpcicsIHR5cGVzLkJ1ZmZlcjI1NmJpdCksIGFyZ3VtZW50cylcblxuICBpZiAoIWtleVBhaXIuY29tcHJlc3NlZCkgdGhyb3cgbmV3IFR5cGVFcnJvcignQklQMzIgb25seSBhbGxvd3MgY29tcHJlc3NlZCBrZXlQYWlycycpXG5cbiAgdGhpcy5rZXlQYWlyID0ga2V5UGFpclxuICB0aGlzLmNoYWluQ29kZSA9IGNoYWluQ29kZVxuICB0aGlzLmRlcHRoID0gMFxuICB0aGlzLmluZGV4ID0gMFxuICB0aGlzLnBhcmVudEZpbmdlcnByaW50ID0gMHgwMDAwMDAwMFxufVxuXG5IRE5vZGUuSElHSEVTVF9CSVQgPSAweDgwMDAwMDAwXG5IRE5vZGUuTEVOR1RIID0gNzhcbkhETm9kZS5NQVNURVJfU0VDUkVUID0gbmV3IEJ1ZmZlcignQml0Y29pbiBzZWVkJylcblxuSEROb2RlLmZyb21TZWVkQnVmZmVyID0gZnVuY3Rpb24gKHNlZWQsIG5ldHdvcmspIHtcbiAgdHlwZWZvcmNlKHR5cGVzLnR1cGxlKHR5cGVzLkJ1ZmZlciwgdHlwZXMubWF5YmUodHlwZXMuTmV0d29yaykpLCBhcmd1bWVudHMpXG5cbiAgaWYgKHNlZWQubGVuZ3RoIDwgMTYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NlZWQgc2hvdWxkIGJlIGF0IGxlYXN0IDEyOCBiaXRzJylcbiAgaWYgKHNlZWQubGVuZ3RoID4gNjQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NlZWQgc2hvdWxkIGJlIGF0IG1vc3QgNTEyIGJpdHMnKVxuXG4gIHZhciBJID0gY3JlYXRlSG1hYygnc2hhNTEyJywgSEROb2RlLk1BU1RFUl9TRUNSRVQpLnVwZGF0ZShzZWVkKS5kaWdlc3QoKVxuICB2YXIgSUwgPSBJLnNsaWNlKDAsIDMyKVxuICB2YXIgSVIgPSBJLnNsaWNlKDMyKVxuXG4gIC8vIEluIGNhc2UgSUwgaXMgMCBvciA+PSBuLCB0aGUgbWFzdGVyIGtleSBpcyBpbnZhbGlkXG4gIC8vIFRoaXMgaXMgaGFuZGxlZCBieSB0aGUgRUNQYWlyIGNvbnN0cnVjdG9yXG4gIHZhciBwSUwgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoSUwpXG4gIHZhciBrZXlQYWlyID0gbmV3IEVDUGFpcihwSUwsIG51bGwsIHtcbiAgICBuZXR3b3JrOiBuZXR3b3JrXG4gIH0pXG5cbiAgcmV0dXJuIG5ldyBIRE5vZGUoa2V5UGFpciwgSVIpXG59XG5cbkhETm9kZS5mcm9tU2VlZEhleCA9IGZ1bmN0aW9uIChoZXgsIG5ldHdvcmspIHtcbiAgcmV0dXJuIEhETm9kZS5mcm9tU2VlZEJ1ZmZlcihuZXcgQnVmZmVyKGhleCwgJ2hleCcpLCBuZXR3b3JrKVxufVxuXG5IRE5vZGUuZnJvbUJhc2U1OCA9IGZ1bmN0aW9uIChzdHJpbmcsIG5ldHdvcmtzLCBza2lwVmFsaWRhdGlvbikge1xuICB2YXIgYnVmZmVyID0gYmFzZTU4Y2hlY2suZGVjb2RlKHN0cmluZylcbiAgaWYgKGJ1ZmZlci5sZW5ndGggIT09IDc4KSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnVmZmVyIGxlbmd0aCcpXG5cbiAgLy8gNCBieXRlczogdmVyc2lvbiBieXRlc1xuICB2YXIgdmVyc2lvbiA9IGJ1ZmZlci5yZWFkVUludDMyQkUoMClcbiAgdmFyIG5ldHdvcmtcblxuICAvLyBsaXN0IG9mIG5ldHdvcmtzP1xuICBpZiAoQXJyYXkuaXNBcnJheShuZXR3b3JrcykpIHtcbiAgICBuZXR3b3JrID0gbmV0d29ya3MuZmlsdGVyKGZ1bmN0aW9uIChuZXR3b3JrKSB7XG4gICAgICByZXR1cm4gdmVyc2lvbiA9PT0gbmV0d29yay5iaXAzMi5wcml2YXRlIHx8XG4gICAgICAgICAgICAgdmVyc2lvbiA9PT0gbmV0d29yay5iaXAzMi5wdWJsaWNcbiAgICB9KS5wb3AoKVxuXG4gICAgaWYgKCFuZXR3b3JrKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbmV0d29yayB2ZXJzaW9uJylcblxuICAvLyBvdGhlcndpc2UsIGFzc3VtZSBhIG5ldHdvcmsgb2JqZWN0IChvciBkZWZhdWx0IHRvIGJpdGNvaW4pXG4gIH0gZWxzZSB7XG4gICAgbmV0d29yayA9IG5ldHdvcmtzIHx8IE5FVFdPUktTLmJpdGNvaW5cbiAgfVxuXG4gIGlmICh2ZXJzaW9uICE9PSBuZXR3b3JrLmJpcDMyLnByaXZhdGUgJiZcbiAgICB2ZXJzaW9uICE9PSBuZXR3b3JrLmJpcDMyLnB1YmxpYykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG5ldHdvcmsgdmVyc2lvbicpXG5cbiAgLy8gMSBieXRlOiBkZXB0aDogMHgwMCBmb3IgbWFzdGVyIG5vZGVzLCAweDAxIGZvciBsZXZlbC0xIGRlc2NlbmRhbnRzLCAuLi5cbiAgdmFyIGRlcHRoID0gYnVmZmVyWzRdXG5cbiAgLy8gNCBieXRlczogdGhlIGZpbmdlcnByaW50IG9mIHRoZSBwYXJlbnQncyBrZXkgKDB4MDAwMDAwMDAgaWYgbWFzdGVyIGtleSlcbiAgdmFyIHBhcmVudEZpbmdlcnByaW50ID0gYnVmZmVyLnJlYWRVSW50MzJCRSg1KVxuICBpZiAoZGVwdGggPT09IDApIHtcbiAgICBpZiAocGFyZW50RmluZ2VycHJpbnQgIT09IDB4MDAwMDAwMDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwYXJlbnQgZmluZ2VycHJpbnQnKVxuICB9XG5cbiAgLy8gNCBieXRlczogY2hpbGQgbnVtYmVyLiBUaGlzIGlzIHRoZSBudW1iZXIgaSBpbiB4aSA9IHhwYXIvaSwgd2l0aCB4aSB0aGUga2V5IGJlaW5nIHNlcmlhbGl6ZWQuXG4gIC8vIFRoaXMgaXMgZW5jb2RlZCBpbiBNU0Igb3JkZXIuICgweDAwMDAwMDAwIGlmIG1hc3RlciBrZXkpXG4gIHZhciBpbmRleCA9IGJ1ZmZlci5yZWFkVUludDMyQkUoOSlcbiAgaWYgKGRlcHRoID09PSAwICYmIGluZGV4ICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXgnKVxuXG4gIC8vIDMyIGJ5dGVzOiB0aGUgY2hhaW4gY29kZVxuICB2YXIgY2hhaW5Db2RlID0gYnVmZmVyLnNsaWNlKDEzLCA0NSlcbiAgdmFyIGtleVBhaXJcblxuICAvLyAzMyBieXRlczogcHJpdmF0ZSBrZXkgZGF0YSAoMHgwMCArIGspXG4gIGlmICh2ZXJzaW9uID09PSBuZXR3b3JrLmJpcDMyLnByaXZhdGUpIHtcbiAgICBpZiAoYnVmZmVyLnJlYWRVSW50OCg0NSkgIT09IDB4MDApIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcml2YXRlIGtleScpXG5cbiAgICB2YXIgZCA9IEJpZ0ludGVnZXIuZnJvbUJ1ZmZlcihidWZmZXIuc2xpY2UoNDYsIDc4KSlcbiAgICBrZXlQYWlyID0gbmV3IEVDUGFpcihkLCBudWxsLCB7IG5ldHdvcms6IG5ldHdvcmsgfSlcblxuICAvLyAzMyBieXRlczogcHVibGljIGtleSBkYXRhICgweDAyICsgWCBvciAweDAzICsgWClcbiAgfSBlbHNlIHtcbiAgICB2YXIgUSA9IGVjdXJ2ZS5Qb2ludC5kZWNvZGVGcm9tKGN1cnZlLCBidWZmZXIuc2xpY2UoNDUsIDc4KSlcbiAgICAvLyBRLmNvbXByZXNzZWQgaXMgYXNzdW1lZCwgaWYgc29tZWhvdyB0aGlzIGFzc3VtcHRpb24gaXMgYnJva2VuLCBgbmV3IEhETm9kZWAgd2lsbCB0aHJvd1xuXG4gICAgLy8gU2tpcCB2YWxpZGF0aW9uIGlmIHJlcXVlc3RlZCBmb3IgZWZmaWNpZW5jeVxuICAgIGlmICghc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBYIGNvb3JkaW5hdGUgaW4gdGhlIHB1YmxpYyBwb2ludCBjb3JyZXNwb25kcyB0byBhIHBvaW50IG9uIHRoZSBjdXJ2ZS5cbiAgICAgIC8vIElmIG5vdCwgdGhlIGV4dGVuZGVkIHB1YmxpYyBrZXkgaXMgaW52YWxpZC5cbiAgICAgIGN1cnZlLnZhbGlkYXRlKFEpXG4gICAgfVxuXG4gICAga2V5UGFpciA9IG5ldyBFQ1BhaXIobnVsbCwgUSwgeyBuZXR3b3JrOiBuZXR3b3JrIH0pXG4gIH1cblxuICB2YXIgaGQgPSBuZXcgSEROb2RlKGtleVBhaXIsIGNoYWluQ29kZSlcbiAgaGQuZGVwdGggPSBkZXB0aFxuICBoZC5pbmRleCA9IGluZGV4XG4gIGhkLnBhcmVudEZpbmdlcnByaW50ID0gcGFyZW50RmluZ2VycHJpbnRcblxuICByZXR1cm4gaGRcbn1cblxuSEROb2RlLnByb3RvdHlwZS5nZXRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5rZXlQYWlyLmdldEFkZHJlc3MoKVxufVxuXG5IRE5vZGUucHJvdG90eXBlLmdldElkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBiY3J5cHRvLmhhc2gxNjAodGhpcy5rZXlQYWlyLmdldFB1YmxpY0tleUJ1ZmZlcigpKVxufVxuXG5IRE5vZGUucHJvdG90eXBlLmdldEZpbmdlcnByaW50ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5nZXRJZGVudGlmaWVyKCkuc2xpY2UoMCwgNClcbn1cblxuSEROb2RlLnByb3RvdHlwZS5nZXROZXR3b3JrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5rZXlQYWlyLmdldE5ldHdvcmsoKVxufVxuXG5IRE5vZGUucHJvdG90eXBlLmdldFB1YmxpY0tleUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMua2V5UGFpci5nZXRQdWJsaWNLZXlCdWZmZXIoKVxufVxuXG5IRE5vZGUucHJvdG90eXBlLm5ldXRlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbmV1dGVyZWRLZXlQYWlyID0gbmV3IEVDUGFpcihudWxsLCB0aGlzLmtleVBhaXIuUSwge1xuICAgIG5ldHdvcms6IHRoaXMua2V5UGFpci5uZXR3b3JrXG4gIH0pXG5cbiAgdmFyIG5ldXRlcmVkID0gbmV3IEhETm9kZShuZXV0ZXJlZEtleVBhaXIsIHRoaXMuY2hhaW5Db2RlKVxuICBuZXV0ZXJlZC5kZXB0aCA9IHRoaXMuZGVwdGhcbiAgbmV1dGVyZWQuaW5kZXggPSB0aGlzLmluZGV4XG4gIG5ldXRlcmVkLnBhcmVudEZpbmdlcnByaW50ID0gdGhpcy5wYXJlbnRGaW5nZXJwcmludFxuXG4gIHJldHVybiBuZXV0ZXJlZFxufVxuXG5IRE5vZGUucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiAoaGFzaCkge1xuICByZXR1cm4gdGhpcy5rZXlQYWlyLnNpZ24oaGFzaClcbn1cblxuSEROb2RlLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiAoaGFzaCwgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmtleVBhaXIudmVyaWZ5KGhhc2gsIHNpZ25hdHVyZSlcbn1cblxuSEROb2RlLnByb3RvdHlwZS50b0Jhc2U1OCA9IGZ1bmN0aW9uIChfX2lzUHJpdmF0ZSkge1xuICBpZiAoX19pc1ByaXZhdGUgIT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5zdXBwb3J0ZWQgYXJndW1lbnQgaW4gMi4wLjAnKVxuXG4gIC8vIFZlcnNpb25cbiAgdmFyIG5ldHdvcmsgPSB0aGlzLmtleVBhaXIubmV0d29ya1xuICB2YXIgdmVyc2lvbiA9ICghdGhpcy5pc05ldXRlcmVkKCkpID8gbmV0d29yay5iaXAzMi5wcml2YXRlIDogbmV0d29yay5iaXAzMi5wdWJsaWNcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIoNzgpXG5cbiAgLy8gNCBieXRlczogdmVyc2lvbiBieXRlc1xuICBidWZmZXIud3JpdGVVSW50MzJCRSh2ZXJzaW9uLCAwKVxuXG4gIC8vIDEgYnl0ZTogZGVwdGg6IDB4MDAgZm9yIG1hc3RlciBub2RlcywgMHgwMSBmb3IgbGV2ZWwtMSBkZXNjZW5kYW50cywgLi4uLlxuICBidWZmZXIud3JpdGVVSW50OCh0aGlzLmRlcHRoLCA0KVxuXG4gIC8vIDQgYnl0ZXM6IHRoZSBmaW5nZXJwcmludCBvZiB0aGUgcGFyZW50J3Mga2V5ICgweDAwMDAwMDAwIGlmIG1hc3RlciBrZXkpXG4gIGJ1ZmZlci53cml0ZVVJbnQzMkJFKHRoaXMucGFyZW50RmluZ2VycHJpbnQsIDUpXG5cbiAgLy8gNCBieXRlczogY2hpbGQgbnVtYmVyLiBUaGlzIGlzIHRoZSBudW1iZXIgaSBpbiB4aSA9IHhwYXIvaSwgd2l0aCB4aSB0aGUga2V5IGJlaW5nIHNlcmlhbGl6ZWQuXG4gIC8vIFRoaXMgaXMgZW5jb2RlZCBpbiBiaWcgZW5kaWFuLiAoMHgwMDAwMDAwMCBpZiBtYXN0ZXIga2V5KVxuICBidWZmZXIud3JpdGVVSW50MzJCRSh0aGlzLmluZGV4LCA5KVxuXG4gIC8vIDMyIGJ5dGVzOiB0aGUgY2hhaW4gY29kZVxuICB0aGlzLmNoYWluQ29kZS5jb3B5KGJ1ZmZlciwgMTMpXG5cbiAgLy8gMzMgYnl0ZXM6IHRoZSBwdWJsaWMga2V5IG9yIHByaXZhdGUga2V5IGRhdGFcbiAgaWYgKCF0aGlzLmlzTmV1dGVyZWQoKSkge1xuICAgIC8vIDB4MDAgKyBrIGZvciBwcml2YXRlIGtleXNcbiAgICBidWZmZXIud3JpdGVVSW50OCgwLCA0NSlcbiAgICB0aGlzLmtleVBhaXIuZC50b0J1ZmZlcigzMikuY29weShidWZmZXIsIDQ2KVxuXG4gIC8vIDMzIGJ5dGVzOiB0aGUgcHVibGljIGtleVxuICB9IGVsc2Uge1xuICAgIC8vIFg5LjYyIGVuY29kaW5nIGZvciBwdWJsaWMga2V5c1xuICAgIHRoaXMua2V5UGFpci5nZXRQdWJsaWNLZXlCdWZmZXIoKS5jb3B5KGJ1ZmZlciwgNDUpXG4gIH1cblxuICByZXR1cm4gYmFzZTU4Y2hlY2suZW5jb2RlKGJ1ZmZlcilcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDAzMi5tZWRpYXdpa2kjY2hpbGQta2V5LWRlcml2YXRpb24tY2tkLWZ1bmN0aW9uc1xuSEROb2RlLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLlVJbnQzMiwgaW5kZXgpXG5cbiAgdmFyIGlzSGFyZGVuZWQgPSBpbmRleCA+PSBIRE5vZGUuSElHSEVTVF9CSVRcbiAgdmFyIGRhdGEgPSBuZXcgQnVmZmVyKDM3KVxuXG4gIC8vIEhhcmRlbmVkIGNoaWxkXG4gIGlmIChpc0hhcmRlbmVkKSB7XG4gICAgaWYgKHRoaXMuaXNOZXV0ZXJlZCgpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb3VsZCBub3QgZGVyaXZlIGhhcmRlbmVkIGNoaWxkIGtleScpXG5cbiAgICAvLyBkYXRhID0gMHgwMCB8fCBzZXIyNTYoa3BhcikgfHwgc2VyMzIoaW5kZXgpXG4gICAgZGF0YVswXSA9IDB4MDBcbiAgICB0aGlzLmtleVBhaXIuZC50b0J1ZmZlcigzMikuY29weShkYXRhLCAxKVxuICAgIGRhdGEud3JpdGVVSW50MzJCRShpbmRleCwgMzMpXG5cbiAgLy8gTm9ybWFsIGNoaWxkXG4gIH0gZWxzZSB7XG4gICAgLy8gZGF0YSA9IHNlclAocG9pbnQoa3BhcikpIHx8IHNlcjMyKGluZGV4KVxuICAgIC8vICAgICAgPSBzZXJQKEtwYXIpIHx8IHNlcjMyKGluZGV4KVxuICAgIHRoaXMua2V5UGFpci5nZXRQdWJsaWNLZXlCdWZmZXIoKS5jb3B5KGRhdGEsIDApXG4gICAgZGF0YS53cml0ZVVJbnQzMkJFKGluZGV4LCAzMylcbiAgfVxuXG4gIHZhciBJID0gY3JlYXRlSG1hYygnc2hhNTEyJywgdGhpcy5jaGFpbkNvZGUpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB2YXIgSUwgPSBJLnNsaWNlKDAsIDMyKVxuICB2YXIgSVIgPSBJLnNsaWNlKDMyKVxuXG4gIHZhciBwSUwgPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoSUwpXG5cbiAgLy8gSW4gY2FzZSBwYXJzZTI1NihJTCkgPj0gbiwgcHJvY2VlZCB3aXRoIHRoZSBuZXh0IHZhbHVlIGZvciBpXG4gIGlmIChwSUwuY29tcGFyZVRvKGN1cnZlLm4pID49IDApIHtcbiAgICByZXR1cm4gdGhpcy5kZXJpdmUoaW5kZXggKyAxKVxuICB9XG5cbiAgLy8gUHJpdmF0ZSBwYXJlbnQga2V5IC0+IHByaXZhdGUgY2hpbGQga2V5XG4gIHZhciBkZXJpdmVkS2V5UGFpclxuICBpZiAoIXRoaXMuaXNOZXV0ZXJlZCgpKSB7XG4gICAgLy8ga2kgPSBwYXJzZTI1NihJTCkgKyBrcGFyIChtb2QgbilcbiAgICB2YXIga2kgPSBwSUwuYWRkKHRoaXMua2V5UGFpci5kKS5tb2QoY3VydmUubilcblxuICAgIC8vIEluIGNhc2Uga2kgPT0gMCwgcHJvY2VlZCB3aXRoIHRoZSBuZXh0IHZhbHVlIGZvciBpXG4gICAgaWYgKGtpLnNpZ251bSgpID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZXJpdmUoaW5kZXggKyAxKVxuICAgIH1cblxuICAgIGRlcml2ZWRLZXlQYWlyID0gbmV3IEVDUGFpcihraSwgbnVsbCwge1xuICAgICAgbmV0d29yazogdGhpcy5rZXlQYWlyLm5ldHdvcmtcbiAgICB9KVxuXG4gIC8vIFB1YmxpYyBwYXJlbnQga2V5IC0+IHB1YmxpYyBjaGlsZCBrZXlcbiAgfSBlbHNlIHtcbiAgICAvLyBLaSA9IHBvaW50KHBhcnNlMjU2KElMKSkgKyBLcGFyXG4gICAgLy8gICAgPSBHKklMICsgS3BhclxuICAgIHZhciBLaSA9IGN1cnZlLkcubXVsdGlwbHkocElMKS5hZGQodGhpcy5rZXlQYWlyLlEpXG5cbiAgICAvLyBJbiBjYXNlIEtpIGlzIHRoZSBwb2ludCBhdCBpbmZpbml0eSwgcHJvY2VlZCB3aXRoIHRoZSBuZXh0IHZhbHVlIGZvciBpXG4gICAgaWYgKGN1cnZlLmlzSW5maW5pdHkoS2kpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZXJpdmUoaW5kZXggKyAxKVxuICAgIH1cblxuICAgIGRlcml2ZWRLZXlQYWlyID0gbmV3IEVDUGFpcihudWxsLCBLaSwge1xuICAgICAgbmV0d29yazogdGhpcy5rZXlQYWlyLm5ldHdvcmtcbiAgICB9KVxuICB9XG5cbiAgdmFyIGhkID0gbmV3IEhETm9kZShkZXJpdmVkS2V5UGFpciwgSVIpXG4gIGhkLmRlcHRoID0gdGhpcy5kZXB0aCArIDFcbiAgaGQuaW5kZXggPSBpbmRleFxuICBoZC5wYXJlbnRGaW5nZXJwcmludCA9IHRoaXMuZ2V0RmluZ2VycHJpbnQoKS5yZWFkVUludDMyQkUoMClcblxuICByZXR1cm4gaGRcbn1cblxuSEROb2RlLnByb3RvdHlwZS5kZXJpdmVIYXJkZW5lZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICB0eXBlZm9yY2UodHlwZXMuVUludDMxLCBpbmRleClcblxuICAvLyBPbmx5IGRlcml2ZXMgaGFyZGVuZWQgcHJpdmF0ZSBrZXlzIGJ5IGRlZmF1bHRcbiAgcmV0dXJuIHRoaXMuZGVyaXZlKGluZGV4ICsgSEROb2RlLkhJR0hFU1RfQklUKVxufVxuXG4vLyBQcml2YXRlID09PSBub3QgbmV1dGVyZWRcbi8vIFB1YmxpYyA9PT0gbmV1dGVyZWRcbkhETm9kZS5wcm90b3R5cGUuaXNOZXV0ZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEodGhpcy5rZXlQYWlyLmQpXG59XG5cbkhETm9kZS5wcm90b3R5cGUuZGVyaXZlUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIHR5cGVmb3JjZSh0eXBlcy5CSVAzMlBhdGgsIHBhdGgpXG5cbiAgdmFyIHNwbGl0UGF0aCA9IHBhdGguc3BsaXQoJy8nKVxuICBpZiAoc3BsaXRQYXRoWzBdID09PSAnbScpIHtcbiAgICBpZiAodGhpcy5wYXJlbnRGaW5nZXJwcmludCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSBtYXN0ZXIgbm9kZScpXG4gICAgfVxuXG4gICAgc3BsaXRQYXRoID0gc3BsaXRQYXRoLnNsaWNlKDEpXG4gIH1cblxuICByZXR1cm4gc3BsaXRQYXRoLnJlZHVjZShmdW5jdGlvbiAocHJldkhkLCBpbmRleFN0cikge1xuICAgIHZhciBpbmRleFxuICAgIGlmIChpbmRleFN0ci5zbGljZSgtMSkgPT09IFwiJ1wiKSB7XG4gICAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4U3RyLnNsaWNlKDAsIC0xKSwgMTApXG4gICAgICByZXR1cm4gcHJldkhkLmRlcml2ZUhhcmRlbmVkKGluZGV4KVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4U3RyLCAxMClcbiAgICAgIHJldHVybiBwcmV2SGQuZGVyaXZlKGluZGV4KVxuICAgIH1cbiAgfSwgdGhpcylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIRE5vZGVcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBCbG9jazogcmVxdWlyZSgnLi9ibG9jaycpLFxuICBFQ1BhaXI6IHJlcXVpcmUoJy4vZWNwYWlyJyksXG4gIEVDU2lnbmF0dXJlOiByZXF1aXJlKCcuL2Vjc2lnbmF0dXJlJyksXG4gIEhETm9kZTogcmVxdWlyZSgnLi9oZG5vZGUnKSxcbiAgVHJhbnNhY3Rpb246IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKSxcbiAgVHJhbnNhY3Rpb25CdWlsZGVyOiByZXF1aXJlKCcuL3RyYW5zYWN0aW9uX2J1aWxkZXInKSxcblxuICBhZGRyZXNzOiByZXF1aXJlKCcuL2FkZHJlc3MnKSxcbiAgYnVmZmVydXRpbHM6IHJlcXVpcmUoJy4vYnVmZmVydXRpbHMnKSxcbiAgY3J5cHRvOiByZXF1aXJlKCcuL2NyeXB0bycpLFxuICBuZXR3b3JrczogcmVxdWlyZSgnLi9uZXR3b3JrcycpLFxuICBvcGNvZGVzOiByZXF1aXJlKCdiaXRjb2luLW9wcycpLFxuICBzY3JpcHQ6IHJlcXVpcmUoJy4vc2NyaXB0Jylcbn1cbiIsIi8vIGh0dHBzOi8vZW4uYml0Y29pbi5pdC93aWtpL0xpc3Rfb2ZfYWRkcmVzc19wcmVmaXhlc1xuLy8gRG9nZWNvaW4gQklQMzIgaXMgYSBwcm9wb3NlZCBzdGFuZGFyZDogaHR0cHM6Ly9iaXRjb2ludGFsay5vcmcvaW5kZXgucGhwP3RvcGljPTQwOTczMVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYml0Y29pbjoge1xuICAgIG1lc3NhZ2VQcmVmaXg6ICdcXHgxOEJpdGNvaW4gU2lnbmVkIE1lc3NhZ2U6XFxuJyxcbiAgICBiaXAzMjoge1xuICAgICAgcHVibGljOiAweDA0ODhiMjFlLFxuICAgICAgcHJpdmF0ZTogMHgwNDg4YWRlNFxuICAgIH0sXG4gICAgcHViS2V5SGFzaDogMHgwMCxcbiAgICBzY3JpcHRIYXNoOiAweDA1LFxuICAgIHdpZjogMHg4MFxuICB9LFxuICB0ZXN0bmV0OiB7XG4gICAgbWVzc2FnZVByZWZpeDogJ1xceDE4Qml0Y29pbiBTaWduZWQgTWVzc2FnZTpcXG4nLFxuICAgIGJpcDMyOiB7XG4gICAgICBwdWJsaWM6IDB4MDQzNTg3Y2YsXG4gICAgICBwcml2YXRlOiAweDA0MzU4Mzk0XG4gICAgfSxcbiAgICBwdWJLZXlIYXNoOiAweDZmLFxuICAgIHNjcmlwdEhhc2g6IDB4YzQsXG4gICAgd2lmOiAweGVmXG4gIH0sXG4gIGxpdGVjb2luOiB7XG4gICAgbWVzc2FnZVByZWZpeDogJ1xceDE5TGl0ZWNvaW4gU2lnbmVkIE1lc3NhZ2U6XFxuJyxcbiAgICBiaXAzMjoge1xuICAgICAgcHVibGljOiAweDAxOWRhNDYyLFxuICAgICAgcHJpdmF0ZTogMHgwMTlkOWNmZVxuICAgIH0sXG4gICAgcHViS2V5SGFzaDogMHgzMCxcbiAgICBzY3JpcHRIYXNoOiAweDA1LFxuICAgIHdpZjogMHhiMFxuICB9XG59XG4iLCJ2YXIgYmlwNjYgPSByZXF1aXJlKCdiaXA2NicpXG52YXIgcHVzaGRhdGEgPSByZXF1aXJlKCdwdXNoZGF0YS1iaXRjb2luJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpXG52YXIgc2NyaXB0TnVtYmVyID0gcmVxdWlyZSgnLi9zY3JpcHRfbnVtYmVyJylcblxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcbnZhciBSRVZFUlNFX09QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzL21hcCcpXG52YXIgT1BfSU5UX0JBU0UgPSBPUFMuT1BfUkVTRVJWRUQgLy8gT1BfMSAtIDFcblxuZnVuY3Rpb24gaXNPUEludCAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVzLk51bWJlcih2YWx1ZSkgJiZcbiAgICAoKHZhbHVlID09PSBPUFMuT1BfMCkgfHxcbiAgICAodmFsdWUgPj0gT1BTLk9QXzEgJiYgdmFsdWUgPD0gT1BTLk9QXzE2KSB8fFxuICAgICh2YWx1ZSA9PT0gT1BTLk9QXzFORUdBVEUpKVxufVxuXG5mdW5jdGlvbiBpc1B1c2hPbmx5Q2h1bmsgKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlcy5CdWZmZXIodmFsdWUpIHx8IGlzT1BJbnQodmFsdWUpXG59XG5cbmZ1bmN0aW9uIGlzUHVzaE9ubHkgKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlcy5BcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoaXNQdXNoT25seUNodW5rKVxufVxuXG5mdW5jdGlvbiBjb21waWxlIChjaHVua3MpIHtcbiAgLy8gVE9ETzogcmVtb3ZlIG1lXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmtzKSkgcmV0dXJuIGNodW5rc1xuXG4gIHR5cGVmb3JjZSh0eXBlcy5BcnJheSwgY2h1bmtzKVxuXG4gIHZhciBidWZmZXJTaXplID0gY2h1bmtzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIGNodW5rKSB7XG4gICAgLy8gZGF0YSBjaHVua1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgICAvLyBhZGhlcmUgdG8gQklQNjIuMywgbWluaW1hbCBwdXNoIHBvbGljeVxuICAgICAgaWYgKGNodW5rLmxlbmd0aCA9PT0gMSAmJiAoY2h1bmtbMF0gPT09IDB4ODEgfHwgKGNodW5rWzBdID49IDEgJiYgY2h1bmtbMF0gPD0gMTYpKSkge1xuICAgICAgICByZXR1cm4gYWNjdW0gKyAxXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2N1bSArIHB1c2hkYXRhLmVuY29kaW5nTGVuZ3RoKGNodW5rLmxlbmd0aCkgKyBjaHVuay5sZW5ndGhcbiAgICB9XG5cbiAgICAvLyBvcGNvZGVcbiAgICByZXR1cm4gYWNjdW0gKyAxXG4gIH0sIDAuMClcblxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXJTaXplKVxuICB2YXIgb2Zmc2V0ID0gMFxuXG4gIGNodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIC8vIGRhdGEgY2h1bmtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgICAgLy8gYWRoZXJlIHRvIEJJUDYyLjMsIG1pbmltYWwgcHVzaCBwb2xpY3lcbiAgICAgIGlmIChjaHVuay5sZW5ndGggPT09IDEgJiYgY2h1bmtbMF0gPj0gMSAmJiBjaHVua1swXSA8PSAxNikge1xuICAgICAgICB2YXIgb3Bjb2RlID0gT1BfSU5UX0JBU0UgKyBjaHVua1swXVxuICAgICAgICBidWZmZXIud3JpdGVVSW50OChvcGNvZGUsIG9mZnNldClcbiAgICAgICAgb2Zmc2V0ICs9IDFcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChjaHVuay5sZW5ndGggPT09IDEgJiYgY2h1bmtbMF0gPT09IDB4ODEpIHtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDgoT1BTLk9QXzFORUdBVEUsIG9mZnNldClcbiAgICAgICAgb2Zmc2V0ICs9IDFcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIG9mZnNldCArPSBwdXNoZGF0YS5lbmNvZGUoYnVmZmVyLCBjaHVuay5sZW5ndGgsIG9mZnNldClcblxuICAgICAgY2h1bmsuY29weShidWZmZXIsIG9mZnNldClcbiAgICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGhcblxuICAgIC8vIG9wY29kZVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIud3JpdGVVSW50OChjaHVuaywgb2Zmc2V0KVxuICAgICAgb2Zmc2V0ICs9IDFcbiAgICB9XG4gIH0pXG5cbiAgaWYgKG9mZnNldCAhPT0gYnVmZmVyLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGVjb2RlIGNodW5rcycpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gZGVjb21waWxlIChidWZmZXIpIHtcbiAgLy8gVE9ETzogcmVtb3ZlIG1lXG4gIGlmICh0eXBlcy5BcnJheShidWZmZXIpKSByZXR1cm4gYnVmZmVyXG5cbiAgdHlwZWZvcmNlKHR5cGVzLkJ1ZmZlciwgYnVmZmVyKVxuXG4gIHZhciBjaHVua3MgPSBbXVxuICB2YXIgaSA9IDBcblxuICB3aGlsZSAoaSA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICB2YXIgb3Bjb2RlID0gYnVmZmVyW2ldXG5cbiAgICAvLyBkYXRhIGNodW5rXG4gICAgaWYgKChvcGNvZGUgPiBPUFMuT1BfMCkgJiYgKG9wY29kZSA8PSBPUFMuT1BfUFVTSERBVEE0KSkge1xuICAgICAgdmFyIGQgPSBwdXNoZGF0YS5kZWNvZGUoYnVmZmVyLCBpKVxuXG4gICAgICAvLyBkaWQgcmVhZGluZyBhIHB1c2hEYXRhSW50IGZhaWw/IGVtcHR5IHNjcmlwdFxuICAgICAgaWYgKGQgPT09IG51bGwpIHJldHVybiBbXVxuICAgICAgaSArPSBkLnNpemVcblxuICAgICAgLy8gYXR0ZW1wdCB0byByZWFkIHRvbyBtdWNoIGRhdGE/IGVtcHR5IHNjcmlwdFxuICAgICAgaWYgKGkgKyBkLm51bWJlciA+IGJ1ZmZlci5sZW5ndGgpIHJldHVybiBbXVxuXG4gICAgICB2YXIgZGF0YSA9IGJ1ZmZlci5zbGljZShpLCBpICsgZC5udW1iZXIpXG4gICAgICBpICs9IGQubnVtYmVyXG5cbiAgICAgIGNodW5rcy5wdXNoKGRhdGEpXG5cbiAgICAvLyBvcGNvZGVcbiAgICB9IGVsc2Uge1xuICAgICAgY2h1bmtzLnB1c2gob3Bjb2RlKVxuXG4gICAgICBpICs9IDFcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2h1bmtzXG59XG5cbmZ1bmN0aW9uIHRvQVNNIChjaHVua3MpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVua3MpKSB7XG4gICAgY2h1bmtzID0gZGVjb21waWxlKGNodW5rcylcbiAgfVxuXG4gIHJldHVybiBjaHVua3MubWFwKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIC8vIGRhdGE/XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHJldHVybiBjaHVuay50b1N0cmluZygnaGV4JylcblxuICAgIC8vIG9wY29kZSFcbiAgICByZXR1cm4gUkVWRVJTRV9PUFNbY2h1bmtdXG4gIH0pLmpvaW4oJyAnKVxufVxuXG5mdW5jdGlvbiBmcm9tQVNNIChhc20pIHtcbiAgdHlwZWZvcmNlKHR5cGVzLlN0cmluZywgYXNtKVxuXG4gIHJldHVybiBjb21waWxlKGFzbS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoY2h1bmtTdHIpIHtcbiAgICAvLyBvcGNvZGU/XG4gICAgaWYgKE9QU1tjaHVua1N0cl0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIE9QU1tjaHVua1N0cl1cbiAgICB0eXBlZm9yY2UodHlwZXMuSGV4LCBjaHVua1N0cilcblxuICAgIC8vIGRhdGEhXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoY2h1bmtTdHIsICdoZXgnKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9TdGFjayAoY2h1bmtzKSB7XG4gIGNodW5rcyA9IGRlY29tcGlsZShjaHVua3MpXG4gIHR5cGVmb3JjZShpc1B1c2hPbmx5LCBjaHVua3MpXG5cbiAgcmV0dXJuIGNodW5rcy5tYXAoZnVuY3Rpb24gKG9wKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvcCkpIHJldHVybiBvcFxuICAgIGlmIChvcCA9PT0gT1BTLk9QXzApIHJldHVybiBuZXcgQnVmZmVyKDApXG5cbiAgICByZXR1cm4gc2NyaXB0TnVtYmVyLmVuY29kZShvcCAtIE9QX0lOVF9CQVNFKVxuICB9KVxufVxuXG5mdW5jdGlvbiBpc0Nhbm9uaWNhbFB1YktleSAoYnVmZmVyKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHJldHVybiBmYWxzZVxuICBpZiAoYnVmZmVyLmxlbmd0aCA8IDMzKSByZXR1cm4gZmFsc2VcblxuICBzd2l0Y2ggKGJ1ZmZlclswXSkge1xuICAgIGNhc2UgMHgwMjpcbiAgICBjYXNlIDB4MDM6XG4gICAgICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gMzNcbiAgICBjYXNlIDB4MDQ6XG4gICAgICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gNjVcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc0RlZmluZWRIYXNoVHlwZSAoaGFzaFR5cGUpIHtcbiAgdmFyIGhhc2hUeXBlTW9kID0gaGFzaFR5cGUgJiB+MHg4MFxuXG4vLyByZXR1cm4gaGFzaFR5cGVNb2QgPiBTSUdIQVNIX0FMTCAmJiBoYXNoVHlwZU1vZCA8IFNJR0hBU0hfU0lOR0xFXG4gIHJldHVybiBoYXNoVHlwZU1vZCA+IDB4MDAgJiYgaGFzaFR5cGVNb2QgPCAweDA0XG59XG5cbmZ1bmN0aW9uIGlzQ2Fub25pY2FsU2lnbmF0dXJlIChidWZmZXIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkgcmV0dXJuIGZhbHNlXG4gIGlmICghaXNEZWZpbmVkSGFzaFR5cGUoYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXSkpIHJldHVybiBmYWxzZVxuXG4gIHJldHVybiBiaXA2Ni5jaGVjayhidWZmZXIuc2xpY2UoMCwgLTEpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGlsZTogY29tcGlsZSxcbiAgZGVjb21waWxlOiBkZWNvbXBpbGUsXG4gIGZyb21BU006IGZyb21BU00sXG4gIHRvQVNNOiB0b0FTTSxcbiAgdG9TdGFjazogdG9TdGFjayxcblxuICBudW1iZXI6IHJlcXVpcmUoJy4vc2NyaXB0X251bWJlcicpLFxuXG4gIGlzQ2Fub25pY2FsUHViS2V5OiBpc0Nhbm9uaWNhbFB1YktleSxcbiAgaXNDYW5vbmljYWxTaWduYXR1cmU6IGlzQ2Fub25pY2FsU2lnbmF0dXJlLFxuICBpc1B1c2hPbmx5OiBpc1B1c2hPbmx5LFxuICBpc0RlZmluZWRIYXNoVHlwZTogaXNEZWZpbmVkSGFzaFR5cGVcbn1cblxudmFyIHRlbXBsYXRlcyA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzJylcbmZvciAodmFyIGtleSBpbiB0ZW1wbGF0ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHNba2V5XSA9IHRlbXBsYXRlc1trZXldXG59XG4iLCJmdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlciwgbWF4TGVuZ3RoLCBtaW5pbWFsKSB7XG4gIG1heExlbmd0aCA9IG1heExlbmd0aCB8fCA0XG4gIG1pbmltYWwgPSBtaW5pbWFsID09PSB1bmRlZmluZWQgPyB0cnVlIDogbWluaW1hbFxuXG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAwXG4gIGlmIChsZW5ndGggPiBtYXhMZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NjcmlwdCBudW1iZXIgb3ZlcmZsb3cnKVxuICBpZiAobWluaW1hbCkge1xuICAgIGlmICgoYnVmZmVyW2xlbmd0aCAtIDFdICYgMHg3ZikgPT09IDApIHtcbiAgICAgIGlmIChsZW5ndGggPD0gMSB8fCAoYnVmZmVyW2xlbmd0aCAtIDJdICYgMHg4MCkgPT09IDApIHRocm93IG5ldyBFcnJvcignTm9uLW1pbmltYWxseSBlbmNvZGVkIHNjcmlwdCBudW1iZXInKVxuICAgIH1cbiAgfVxuXG4gIC8vIDQwLWJpdFxuICBpZiAobGVuZ3RoID09PSA1KSB7XG4gICAgdmFyIGEgPSBidWZmZXIucmVhZFVJbnQzMkxFKDApXG4gICAgdmFyIGIgPSBidWZmZXIucmVhZFVJbnQ4KDQpXG5cbiAgICBpZiAoYiAmIDB4ODApIHJldHVybiAtKChiICYgfjB4ODApICogMHgxMDAwMDAwMDAgKyBhKVxuICAgIHJldHVybiBiICogMHgxMDAwMDAwMDAgKyBhXG4gIH1cblxuICB2YXIgcmVzdWx0ID0gMFxuXG4gIC8vIDMyLWJpdCAvIDI0LWJpdCAvIDE2LWJpdCAvIDgtYml0XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICByZXN1bHQgfD0gYnVmZmVyW2ldIDw8ICg4ICogaSlcbiAgfVxuXG4gIGlmIChidWZmZXJbbGVuZ3RoIC0gMV0gJiAweDgwKSByZXR1cm4gLShyZXN1bHQgJiB+KDB4ODAgPDwgKDggKiAobGVuZ3RoIC0gMSkpKSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBzY3JpcHROdW1TaXplIChpKSB7XG4gIHJldHVybiBpID4gMHg3ZmZmZmZmZiA/IDVcbiAgOiBpID4gMHg3ZmZmZmYgPyA0XG4gIDogaSA+IDB4N2ZmZiA/IDNcbiAgOiBpID4gMHg3ZiA/IDJcbiAgOiBpID4gMHgwMCA/IDFcbiAgOiAwXG59XG5cbmZ1bmN0aW9uIGVuY29kZSAobnVtYmVyKSB7XG4gIHZhciB2YWx1ZSA9IE1hdGguYWJzKG51bWJlcilcbiAgdmFyIHNpemUgPSBzY3JpcHROdW1TaXplKHZhbHVlKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihzaXplKVxuICB2YXIgbmVnYXRpdmUgPSBudW1iZXIgPCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICBidWZmZXIud3JpdGVVSW50OCh2YWx1ZSAmIDB4ZmYsIGkpXG4gICAgdmFsdWUgPj49IDhcbiAgfVxuXG4gIGlmIChidWZmZXJbc2l6ZSAtIDFdICYgMHg4MCkge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KG5lZ2F0aXZlID8gMHg4MCA6IDB4MDAsIHNpemUgLSAxKVxuICB9IGVsc2UgaWYgKG5lZ2F0aXZlKSB7XG4gICAgYnVmZmVyW3NpemUgLSAxXSB8PSAweDgwXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RlOiBlbmNvZGVcbn1cbiIsInZhciBkZWNvbXBpbGUgPSByZXF1aXJlKCcuLi9zY3JpcHQnKS5kZWNvbXBpbGVcbnZhciBtdWx0aXNpZyA9IHJlcXVpcmUoJy4vbXVsdGlzaWcnKVxudmFyIG51bGxEYXRhID0gcmVxdWlyZSgnLi9udWxsZGF0YScpXG52YXIgcHViS2V5ID0gcmVxdWlyZSgnLi9wdWJrZXknKVxudmFyIHB1YktleUhhc2ggPSByZXF1aXJlKCcuL3B1YmtleWhhc2gnKVxudmFyIHNjcmlwdEhhc2ggPSByZXF1aXJlKCcuL3NjcmlwdGhhc2gnKVxudmFyIHdpdG5lc3NQdWJLZXlIYXNoID0gcmVxdWlyZSgnLi93aXRuZXNzcHVia2V5aGFzaCcpXG52YXIgd2l0bmVzc1NjcmlwdEhhc2ggPSByZXF1aXJlKCcuL3dpdG5lc3NzY3JpcHRoYXNoJylcbnZhciB3aXRuZXNzQ29tbWl0bWVudCA9IHJlcXVpcmUoJy4vd2l0bmVzc2NvbW1pdG1lbnQnKVxuXG52YXIgdHlwZXMgPSB7XG4gIE1VTFRJU0lHOiAnbXVsdGlzaWcnLFxuICBOT05TVEFOREFSRDogJ25vbnN0YW5kYXJkJyxcbiAgTlVMTERBVEE6ICdudWxsZGF0YScsXG4gIFAyUEs6ICdwdWJrZXknLFxuICBQMlBLSDogJ3B1YmtleWhhc2gnLFxuICBQMlNIOiAnc2NyaXB0aGFzaCcsXG4gIFAyV1BLSDogJ3dpdG5lc3NwdWJrZXloYXNoJyxcbiAgUDJXU0g6ICd3aXRuZXNzc2NyaXB0aGFzaCcsXG4gIFdJVE5FU1NfQ09NTUlUTUVOVDogJ3dpdG5lc3Njb21taXRtZW50J1xufVxuXG5mdW5jdGlvbiBjbGFzc2lmeU91dHB1dCAoc2NyaXB0KSB7XG4gIGlmICh3aXRuZXNzUHViS2V5SGFzaC5vdXRwdXQuY2hlY2soc2NyaXB0KSkgcmV0dXJuIHR5cGVzLlAyV1BLSFxuICBpZiAod2l0bmVzc1NjcmlwdEhhc2gub3V0cHV0LmNoZWNrKHNjcmlwdCkpIHJldHVybiB0eXBlcy5QMldTSFxuICBpZiAocHViS2V5SGFzaC5vdXRwdXQuY2hlY2soc2NyaXB0KSkgcmV0dXJuIHR5cGVzLlAyUEtIXG4gIGlmIChzY3JpcHRIYXNoLm91dHB1dC5jaGVjayhzY3JpcHQpKSByZXR1cm4gdHlwZXMuUDJTSFxuXG4gIC8vIFhYWDogb3B0aW1pemF0aW9uLCBiZWxvdyBmdW5jdGlvbnMgLmRlY29tcGlsZSBiZWZvcmUgdXNlXG4gIHZhciBjaHVua3MgPSBkZWNvbXBpbGUoc2NyaXB0KVxuICBpZiAobXVsdGlzaWcub3V0cHV0LmNoZWNrKGNodW5rcykpIHJldHVybiB0eXBlcy5NVUxUSVNJR1xuICBpZiAocHViS2V5Lm91dHB1dC5jaGVjayhjaHVua3MpKSByZXR1cm4gdHlwZXMuUDJQS1xuICBpZiAod2l0bmVzc0NvbW1pdG1lbnQub3V0cHV0LmNoZWNrKGNodW5rcykpIHJldHVybiB0eXBlcy5XSVRORVNTX0NPTU1JVE1FTlRcbiAgaWYgKG51bGxEYXRhLm91dHB1dC5jaGVjayhjaHVua3MpKSByZXR1cm4gdHlwZXMuTlVMTERBVEFcblxuICByZXR1cm4gdHlwZXMuTk9OU1RBTkRBUkRcbn1cblxuZnVuY3Rpb24gY2xhc3NpZnlJbnB1dCAoc2NyaXB0LCBhbGxvd0luY29tcGxldGUpIHtcbiAgLy8gWFhYOiBvcHRpbWl6YXRpb24sIGJlbG93IGZ1bmN0aW9ucyAuZGVjb21waWxlIGJlZm9yZSB1c2VcbiAgdmFyIGNodW5rcyA9IGRlY29tcGlsZShzY3JpcHQpXG5cbiAgaWYgKHB1YktleUhhc2guaW5wdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLlAyUEtIXG4gIGlmIChzY3JpcHRIYXNoLmlucHV0LmNoZWNrKGNodW5rcywgYWxsb3dJbmNvbXBsZXRlKSkgcmV0dXJuIHR5cGVzLlAyU0hcbiAgaWYgKG11bHRpc2lnLmlucHV0LmNoZWNrKGNodW5rcywgYWxsb3dJbmNvbXBsZXRlKSkgcmV0dXJuIHR5cGVzLk1VTFRJU0lHXG4gIGlmIChwdWJLZXkuaW5wdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLlAyUEtcblxuICByZXR1cm4gdHlwZXMuTk9OU1RBTkRBUkRcbn1cblxuZnVuY3Rpb24gY2xhc3NpZnlXaXRuZXNzIChzY3JpcHQsIGFsbG93SW5jb21wbGV0ZSkge1xuICAvLyBYWFg6IG9wdGltaXphdGlvbiwgYmVsb3cgZnVuY3Rpb25zIC5kZWNvbXBpbGUgYmVmb3JlIHVzZVxuICB2YXIgY2h1bmtzID0gZGVjb21waWxlKHNjcmlwdClcblxuICBpZiAod2l0bmVzc1B1YktleUhhc2guaW5wdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLlAyV1BLSFxuICBpZiAod2l0bmVzc1NjcmlwdEhhc2guaW5wdXQuY2hlY2soY2h1bmtzKSkgcmV0dXJuIHR5cGVzLlAyV1NIXG5cbiAgcmV0dXJuIHR5cGVzLk5PTlNUQU5EQVJEXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGFzc2lmeUlucHV0OiBjbGFzc2lmeUlucHV0LFxuICBjbGFzc2lmeU91dHB1dDogY2xhc3NpZnlPdXRwdXQsXG4gIGNsYXNzaWZ5V2l0bmVzczogY2xhc3NpZnlXaXRuZXNzLFxuICBtdWx0aXNpZzogbXVsdGlzaWcsXG4gIG51bGxEYXRhOiBudWxsRGF0YSxcbiAgcHViS2V5OiBwdWJLZXksXG4gIHB1YktleUhhc2g6IHB1YktleUhhc2gsXG4gIHNjcmlwdEhhc2g6IHNjcmlwdEhhc2gsXG4gIHdpdG5lc3NQdWJLZXlIYXNoOiB3aXRuZXNzUHViS2V5SGFzaCxcbiAgd2l0bmVzc1NjcmlwdEhhc2g6IHdpdG5lc3NTY3JpcHRIYXNoLFxuICB3aXRuZXNzQ29tbWl0bWVudDogd2l0bmVzc0NvbW1pdG1lbnQsXG4gIHR5cGVzOiB0eXBlc1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlucHV0OiByZXF1aXJlKCcuL2lucHV0JyksXG4gIG91dHB1dDogcmVxdWlyZSgnLi9vdXRwdXQnKVxufVxuIiwiLy8gT1BfMCBbc2lnbmF0dXJlcyAuLi5dXG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gcGFydGlhbFNpZ25hdHVyZSAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBPUFMuT1BfMCB8fCBic2NyaXB0LmlzQ2Fub25pY2FsU2lnbmF0dXJlKHZhbHVlKVxufVxuXG5mdW5jdGlvbiBjaGVjayAoc2NyaXB0LCBhbGxvd0luY29tcGxldGUpIHtcbiAgdmFyIGNodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKHNjcmlwdClcbiAgaWYgKGNodW5rcy5sZW5ndGggPCAyKSByZXR1cm4gZmFsc2VcbiAgaWYgKGNodW5rc1swXSAhPT0gT1BTLk9QXzApIHJldHVybiBmYWxzZVxuXG4gIGlmIChhbGxvd0luY29tcGxldGUpIHtcbiAgICByZXR1cm4gY2h1bmtzLnNsaWNlKDEpLmV2ZXJ5KHBhcnRpYWxTaWduYXR1cmUpXG4gIH1cblxuICByZXR1cm4gY2h1bmtzLnNsaWNlKDEpLmV2ZXJ5KGJzY3JpcHQuaXNDYW5vbmljYWxTaWduYXR1cmUpXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnbXVsdGlzaWcgaW5wdXQnIH1cblxuZnVuY3Rpb24gZW5jb2RlU3RhY2sgKHNpZ25hdHVyZXMsIHNjcmlwdFB1YktleSkge1xuICB0eXBlZm9yY2UoW3BhcnRpYWxTaWduYXR1cmVdLCBzaWduYXR1cmVzKVxuXG4gIGlmIChzY3JpcHRQdWJLZXkpIHtcbiAgICB2YXIgc2NyaXB0RGF0YSA9IGJzY3JpcHQubXVsdGlzaWcub3V0cHV0LmRlY29kZShzY3JpcHRQdWJLZXkpXG5cbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPCBzY3JpcHREYXRhLm0pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggc2lnbmF0dXJlcyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKHNpZ25hdHVyZXMubGVuZ3RoID4gc2NyaXB0RGF0YS5wdWJLZXlzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVG9vIG1hbnkgc2lnbmF0dXJlcyBwcm92aWRlZCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChuZXcgQnVmZmVyKDApLCBzaWduYXR1cmVzKVxufVxuXG5mdW5jdGlvbiBlbmNvZGUgKHNpZ25hdHVyZXMsIHNjcmlwdFB1YktleSkge1xuICByZXR1cm4gYnNjcmlwdC5jb21waWxlKGVuY29kZVN0YWNrKHNpZ25hdHVyZXMsIHNjcmlwdFB1YktleSkpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVN0YWNrIChzdGFjaywgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIHR5cGVmb3JjZShjaGVjaywgc3RhY2ssIGFsbG93SW5jb21wbGV0ZSlcbiAgcmV0dXJuIHN0YWNrLnNsaWNlKDEpXG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoYnVmZmVyLCBhbGxvd0luY29tcGxldGUpIHtcbiAgdmFyIHN0YWNrID0gYnNjcmlwdC5kZWNvbXBpbGUoYnVmZmVyKVxuICByZXR1cm4gZGVjb2RlU3RhY2soc3RhY2ssIGFsbG93SW5jb21wbGV0ZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGRlY29kZVN0YWNrOiBkZWNvZGVTdGFjayxcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGVuY29kZVN0YWNrOiBlbmNvZGVTdGFja1xufVxuIiwiLy8gbSBbcHViS2V5cyAuLi5dIG4gT1BfQ0hFQ0tNVUxUSVNJR1xuXG52YXIgYnNjcmlwdCA9IHJlcXVpcmUoJy4uLy4uL3NjcmlwdCcpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciBPUFMgPSByZXF1aXJlKCdiaXRjb2luLW9wcycpXG52YXIgT1BfSU5UX0JBU0UgPSBPUFMuT1BfUkVTRVJWRUQgLy8gT1BfMSAtIDFcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCwgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIHZhciBjaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShzY3JpcHQpXG5cbiAgaWYgKGNodW5rcy5sZW5ndGggPCA0KSByZXR1cm4gZmFsc2VcbiAgaWYgKGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV0gIT09IE9QUy5PUF9DSEVDS01VTFRJU0lHKSByZXR1cm4gZmFsc2VcbiAgaWYgKCF0eXBlcy5OdW1iZXIoY2h1bmtzWzBdKSkgcmV0dXJuIGZhbHNlXG4gIGlmICghdHlwZXMuTnVtYmVyKGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMl0pKSByZXR1cm4gZmFsc2VcbiAgdmFyIG0gPSBjaHVua3NbMF0gLSBPUF9JTlRfQkFTRVxuICB2YXIgbiA9IGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMl0gLSBPUF9JTlRfQkFTRVxuXG4gIGlmIChtIDw9IDApIHJldHVybiBmYWxzZVxuICBpZiAobiA+IDE2KSByZXR1cm4gZmFsc2VcbiAgaWYgKG0gPiBuKSByZXR1cm4gZmFsc2VcbiAgaWYgKG4gIT09IGNodW5rcy5sZW5ndGggLSAzKSByZXR1cm4gZmFsc2VcbiAgaWYgKGFsbG93SW5jb21wbGV0ZSkgcmV0dXJuIHRydWVcblxuICB2YXIga2V5cyA9IGNodW5rcy5zbGljZSgxLCAtMilcbiAgcmV0dXJuIGtleXMuZXZlcnkoYnNjcmlwdC5pc0Nhbm9uaWNhbFB1YktleSlcbn1cbmNoZWNrLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdtdWx0aS1zaWcgb3V0cHV0JyB9XG5cbmZ1bmN0aW9uIGVuY29kZSAobSwgcHViS2V5cykge1xuICB0eXBlZm9yY2Uoe1xuICAgIG06IHR5cGVzLk51bWJlcixcbiAgICBwdWJLZXlzOiBbYnNjcmlwdC5pc0Nhbm9uaWNhbFB1YktleV1cbiAgfSwge1xuICAgIG06IG0sXG4gICAgcHViS2V5czogcHViS2V5c1xuICB9KVxuXG4gIHZhciBuID0gcHViS2V5cy5sZW5ndGhcbiAgaWYgKG4gPCBtKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgZW5vdWdoIHB1YktleXMgcHJvdmlkZWQnKVxuXG4gIHJldHVybiBic2NyaXB0LmNvbXBpbGUoW10uY29uY2F0KFxuICAgIE9QX0lOVF9CQVNFICsgbSxcbiAgICBwdWJLZXlzLFxuICAgIE9QX0lOVF9CQVNFICsgbixcbiAgICBPUFMuT1BfQ0hFQ0tNVUxUSVNJR1xuICApKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlciwgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIHZhciBjaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHR5cGVmb3JjZShjaGVjaywgY2h1bmtzLCBhbGxvd0luY29tcGxldGUpXG5cbiAgcmV0dXJuIHtcbiAgICBtOiBjaHVua3NbMF0gLSBPUF9JTlRfQkFTRSxcbiAgICBwdWJLZXlzOiBjaHVua3Muc2xpY2UoMSwgLTIpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kZTogZW5jb2RlXG59XG4iLCIvLyBPUF9SRVRVUk4ge2RhdGF9XG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vc2NyaXB0JylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4uL3R5cGVzJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgYnVmZmVyID0gYnNjcmlwdC5jb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA+IDEgJiZcbiAgICBidWZmZXJbMF0gPT09IE9QUy5PUF9SRVRVUk5cbn1cbmNoZWNrLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsIGRhdGEgb3V0cHV0JyB9XG5cbmZ1bmN0aW9uIGVuY29kZSAoZGF0YSkge1xuICB0eXBlZm9yY2UodHlwZXMuQnVmZmVyLCBkYXRhKVxuXG4gIHJldHVybiBic2NyaXB0LmNvbXBpbGUoW09QUy5PUF9SRVRVUk4sIGRhdGFdKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB0eXBlZm9yY2UoY2hlY2ssIGJ1ZmZlcilcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDIpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvdXRwdXQ6IHtcbiAgICBjaGVjazogY2hlY2ssXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGVcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlucHV0OiByZXF1aXJlKCcuL2lucHV0JyksXG4gIG91dHB1dDogcmVxdWlyZSgnLi9vdXRwdXQnKVxufVxuIiwiLy8ge3NpZ25hdHVyZX1cblxudmFyIGJzY3JpcHQgPSByZXF1aXJlKCcuLi8uLi9zY3JpcHQnKVxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdHlwZXMnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG5cbmZ1bmN0aW9uIGNoZWNrIChzY3JpcHQpIHtcbiAgdmFyIGNodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gY2h1bmtzLmxlbmd0aCA9PT0gMSAmJlxuICAgIGJzY3JpcHQuaXNDYW5vbmljYWxTaWduYXR1cmUoY2h1bmtzWzBdKVxufVxuY2hlY2sudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3B1YktleSBpbnB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGVTdGFjayAoc2lnbmF0dXJlKSB7XG4gIHR5cGVmb3JjZSh0eXBlcy5CdWZmZXIsIHNpZ25hdHVyZSlcbiAgcmV0dXJuIFtzaWduYXR1cmVdXG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBic2NyaXB0LmNvbXBpbGUoZW5jb2RlU3RhY2soc2lnbmF0dXJlKSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3RhY2sgKHN0YWNrKSB7XG4gIHR5cGVmb3JjZShjaGVjaywgc3RhY2spXG4gIHJldHVybiBzdGFja1swXVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB2YXIgc3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHJldHVybiBkZWNvZGVTdGFjayhzdGFjaylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGRlY29kZVN0YWNrOiBkZWNvZGVTdGFjayxcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGVuY29kZVN0YWNrOiBlbmNvZGVTdGFja1xufVxuIiwiLy8ge3B1YktleX0gT1BfQ0hFQ0tTSUdcblxudmFyIGJzY3JpcHQgPSByZXF1aXJlKCcuLi8uLi9zY3JpcHQnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG52YXIgT1BTID0gcmVxdWlyZSgnYml0Y29pbi1vcHMnKVxuXG5mdW5jdGlvbiBjaGVjayAoc2NyaXB0KSB7XG4gIHZhciBjaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShzY3JpcHQpXG5cbiAgcmV0dXJuIGNodW5rcy5sZW5ndGggPT09IDIgJiZcbiAgICBic2NyaXB0LmlzQ2Fub25pY2FsUHViS2V5KGNodW5rc1swXSkgJiZcbiAgICBjaHVua3NbMV0gPT09IE9QUy5PUF9DSEVDS1NJR1xufVxuY2hlY2sudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3B1YktleSBvdXRwdXQnIH1cblxuZnVuY3Rpb24gZW5jb2RlIChwdWJLZXkpIHtcbiAgdHlwZWZvcmNlKGJzY3JpcHQuaXNDYW5vbmljYWxQdWJLZXksIHB1YktleSlcblxuICByZXR1cm4gYnNjcmlwdC5jb21waWxlKFtwdWJLZXksIE9QUy5PUF9DSEVDS1NJR10pXG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoYnVmZmVyKSB7XG4gIHZhciBjaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHR5cGVmb3JjZShjaGVjaywgY2h1bmtzKVxuXG4gIHJldHVybiBjaHVua3NbMF1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kZTogZW5jb2RlXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5wdXQ6IHJlcXVpcmUoJy4vaW5wdXQnKSxcbiAgb3V0cHV0OiByZXF1aXJlKCcuL291dHB1dCcpXG59XG4iLCIvLyB7c2lnbmF0dXJlfSB7cHViS2V5fVxuXG52YXIgYnNjcmlwdCA9IHJlcXVpcmUoJy4uLy4uL3NjcmlwdCcpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgY2h1bmtzID0gYnNjcmlwdC5kZWNvbXBpbGUoc2NyaXB0KVxuXG4gIHJldHVybiBjaHVua3MubGVuZ3RoID09PSAyICYmXG4gICAgYnNjcmlwdC5pc0Nhbm9uaWNhbFNpZ25hdHVyZShjaHVua3NbMF0pICYmXG4gICAgYnNjcmlwdC5pc0Nhbm9uaWNhbFB1YktleShjaHVua3NbMV0pXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAncHViS2V5SGFzaCBpbnB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGVTdGFjayAoc2lnbmF0dXJlLCBwdWJLZXkpIHtcbiAgdHlwZWZvcmNlKHtcbiAgICBzaWduYXR1cmU6IHR5cGVzLkJ1ZmZlciwgcHViS2V5OiB0eXBlcy5CdWZmZXJcbiAgfSwge1xuICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLCBwdWJLZXk6IHB1YktleVxuICB9KVxuXG4gIHJldHVybiBbc2lnbmF0dXJlLCBwdWJLZXldXG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoc2lnbmF0dXJlLCBwdWJLZXkpIHtcbiAgcmV0dXJuIGJzY3JpcHQuY29tcGlsZShlbmNvZGVTdGFjayhzaWduYXR1cmUsIHB1YktleSkpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVN0YWNrIChzdGFjaykge1xuICB0eXBlZm9yY2UoY2hlY2ssIHN0YWNrKVxuXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBzdGFja1swXSxcbiAgICBwdWJLZXk6IHN0YWNrWzFdXG4gIH1cbn1cblxuZnVuY3Rpb24gZGVjb2RlIChidWZmZXIpIHtcbiAgdmFyIHN0YWNrID0gYnNjcmlwdC5kZWNvbXBpbGUoYnVmZmVyKVxuICByZXR1cm4gZGVjb2RlU3RhY2soc3RhY2spXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVjazogY2hlY2ssXG4gIGRlY29kZTogZGVjb2RlLFxuICBkZWNvZGVTdGFjazogZGVjb2RlU3RhY2ssXG4gIGVuY29kZTogZW5jb2RlLFxuICBlbmNvZGVTdGFjazogZW5jb2RlU3RhY2tcbn1cbiIsIi8vIE9QX0RVUCBPUF9IQVNIMTYwIHtwdWJLZXlIYXNofSBPUF9FUVVBTFZFUklGWSBPUF9DSEVDS1NJR1xuXG52YXIgYnNjcmlwdCA9IHJlcXVpcmUoJy4uLy4uL3NjcmlwdCcpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciBPUFMgPSByZXF1aXJlKCdiaXRjb2luLW9wcycpXG5cbmZ1bmN0aW9uIGNoZWNrIChzY3JpcHQpIHtcbiAgdmFyIGJ1ZmZlciA9IGJzY3JpcHQuY29tcGlsZShzY3JpcHQpXG5cbiAgcmV0dXJuIGJ1ZmZlci5sZW5ndGggPT09IDI1ICYmXG4gICAgYnVmZmVyWzBdID09PSBPUFMuT1BfRFVQICYmXG4gICAgYnVmZmVyWzFdID09PSBPUFMuT1BfSEFTSDE2MCAmJlxuICAgIGJ1ZmZlclsyXSA9PT0gMHgxNCAmJlxuICAgIGJ1ZmZlclsyM10gPT09IE9QUy5PUF9FUVVBTFZFUklGWSAmJlxuICAgIGJ1ZmZlclsyNF0gPT09IE9QUy5PUF9DSEVDS1NJR1xufVxuY2hlY2sudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3B1YktleUhhc2ggb3V0cHV0JyB9XG5cbmZ1bmN0aW9uIGVuY29kZSAocHViS2V5SGFzaCkge1xuICB0eXBlZm9yY2UodHlwZXMuSGFzaDE2MGJpdCwgcHViS2V5SGFzaClcblxuICByZXR1cm4gYnNjcmlwdC5jb21waWxlKFtcbiAgICBPUFMuT1BfRFVQLFxuICAgIE9QUy5PUF9IQVNIMTYwLFxuICAgIHB1YktleUhhc2gsXG4gICAgT1BTLk9QX0VRVUFMVkVSSUZZLFxuICAgIE9QUy5PUF9DSEVDS1NJR1xuICBdKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB0eXBlZm9yY2UoY2hlY2ssIGJ1ZmZlcilcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDMsIDIzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RlOiBlbmNvZGVcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBpbnB1dDogcmVxdWlyZSgnLi9pbnB1dCcpLFxuICBvdXRwdXQ6IHJlcXVpcmUoJy4vb3V0cHV0Jylcbn1cbiIsIi8vIDxzY3JpcHRTaWc+IHtzZXJpYWxpemVkIHNjcmlwdFB1YktleSBzY3JpcHR9XG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxuXG5mdW5jdGlvbiBjaGVjayAoc2NyaXB0LCBhbGxvd0luY29tcGxldGUpIHtcbiAgdmFyIGNodW5rcyA9IGJzY3JpcHQuZGVjb21waWxlKHNjcmlwdClcbiAgaWYgKGNodW5rcy5sZW5ndGggPCAxKSByZXR1cm4gZmFsc2VcblxuICB2YXIgbGFzdENodW5rID0gY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihsYXN0Q2h1bmspKSByZXR1cm4gZmFsc2VcblxuICB2YXIgc2NyaXB0U2lnQ2h1bmtzID0gYnNjcmlwdC5kZWNvbXBpbGUoYnNjcmlwdC5jb21waWxlKGNodW5rcy5zbGljZSgwLCAtMSkpKVxuICB2YXIgcmVkZWVtU2NyaXB0Q2h1bmtzID0gYnNjcmlwdC5kZWNvbXBpbGUobGFzdENodW5rKVxuXG4gIC8vIGlzIHJlZGVlbVNjcmlwdCBhIHZhbGlkIHNjcmlwdD9cbiAgaWYgKHJlZGVlbVNjcmlwdENodW5rcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZVxuXG4gIC8vIGlzIHJlZGVlbVNjcmlwdFNpZyBwdXNoIG9ubHk/XG4gIGlmICghYnNjcmlwdC5pc1B1c2hPbmx5KHNjcmlwdFNpZ0NodW5rcykpIHJldHVybiBmYWxzZVxuXG4gIHZhciBpbnB1dFR5cGUgPSBic2NyaXB0LmNsYXNzaWZ5SW5wdXQoc2NyaXB0U2lnQ2h1bmtzLCBhbGxvd0luY29tcGxldGUpXG4gIHZhciBvdXRwdXRUeXBlID0gYnNjcmlwdC5jbGFzc2lmeU91dHB1dChyZWRlZW1TY3JpcHRDaHVua3MpXG4gIGlmIChjaHVua3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG91dHB1dFR5cGUgPT09IGJzY3JpcHQudHlwZXMuUDJXU0ggfHwgb3V0cHV0VHlwZSA9PT0gYnNjcmlwdC50eXBlcy5QMldQS0hcbiAgfVxuICByZXR1cm4gaW5wdXRUeXBlID09PSBvdXRwdXRUeXBlXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnc2NyaXB0SGFzaCBpbnB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGVTdGFjayAocmVkZWVtU2NyaXB0U3RhY2ssIHJlZGVlbVNjcmlwdCkge1xuICB2YXIgc2VyaWFsaXplZFNjcmlwdFB1YktleSA9IGJzY3JpcHQuY29tcGlsZShyZWRlZW1TY3JpcHQpXG5cbiAgcmV0dXJuIFtdLmNvbmNhdChyZWRlZW1TY3JpcHRTdGFjaywgc2VyaWFsaXplZFNjcmlwdFB1YktleSlcbn1cblxuZnVuY3Rpb24gZW5jb2RlIChyZWRlZW1TY3JpcHRTaWcsIHJlZGVlbVNjcmlwdCkge1xuICB2YXIgcmVkZWVtU2NyaXB0U3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShyZWRlZW1TY3JpcHRTaWcpXG5cbiAgcmV0dXJuIGJzY3JpcHQuY29tcGlsZShlbmNvZGVTdGFjayhyZWRlZW1TY3JpcHRTdGFjaywgcmVkZWVtU2NyaXB0KSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlU3RhY2sgKHN0YWNrKSB7XG4gIHR5cGVmb3JjZShjaGVjaywgc3RhY2spXG5cbiAgcmV0dXJuIHtcbiAgICByZWRlZW1TY3JpcHRTdGFjazogc3RhY2suc2xpY2UoMCwgLTEpLFxuICAgIHJlZGVlbVNjcmlwdDogc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB2YXIgc3RhY2sgPSBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpXG4gIHZhciByZXN1bHQgPSBkZWNvZGVTdGFjayhzdGFjaylcbiAgcmVzdWx0LnJlZGVlbVNjcmlwdFNpZyA9IGJzY3JpcHQuY29tcGlsZShyZXN1bHQucmVkZWVtU2NyaXB0U3RhY2spXG4gIGRlbGV0ZSByZXN1bHQucmVkZWVtU2NyaXB0U3RhY2tcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZGVjb2RlU3RhY2s6IGRlY29kZVN0YWNrLFxuICBlbmNvZGU6IGVuY29kZSxcbiAgZW5jb2RlU3RhY2s6IGVuY29kZVN0YWNrXG59XG4iLCIvLyBPUF9IQVNIMTYwIHtzY3JpcHRIYXNofSBPUF9FUVVBTFxuXG52YXIgYnNjcmlwdCA9IHJlcXVpcmUoJy4uLy4uL3NjcmlwdCcpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuLi8uLi90eXBlcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciBPUFMgPSByZXF1aXJlKCdiaXRjb2luLW9wcycpXG5cbmZ1bmN0aW9uIGNoZWNrIChzY3JpcHQpIHtcbiAgdmFyIGJ1ZmZlciA9IGJzY3JpcHQuY29tcGlsZShzY3JpcHQpXG5cbiAgcmV0dXJuIGJ1ZmZlci5sZW5ndGggPT09IDIzICYmXG4gICAgYnVmZmVyWzBdID09PSBPUFMuT1BfSEFTSDE2MCAmJlxuICAgIGJ1ZmZlclsxXSA9PT0gMHgxNCAmJlxuICAgIGJ1ZmZlclsyMl0gPT09IE9QUy5PUF9FUVVBTFxufVxuY2hlY2sudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3NjcmlwdEhhc2ggb3V0cHV0JyB9XG5cbmZ1bmN0aW9uIGVuY29kZSAoc2NyaXB0SGFzaCkge1xuICB0eXBlZm9yY2UodHlwZXMuSGFzaDE2MGJpdCwgc2NyaXB0SGFzaClcblxuICByZXR1cm4gYnNjcmlwdC5jb21waWxlKFtPUFMuT1BfSEFTSDE2MCwgc2NyaXB0SGFzaCwgT1BTLk9QX0VRVUFMXSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChidWZmZXIpIHtcbiAgdHlwZWZvcmNlKGNoZWNrLCBidWZmZXIpXG5cbiAgcmV0dXJuIGJ1ZmZlci5zbGljZSgyLCAyMilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVjayxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kZTogZW5jb2RlXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgb3V0cHV0OiByZXF1aXJlKCcuL291dHB1dCcpXG59XG4iLCIvLyBPUF9SRVRVUk4ge2FhMjFhOWVkfSB7Y29tbWl0bWVudH1cblxudmFyIGJzY3JpcHQgPSByZXF1aXJlKCcuLi8uLi9zY3JpcHQnKVxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi4vLi4vdHlwZXMnKVxudmFyIHR5cGVmb3JjZSA9IHJlcXVpcmUoJ3R5cGVmb3JjZScpXG52YXIgT1BTID0gcmVxdWlyZSgnYml0Y29pbi1vcHMnKVxuXG52YXIgSEVBREVSID0gbmV3IEJ1ZmZlcignYWEyMWE5ZWQnLCAnaGV4JylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgYnVmZmVyID0gYnNjcmlwdC5jb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA+IDM3ICYmXG4gICAgYnVmZmVyWzBdID09PSBPUFMuT1BfUkVUVVJOICYmXG4gICAgYnVmZmVyWzFdID09PSAweDI0ICYmXG4gICAgYnVmZmVyLnNsaWNlKDIsIDYpLmVxdWFscyhIRUFERVIpXG59XG5cbmNoZWNrLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdXaXRuZXNzIGNvbW1pdG1lbnQgb3V0cHV0JyB9XG5cbmZ1bmN0aW9uIGVuY29kZSAoY29tbWl0bWVudCkge1xuICB0eXBlZm9yY2UodHlwZXMuSGFzaDI1NmJpdCwgY29tbWl0bWVudClcblxuICByZXR1cm4gYnNjcmlwdC5jb21waWxlKFtPUFMuT1BfUkVUVVJOLCBCdWZmZXIuY29uY2F0KFtIRUFERVIsIGNvbW1pdG1lbnRdKV0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoYnVmZmVyKSB7XG4gIHR5cGVmb3JjZShjaGVjaywgYnVmZmVyKVxuXG4gIHJldHVybiBic2NyaXB0LmRlY29tcGlsZShidWZmZXIpWzFdLnNsaWNlKDQsIDM2KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RlOiBlbmNvZGVcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBpbnB1dDogcmVxdWlyZSgnLi9pbnB1dCcpLFxuICBvdXRwdXQ6IHJlcXVpcmUoJy4vb3V0cHV0Jylcbn1cbiIsIi8vIHtzaWduYXR1cmV9IHtwdWJLZXl9XG5cbnZhciBwa2ggPSByZXF1aXJlKCcuLi9wdWJrZXloYXNoL2lucHV0JylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBwa2guY2hlY2ssXG4gIGRlY29kZVN0YWNrOiBwa2guZGVjb2RlU3RhY2ssXG4gIGVuY29kZVN0YWNrOiBwa2guZW5jb2RlU3RhY2tcbn1cbiIsIi8vIE9QXzAge3B1YktleUhhc2h9XG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGVzJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgYnVmZmVyID0gYnNjcmlwdC5jb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gMjIgJiZcbiAgICBidWZmZXJbMF0gPT09IE9QUy5PUF8wICYmXG4gICAgYnVmZmVyWzFdID09PSAweDE0XG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnV2l0bmVzcyBwdWJLZXlIYXNoIG91dHB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGUgKHB1YktleUhhc2gpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLkhhc2gxNjBiaXQsIHB1YktleUhhc2gpXG5cbiAgcmV0dXJuIGJzY3JpcHQuY29tcGlsZShbT1BTLk9QXzAsIHB1YktleUhhc2hdKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB0eXBlZm9yY2UoY2hlY2ssIGJ1ZmZlcilcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDIpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVjazogY2hlY2ssXG4gIGRlY29kZTogZGVjb2RlLFxuICBlbmNvZGU6IGVuY29kZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlucHV0OiByZXF1aXJlKCcuL2lucHV0JyksXG4gIG91dHB1dDogcmVxdWlyZSgnLi9vdXRwdXQnKVxufVxuIiwiLy8ge3NpZ25hdHVyZX0ge3B1YktleX1cblxudmFyIHAyc2ggPSByZXF1aXJlKCcuLi9zY3JpcHRoYXNoL2lucHV0JylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBwMnNoLmNoZWNrLFxuICBkZWNvZGVTdGFjazogcDJzaC5kZWNvZGVTdGFjayxcbiAgZW5jb2RlU3RhY2s6IHAyc2guZW5jb2RlU3RhY2tcbn1cbiIsIi8vIE9QXzAge3NjcmlwdEhhc2h9XG5cbnZhciBic2NyaXB0ID0gcmVxdWlyZSgnLi4vLi4vc2NyaXB0JylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGVzJylcbnZhciB0eXBlZm9yY2UgPSByZXF1aXJlKCd0eXBlZm9yY2UnKVxudmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gY2hlY2sgKHNjcmlwdCkge1xuICB2YXIgYnVmZmVyID0gYnNjcmlwdC5jb21waWxlKHNjcmlwdClcblxuICByZXR1cm4gYnVmZmVyLmxlbmd0aCA9PT0gMzQgJiZcbiAgICBidWZmZXJbMF0gPT09IE9QUy5PUF8wICYmXG4gICAgYnVmZmVyWzFdID09PSAweDIwXG59XG5jaGVjay50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnV2l0bmVzcyBzY3JpcHRIYXNoIG91dHB1dCcgfVxuXG5mdW5jdGlvbiBlbmNvZGUgKHNjcmlwdEhhc2gpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLkhhc2gyNTZiaXQsIHNjcmlwdEhhc2gpXG5cbiAgcmV0dXJuIGJzY3JpcHQuY29tcGlsZShbT1BTLk9QXzAsIHNjcmlwdEhhc2hdKVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlcikge1xuICB0eXBlZm9yY2UoY2hlY2ssIGJ1ZmZlcilcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDIpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVjazogY2hlY2ssXG4gIGRlY29kZTogZGVjb2RlLFxuICBlbmNvZGU6IGVuY29kZVxufVxuIiwidmFyIGJjcnlwdG8gPSByZXF1aXJlKCcuL2NyeXB0bycpXG52YXIgYnNjcmlwdCA9IHJlcXVpcmUoJy4vc2NyaXB0JylcbnZhciBidWZmZXJ1dGlscyA9IHJlcXVpcmUoJy4vYnVmZmVydXRpbHMnKVxudmFyIG9wY29kZXMgPSByZXF1aXJlKCdiaXRjb2luLW9wcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKVxuXG5mdW5jdGlvbiB2YXJTbGljZVNpemUgKHNvbWVTY3JpcHQpIHtcbiAgdmFyIGxlbmd0aCA9IHNvbWVTY3JpcHQubGVuZ3RoXG5cbiAgcmV0dXJuIGJ1ZmZlcnV0aWxzLnZhckludFNpemUobGVuZ3RoKSArIGxlbmd0aFxufVxuXG5mdW5jdGlvbiB2ZWN0b3JTaXplIChzb21lVmVjdG9yKSB7XG4gIHZhciBsZW5ndGggPSBzb21lVmVjdG9yLmxlbmd0aFxuXG4gIHJldHVybiBidWZmZXJ1dGlscy52YXJJbnRTaXplKGxlbmd0aCkgKyBzb21lVmVjdG9yLnJlZHVjZShmdW5jdGlvbiAoc3VtLCB3aXRuZXNzKSB7XG4gICAgcmV0dXJuIHN1bSArIHZhclNsaWNlU2l6ZSh3aXRuZXNzKVxuICB9LCAwKVxufVxuXG5mdW5jdGlvbiBUcmFuc2FjdGlvbiAoKSB7XG4gIHRoaXMudmVyc2lvbiA9IDFcbiAgdGhpcy5sb2NrdGltZSA9IDBcbiAgdGhpcy5pbnMgPSBbXVxuICB0aGlzLm91dHMgPSBbXVxuICB0aGlzLmpvaW5zcGxpdHMgPSBbXVxufVxuXG5UcmFuc2FjdGlvbi5ERUZBVUxUX1NFUVVFTkNFID0gMHhmZmZmZmZmZlxuVHJhbnNhY3Rpb24uU0lHSEFTSF9BTEwgPSAweDAxXG5UcmFuc2FjdGlvbi5TSUdIQVNIX05PTkUgPSAweDAyXG5UcmFuc2FjdGlvbi5TSUdIQVNIX1NJTkdMRSA9IDB4MDNcblRyYW5zYWN0aW9uLlNJR0hBU0hfQU5ZT05FQ0FOUEFZID0gMHg4MFxuVHJhbnNhY3Rpb24uQURWQU5DRURfVFJBTlNBQ1RJT05fTUFSS0VSID0gMHgwMFxuVHJhbnNhY3Rpb24uQURWQU5DRURfVFJBTlNBQ1RJT05fRkxBRyA9IDB4MDFcblxudmFyIEVNUFRZX1NDUklQVCA9IG5ldyBCdWZmZXIoMClcbnZhciBFTVBUWV9XSVRORVNTID0gW11cbnZhciBaRVJPID0gbmV3IEJ1ZmZlcignMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICdoZXgnKVxudmFyIE9ORSA9IG5ldyBCdWZmZXIoJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEnLCAnaGV4JylcbnZhciBWQUxVRV9VSU5UNjRfTUFYID0gbmV3IEJ1ZmZlcignZmZmZmZmZmZmZmZmZmZmZicsICdoZXgnKVxudmFyIEJMQU5LX09VVFBVVCA9IHtcbiAgc2NyaXB0OiBFTVBUWV9TQ1JJUFQsXG4gIHZhbHVlQnVmZmVyOiBWQUxVRV9VSU5UNjRfTUFYXG59XG5cblRyYW5zYWN0aW9uLlpDQVNIX05VTV9KU19JTlBVVFMgPSAyXG5UcmFuc2FjdGlvbi5aQ0FTSF9OVU1fSlNfT1VUUFVUUyA9IDJcblRyYW5zYWN0aW9uLlpDQVNIX05PVEVDSVBIRVJURVhUX1NJWkUgPSAxICsgOCArIDMyICsgMzIgKyA1MTIgKyAxNlxuXG5UcmFuc2FjdGlvbi5aQ0FTSF9HMV9QUkVGSVhfTUFTSyA9IDB4MDJcblRyYW5zYWN0aW9uLlpDQVNIX0cyX1BSRUZJWF9NQVNLID0gMHgwYVxuXG5UcmFuc2FjdGlvbi5mcm9tQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlciwgemNhc2gsIF9fbm9TdHJpY3QpIHtcbiAgdmFyIG9mZnNldCA9IDBcbiAgZnVuY3Rpb24gcmVhZFNsaWNlIChuKSB7XG4gICAgb2Zmc2V0ICs9IG5cbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKG9mZnNldCAtIG4sIG9mZnNldClcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRVSW50OCAoKSB7XG4gICAgdmFyIGkgPSBidWZmZXIucmVhZFVJbnQ4KG9mZnNldClcbiAgICBvZmZzZXQgKz0gMVxuICAgIHJldHVybiBpXG4gIH1cblxuICBmdW5jdGlvbiByZWFkVUludDMyICgpIHtcbiAgICB2YXIgaSA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0KVxuICAgIG9mZnNldCArPSA0XG4gICAgcmV0dXJuIGlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRJbnQzMiAoKSB7XG4gICAgdmFyIGkgPSBidWZmZXIucmVhZEludDMyTEUob2Zmc2V0KVxuICAgIG9mZnNldCArPSA0XG4gICAgcmV0dXJuIGlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRVSW50NjQgKCkge1xuICAgIHZhciBpID0gYnVmZmVydXRpbHMucmVhZFVJbnQ2NExFKGJ1ZmZlciwgb2Zmc2V0KVxuICAgIG9mZnNldCArPSA4XG4gICAgcmV0dXJuIGlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRWYXJJbnQgKCkge1xuICAgIHZhciB2aSA9IGJ1ZmZlcnV0aWxzLnJlYWRWYXJJbnQoYnVmZmVyLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IHZpLnNpemVcbiAgICByZXR1cm4gdmkubnVtYmVyXG4gIH1cblxuICBmdW5jdGlvbiByZWFkVmFyU2xpY2UgKCkge1xuICAgIHJldHVybiByZWFkU2xpY2UocmVhZFZhckludCgpKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFZlY3RvciAoKSB7XG4gICAgdmFyIGNvdW50ID0gcmVhZFZhckludCgpXG4gICAgdmFyIHZlY3RvciA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB2ZWN0b3IucHVzaChyZWFkVmFyU2xpY2UoKSlcbiAgICByZXR1cm4gdmVjdG9yXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQ29tcHJlc3NlZEcxICgpIHtcbiAgICB2YXIgeUxzYiA9IHJlYWRVSW50OCgpICYgMVxuICAgIHZhciB4ID0gcmVhZFNsaWNlKDMyKVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeUxzYjogeUxzYlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRDb21wcmVzc2VkRzIgKCkge1xuICAgIHZhciB5THNiID0gcmVhZFVJbnQ4KCkgJiAxXG4gICAgdmFyIHggPSByZWFkU2xpY2UoNjQpXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5THNiOiB5THNiXG4gICAgfVxuICB9XG5cbiAgdmFyIHR4ID0gbmV3IFRyYW5zYWN0aW9uKClcbiAgdHgudmVyc2lvbiA9IHJlYWRJbnQzMigpXG5cbiAgdmFyIG1hcmtlciA9IGJ1ZmZlci5yZWFkVUludDgob2Zmc2V0KVxuICB2YXIgZmxhZyA9IGJ1ZmZlci5yZWFkVUludDgob2Zmc2V0ICsgMSlcblxuICB2YXIgaGFzV2l0bmVzc2VzID0gZmFsc2VcbiAgaWYgKCF6Y2FzaCkge1xuICAgIGlmIChtYXJrZXIgPT09IFRyYW5zYWN0aW9uLkFEVkFOQ0VEX1RSQU5TQUNUSU9OX01BUktFUiAmJlxuICAgICAgICBmbGFnID09PSBUcmFuc2FjdGlvbi5BRFZBTkNFRF9UUkFOU0FDVElPTl9GTEFHKSB7XG4gICAgICBvZmZzZXQgKz0gMlxuICAgICAgaGFzV2l0bmVzc2VzID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHZhciB2aW5MZW4gPSByZWFkVmFySW50KClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aW5MZW47ICsraSkge1xuICAgIHR4Lmlucy5wdXNoKHtcbiAgICAgIGhhc2g6IHJlYWRTbGljZSgzMiksXG4gICAgICBpbmRleDogcmVhZFVJbnQzMigpLFxuICAgICAgc2NyaXB0OiByZWFkVmFyU2xpY2UoKSxcbiAgICAgIHNlcXVlbmNlOiByZWFkVUludDMyKCksXG4gICAgICB3aXRuZXNzOiBFTVBUWV9XSVRORVNTXG4gICAgfSlcbiAgfVxuXG4gIHZhciB2b3V0TGVuID0gcmVhZFZhckludCgpXG4gIGZvciAoaSA9IDA7IGkgPCB2b3V0TGVuOyArK2kpIHtcbiAgICB0eC5vdXRzLnB1c2goe1xuICAgICAgdmFsdWU6IHJlYWRVSW50NjQoKSxcbiAgICAgIHNjcmlwdDogcmVhZFZhclNsaWNlKClcbiAgICB9KVxuICB9XG5cbiAgaWYgKGhhc1dpdG5lc3Nlcykge1xuICAgIGZvciAoaSA9IDA7IGkgPCB2aW5MZW47ICsraSkge1xuICAgICAgdHguaW5zW2ldLndpdG5lc3MgPSByZWFkVmVjdG9yKClcbiAgICB9XG5cbiAgICAvLyB3YXMgdGhpcyBwb2ludGxlc3M/XG4gICAgaWYgKCF0eC5oYXNXaXRuZXNzZXMoKSkgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBoYXMgc3VwZXJmbHVvdXMgd2l0bmVzcyBkYXRhJylcbiAgfVxuXG4gIHR4LmxvY2t0aW1lID0gcmVhZFVJbnQzMigpXG5cbiAgaWYgKHR4LnZlcnNpb24gPj0gMiAmJiB6Y2FzaCkge1xuICAgIHZhciBqc0xlbiA9IHJlYWRWYXJJbnQoKVxuICAgIGZvciAoaSA9IDA7IGkgPCBqc0xlbjsgKytpKSB7XG4gICAgICB2YXIgdnB1Yk9sZCA9IHJlYWRVSW50NjQoKVxuICAgICAgdmFyIHZwdWJOZXcgPSByZWFkVUludDY0KClcbiAgICAgIHZhciBhbmNob3IgPSByZWFkU2xpY2UoMzIpXG4gICAgICB2YXIgbnVsbGlmaWVycyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IFRyYW5zYWN0aW9uLlpDQVNIX05VTV9KU19JTlBVVFM7IGorKykge1xuICAgICAgICBudWxsaWZpZXJzLnB1c2gocmVhZFNsaWNlKDMyKSlcbiAgICAgIH1cbiAgICAgIHZhciBjb21taXRtZW50cyA9IFtdXG4gICAgICBmb3IgKGogPSAwOyBqIDwgVHJhbnNhY3Rpb24uWkNBU0hfTlVNX0pTX09VVFBVVFM7IGorKykge1xuICAgICAgICBjb21taXRtZW50cy5wdXNoKHJlYWRTbGljZSgzMikpXG4gICAgICB9XG4gICAgICB2YXIgZXBoZW1lcmFsS2V5ID0gcmVhZFNsaWNlKDMyKVxuICAgICAgdmFyIHJhbmRvbVNlZWQgPSByZWFkU2xpY2UoMzIpXG4gICAgICB2YXIgbWFjcyA9IFtdXG4gICAgICBmb3IgKGogPSAwOyBqIDwgVHJhbnNhY3Rpb24uWkNBU0hfTlVNX0pTX0lOUFVUUzsgaisrKSB7XG4gICAgICAgIG1hY3MucHVzaChyZWFkU2xpY2UoMzIpKVxuICAgICAgfVxuICAgICAgLy8gVE9ETyB3aGF0IGFyZSB0aG9zZSBleGFjdGx5PyBDYW4gaXQgYmUgZXhwcmVzc2VkIGJ5IEJpZ051bT9cbiAgICAgIHZhciB6cHJvb2YgPSB7XG4gICAgICAgIGdBOiByZWFkQ29tcHJlc3NlZEcxKCksXG4gICAgICAgIGdBUHJpbWU6IHJlYWRDb21wcmVzc2VkRzEoKSxcbiAgICAgICAgZ0I6IHJlYWRDb21wcmVzc2VkRzIoKSxcbiAgICAgICAgZ0JQcmltZTogcmVhZENvbXByZXNzZWRHMSgpLFxuICAgICAgICBnQzogcmVhZENvbXByZXNzZWRHMSgpLFxuICAgICAgICBnQ1ByaW1lOiByZWFkQ29tcHJlc3NlZEcxKCksXG4gICAgICAgIGdLOiByZWFkQ29tcHJlc3NlZEcxKCksXG4gICAgICAgIGdIOiByZWFkQ29tcHJlc3NlZEcxKClcbiAgICAgIH1cbiAgICAgIHZhciBjaXBoZXJ0ZXh0cyA9IFtdXG4gICAgICBmb3IgKGogPSAwOyBqIDwgVHJhbnNhY3Rpb24uWkNBU0hfTlVNX0pTX09VVFBVVFM7IGorKykge1xuICAgICAgICBjaXBoZXJ0ZXh0cy5wdXNoKHJlYWRTbGljZShUcmFuc2FjdGlvbi5aQ0FTSF9OT1RFQ0lQSEVSVEVYVF9TSVpFKSlcbiAgICAgIH1cblxuICAgICAgdHguam9pbnNwbGl0cy5wdXNoKHtcbiAgICAgICAgdnB1Yk9sZDogdnB1Yk9sZCxcbiAgICAgICAgdnB1Yk5ldzogdnB1Yk5ldyxcbiAgICAgICAgYW5jaG9yOiBhbmNob3IsXG4gICAgICAgIG51bGxpZmllcnM6IG51bGxpZmllcnMsXG4gICAgICAgIGNvbW1pdG1lbnRzOiBjb21taXRtZW50cyxcbiAgICAgICAgZXBoZW1lcmFsS2V5OiBlcGhlbWVyYWxLZXksXG4gICAgICAgIHJhbmRvbVNlZWQ6IHJhbmRvbVNlZWQsXG4gICAgICAgIG1hY3M6IG1hY3MsXG4gICAgICAgIHpwcm9vZjogenByb29mLFxuICAgICAgICBjaXBoZXJ0ZXh0czogY2lwaGVydGV4dHNcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChqc0xlbiA+IDApIHtcbiAgICAgIHR4LmpvaW5zcGxpdFB1YmtleSA9IHJlYWRTbGljZSgzMilcbiAgICAgIHR4LmpvaW5zcGxpdFNpZyA9IHJlYWRTbGljZSg2NClcbiAgICB9XG4gIH1cblxuICB0eC56Y2FzaCA9ICEhemNhc2hcblxuICBpZiAoX19ub1N0cmljdCkgcmV0dXJuIHR4XG4gIGlmIChvZmZzZXQgIT09IGJ1ZmZlci5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignVHJhbnNhY3Rpb24gaGFzIHVuZXhwZWN0ZWQgZGF0YScpXG5cbiAgcmV0dXJuIHR4XG59XG5cblRyYW5zYWN0aW9uLmZyb21IZXggPSBmdW5jdGlvbiAoaGV4LCB6Y2FzaCkge1xuICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGhleCwgJ2hleCcpLCB6Y2FzaClcbn1cblxuVHJhbnNhY3Rpb24uaXNDb2luYmFzZUhhc2ggPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHR5cGVmb3JjZSh0eXBlcy5IYXNoMjU2Yml0LCBidWZmZXIpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7ICsraSkge1xuICAgIGlmIChidWZmZXJbaV0gIT09IDApIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5pc0NvaW5iYXNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pbnMubGVuZ3RoID09PSAxICYmIFRyYW5zYWN0aW9uLmlzQ29pbmJhc2VIYXNoKHRoaXMuaW5zWzBdLmhhc2gpXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5hZGRJbnB1dCA9IGZ1bmN0aW9uIChoYXNoLCBpbmRleCwgc2VxdWVuY2UsIHNjcmlwdFNpZykge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUoXG4gICAgdHlwZXMuSGFzaDI1NmJpdCxcbiAgICB0eXBlcy5VSW50MzIsXG4gICAgdHlwZXMubWF5YmUodHlwZXMuVUludDMyKSxcbiAgICB0eXBlcy5tYXliZSh0eXBlcy5CdWZmZXIpXG4gICksIGFyZ3VtZW50cylcblxuICBpZiAodHlwZXMuTnVsbChzZXF1ZW5jZSkpIHtcbiAgICBzZXF1ZW5jZSA9IFRyYW5zYWN0aW9uLkRFRkFVTFRfU0VRVUVOQ0VcbiAgfVxuXG4gIC8vIEFkZCB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgaW5wdXQncyBpbmRleFxuICByZXR1cm4gKHRoaXMuaW5zLnB1c2goe1xuICAgIGhhc2g6IGhhc2gsXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIHNjcmlwdDogc2NyaXB0U2lnIHx8IEVNUFRZX1NDUklQVCxcbiAgICBzZXF1ZW5jZTogc2VxdWVuY2UsXG4gICAgd2l0bmVzczogRU1QVFlfV0lUTkVTU1xuICB9KSAtIDEpXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5hZGRPdXRwdXQgPSBmdW5jdGlvbiAoc2NyaXB0UHViS2V5LCB2YWx1ZSkge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUodHlwZXMuQnVmZmVyLCB0eXBlcy5TYXRvc2hpKSwgYXJndW1lbnRzKVxuXG4gIC8vIEFkZCB0aGUgb3V0cHV0IGFuZCByZXR1cm4gdGhlIG91dHB1dCdzIGluZGV4XG4gIHJldHVybiAodGhpcy5vdXRzLnB1c2goe1xuICAgIHNjcmlwdDogc2NyaXB0UHViS2V5LFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KSAtIDEpXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5oYXNXaXRuZXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlucy5zb21lKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHgud2l0bmVzcy5sZW5ndGggIT09IDBcbiAgfSlcbn1cblxuVHJhbnNhY3Rpb24ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9fYnl0ZUxlbmd0aCh0cnVlKVxufVxuXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuam9pbnNwbGl0Qnl0ZUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMudmVyc2lvbiA8IDIpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgaWYgKCF0aGlzLnpjYXNoKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHZhciBwdWJrZXlTaWdMZW5ndGggPSAodGhpcy5qb2luc3BsaXRzLmxlbmd0aCA+IDApID8gKDMyICsgNjQpIDogMFxuICByZXR1cm4gKFxuICAgIGJ1ZmZlcnV0aWxzLnZhckludFNpemUodGhpcy5qb2luc3BsaXRzLmxlbmd0aCkgK1xuICAgIHRoaXMuam9pbnNwbGl0cy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgam9pbnNwbGl0KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzdW0gK1xuICAgICAgICA4ICsgOCArIDMyICtcbiAgICAgICAgam9pbnNwbGl0Lm51bGxpZmllcnMubGVuZ3RoICogMzIgK1xuICAgICAgICBqb2luc3BsaXQuY29tbWl0bWVudHMubGVuZ3RoICogMzIgK1xuICAgICAgICAzMiArIDMyICtcbiAgICAgICAgam9pbnNwbGl0Lm1hY3MubGVuZ3RoICogMzIgK1xuICAgICAgICA2NSArIDMzICogNyArXG4gICAgICAgIGpvaW5zcGxpdC5jaXBoZXJ0ZXh0cy5sZW5ndGggKiBUcmFuc2FjdGlvbi5aQ0FTSF9OT1RFQ0lQSEVSVEVYVF9TSVpFXG4gICAgICApXG4gICAgfSwgMCkgK1xuICAgIHB1YmtleVNpZ0xlbmd0aFxuICApXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5fX2J5dGVMZW5ndGggPSBmdW5jdGlvbiAoX19hbGxvd1dpdG5lc3MpIHtcbiAgdmFyIGhhc1dpdG5lc3NlcyA9IF9fYWxsb3dXaXRuZXNzICYmIHRoaXMuaGFzV2l0bmVzc2VzKClcblxuICByZXR1cm4gKFxuICAgIChoYXNXaXRuZXNzZXMgPyAxMCA6IDgpICtcbiAgICBidWZmZXJ1dGlscy52YXJJbnRTaXplKHRoaXMuaW5zLmxlbmd0aCkgK1xuICAgIGJ1ZmZlcnV0aWxzLnZhckludFNpemUodGhpcy5vdXRzLmxlbmd0aCkgK1xuICAgIHRoaXMuaW5zLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBpbnB1dCkgeyByZXR1cm4gc3VtICsgNDAgKyB2YXJTbGljZVNpemUoaW5wdXQuc2NyaXB0KSB9LCAwKSArXG4gICAgdGhpcy5vdXRzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBvdXRwdXQpIHsgcmV0dXJuIHN1bSArIDggKyB2YXJTbGljZVNpemUob3V0cHV0LnNjcmlwdCkgfSwgMCkgK1xuICAgIChoYXNXaXRuZXNzZXMgPyB0aGlzLmlucy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgaW5wdXQpIHsgcmV0dXJuIHN1bSArIHZlY3RvclNpemUoaW5wdXQud2l0bmVzcykgfSwgMCkgOiAwKSArXG4gICAgdGhpcy5qb2luc3BsaXRCeXRlTGVuZ3RoKClcbiAgKVxufVxuXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXdUeCA9IG5ldyBUcmFuc2FjdGlvbigpXG4gIG5ld1R4LnZlcnNpb24gPSB0aGlzLnZlcnNpb25cbiAgbmV3VHgubG9ja3RpbWUgPSB0aGlzLmxvY2t0aW1lXG4gIG5ld1R4LnpjYXNoID0gdGhpcy56Y2FzaFxuXG4gIG5ld1R4LmlucyA9IHRoaXMuaW5zLm1hcChmdW5jdGlvbiAodHhJbikge1xuICAgIHJldHVybiB7XG4gICAgICBoYXNoOiB0eEluLmhhc2gsXG4gICAgICBpbmRleDogdHhJbi5pbmRleCxcbiAgICAgIHNjcmlwdDogdHhJbi5zY3JpcHQsXG4gICAgICBzZXF1ZW5jZTogdHhJbi5zZXF1ZW5jZSxcbiAgICAgIHdpdG5lc3M6IHR4SW4ud2l0bmVzc1xuICAgIH1cbiAgfSlcblxuICBuZXdUeC5vdXRzID0gdGhpcy5vdXRzLm1hcChmdW5jdGlvbiAodHhPdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NyaXB0OiB0eE91dC5zY3JpcHQsXG4gICAgICB2YWx1ZTogdHhPdXQudmFsdWVcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIG5ld1R4XG59XG5cbi8qKlxuICogSGFzaCB0cmFuc2FjdGlvbiBmb3Igc2lnbmluZyBhIHNwZWNpZmljIGlucHV0LlxuICpcbiAqIEJpdGNvaW4gdXNlcyBhIGRpZmZlcmVudCBoYXNoIGZvciBlYWNoIHNpZ25lZCB0cmFuc2FjdGlvbiBpbnB1dC5cbiAqIFRoaXMgbWV0aG9kIGNvcGllcyB0aGUgdHJhbnNhY3Rpb24sIG1ha2VzIHRoZSBuZWNlc3NhcnkgY2hhbmdlcyBiYXNlZCBvbiB0aGVcbiAqIGhhc2hUeXBlLCBhbmQgdGhlbiBoYXNoZXMgdGhlIHJlc3VsdC5cbiAqIFRoaXMgaGFzaCBjYW4gdGhlbiBiZSB1c2VkIHRvIHNpZ24gdGhlIHByb3ZpZGVkIHRyYW5zYWN0aW9uIGlucHV0LlxuICovXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuaGFzaEZvclNpZ25hdHVyZSA9IGZ1bmN0aW9uIChpbkluZGV4LCBwcmV2T3V0U2NyaXB0LCBoYXNoVHlwZSkge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUodHlwZXMuVUludDMyLCB0eXBlcy5CdWZmZXIsIC8qIHR5cGVzLlVJbnQ4ICovIHR5cGVzLk51bWJlciksIGFyZ3VtZW50cylcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXRjb2luL2Jsb2IvbWFzdGVyL3NyYy90ZXN0L3NpZ2hhc2hfdGVzdHMuY3BwI0wyOVxuICBpZiAoaW5JbmRleCA+PSB0aGlzLmlucy5sZW5ndGgpIHJldHVybiBPTkVcblxuICAvLyBpZ25vcmUgT1BfQ09ERVNFUEFSQVRPUlxuICB2YXIgb3VyU2NyaXB0ID0gYnNjcmlwdC5jb21waWxlKGJzY3JpcHQuZGVjb21waWxlKHByZXZPdXRTY3JpcHQpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICE9PSBvcGNvZGVzLk9QX0NPREVTRVBBUkFUT1JcbiAgfSkpXG5cbiAgdmFyIHR4VG1wID0gdGhpcy5jbG9uZSgpXG5cbiAgLy8gU0lHSEFTSF9OT05FOiBpZ25vcmUgYWxsIG91dHB1dHM/ICh3aWxkY2FyZCBwYXllZSlcbiAgaWYgKChoYXNoVHlwZSAmIDB4MWYpID09PSBUcmFuc2FjdGlvbi5TSUdIQVNIX05PTkUpIHtcbiAgICB0eFRtcC5vdXRzID0gW11cblxuICAgIC8vIGlnbm9yZSBzZXF1ZW5jZSBudW1iZXJzIChleGNlcHQgYXQgaW5JbmRleClcbiAgICB0eFRtcC5pbnMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXQsIGkpIHtcbiAgICAgIGlmIChpID09PSBpbkluZGV4KSByZXR1cm5cblxuICAgICAgaW5wdXQuc2VxdWVuY2UgPSAwXG4gICAgfSlcblxuICAvLyBTSUdIQVNIX1NJTkdMRTogaWdub3JlIGFsbCBvdXRwdXRzLCBleGNlcHQgYXQgdGhlIHNhbWUgaW5kZXg/XG4gIH0gZWxzZSBpZiAoKGhhc2hUeXBlICYgMHgxZikgPT09IFRyYW5zYWN0aW9uLlNJR0hBU0hfU0lOR0xFKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYml0Y29pbi9ibG9iL21hc3Rlci9zcmMvdGVzdC9zaWdoYXNoX3Rlc3RzLmNwcCNMNjBcbiAgICBpZiAoaW5JbmRleCA+PSB0aGlzLm91dHMubGVuZ3RoKSByZXR1cm4gT05FXG5cbiAgICAvLyB0cnVuY2F0ZSBvdXRwdXRzIGFmdGVyXG4gICAgdHhUbXAub3V0cy5sZW5ndGggPSBpbkluZGV4ICsgMVxuXG4gICAgLy8gXCJibGFua1wiIG91dHB1dHMgYmVmb3JlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbkluZGV4OyBpKyspIHtcbiAgICAgIHR4VG1wLm91dHNbaV0gPSBCTEFOS19PVVRQVVRcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgc2VxdWVuY2UgbnVtYmVycyAoZXhjZXB0IGF0IGluSW5kZXgpXG4gICAgdHhUbXAuaW5zLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCB5KSB7XG4gICAgICBpZiAoeSA9PT0gaW5JbmRleCkgcmV0dXJuXG5cbiAgICAgIGlucHV0LnNlcXVlbmNlID0gMFxuICAgIH0pXG4gIH1cblxuICAvLyBTSUdIQVNIX0FOWU9ORUNBTlBBWTogaWdub3JlIGlucHV0cyBlbnRpcmVseT9cbiAgaWYgKGhhc2hUeXBlICYgVHJhbnNhY3Rpb24uU0lHSEFTSF9BTllPTkVDQU5QQVkpIHtcbiAgICB0eFRtcC5pbnMgPSBbdHhUbXAuaW5zW2luSW5kZXhdXVxuICAgIHR4VG1wLmluc1swXS5zY3JpcHQgPSBvdXJTY3JpcHRcblxuICAvLyBTSUdIQVNIX0FMTDogb25seSBpZ25vcmUgaW5wdXQgc2NyaXB0c1xuICB9IGVsc2Uge1xuICAgIC8vIFwiYmxhbmtcIiBvdGhlcnMgaW5wdXQgc2NyaXB0c1xuICAgIHR4VG1wLmlucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCkgeyBpbnB1dC5zY3JpcHQgPSBFTVBUWV9TQ1JJUFQgfSlcbiAgICB0eFRtcC5pbnNbaW5JbmRleF0uc2NyaXB0ID0gb3VyU2NyaXB0XG4gIH1cblxuICAvLyBzZXJpYWxpemUgYW5kIGhhc2hcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIodHhUbXAuX19ieXRlTGVuZ3RoKGZhbHNlKSArIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUoaGFzaFR5cGUsIGJ1ZmZlci5sZW5ndGggLSA0KVxuICB0eFRtcC5fX3RvQnVmZmVyKGJ1ZmZlciwgMCwgZmFsc2UpXG5cbiAgcmV0dXJuIGJjcnlwdG8uaGFzaDI1NihidWZmZXIpXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5oYXNoRm9yV2l0bmVzc1YwID0gZnVuY3Rpb24gKGluSW5kZXgsIHByZXZPdXRTY3JpcHQsIHZhbHVlLCBoYXNoVHlwZSkge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUodHlwZXMuVUludDMyLCB0eXBlcy5CdWZmZXIsIHR5cGVzLlNhdG9zaGksIHR5cGVzLlVJbnQzMiksIGFyZ3VtZW50cylcblxuICB2YXIgdGJ1ZmZlciwgdG9mZnNldFxuICBmdW5jdGlvbiB3cml0ZVNsaWNlIChzbGljZSkgeyB0b2Zmc2V0ICs9IHNsaWNlLmNvcHkodGJ1ZmZlciwgdG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVVJbnQzMiAoaSkgeyB0b2Zmc2V0ID0gdGJ1ZmZlci53cml0ZVVJbnQzMkxFKGksIHRvZmZzZXQpIH1cbiAgZnVuY3Rpb24gd3JpdGVVSW50NjQgKGkpIHsgdG9mZnNldCA9IGJ1ZmZlcnV0aWxzLndyaXRlVUludDY0TEUodGJ1ZmZlciwgaSwgdG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVZhckludCAoaSkgeyB0b2Zmc2V0ICs9IGJ1ZmZlcnV0aWxzLndyaXRlVmFySW50KHRidWZmZXIsIGksIHRvZmZzZXQpIH1cbiAgZnVuY3Rpb24gd3JpdGVWYXJTbGljZSAoc2xpY2UpIHsgd3JpdGVWYXJJbnQoc2xpY2UubGVuZ3RoKTsgd3JpdGVTbGljZShzbGljZSkgfVxuXG4gIHZhciBoYXNoT3V0cHV0cyA9IFpFUk9cbiAgdmFyIGhhc2hQcmV2b3V0cyA9IFpFUk9cbiAgdmFyIGhhc2hTZXF1ZW5jZSA9IFpFUk9cblxuICBpZiAoIShoYXNoVHlwZSAmIFRyYW5zYWN0aW9uLlNJR0hBU0hfQU5ZT05FQ0FOUEFZKSkge1xuICAgIHRidWZmZXIgPSBuZXcgQnVmZmVyKDM2ICogdGhpcy5pbnMubGVuZ3RoKVxuICAgIHRvZmZzZXQgPSAwXG5cbiAgICB0aGlzLmlucy5mb3JFYWNoKGZ1bmN0aW9uICh0eEluKSB7XG4gICAgICB3cml0ZVNsaWNlKHR4SW4uaGFzaClcbiAgICAgIHdyaXRlVUludDMyKHR4SW4uaW5kZXgpXG4gICAgfSlcblxuICAgIGhhc2hQcmV2b3V0cyA9IGJjcnlwdG8uaGFzaDI1Nih0YnVmZmVyKVxuICB9XG5cbiAgaWYgKCEoaGFzaFR5cGUgJiBUcmFuc2FjdGlvbi5TSUdIQVNIX0FOWU9ORUNBTlBBWSkgJiZcbiAgICAgICAoaGFzaFR5cGUgJiAweDFmKSAhPT0gVHJhbnNhY3Rpb24uU0lHSEFTSF9TSU5HTEUgJiZcbiAgICAgICAoaGFzaFR5cGUgJiAweDFmKSAhPT0gVHJhbnNhY3Rpb24uU0lHSEFTSF9OT05FKSB7XG4gICAgdGJ1ZmZlciA9IG5ldyBCdWZmZXIoNCAqIHRoaXMuaW5zLmxlbmd0aClcbiAgICB0b2Zmc2V0ID0gMFxuXG4gICAgdGhpcy5pbnMuZm9yRWFjaChmdW5jdGlvbiAodHhJbikge1xuICAgICAgd3JpdGVVSW50MzIodHhJbi5zZXF1ZW5jZSlcbiAgICB9KVxuXG4gICAgaGFzaFNlcXVlbmNlID0gYmNyeXB0by5oYXNoMjU2KHRidWZmZXIpXG4gIH1cblxuICBpZiAoKGhhc2hUeXBlICYgMHgxZikgIT09IFRyYW5zYWN0aW9uLlNJR0hBU0hfU0lOR0xFICYmXG4gICAgICAoaGFzaFR5cGUgJiAweDFmKSAhPT0gVHJhbnNhY3Rpb24uU0lHSEFTSF9OT05FKSB7XG4gICAgdmFyIHR4T3V0c1NpemUgPSB0aGlzLm91dHMucmVkdWNlKGZ1bmN0aW9uIChzdW0sIG91dHB1dCkge1xuICAgICAgcmV0dXJuIHN1bSArIDggKyB2YXJTbGljZVNpemUob3V0cHV0LnNjcmlwdClcbiAgICB9LCAwKVxuXG4gICAgdGJ1ZmZlciA9IG5ldyBCdWZmZXIodHhPdXRzU2l6ZSlcbiAgICB0b2Zmc2V0ID0gMFxuXG4gICAgdGhpcy5vdXRzLmZvckVhY2goZnVuY3Rpb24gKG91dCkge1xuICAgICAgd3JpdGVVSW50NjQob3V0LnZhbHVlKVxuICAgICAgd3JpdGVWYXJTbGljZShvdXQuc2NyaXB0KVxuICAgIH0pXG5cbiAgICBoYXNoT3V0cHV0cyA9IGJjcnlwdG8uaGFzaDI1Nih0YnVmZmVyKVxuICB9IGVsc2UgaWYgKChoYXNoVHlwZSAmIDB4MWYpID09PSBUcmFuc2FjdGlvbi5TSUdIQVNIX1NJTkdMRSAmJiBpbkluZGV4IDwgdGhpcy5vdXRzLmxlbmd0aCkge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLm91dHNbaW5JbmRleF1cblxuICAgIHRidWZmZXIgPSBuZXcgQnVmZmVyKDggKyB2YXJTbGljZVNpemUob3V0cHV0LnNjcmlwdCkpXG4gICAgdG9mZnNldCA9IDBcbiAgICB3cml0ZVVJbnQ2NChvdXRwdXQudmFsdWUpXG4gICAgd3JpdGVWYXJTbGljZShvdXRwdXQuc2NyaXB0KVxuXG4gICAgaGFzaE91dHB1dHMgPSBiY3J5cHRvLmhhc2gyNTYodGJ1ZmZlcilcbiAgfVxuXG4gIHRidWZmZXIgPSBuZXcgQnVmZmVyKDE1NiArIHZhclNsaWNlU2l6ZShwcmV2T3V0U2NyaXB0KSlcbiAgdG9mZnNldCA9IDBcblxuICB2YXIgaW5wdXQgPSB0aGlzLmluc1tpbkluZGV4XVxuICB3cml0ZVVJbnQzMih0aGlzLnZlcnNpb24pXG4gIHdyaXRlU2xpY2UoaGFzaFByZXZvdXRzKVxuICB3cml0ZVNsaWNlKGhhc2hTZXF1ZW5jZSlcbiAgd3JpdGVTbGljZShpbnB1dC5oYXNoKVxuICB3cml0ZVVJbnQzMihpbnB1dC5pbmRleClcbiAgd3JpdGVWYXJTbGljZShwcmV2T3V0U2NyaXB0KVxuICB3cml0ZVVJbnQ2NCh2YWx1ZSlcbiAgd3JpdGVVSW50MzIoaW5wdXQuc2VxdWVuY2UpXG4gIHdyaXRlU2xpY2UoaGFzaE91dHB1dHMpXG4gIHdyaXRlVUludDMyKHRoaXMubG9ja3RpbWUpXG4gIHdyaXRlVUludDMyKGhhc2hUeXBlKVxuICByZXR1cm4gYmNyeXB0by5oYXNoMjU2KHRidWZmZXIpXG59XG5cblRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXRIYXNoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYmNyeXB0by5oYXNoMjU2KHRoaXMuX190b0J1ZmZlcih1bmRlZmluZWQsIHVuZGVmaW5lZCwgZmFsc2UpKVxufVxuXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIHRyYW5zYWN0aW9uIGhhc2gncyBhcmUgZGlzcGxheWVkIGluIHJldmVyc2Ugb3JkZXJcbiAgcmV0dXJuIHRoaXMuZ2V0SGFzaCgpLnJldmVyc2UoKS50b1N0cmluZygnaGV4Jylcbn1cblxuVHJhbnNhY3Rpb24ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlciwgaW5pdGlhbE9mZnNldCkge1xuICByZXR1cm4gdGhpcy5fX3RvQnVmZmVyKGJ1ZmZlciwgaW5pdGlhbE9mZnNldCwgdHJ1ZSlcbn1cblxuVHJhbnNhY3Rpb24ucHJvdG90eXBlLl9fdG9CdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVyLCBpbml0aWFsT2Zmc2V0LCBfX2FsbG93V2l0bmVzcykge1xuICBpZiAoIWJ1ZmZlcikgYnVmZmVyID0gbmV3IEJ1ZmZlcih0aGlzLl9fYnl0ZUxlbmd0aChfX2FsbG93V2l0bmVzcykpXG5cbiAgdmFyIG9mZnNldCA9IGluaXRpYWxPZmZzZXQgfHwgMFxuICBmdW5jdGlvbiB3cml0ZVNsaWNlIChzbGljZSkgeyBvZmZzZXQgKz0gc2xpY2UuY29weShidWZmZXIsIG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVVJbnQ4IChpKSB7IG9mZnNldCA9IGJ1ZmZlci53cml0ZVVJbnQ4KGksIG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVVJbnQzMiAoaSkgeyBvZmZzZXQgPSBidWZmZXIud3JpdGVVSW50MzJMRShpLCBvZmZzZXQpIH1cbiAgZnVuY3Rpb24gd3JpdGVJbnQzMiAoaSkgeyBvZmZzZXQgPSBidWZmZXIud3JpdGVJbnQzMkxFKGksIG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVVJbnQ2NCAoaSkgeyBvZmZzZXQgPSBidWZmZXJ1dGlscy53cml0ZVVJbnQ2NExFKGJ1ZmZlciwgaSwgb2Zmc2V0KSB9XG4gIGZ1bmN0aW9uIHdyaXRlVmFySW50IChpKSB7IG9mZnNldCArPSBidWZmZXJ1dGlscy53cml0ZVZhckludChidWZmZXIsIGksIG9mZnNldCkgfVxuICBmdW5jdGlvbiB3cml0ZVZhclNsaWNlIChzbGljZSkgeyB3cml0ZVZhckludChzbGljZS5sZW5ndGgpOyB3cml0ZVNsaWNlKHNsaWNlKSB9XG4gIGZ1bmN0aW9uIHdyaXRlVmVjdG9yICh2ZWN0b3IpIHsgd3JpdGVWYXJJbnQodmVjdG9yLmxlbmd0aCk7IHZlY3Rvci5mb3JFYWNoKHdyaXRlVmFyU2xpY2UpIH1cblxuICBmdW5jdGlvbiB3cml0ZUNvbXByZXNzZWRHMSAoaSkge1xuICAgIHdyaXRlVUludDgoVHJhbnNhY3Rpb24uWkNBU0hfRzFfUFJFRklYX01BU0sgfCBpLnlMc2IpXG4gICAgd3JpdGVTbGljZShpLngpXG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZUNvbXByZXNzZWRHMiAoaSkge1xuICAgIHdyaXRlVUludDgoVHJhbnNhY3Rpb24uWkNBU0hfRzJfUFJFRklYX01BU0sgfCBpLnlMc2IpXG4gICAgd3JpdGVTbGljZShpLngpXG4gIH1cblxuICB3cml0ZUludDMyKHRoaXMudmVyc2lvbilcblxuICB2YXIgaGFzV2l0bmVzc2VzID0gX19hbGxvd1dpdG5lc3MgJiYgdGhpcy5oYXNXaXRuZXNzZXMoKVxuXG4gIGlmIChoYXNXaXRuZXNzZXMpIHtcbiAgICB3cml0ZVVJbnQ4KFRyYW5zYWN0aW9uLkFEVkFOQ0VEX1RSQU5TQUNUSU9OX01BUktFUilcbiAgICB3cml0ZVVJbnQ4KFRyYW5zYWN0aW9uLkFEVkFOQ0VEX1RSQU5TQUNUSU9OX0ZMQUcpXG4gIH1cblxuICB3cml0ZVZhckludCh0aGlzLmlucy5sZW5ndGgpXG5cbiAgdGhpcy5pbnMuZm9yRWFjaChmdW5jdGlvbiAodHhJbikge1xuICAgIHdyaXRlU2xpY2UodHhJbi5oYXNoKVxuICAgIHdyaXRlVUludDMyKHR4SW4uaW5kZXgpXG4gICAgd3JpdGVWYXJTbGljZSh0eEluLnNjcmlwdClcbiAgICB3cml0ZVVJbnQzMih0eEluLnNlcXVlbmNlKVxuICB9KVxuXG4gIHdyaXRlVmFySW50KHRoaXMub3V0cy5sZW5ndGgpXG4gIHRoaXMub3V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0eE91dCkge1xuICAgIGlmICghdHhPdXQudmFsdWVCdWZmZXIpIHtcbiAgICAgIHdyaXRlVUludDY0KHR4T3V0LnZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB3cml0ZVNsaWNlKHR4T3V0LnZhbHVlQnVmZmVyKVxuICAgIH1cblxuICAgIHdyaXRlVmFyU2xpY2UodHhPdXQuc2NyaXB0KVxuICB9KVxuXG4gIGlmIChoYXNXaXRuZXNzZXMpIHtcbiAgICB0aGlzLmlucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgd3JpdGVWZWN0b3IoaW5wdXQud2l0bmVzcylcbiAgICB9KVxuICB9XG5cbiAgd3JpdGVVSW50MzIodGhpcy5sb2NrdGltZSlcblxuICBpZiAodGhpcy52ZXJzaW9uID49IDIgJiYgdGhpcy56Y2FzaCkge1xuICAgIHdyaXRlVmFySW50KHRoaXMuam9pbnNwbGl0cy5sZW5ndGgpXG4gICAgdGhpcy5qb2luc3BsaXRzLmZvckVhY2goZnVuY3Rpb24gKGpvaW5zcGxpdCkge1xuICAgICAgd3JpdGVVSW50NjQoam9pbnNwbGl0LnZwdWJPbGQpXG4gICAgICB3cml0ZVVJbnQ2NChqb2luc3BsaXQudnB1Yk5ldylcbiAgICAgIHdyaXRlU2xpY2Uoam9pbnNwbGl0LmFuY2hvcilcbiAgICAgIGpvaW5zcGxpdC5udWxsaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG51bGxpZmllcikge1xuICAgICAgICB3cml0ZVNsaWNlKG51bGxpZmllcilcbiAgICAgIH0pXG4gICAgICBqb2luc3BsaXQuY29tbWl0bWVudHMuZm9yRWFjaChmdW5jdGlvbiAobnVsbGlmaWVyKSB7XG4gICAgICAgIHdyaXRlU2xpY2UobnVsbGlmaWVyKVxuICAgICAgfSlcbiAgICAgIHdyaXRlU2xpY2Uoam9pbnNwbGl0LmVwaGVtZXJhbEtleSlcbiAgICAgIHdyaXRlU2xpY2Uoam9pbnNwbGl0LnJhbmRvbVNlZWQpXG4gICAgICBqb2luc3BsaXQubWFjcy5mb3JFYWNoKGZ1bmN0aW9uIChudWxsaWZpZXIpIHtcbiAgICAgICAgd3JpdGVTbGljZShudWxsaWZpZXIpXG4gICAgICB9KVxuICAgICAgd3JpdGVDb21wcmVzc2VkRzEoam9pbnNwbGl0Lnpwcm9vZi5nQSlcbiAgICAgIHdyaXRlQ29tcHJlc3NlZEcxKGpvaW5zcGxpdC56cHJvb2YuZ0FQcmltZSlcbiAgICAgIHdyaXRlQ29tcHJlc3NlZEcyKGpvaW5zcGxpdC56cHJvb2YuZ0IpXG4gICAgICB3cml0ZUNvbXByZXNzZWRHMShqb2luc3BsaXQuenByb29mLmdCUHJpbWUpXG4gICAgICB3cml0ZUNvbXByZXNzZWRHMShqb2luc3BsaXQuenByb29mLmdDKVxuICAgICAgd3JpdGVDb21wcmVzc2VkRzEoam9pbnNwbGl0Lnpwcm9vZi5nQ1ByaW1lKVxuICAgICAgd3JpdGVDb21wcmVzc2VkRzEoam9pbnNwbGl0Lnpwcm9vZi5nSylcbiAgICAgIHdyaXRlQ29tcHJlc3NlZEcxKGpvaW5zcGxpdC56cHJvb2YuZ0gpXG4gICAgICBqb2luc3BsaXQuY2lwaGVydGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoY2lwaGVydGV4dCkge1xuICAgICAgICB3cml0ZVNsaWNlKGNpcGhlcnRleHQpXG4gICAgICB9KVxuICAgIH0pXG4gICAgaWYgKHRoaXMuam9pbnNwbGl0cy5sZW5ndGggPiAwKSB7XG4gICAgICB3cml0ZVNsaWNlKHRoaXMuam9pbnNwbGl0UHVia2V5KVxuICAgICAgd3JpdGVTbGljZSh0aGlzLmpvaW5zcGxpdFNpZylcbiAgICB9XG4gIH1cblxuICAvLyBhdm9pZCBzbGljaW5nIHVubGVzcyBuZWNlc3NhcnlcbiAgaWYgKGluaXRpYWxPZmZzZXQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGJ1ZmZlci5zbGljZShpbml0aWFsT2Zmc2V0LCBvZmZzZXQpXG4gIHJldHVybiBidWZmZXJcbn1cblxuVHJhbnNhY3Rpb24ucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKVxufVxuXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuc2V0SW5wdXRTY3JpcHQgPSBmdW5jdGlvbiAoaW5kZXgsIHNjcmlwdFNpZykge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUodHlwZXMuTnVtYmVyLCB0eXBlcy5CdWZmZXIpLCBhcmd1bWVudHMpXG5cbiAgdGhpcy5pbnNbaW5kZXhdLnNjcmlwdCA9IHNjcmlwdFNpZ1xufVxuXG5UcmFuc2FjdGlvbi5wcm90b3R5cGUuc2V0V2l0bmVzcyA9IGZ1bmN0aW9uIChpbmRleCwgd2l0bmVzcykge1xuICB0eXBlZm9yY2UodHlwZXMudHVwbGUodHlwZXMuTnVtYmVyLCBbdHlwZXMuQnVmZmVyXSksIGFyZ3VtZW50cylcblxuICB0aGlzLmluc1tpbmRleF0ud2l0bmVzcyA9IHdpdG5lc3Ncbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvblxuIiwidmFyIGJhZGRyZXNzID0gcmVxdWlyZSgnLi9hZGRyZXNzJylcbnZhciBiY3J5cHRvID0gcmVxdWlyZSgnLi9jcnlwdG8nKVxudmFyIGJzY3JpcHQgPSByZXF1aXJlKCcuL3NjcmlwdCcpXG52YXIgbmV0d29ya3MgPSByZXF1aXJlKCcuL25ldHdvcmtzJylcbnZhciBvcHMgPSByZXF1aXJlKCdiaXRjb2luLW9wcycpXG52YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcbnZhciB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKVxudmFyIHNjcmlwdFR5cGVzID0gYnNjcmlwdC50eXBlc1xudmFyIFNJR05BQkxFID0gW2JzY3JpcHQudHlwZXMuUDJQS0gsIGJzY3JpcHQudHlwZXMuUDJQSywgYnNjcmlwdC50eXBlcy5NVUxUSVNJR11cbnZhciBQMlNIID0gU0lHTkFCTEUuY29uY2F0KFtic2NyaXB0LnR5cGVzLlAyV1BLSCwgYnNjcmlwdC50eXBlcy5QMldTSF0pXG5cbnZhciBFQ1BhaXIgPSByZXF1aXJlKCcuL2VjcGFpcicpXG52YXIgRUNTaWduYXR1cmUgPSByZXF1aXJlKCcuL2Vjc2lnbmF0dXJlJylcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuXG5mdW5jdGlvbiBleHRyYWN0Q2h1bmtzICh0eXBlLCBjaHVua3MsIHNjcmlwdCkge1xuICB2YXIgcHViS2V5cyA9IFtdXG4gIHZhciBzaWduYXR1cmVzID0gW11cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBzY3JpcHRUeXBlcy5QMlBLSDpcbiAgICAgIC8vIGlmIChyZWRlZW1TY3JpcHQpIHRocm93IG5ldyBFcnJvcignTm9uc3RhbmRhcmQuLi4gUDJTSChQMlBLSCknKVxuICAgICAgcHViS2V5cyA9IGNodW5rcy5zbGljZSgxKVxuICAgICAgc2lnbmF0dXJlcyA9IGNodW5rcy5zbGljZSgwLCAxKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2Ugc2NyaXB0VHlwZXMuUDJQSzpcbiAgICAgIHB1YktleXNbMF0gPSBzY3JpcHQgPyBic2NyaXB0LnB1YktleS5vdXRwdXQuZGVjb2RlKHNjcmlwdCkgOiB1bmRlZmluZWRcbiAgICAgIHNpZ25hdHVyZXMgPSBjaHVua3Muc2xpY2UoMCwgMSlcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIHNjcmlwdFR5cGVzLk1VTFRJU0lHOlxuICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICB2YXIgbXVsdGlzaWcgPSBic2NyaXB0Lm11bHRpc2lnLm91dHB1dC5kZWNvZGUoc2NyaXB0KVxuICAgICAgICBwdWJLZXlzID0gbXVsdGlzaWcucHViS2V5c1xuICAgICAgfVxuXG4gICAgICBzaWduYXR1cmVzID0gY2h1bmtzLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIGNodW5rLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IGNodW5rXG4gICAgICB9KVxuICAgICAgYnJlYWtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHViS2V5czogcHViS2V5cyxcbiAgICBzaWduYXR1cmVzOiBzaWduYXR1cmVzXG4gIH1cbn1cbmZ1bmN0aW9uIGV4cGFuZElucHV0IChzY3JpcHRTaWcsIHdpdG5lc3NTdGFjaykge1xuICB2YXIgcHJldk91dFNjcmlwdFxuICB2YXIgcHJldk91dFR5cGVcbiAgdmFyIHNjcmlwdFR5cGVcbiAgdmFyIHNjcmlwdFxuICB2YXIgcmVkZWVtU2NyaXB0XG4gIHZhciB3aXRuZXNzU2NyaXB0XG4gIHZhciB3aXRuZXNzU2NyaXB0VHlwZVxuICB2YXIgcmVkZWVtU2NyaXB0VHlwZVxuICB2YXIgd2l0bmVzcyA9IGZhbHNlXG4gIHZhciBwMndzaCA9IGZhbHNlXG4gIHZhciBwMnNoID0gZmFsc2VcbiAgdmFyIHdpdG5lc3NQcm9ncmFtXG4gIHZhciBjaHVua3NcblxuICB2YXIgc2NyaXB0U2lnQ2h1bmtzID0gYnNjcmlwdC5kZWNvbXBpbGUoc2NyaXB0U2lnKVxuICB2YXIgc2lnVHlwZSA9IGJzY3JpcHQuY2xhc3NpZnlJbnB1dChzY3JpcHRTaWdDaHVua3MsIHRydWUpXG4gIGlmIChzaWdUeXBlID09PSBzY3JpcHRUeXBlcy5QMlNIKSB7XG4gICAgcDJzaCA9IHRydWVcbiAgICByZWRlZW1TY3JpcHQgPSBzY3JpcHRTaWdDaHVua3Nbc2NyaXB0U2lnQ2h1bmtzLmxlbmd0aCAtIDFdXG4gICAgcmVkZWVtU2NyaXB0VHlwZSA9IGJzY3JpcHQuY2xhc3NpZnlPdXRwdXQocmVkZWVtU2NyaXB0KVxuICAgIHByZXZPdXRTY3JpcHQgPSBic2NyaXB0LnNjcmlwdEhhc2gub3V0cHV0LmVuY29kZShiY3J5cHRvLmhhc2gxNjAocmVkZWVtU2NyaXB0KSlcbiAgICBwcmV2T3V0VHlwZSA9IHNjcmlwdFR5cGVzLlAyU0hcbiAgICBzY3JpcHQgPSByZWRlZW1TY3JpcHRcbiAgfVxuXG4gIHZhciBjbGFzc2lmeVdpdG5lc3MgPSBic2NyaXB0LmNsYXNzaWZ5V2l0bmVzcyh3aXRuZXNzU3RhY2spXG4gIGlmIChjbGFzc2lmeVdpdG5lc3MgPT09IHNjcmlwdFR5cGVzLlAyV1NIKSB7XG4gICAgd2l0bmVzc1NjcmlwdCA9IHdpdG5lc3NTdGFja1t3aXRuZXNzU3RhY2subGVuZ3RoIC0gMV1cbiAgICB3aXRuZXNzU2NyaXB0VHlwZSA9IGJzY3JpcHQuY2xhc3NpZnlPdXRwdXQod2l0bmVzc1NjcmlwdClcbiAgICBwMndzaCA9IHRydWVcbiAgICBpZiAoc2NyaXB0U2lnLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcHJldk91dFNjcmlwdCA9IGJzY3JpcHQud2l0bmVzc1NjcmlwdEhhc2gub3V0cHV0LmVuY29kZShiY3J5cHRvLnNoYTI1Nih3aXRuZXNzU2NyaXB0KSlcbiAgICAgIHByZXZPdXRUeXBlID0gc2NyaXB0VHlwZXMuUDJXU0hcbiAgICAgIGlmICh0eXBlb2YgcmVkZWVtU2NyaXB0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZGVlbSBzY3JpcHQgZ2l2ZW4gd2hlbiB1bm5lY2Vzc2FyeScpXG4gICAgICB9XG4gICAgICAvLyBiYXJlIHdpdG5lc3NcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFyZWRlZW1TY3JpcHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyByZWRlZW1TY3JpcHQgcHJvdmlkZWQgZm9yIFAyV1NILCBidXQgc2NyaXB0U2lnIG5vbi1lbXB0eScpXG4gICAgICB9XG4gICAgICB3aXRuZXNzUHJvZ3JhbSA9IGJzY3JpcHQud2l0bmVzc1NjcmlwdEhhc2gub3V0cHV0LmVuY29kZShiY3J5cHRvLnNoYTI1Nih3aXRuZXNzU2NyaXB0KSlcbiAgICAgIGlmICghcmVkZWVtU2NyaXB0LmVxdWFscyh3aXRuZXNzUHJvZ3JhbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWRlZW0gc2NyaXB0IGRpZG5cXCd0IG1hdGNoIHdpdG5lc3NTY3JpcHQnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChTSUdOQUJMRS5pbmRleE9mKGJzY3JpcHQuY2xhc3NpZnlPdXRwdXQod2l0bmVzc1NjcmlwdCkpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCB3aXRuZXNzIHNjcmlwdCcpXG4gICAgfVxuICAgIHNjcmlwdCA9IHdpdG5lc3NTY3JpcHRcbiAgICBzY3JpcHRUeXBlID0gd2l0bmVzc1NjcmlwdFR5cGVcbiAgICBjaHVua3MgPSB3aXRuZXNzU3RhY2suc2xpY2UoMCwgLTEpXG4gIH0gZWxzZSBpZiAoY2xhc3NpZnlXaXRuZXNzID09PSBzY3JpcHRUeXBlcy5QMldQS0gpIHtcbiAgICB2YXIga2V5ID0gd2l0bmVzc1N0YWNrW3dpdG5lc3NTdGFjay5sZW5ndGggLSAxXVxuICAgIHZhciBrZXlIYXNoID0gYmNyeXB0by5oYXNoMTYwKGtleSlcbiAgICBpZiAoc2NyaXB0U2lnLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcHJldk91dFNjcmlwdCA9IGJzY3JpcHQud2l0bmVzc1B1YktleUhhc2gub3V0cHV0LmVuY29kZShrZXlIYXNoKVxuICAgICAgcHJldk91dFR5cGUgPSBzY3JpcHRUeXBlcy5QMldQS0hcbiAgICAgIGlmICh0eXBlb2YgcmVkZWVtU2NyaXB0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZGVlbSBzY3JpcHQgZ2l2ZW4gd2hlbiB1bm5lY2Vzc2FyeScpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcmVkZWVtU2NyaXB0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVkZWVtU2NyaXB0IHByb3ZpZGVkIGZvciBQMldQS0gsIGJ1dCBzY3JpcHRTaWcgd2FzblxcJ3QgZW1wdHknKVxuICAgICAgfVxuICAgICAgd2l0bmVzc1Byb2dyYW0gPSBic2NyaXB0LndpdG5lc3NQdWJLZXlIYXNoLm91dHB1dC5lbmNvZGUoa2V5SGFzaClcbiAgICAgIGlmICghcmVkZWVtU2NyaXB0LmVxdWFscyh3aXRuZXNzUHJvZ3JhbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWRlZW0gc2NyaXB0IGRpZCBub3QgaGF2ZSB0aGUgcmlnaHQgd2l0bmVzcyBwcm9ncmFtJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY3JpcHRUeXBlID0gc2NyaXB0VHlwZXMuUDJQS0hcbiAgICBjaHVua3MgPSB3aXRuZXNzU3RhY2tcbiAgfSBlbHNlIGlmIChyZWRlZW1TY3JpcHQpIHtcbiAgICBpZiAoUDJTSC5pbmRleE9mKHJlZGVlbVNjcmlwdFR5cGUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgcmVkZWVtc2NyaXB0IScpXG4gICAgfVxuXG4gICAgc2NyaXB0ID0gcmVkZWVtU2NyaXB0XG4gICAgc2NyaXB0VHlwZSA9IHJlZGVlbVNjcmlwdFR5cGVcbiAgICBjaHVua3MgPSBzY3JpcHRTaWdDaHVua3Muc2xpY2UoMCwgLTEpXG4gIH0gZWxzZSB7XG4gICAgcHJldk91dFR5cGUgPSBzY3JpcHRUeXBlID0gYnNjcmlwdC5jbGFzc2lmeUlucHV0KHNjcmlwdFNpZylcbiAgICBjaHVua3MgPSBzY3JpcHRTaWdDaHVua3NcbiAgfVxuXG4gIHZhciBleHBhbmRlZCA9IGV4dHJhY3RDaHVua3Moc2NyaXB0VHlwZSwgY2h1bmtzLCBzY3JpcHQpXG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBwdWJLZXlzOiBleHBhbmRlZC5wdWJLZXlzLFxuICAgIHNpZ25hdHVyZXM6IGV4cGFuZGVkLnNpZ25hdHVyZXMsXG4gICAgcHJldk91dFNjcmlwdDogcHJldk91dFNjcmlwdCxcbiAgICBwcmV2T3V0VHlwZTogcHJldk91dFR5cGUsXG4gICAgc2lnblR5cGU6IHNjcmlwdFR5cGUsXG4gICAgc2lnblNjcmlwdDogc2NyaXB0LFxuICAgIHdpdG5lc3M6IEJvb2xlYW4od2l0bmVzcylcbiAgfVxuXG4gIGlmIChwMnNoKSB7XG4gICAgcmVzdWx0LnJlZGVlbVNjcmlwdCA9IHJlZGVlbVNjcmlwdFxuICAgIHJlc3VsdC5yZWRlZW1TY3JpcHRUeXBlID0gcmVkZWVtU2NyaXB0VHlwZVxuICB9XG5cbiAgaWYgKHAyd3NoKSB7XG4gICAgcmVzdWx0LndpdG5lc3NTY3JpcHQgPSB3aXRuZXNzU2NyaXB0XG4gICAgcmVzdWx0LndpdG5lc3NTY3JpcHRUeXBlID0gd2l0bmVzc1NjcmlwdFR5cGVcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLy8gY291bGQgYmUgZG9uZSBpbiBleHBhbmRJbnB1dCwgYnV0IHJlcXVpcmVzIHRoZSBvcmlnaW5hbCBUcmFuc2FjdGlvbiBmb3IgaGFzaEZvclNpZ25hdHVyZVxuZnVuY3Rpb24gZml4TXVsdGlzaWdPcmRlciAoaW5wdXQsIHRyYW5zYWN0aW9uLCB2aW4pIHtcbiAgaWYgKGlucHV0LnJlZGVlbVNjcmlwdFR5cGUgIT09IHNjcmlwdFR5cGVzLk1VTFRJU0lHIHx8ICFpbnB1dC5yZWRlZW1TY3JpcHQpIHJldHVyblxuICBpZiAoaW5wdXQucHViS2V5cy5sZW5ndGggPT09IGlucHV0LnNpZ25hdHVyZXMubGVuZ3RoKSByZXR1cm5cblxuICB2YXIgdW5tYXRjaGVkID0gaW5wdXQuc2lnbmF0dXJlcy5jb25jYXQoKVxuXG4gIGlucHV0LnNpZ25hdHVyZXMgPSBpbnB1dC5wdWJLZXlzLm1hcChmdW5jdGlvbiAocHViS2V5LCB5KSB7XG4gICAgdmFyIGtleVBhaXIgPSBFQ1BhaXIuZnJvbVB1YmxpY0tleUJ1ZmZlcihwdWJLZXkpXG4gICAgdmFyIG1hdGNoXG5cbiAgICAvLyBjaGVjayBmb3IgYSBzaWduYXR1cmVcbiAgICB1bm1hdGNoZWQuc29tZShmdW5jdGlvbiAoc2lnbmF0dXJlLCBpKSB7XG4gICAgICAvLyBza2lwIGlmIHVuZGVmaW5lZCB8fCBPUF8wXG4gICAgICBpZiAoIXNpZ25hdHVyZSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgIC8vIFRPRE86IGF2b2lkIE8obikgaGFzaEZvclNpZ25hdHVyZVxuICAgICAgdmFyIHBhcnNlZCA9IEVDU2lnbmF0dXJlLnBhcnNlU2NyaXB0U2lnbmF0dXJlKHNpZ25hdHVyZSlcbiAgICAgIHZhciBoYXNoID0gdHJhbnNhY3Rpb24uaGFzaEZvclNpZ25hdHVyZSh2aW4sIGlucHV0LnJlZGVlbVNjcmlwdCwgcGFyc2VkLmhhc2hUeXBlKVxuXG4gICAgICAvLyBza2lwIGlmIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBwdWJLZXlcbiAgICAgIGlmICgha2V5UGFpci52ZXJpZnkoaGFzaCwgcGFyc2VkLnNpZ25hdHVyZSkpIHJldHVybiBmYWxzZVxuXG4gICAgICAvLyByZW1vdmUgbWF0Y2hlZCBzaWduYXR1cmUgZnJvbSB1bm1hdGNoZWRcbiAgICAgIHVubWF0Y2hlZFtpXSA9IHVuZGVmaW5lZFxuICAgICAgbWF0Y2ggPSBzaWduYXR1cmVcblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG1hdGNoXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGV4cGFuZE91dHB1dCAoc2NyaXB0LCBzY3JpcHRUeXBlLCBvdXJQdWJLZXkpIHtcbiAgdHlwZWZvcmNlKHR5cGVzLkJ1ZmZlciwgc2NyaXB0KVxuXG4gIHZhciBzY3JpcHRDaHVua3MgPSBic2NyaXB0LmRlY29tcGlsZShzY3JpcHQpXG4gIGlmICghc2NyaXB0VHlwZSkge1xuICAgIHNjcmlwdFR5cGUgPSBic2NyaXB0LmNsYXNzaWZ5T3V0cHV0KHNjcmlwdClcbiAgfVxuXG4gIHZhciBwdWJLZXlzID0gW11cblxuICBzd2l0Y2ggKHNjcmlwdFR5cGUpIHtcbiAgICAvLyBkb2VzIG91ciBoYXNoMTYwKHB1YktleSkgbWF0Y2ggdGhlIG91dHB1dCBzY3JpcHRzP1xuICAgIGNhc2Ugc2NyaXB0VHlwZXMuUDJQS0g6XG4gICAgICBpZiAoIW91clB1YktleSkgYnJlYWtcblxuICAgICAgdmFyIHBraDEgPSBzY3JpcHRDaHVua3NbMl1cbiAgICAgIHZhciBwa2gyID0gYmNyeXB0by5oYXNoMTYwKG91clB1YktleSlcbiAgICAgIGlmIChwa2gxLmVxdWFscyhwa2gyKSkgcHViS2V5cyA9IFtvdXJQdWJLZXldXG4gICAgICBicmVha1xuXG4gICAgLy8gZG9lcyBvdXIgaGFzaDE2MChwdWJLZXkpIG1hdGNoIHRoZSBvdXRwdXQgc2NyaXB0cz9cbiAgICBjYXNlIHNjcmlwdFR5cGVzLlAyV1BLSDpcbiAgICAgIGlmICghb3VyUHViS2V5KSBicmVha1xuXG4gICAgICB2YXIgd3BraDEgPSBzY3JpcHRDaHVua3NbMV1cbiAgICAgIHZhciB3cGtoMiA9IGJjcnlwdG8uaGFzaDE2MChvdXJQdWJLZXkpXG4gICAgICBpZiAod3BraDEuZXF1YWxzKHdwa2gyKSkgcHViS2V5cyA9IFtvdXJQdWJLZXldXG4gICAgICBicmVha1xuXG4gICAgY2FzZSBzY3JpcHRUeXBlcy5QMlBLOlxuICAgICAgcHViS2V5cyA9IHNjcmlwdENodW5rcy5zbGljZSgwLCAxKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2Ugc2NyaXB0VHlwZXMuTVVMVElTSUc6XG4gICAgICBwdWJLZXlzID0gc2NyaXB0Q2h1bmtzLnNsaWNlKDEsIC0yKVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6IHJldHVybiB7IHNjcmlwdFR5cGU6IHNjcmlwdFR5cGUgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwdWJLZXlzOiBwdWJLZXlzLFxuICAgIHNjcmlwdFR5cGU6IHNjcmlwdFR5cGUsXG4gICAgc2lnbmF0dXJlczogcHViS2V5cy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQMnNoSW5wdXQgKGlucHV0LCByZWRlZW1TY3JpcHRIYXNoKSB7XG4gIGlmIChpbnB1dC5wcmV2T3V0VHlwZSkge1xuICAgIGlmIChpbnB1dC5wcmV2T3V0VHlwZSAhPT0gc2NyaXB0VHlwZXMuUDJTSCkgdGhyb3cgbmV3IEVycm9yKCdQcmV2T3V0U2NyaXB0IG11c3QgYmUgUDJTSCcpXG5cbiAgICB2YXIgcHJldk91dFNjcmlwdFNjcmlwdEhhc2ggPSBic2NyaXB0LmRlY29tcGlsZShpbnB1dC5wcmV2T3V0U2NyaXB0KVsxXVxuICAgIGlmICghcHJldk91dFNjcmlwdFNjcmlwdEhhc2guZXF1YWxzKHJlZGVlbVNjcmlwdEhhc2gpKSB0aHJvdyBuZXcgRXJyb3IoJ0luY29uc2lzdGVudCBoYXNoMTYwKFJlZGVlbVNjcmlwdCknKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrUDJXU0hJbnB1dCAoaW5wdXQsIHdpdG5lc3NTY3JpcHRIYXNoKSB7XG4gIGlmIChpbnB1dC5wcmV2T3V0VHlwZSkge1xuICAgIGlmIChpbnB1dC5wcmV2T3V0VHlwZSAhPT0gc2NyaXB0VHlwZXMuUDJXU0gpIHRocm93IG5ldyBFcnJvcignUHJldk91dFNjcmlwdCBtdXN0IGJlIFAyV1NIJylcblxuICAgIHZhciBzY3JpcHRIYXNoID0gYnNjcmlwdC5kZWNvbXBpbGUoaW5wdXQucHJldk91dFNjcmlwdClbMV1cbiAgICBpZiAoIXNjcmlwdEhhc2guZXF1YWxzKHdpdG5lc3NTY3JpcHRIYXNoKSkgdGhyb3cgbmV3IEVycm9yKCdJbmNvbnNpc3RlbnQgc2hhMjUoV2l0bmVzc1NjcmlwdCknKVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVJbnB1dCAoaW5wdXQsIGtwUHViS2V5LCByZWRlZW1TY3JpcHQsIHdpdG5lc3NWYWx1ZSwgd2l0bmVzc1NjcmlwdCkge1xuICB2YXIgZXhwYW5kZWRcbiAgdmFyIHByZXZPdXRUeXBlXG4gIHZhciBwcmV2T3V0U2NyaXB0XG5cbiAgdmFyIHAyc2ggPSBmYWxzZVxuICB2YXIgcDJzaFR5cGVcbiAgdmFyIHJlZGVlbVNjcmlwdEhhc2hcblxuICB2YXIgd2l0bmVzcyA9IGZhbHNlXG4gIHZhciBwMndzaCA9IGZhbHNlXG4gIHZhciB3aXRuZXNzVHlwZVxuICB2YXIgd2l0bmVzc1NjcmlwdEhhc2hcblxuICB2YXIgc2lnblR5cGVcbiAgdmFyIHNpZ25TY3JpcHRcblxuICBpZiAocmVkZWVtU2NyaXB0ICYmIHdpdG5lc3NTY3JpcHQpIHtcbiAgICByZWRlZW1TY3JpcHRIYXNoID0gYmNyeXB0by5oYXNoMTYwKHJlZGVlbVNjcmlwdClcbiAgICB3aXRuZXNzU2NyaXB0SGFzaCA9IGJjcnlwdG8uc2hhMjU2KHdpdG5lc3NTY3JpcHQpXG4gICAgY2hlY2tQMnNoSW5wdXQoaW5wdXQsIHJlZGVlbVNjcmlwdEhhc2gpXG5cbiAgICBpZiAoIXJlZGVlbVNjcmlwdC5lcXVhbHMoYnNjcmlwdC53aXRuZXNzU2NyaXB0SGFzaC5vdXRwdXQuZW5jb2RlKHdpdG5lc3NTY3JpcHRIYXNoKSkpIHRocm93IG5ldyBFcnJvcignV2l0bmVzcyBzY3JpcHQgaW5jb25zaXN0ZW50IHdpdGggcmVkZWVtIHNjcmlwdCcpXG5cbiAgICBleHBhbmRlZCA9IGV4cGFuZE91dHB1dCh3aXRuZXNzU2NyaXB0LCB1bmRlZmluZWQsIGtwUHViS2V5KVxuICAgIGlmICghZXhwYW5kZWQucHViS2V5cykgdGhyb3cgbmV3IEVycm9yKCdXaXRuZXNzU2NyaXB0IG5vdCBzdXBwb3J0ZWQgXCInICsgYnNjcmlwdC50b0FTTShyZWRlZW1TY3JpcHQpICsgJ1wiJylcbiAgICBwcmV2T3V0VHlwZSA9IGJzY3JpcHQudHlwZXMuUDJTSFxuICAgIHByZXZPdXRTY3JpcHQgPSBic2NyaXB0LnNjcmlwdEhhc2gub3V0cHV0LmVuY29kZShyZWRlZW1TY3JpcHRIYXNoKVxuICAgIHAyc2ggPSB3aXRuZXNzID0gcDJ3c2ggPSB0cnVlXG4gICAgcDJzaFR5cGUgPSBic2NyaXB0LnR5cGVzLlAyV1NIXG4gICAgc2lnblR5cGUgPSB3aXRuZXNzVHlwZSA9IGV4cGFuZGVkLnNjcmlwdFR5cGVcbiAgICBzaWduU2NyaXB0ID0gd2l0bmVzc1NjcmlwdFxuICB9IGVsc2UgaWYgKHJlZGVlbVNjcmlwdCkge1xuICAgIHJlZGVlbVNjcmlwdEhhc2ggPSBiY3J5cHRvLmhhc2gxNjAocmVkZWVtU2NyaXB0KVxuICAgIGNoZWNrUDJzaElucHV0KGlucHV0LCByZWRlZW1TY3JpcHRIYXNoKVxuXG4gICAgZXhwYW5kZWQgPSBleHBhbmRPdXRwdXQocmVkZWVtU2NyaXB0LCB1bmRlZmluZWQsIGtwUHViS2V5KVxuICAgIGlmICghZXhwYW5kZWQucHViS2V5cykgdGhyb3cgbmV3IEVycm9yKCdSZWRlZW1TY3JpcHQgbm90IHN1cHBvcnRlZCBcIicgKyBic2NyaXB0LnRvQVNNKHJlZGVlbVNjcmlwdCkgKyAnXCInKVxuXG4gICAgcHJldk91dFR5cGUgPSBic2NyaXB0LnR5cGVzLlAyU0hcbiAgICBwcmV2T3V0U2NyaXB0ID0gYnNjcmlwdC5zY3JpcHRIYXNoLm91dHB1dC5lbmNvZGUocmVkZWVtU2NyaXB0SGFzaClcbiAgICBwMnNoID0gdHJ1ZVxuICAgIHNpZ25UeXBlID0gcDJzaFR5cGUgPSBleHBhbmRlZC5zY3JpcHRUeXBlXG4gICAgc2lnblNjcmlwdCA9IHJlZGVlbVNjcmlwdFxuICAgIHdpdG5lc3MgPSBzaWduVHlwZSA9PT0gYnNjcmlwdC50eXBlcy5QMldQS0hcbiAgfSBlbHNlIGlmICh3aXRuZXNzU2NyaXB0KSB7XG4gICAgd2l0bmVzc1NjcmlwdEhhc2ggPSBiY3J5cHRvLnNoYTI1Nih3aXRuZXNzU2NyaXB0KVxuICAgIGNoZWNrUDJXU0hJbnB1dChpbnB1dCwgd2l0bmVzc1NjcmlwdEhhc2gpXG5cbiAgICBleHBhbmRlZCA9IGV4cGFuZE91dHB1dCh3aXRuZXNzU2NyaXB0LCB1bmRlZmluZWQsIGtwUHViS2V5KVxuICAgIGlmICghZXhwYW5kZWQucHViS2V5cykgdGhyb3cgbmV3IEVycm9yKCdXaXRuZXNzU2NyaXB0IG5vdCBzdXBwb3J0ZWQgXCInICsgYnNjcmlwdC50b0FTTShyZWRlZW1TY3JpcHQpICsgJ1wiJylcblxuICAgIHByZXZPdXRUeXBlID0gYnNjcmlwdC50eXBlcy5QMldTSFxuICAgIHByZXZPdXRTY3JpcHQgPSBic2NyaXB0LndpdG5lc3NTY3JpcHRIYXNoLm91dHB1dC5lbmNvZGUod2l0bmVzc1NjcmlwdEhhc2gpXG4gICAgd2l0bmVzcyA9IHAyd3NoID0gdHJ1ZVxuICAgIHNpZ25UeXBlID0gd2l0bmVzc1R5cGUgPSBleHBhbmRlZC5zY3JpcHRUeXBlXG4gICAgc2lnblNjcmlwdCA9IHdpdG5lc3NTY3JpcHRcbiAgfSBlbHNlIGlmIChpbnB1dC5wcmV2T3V0VHlwZSkge1xuICAgIC8vIGVtYmVkZGVkIHNjcmlwdHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGEgcmVkZWVtU2NyaXB0XG4gICAgaWYgKGlucHV0LnByZXZPdXRUeXBlID09PSBzY3JpcHRUeXBlcy5QMlNIIHx8XG4gICAgICBpbnB1dC5wcmV2T3V0VHlwZSA9PT0gc2NyaXB0VHlwZXMuUDJXU0gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUHJldk91dFNjcmlwdCBpcyAnICsgaW5wdXQucHJldk91dFR5cGUgKyAnLCByZXF1aXJlcyByZWRlZW1TY3JpcHQnKVxuICAgIH1cblxuICAgIHByZXZPdXRUeXBlID0gaW5wdXQucHJldk91dFR5cGVcbiAgICBwcmV2T3V0U2NyaXB0ID0gaW5wdXQucHJldk91dFNjcmlwdFxuICAgIGV4cGFuZGVkID0gZXhwYW5kT3V0cHV0KGlucHV0LnByZXZPdXRTY3JpcHQsIGlucHV0LnByZXZPdXRUeXBlLCBrcFB1YktleSlcbiAgICBpZiAoIWV4cGFuZGVkLnB1YktleXMpIHJldHVyblxuXG4gICAgd2l0bmVzcyA9IChpbnB1dC5wcmV2T3V0VHlwZSA9PT0gc2NyaXB0VHlwZXMuUDJXUEtIKVxuICAgIHNpZ25UeXBlID0gcHJldk91dFR5cGVcbiAgICBzaWduU2NyaXB0ID0gcHJldk91dFNjcmlwdFxuICB9IGVsc2Uge1xuICAgIHByZXZPdXRTY3JpcHQgPSBic2NyaXB0LnB1YktleUhhc2gub3V0cHV0LmVuY29kZShiY3J5cHRvLmhhc2gxNjAoa3BQdWJLZXkpKVxuICAgIGV4cGFuZGVkID0gZXhwYW5kT3V0cHV0KHByZXZPdXRTY3JpcHQsIHNjcmlwdFR5cGVzLlAyUEtILCBrcFB1YktleSlcbiAgICBwcmV2T3V0VHlwZSA9IHNjcmlwdFR5cGVzLlAyUEtIXG4gICAgd2l0bmVzcyA9IGZhbHNlXG4gICAgc2lnblR5cGUgPSBwcmV2T3V0VHlwZVxuICAgIHNpZ25TY3JpcHQgPSBwcmV2T3V0U2NyaXB0XG4gIH1cblxuICBpZiAod2l0bmVzcyAmJiAhdHlwZXMuU2F0b3NoaSh3aXRuZXNzVmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCB3YXMgd2l0bmVzcyBidXQgbm90IGdpdmVuIHdpdG5lc3MgdmFsdWUnKVxuICB9XG5cbiAgaWYgKHNpZ25UeXBlID09PSBzY3JpcHRUeXBlcy5QMldQS0gpIHtcbiAgICBzaWduU2NyaXB0ID0gYnNjcmlwdC5wdWJLZXlIYXNoLm91dHB1dC5lbmNvZGUoYnNjcmlwdC53aXRuZXNzUHViS2V5SGFzaC5vdXRwdXQuZGVjb2RlKHNpZ25TY3JpcHQpKVxuICB9XG5cbiAgaWYgKHAyc2gpIHtcbiAgICBpbnB1dC5yZWRlZW1TY3JpcHQgPSByZWRlZW1TY3JpcHRcbiAgICBpbnB1dC5yZWRlZW1TY3JpcHRUeXBlID0gcDJzaFR5cGVcbiAgfVxuXG4gIGlmIChwMndzaCkge1xuICAgIGlucHV0LndpdG5lc3NTY3JpcHQgPSB3aXRuZXNzU2NyaXB0XG4gICAgaW5wdXQud2l0bmVzc1NjcmlwdFR5cGUgPSB3aXRuZXNzVHlwZVxuICB9XG5cbiAgaW5wdXQucHViS2V5cyA9IGV4cGFuZGVkLnB1YktleXNcbiAgaW5wdXQuc2lnbmF0dXJlcyA9IGV4cGFuZGVkLnNpZ25hdHVyZXNcbiAgaW5wdXQuc2lnblNjcmlwdCA9IHNpZ25TY3JpcHRcbiAgaW5wdXQuc2lnblR5cGUgPSBzaWduVHlwZVxuICBpbnB1dC5wcmV2T3V0U2NyaXB0ID0gcHJldk91dFNjcmlwdFxuICBpbnB1dC5wcmV2T3V0VHlwZSA9IHByZXZPdXRUeXBlXG4gIGlucHV0LndpdG5lc3MgPSB3aXRuZXNzXG59XG5cbmZ1bmN0aW9uIGJ1aWxkU3RhY2sgKHR5cGUsIHNpZ25hdHVyZXMsIHB1YktleXMsIGFsbG93SW5jb21wbGV0ZSkge1xuICBpZiAodHlwZSA9PT0gc2NyaXB0VHlwZXMuUDJQS0gpIHtcbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPT09IDEgJiYgc2lnbmF0dXJlc1swXSBpbnN0YW5jZW9mIEJ1ZmZlciAmJiBwdWJLZXlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGJzY3JpcHQucHViS2V5SGFzaC5pbnB1dC5lbmNvZGVTdGFjayhzaWduYXR1cmVzWzBdLCBwdWJLZXlzWzBdKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09IHNjcmlwdFR5cGVzLlAyUEspIHtcbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPT09IDEgJiYgc2lnbmF0dXJlc1swXSBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIGJzY3JpcHQucHViS2V5LmlucHV0LmVuY29kZVN0YWNrKHNpZ25hdHVyZXNbMF0pXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gc2NyaXB0VHlwZXMuTVVMVElTSUcpIHtcbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICBzaWduYXR1cmVzID0gc2lnbmF0dXJlcy5tYXAoZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlIHx8IG9wcy5PUF8wXG4gICAgICB9KVxuICAgICAgaWYgKCFhbGxvd0luY29tcGxldGUpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGJsYW5rIHNpZ25hdHVyZXNcbiAgICAgICAgc2lnbmF0dXJlcyA9IHNpZ25hdHVyZXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICE9PSBvcHMuT1BfMCB9KVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnNjcmlwdC5tdWx0aXNpZy5pbnB1dC5lbmNvZGVTdGFjayhzaWduYXR1cmVzIC8qIHNlZSBpZiBpdCdzIG5lY2Vzc2FyeSBmaXJzdCAqLylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgeWV0IHN1cHBvcnRlZCcpXG4gIH1cblxuICBpZiAoIWFsbG93SW5jb21wbGV0ZSkgdGhyb3cgbmV3IEVycm9yKCdOb3QgZW5vdWdoIHNpZ25hdHVyZXMgcHJvdmlkZWQnKVxuXG4gIHJldHVybiBbXVxufVxuXG5mdW5jdGlvbiBidWlsZElucHV0IChpbnB1dCwgYWxsb3dJbmNvbXBsZXRlKSB7XG4gIHZhciBzY3JpcHRUeXBlID0gaW5wdXQucHJldk91dFR5cGVcbiAgdmFyIHNpZyA9IFtdXG4gIHZhciB3aXRuZXNzID0gW11cbiAgaWYgKFNJR05BQkxFLmluZGV4T2Yoc2NyaXB0VHlwZSkgIT09IC0xKSB7XG4gICAgc2lnID0gYnVpbGRTdGFjayhzY3JpcHRUeXBlLCBpbnB1dC5zaWduYXR1cmVzLCBpbnB1dC5wdWJLZXlzLCBpbnB1dC5zY3JpcHQsIGFsbG93SW5jb21wbGV0ZSlcbiAgfVxuXG4gIHZhciBwMnNoID0gZmFsc2VcbiAgaWYgKHNjcmlwdFR5cGUgPT09IGJzY3JpcHQudHlwZXMuUDJTSCkge1xuICAgIC8vIFdlIGNhbiByZW1vdmUgdGhpcyBlcnJvciBsYXRlciB3aGVuIHdlIGhhdmUgYSBndWFyYW50ZWUgcHJlcGFyZUlucHV0XG4gICAgLy8gcmVqZWN0cyB1bnNpZ25hYmxlIHNjcmlwdHMgLSBpdCBNVVNUIGJlIHNpZ25hYmxlIGF0IHRoaXMgcG9pbnQuXG4gICAgaWYgKFAyU0guaW5kZXhPZihpbnB1dC5yZWRlZW1TY3JpcHRUeXBlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1wb3NzaWJsZSB0byBzaWduIHRoaXMgdHlwZScpXG4gICAgfVxuICAgIHAyc2ggPSB0cnVlXG4gICAgaWYgKFNJR05BQkxFLmluZGV4T2YoaW5wdXQucmVkZWVtU2NyaXB0VHlwZSkgIT09IC0xKSB7XG4gICAgICBzaWcgPSBidWlsZFN0YWNrKGlucHV0LnJlZGVlbVNjcmlwdFR5cGUsIGlucHV0LnNpZ25hdHVyZXMsIGlucHV0LnB1YktleXMsIGFsbG93SW5jb21wbGV0ZSlcbiAgICB9XG4gICAgLy8gSWYgaXQgd2Fzbid0IFNJR05BQkxFLCBpdCdzIHdpdG5lc3MsIGRlZmVyIHRvIHRoYXRcbiAgICBzY3JpcHRUeXBlID0gaW5wdXQucmVkZWVtU2NyaXB0VHlwZVxuICB9XG5cbiAgaWYgKHNjcmlwdFR5cGUgPT09IGJzY3JpcHQudHlwZXMuUDJXUEtIKSB7XG4gICAgLy8gUDJXUEtIIGlzIGEgc3BlY2lhbCBjYXNlIG9mIFAyUEtIXG4gICAgd2l0bmVzcyA9IGJ1aWxkU3RhY2soYnNjcmlwdC50eXBlcy5QMlBLSCwgaW5wdXQuc2lnbmF0dXJlcywgaW5wdXQucHViS2V5cywgYWxsb3dJbmNvbXBsZXRlKVxuICB9IGVsc2UgaWYgKHNjcmlwdFR5cGUgPT09IGJzY3JpcHQudHlwZXMuUDJXU0gpIHtcbiAgICAvLyBXZSBjYW4gcmVtb3ZlIHRoaXMgY2hlY2sgbGF0ZXJcbiAgICBpZiAoU0lHTkFCTEUuaW5kZXhPZihpbnB1dC53aXRuZXNzU2NyaXB0VHlwZSkgIT09IC0xKSB7XG4gICAgICB3aXRuZXNzID0gYnVpbGRTdGFjayhpbnB1dC53aXRuZXNzU2NyaXB0VHlwZSwgaW5wdXQuc2lnbmF0dXJlcywgaW5wdXQucHViS2V5cywgYWxsb3dJbmNvbXBsZXRlKVxuICAgICAgd2l0bmVzcy5wdXNoKGlucHV0LndpdG5lc3NTY3JpcHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGNhbiByZW1vdmUgdGhpcyBlcnJvciBsYXRlciB3aGVuIHdlIGhhdmUgYSBndWFyYW50ZWUgcHJlcGFyZUlucHV0XG4gICAgICAvLyByZWplY3RzIHVuc2lnbmJsZSBzY3JpcHRzIC0gaXQgTVVTVCBiZSBzaWduYWJsZSBhdCB0aGlzIHBvaW50LlxuICAgICAgdGhyb3cgbmV3IEVycm9yKClcbiAgICB9XG5cbiAgICBzY3JpcHRUeXBlID0gaW5wdXQud2l0bmVzc1NjcmlwdFR5cGVcbiAgfVxuXG4gIC8vIGFwcGVuZCByZWRlZW1TY3JpcHQgaWYgbmVjZXNzYXJ5XG4gIGlmIChwMnNoKSB7XG4gICAgc2lnLnB1c2goaW5wdXQucmVkZWVtU2NyaXB0KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBzY3JpcHRUeXBlLFxuICAgIHNjcmlwdDogYnNjcmlwdC5jb21waWxlKHNpZyksXG4gICAgd2l0bmVzczogd2l0bmVzc1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zYWN0aW9uQnVpbGRlciAobmV0d29yaywgbWF4aW11bUZlZVJhdGUpIHtcbiAgdGhpcy5wcmV2VHhNYXAgPSB7fVxuICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrIHx8IG5ldHdvcmtzLmJpdGNvaW5cblxuICAvLyBXQVJOSU5HOiBUaGlzIGlzIF9fTk9UX18gdG8gYmUgcmVsaWVkIG9uLCBpdHMganVzdCBhbm90aGVyIHBvdGVudGlhbCBzYWZldHkgbWVjaGFuaXNtIChzYWZldHkgaW4tZGVwdGgpXG4gIHRoaXMubWF4aW11bUZlZVJhdGUgPSBtYXhpbXVtRmVlUmF0ZSB8fCAxMDAwXG5cbiAgdGhpcy5pbnB1dHMgPSBbXVxuICB0aGlzLnR4ID0gbmV3IFRyYW5zYWN0aW9uKClcbn1cblxuVHJhbnNhY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5zZXRMb2NrVGltZSA9IGZ1bmN0aW9uIChsb2NrdGltZSkge1xuICB0eXBlZm9yY2UodHlwZXMuVUludDMyLCBsb2NrdGltZSlcblxuICAvLyBpZiBhbnkgc2lnbmF0dXJlcyBleGlzdCwgdGhyb3dcbiAgaWYgKHRoaXMuaW5wdXRzLnNvbWUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFpbnB1dC5zaWduYXR1cmVzKSByZXR1cm4gZmFsc2VcblxuICAgIHJldHVybiBpbnB1dC5zaWduYXR1cmVzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgfSlcbiAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vLCB0aGlzIHdvdWxkIGludmFsaWRhdGUgc2lnbmF0dXJlcycpXG4gIH1cblxuICB0aGlzLnR4LmxvY2t0aW1lID0gbG9ja3RpbWVcbn1cblxuVHJhbnNhY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5zZXRWZXJzaW9uID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgdHlwZWZvcmNlKHR5cGVzLlVJbnQzMiwgdmVyc2lvbilcblxuICAvLyBYWFg6IHRoaXMgbWlnaHQgZXZlbnR1YWxseSBiZWNvbWUgbW9yZSBjb21wbGV4IGRlcGVuZGluZyBvbiB3aGF0IHRoZSB2ZXJzaW9ucyByZXByZXNlbnRcbiAgdGhpcy50eC52ZXJzaW9uID0gdmVyc2lvblxufVxuXG5UcmFuc2FjdGlvbkJ1aWxkZXIuZnJvbVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBuZXR3b3JrKSB7XG4gIHZhciB0eGIgPSBuZXcgVHJhbnNhY3Rpb25CdWlsZGVyKG5ldHdvcmspXG5cbiAgLy8gQ29weSB0cmFuc2FjdGlvbiBmaWVsZHNcbiAgdHhiLnNldFZlcnNpb24odHJhbnNhY3Rpb24udmVyc2lvbilcbiAgdHhiLnNldExvY2tUaW1lKHRyYW5zYWN0aW9uLmxvY2t0aW1lKVxuXG4gIC8vIENvcHkgb3V0cHV0cyAoZG9uZSBmaXJzdCB0byBhdm9pZCBzaWduYXR1cmUgaW52YWxpZGF0aW9uKVxuICB0cmFuc2FjdGlvbi5vdXRzLmZvckVhY2goZnVuY3Rpb24gKHR4T3V0KSB7XG4gICAgdHhiLmFkZE91dHB1dCh0eE91dC5zY3JpcHQsIHR4T3V0LnZhbHVlKVxuICB9KVxuXG4gIC8vIENvcHkgaW5wdXRzXG4gIHRyYW5zYWN0aW9uLmlucy5mb3JFYWNoKGZ1bmN0aW9uICh0eEluKSB7XG4gICAgdHhiLl9fYWRkSW5wdXRVbnNhZmUodHhJbi5oYXNoLCB0eEluLmluZGV4LCB7XG4gICAgICBzZXF1ZW5jZTogdHhJbi5zZXF1ZW5jZSxcbiAgICAgIHNjcmlwdDogdHhJbi5zY3JpcHQsXG4gICAgICB3aXRuZXNzOiB0eEluLndpdG5lc3NcbiAgICB9KVxuICB9KVxuXG4gIC8vIGZpeCBzb21lIHRoaW5ncyBub3QgcG9zc2libGUgdGhyb3VnaCB0aGUgcHVibGljIEFQSVxuICB0eGIuaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCBpKSB7XG4gICAgZml4TXVsdGlzaWdPcmRlcihpbnB1dCwgdHJhbnNhY3Rpb24sIGkpXG4gIH0pXG5cbiAgcmV0dXJuIHR4YlxufVxuXG5UcmFuc2FjdGlvbkJ1aWxkZXIucHJvdG90eXBlLmFkZElucHV0ID0gZnVuY3Rpb24gKHR4SGFzaCwgdm91dCwgc2VxdWVuY2UsIHByZXZPdXRTY3JpcHQpIHtcbiAgaWYgKCF0aGlzLl9fY2FuTW9kaWZ5SW5wdXRzKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vLCB0aGlzIHdvdWxkIGludmFsaWRhdGUgc2lnbmF0dXJlcycpXG4gIH1cblxuICB2YXIgdmFsdWVcblxuICAvLyBpcyBpdCBhIGhleCBzdHJpbmc/XG4gIGlmICh0eXBlb2YgdHhIYXNoID09PSAnc3RyaW5nJykge1xuICAgIC8vIHRyYW5zYWN0aW9uIGhhc2hzJ3MgYXJlIGRpc3BsYXllZCBpbiByZXZlcnNlIG9yZGVyLCB1bi1yZXZlcnNlIGl0XG4gICAgdHhIYXNoID0gbmV3IEJ1ZmZlcih0eEhhc2gsICdoZXgnKS5yZXZlcnNlKClcblxuICAvLyBpcyBpdCBhIFRyYW5zYWN0aW9uIG9iamVjdD9cbiAgfSBlbHNlIGlmICh0eEhhc2ggaW5zdGFuY2VvZiBUcmFuc2FjdGlvbikge1xuICAgIHZhciB0eE91dCA9IHR4SGFzaC5vdXRzW3ZvdXRdXG4gICAgcHJldk91dFNjcmlwdCA9IHR4T3V0LnNjcmlwdFxuICAgIHZhbHVlID0gdHhPdXQudmFsdWVcblxuICAgIHR4SGFzaCA9IHR4SGFzaC5nZXRIYXNoKClcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9fYWRkSW5wdXRVbnNhZmUodHhIYXNoLCB2b3V0LCB7XG4gICAgc2VxdWVuY2U6IHNlcXVlbmNlLFxuICAgIHByZXZPdXRTY3JpcHQ6IHByZXZPdXRTY3JpcHQsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pXG59XG5cblRyYW5zYWN0aW9uQnVpbGRlci5wcm90b3R5cGUuX19hZGRJbnB1dFVuc2FmZSA9IGZ1bmN0aW9uICh0eEhhc2gsIHZvdXQsIG9wdGlvbnMpIHtcbiAgaWYgKFRyYW5zYWN0aW9uLmlzQ29pbmJhc2VIYXNoKHR4SGFzaCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvaW5iYXNlIGlucHV0cyBub3Qgc3VwcG9ydGVkJylcbiAgfVxuXG4gIHZhciBwcmV2VHhPdXQgPSB0eEhhc2gudG9TdHJpbmcoJ2hleCcpICsgJzonICsgdm91dFxuICBpZiAodGhpcy5wcmV2VHhNYXBbcHJldlR4T3V0XSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0R1cGxpY2F0ZSBUeE91dDogJyArIHByZXZUeE91dClcblxuICB2YXIgaW5wdXQgPSB7fVxuXG4gIC8vIGRlcml2ZSB3aGF0IHdlIGNhbiBmcm9tIHRoZSBzY3JpcHRTaWdcbiAgaWYgKG9wdGlvbnMuc2NyaXB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpbnB1dCA9IGV4cGFuZElucHV0KG9wdGlvbnMuc2NyaXB0LCBvcHRpb25zLndpdG5lc3MpXG4gIH1cblxuICAvLyBpZiBhbiBpbnB1dCB2YWx1ZSB3YXMgZ2l2ZW4sIHJldGFpbiBpdFxuICBpZiAob3B0aW9ucy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaW5wdXQudmFsdWUgPSBvcHRpb25zLnZhbHVlXG4gIH1cblxuICAvLyBkZXJpdmUgd2hhdCB3ZSBjYW4gZnJvbSB0aGUgcHJldmlvdXMgdHJhbnNhY3Rpb25zIG91dHB1dCBzY3JpcHRcbiAgaWYgKCFpbnB1dC5wcmV2T3V0U2NyaXB0ICYmIG9wdGlvbnMucHJldk91dFNjcmlwdCkge1xuICAgIHZhciBwcmV2T3V0VHlwZVxuXG4gICAgaWYgKCFpbnB1dC5wdWJLZXlzICYmICFpbnB1dC5zaWduYXR1cmVzKSB7XG4gICAgICB2YXIgZXhwYW5kZWQgPSBleHBhbmRPdXRwdXQob3B0aW9ucy5wcmV2T3V0U2NyaXB0KVxuXG4gICAgICBpZiAoZXhwYW5kZWQucHViS2V5cykge1xuICAgICAgICBpbnB1dC5wdWJLZXlzID0gZXhwYW5kZWQucHViS2V5c1xuICAgICAgICBpbnB1dC5zaWduYXR1cmVzID0gZXhwYW5kZWQuc2lnbmF0dXJlc1xuICAgICAgfVxuXG4gICAgICBwcmV2T3V0VHlwZSA9IGV4cGFuZGVkLnNjcmlwdFR5cGVcbiAgICB9XG5cbiAgICBpbnB1dC5wcmV2T3V0U2NyaXB0ID0gb3B0aW9ucy5wcmV2T3V0U2NyaXB0XG4gICAgaW5wdXQucHJldk91dFR5cGUgPSBwcmV2T3V0VHlwZSB8fCBic2NyaXB0LmNsYXNzaWZ5T3V0cHV0KG9wdGlvbnMucHJldk91dFNjcmlwdClcbiAgfVxuXG4gIHZhciB2aW4gPSB0aGlzLnR4LmFkZElucHV0KHR4SGFzaCwgdm91dCwgb3B0aW9ucy5zZXF1ZW5jZSwgb3B0aW9ucy5zY3JpcHRTaWcpXG4gIHRoaXMuaW5wdXRzW3Zpbl0gPSBpbnB1dFxuICB0aGlzLnByZXZUeE1hcFtwcmV2VHhPdXRdID0gdmluXG5cbiAgcmV0dXJuIHZpblxufVxuXG5UcmFuc2FjdGlvbkJ1aWxkZXIucHJvdG90eXBlLmFkZE91dHB1dCA9IGZ1bmN0aW9uIChzY3JpcHRQdWJLZXksIHZhbHVlKSB7XG4gIGlmICghdGhpcy5fX2Nhbk1vZGlmeU91dHB1dHMoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8sIHRoaXMgd291bGQgaW52YWxpZGF0ZSBzaWduYXR1cmVzJylcbiAgfVxuXG4gIC8vIEF0dGVtcHQgdG8gZ2V0IGEgc2NyaXB0IGlmIGl0J3MgYSBiYXNlNTggYWRkcmVzcyBzdHJpbmdcbiAgaWYgKHR5cGVvZiBzY3JpcHRQdWJLZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgc2NyaXB0UHViS2V5ID0gYmFkZHJlc3MudG9PdXRwdXRTY3JpcHQoc2NyaXB0UHViS2V5LCB0aGlzLm5ldHdvcmspXG4gIH1cblxuICByZXR1cm4gdGhpcy50eC5hZGRPdXRwdXQoc2NyaXB0UHViS2V5LCB2YWx1ZSlcbn1cblxuVHJhbnNhY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX19idWlsZChmYWxzZSlcbn1cblRyYW5zYWN0aW9uQnVpbGRlci5wcm90b3R5cGUuYnVpbGRJbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fX2J1aWxkKHRydWUpXG59XG5cblRyYW5zYWN0aW9uQnVpbGRlci5wcm90b3R5cGUuX19idWlsZCA9IGZ1bmN0aW9uIChhbGxvd0luY29tcGxldGUpIHtcbiAgaWYgKCFhbGxvd0luY29tcGxldGUpIHtcbiAgICBpZiAoIXRoaXMudHguaW5zLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBoYXMgbm8gaW5wdXRzJylcbiAgICBpZiAoIXRoaXMudHgub3V0cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignVHJhbnNhY3Rpb24gaGFzIG5vIG91dHB1dHMnKVxuICB9XG5cbiAgdmFyIHR4ID0gdGhpcy50eC5jbG9uZSgpXG4gIC8vIENyZWF0ZSBzY3JpcHQgc2lnbmF0dXJlcyBmcm9tIGlucHV0c1xuICB0aGlzLmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCwgaSkge1xuICAgIHZhciBzY3JpcHRUeXBlID0gaW5wdXQud2l0bmVzc1NjcmlwdFR5cGUgfHwgaW5wdXQucmVkZWVtU2NyaXB0VHlwZSB8fCBpbnB1dC5wcmV2T3V0VHlwZVxuICAgIGlmICghc2NyaXB0VHlwZSAmJiAhYWxsb3dJbmNvbXBsZXRlKSB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zYWN0aW9uIGlzIG5vdCBjb21wbGV0ZScpXG4gICAgdmFyIHJlc3VsdCA9IGJ1aWxkSW5wdXQoaW5wdXQsIGFsbG93SW5jb21wbGV0ZSlcblxuICAgIC8vIHNraXAgaWYgbm8gcmVzdWx0XG4gICAgaWYgKCFhbGxvd0luY29tcGxldGUpIHtcbiAgICAgIGlmIChTSUdOQUJMRS5pbmRleE9mKHJlc3VsdC50eXBlKSA9PT0gLTEgJiYgcmVzdWx0LnR5cGUgIT09IGJzY3JpcHQudHlwZXMuUDJXUEtIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQudHlwZSArICcgbm90IHN1cHBvcnRlZCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdHguc2V0SW5wdXRTY3JpcHQoaSwgcmVzdWx0LnNjcmlwdClcbiAgICB0eC5zZXRXaXRuZXNzKGksIHJlc3VsdC53aXRuZXNzKVxuICB9KVxuXG4gIGlmICghYWxsb3dJbmNvbXBsZXRlKSB7XG4gICAgLy8gZG8gbm90IHJlbHkgb24gdGhpcywgaXRzIG1lcmVseSBhIGxhc3QgcmVzb3J0XG4gICAgaWYgKHRoaXMuX19vdmVyTWF4aW11bUZlZXModHguYnl0ZUxlbmd0aCgpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBoYXMgYWJzdXJkIGZlZXMnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eFxufVxuXG5mdW5jdGlvbiBjYW5TaWduIChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucHJldk91dFNjcmlwdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgaW5wdXQuc2lnblNjcmlwdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgaW5wdXQucHViS2V5cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgaW5wdXQuc2lnbmF0dXJlcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgaW5wdXQuc2lnbmF0dXJlcy5sZW5ndGggPT09IGlucHV0LnB1YktleXMubGVuZ3RoICYmXG4gICAgaW5wdXQucHViS2V5cy5sZW5ndGggPiAwICYmXG4gICAgaW5wdXQud2l0bmVzcyAhPT0gdW5kZWZpbmVkXG59XG5cblRyYW5zYWN0aW9uQnVpbGRlci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uICh2aW4sIGtleVBhaXIsIHJlZGVlbVNjcmlwdCwgaGFzaFR5cGUsIHdpdG5lc3NWYWx1ZSwgd2l0bmVzc1NjcmlwdCkge1xuICBpZiAoa2V5UGFpci5uZXR3b3JrICE9PSB0aGlzLm5ldHdvcmspIHRocm93IG5ldyBFcnJvcignSW5jb25zaXN0ZW50IG5ldHdvcmsnKVxuICBpZiAoIXRoaXMuaW5wdXRzW3Zpbl0pIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXQgYXQgaW5kZXg6ICcgKyB2aW4pXG4gIGhhc2hUeXBlID0gaGFzaFR5cGUgfHwgVHJhbnNhY3Rpb24uU0lHSEFTSF9BTExcblxuICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0c1t2aW5dXG5cbiAgLy8gaWYgcmVkZWVtU2NyaXB0IHdhcyBwcmV2aW91c2x5IHByb3ZpZGVkLCBlbmZvcmNlIGNvbnNpc3RlbmN5XG4gIGlmIChpbnB1dC5yZWRlZW1TY3JpcHQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcmVkZWVtU2NyaXB0ICYmXG4gICAgICAhaW5wdXQucmVkZWVtU2NyaXB0LmVxdWFscyhyZWRlZW1TY3JpcHQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbnNpc3RlbnQgcmVkZWVtU2NyaXB0JylcbiAgfVxuXG4gIHZhciBrcFB1YktleSA9IGtleVBhaXIuZ2V0UHVibGljS2V5QnVmZmVyKClcbiAgaWYgKCFjYW5TaWduKGlucHV0KSkge1xuICAgIHByZXBhcmVJbnB1dChpbnB1dCwga3BQdWJLZXksIHJlZGVlbVNjcmlwdCwgd2l0bmVzc1ZhbHVlLCB3aXRuZXNzU2NyaXB0KVxuICAgIGlmICghY2FuU2lnbihpbnB1dCkpIHRocm93IEVycm9yKGlucHV0LnByZXZPdXRUeXBlICsgJyBub3Qgc3VwcG9ydGVkJylcbiAgfVxuXG4gIC8vIHJlYWR5IHRvIHNpZ25cbiAgdmFyIHNpZ25hdHVyZUhhc2hcbiAgaWYgKGlucHV0LndpdG5lc3MpIHtcbiAgICBzaWduYXR1cmVIYXNoID0gdGhpcy50eC5oYXNoRm9yV2l0bmVzc1YwKHZpbiwgaW5wdXQuc2lnblNjcmlwdCwgd2l0bmVzc1ZhbHVlLCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBzaWduYXR1cmVIYXNoID0gdGhpcy50eC5oYXNoRm9yU2lnbmF0dXJlKHZpbiwgaW5wdXQuc2lnblNjcmlwdCwgaGFzaFR5cGUpXG4gIH1cbiAgLy8gZW5mb3JjZSBpbiBvcmRlciBzaWduaW5nIG9mIHB1YmxpYyBrZXlzXG4gIHZhciBzaWduZWQgPSBpbnB1dC5wdWJLZXlzLnNvbWUoZnVuY3Rpb24gKHB1YktleSwgaSkge1xuICAgIGlmICgha3BQdWJLZXkuZXF1YWxzKHB1YktleSkpIHJldHVybiBmYWxzZVxuICAgIGlmIChpbnB1dC5zaWduYXR1cmVzW2ldKSB0aHJvdyBuZXcgRXJyb3IoJ1NpZ25hdHVyZSBhbHJlYWR5IGV4aXN0cycpXG5cbiAgICBpbnB1dC5zaWduYXR1cmVzW2ldID0ga2V5UGFpci5zaWduKHNpZ25hdHVyZUhhc2gpLnRvU2NyaXB0U2lnbmF0dXJlKGhhc2hUeXBlKVxuICAgIHJldHVybiB0cnVlXG4gIH0pXG5cbiAgaWYgKCFzaWduZWQpIHRocm93IG5ldyBFcnJvcignS2V5IHBhaXIgY2Fubm90IHNpZ24gZm9yIHRoaXMgaW5wdXQnKVxufVxuXG5mdW5jdGlvbiBzaWduYXR1cmVIYXNoVHlwZSAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXIucmVhZFVJbnQ4KGJ1ZmZlci5sZW5ndGggLSAxKVxufVxuXG5UcmFuc2FjdGlvbkJ1aWxkZXIucHJvdG90eXBlLl9fY2FuTW9kaWZ5SW5wdXRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pbnB1dHMuZXZlcnkoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgLy8gYW55IHNpZ25hdHVyZXM/XG4gICAgaWYgKGlucHV0LnNpZ25hdHVyZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWVcblxuICAgIHJldHVybiBpbnB1dC5zaWduYXR1cmVzLmV2ZXJ5KGZ1bmN0aW9uIChzaWduYXR1cmUpIHtcbiAgICAgIGlmICghc2lnbmF0dXJlKSByZXR1cm4gdHJ1ZVxuICAgICAgdmFyIGhhc2hUeXBlID0gc2lnbmF0dXJlSGFzaFR5cGUoc2lnbmF0dXJlKVxuXG4gICAgICAvLyBpZiBTSUdIQVNIX0FOWU9ORUNBTlBBWSBpcyBzZXQsIHNpZ25hdHVyZXMgd291bGQgbm90XG4gICAgICAvLyBiZSBpbnZhbGlkYXRlZCBieSBtb3JlIGlucHV0c1xuICAgICAgcmV0dXJuIGhhc2hUeXBlICYgVHJhbnNhY3Rpb24uU0lHSEFTSF9BTllPTkVDQU5QQVlcbiAgICB9KVxuICB9KVxufVxuXG5UcmFuc2FjdGlvbkJ1aWxkZXIucHJvdG90eXBlLl9fY2FuTW9kaWZ5T3V0cHV0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5JbnB1dHMgPSB0aGlzLnR4Lmlucy5sZW5ndGhcbiAgdmFyIG5PdXRwdXRzID0gdGhpcy50eC5vdXRzLmxlbmd0aFxuXG4gIHJldHVybiB0aGlzLmlucHV0cy5ldmVyeShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQuc2lnbmF0dXJlcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZVxuXG4gICAgcmV0dXJuIGlucHV0LnNpZ25hdHVyZXMuZXZlcnkoZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgICAgaWYgKCFzaWduYXR1cmUpIHJldHVybiB0cnVlXG4gICAgICB2YXIgaGFzaFR5cGUgPSBzaWduYXR1cmVIYXNoVHlwZShzaWduYXR1cmUpXG5cbiAgICAgIHZhciBoYXNoVHlwZU1vZCA9IGhhc2hUeXBlICYgMHgxZlxuICAgICAgaWYgKGhhc2hUeXBlTW9kID09PSBUcmFuc2FjdGlvbi5TSUdIQVNIX05PTkUpIHJldHVybiB0cnVlXG4gICAgICBpZiAoaGFzaFR5cGVNb2QgPT09IFRyYW5zYWN0aW9uLlNJR0hBU0hfU0lOR0xFKSB7XG4gICAgICAgIC8vIGlmIFNJR0hBU0hfU0lOR0xFIGlzIHNldCwgYW5kIG5JbnB1dHMgPiBuT3V0cHV0c1xuICAgICAgICAvLyBzb21lIHNpZ25hdHVyZXMgd291bGQgYmUgaW52YWxpZGF0ZWQgYnkgdGhlIGFkZGl0aW9uXG4gICAgICAgIC8vIG9mIG1vcmUgb3V0cHV0c1xuICAgICAgICByZXR1cm4gbklucHV0cyA8PSBuT3V0cHV0c1xuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5cblRyYW5zYWN0aW9uQnVpbGRlci5wcm90b3R5cGUuX19vdmVyTWF4aW11bUZlZXMgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgLy8gbm90IGFsbCBpbnB1dHMgd2lsbCBoYXZlIC52YWx1ZSBkZWZpbmVkXG4gIHZhciBpbmNvbWluZyA9IHRoaXMuaW5wdXRzLnJlZHVjZShmdW5jdGlvbiAoYSwgeCkgeyByZXR1cm4gYSArICh4LnZhbHVlID4+PiAwKSB9LCAwKVxuXG4gIC8vIGJ1dCBhbGwgb3V0cHV0cyBkbywgYW5kIGlmIHdlIGhhdmUgYW55IGlucHV0IHZhbHVlXG4gIC8vIHdlIGNhbiBpbW1lZGlhdGVseSBkZXRlcm1pbmUgaWYgdGhlIG91dHB1dHMgYXJlIHRvbyBzbWFsbFxuICB2YXIgb3V0Z29pbmcgPSB0aGlzLnR4Lm91dHMucmVkdWNlKGZ1bmN0aW9uIChhLCB4KSB7IHJldHVybiBhICsgeC52YWx1ZSB9LCAwKVxuICB2YXIgZmVlID0gaW5jb21pbmcgLSBvdXRnb2luZ1xuICB2YXIgZmVlUmF0ZSA9IGZlZSAvIGJ5dGVzXG5cbiAgcmV0dXJuIGZlZVJhdGUgPiB0aGlzLm1heGltdW1GZWVSYXRlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25CdWlsZGVyXG4iLCJ2YXIgdHlwZWZvcmNlID0gcmVxdWlyZSgndHlwZWZvcmNlJylcblxudmFyIFVJTlQzMV9NQVggPSBNYXRoLnBvdygyLCAzMSkgLSAxXG5mdW5jdGlvbiBVSW50MzEgKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlZm9yY2UuVUludDMyKHZhbHVlKSAmJiB2YWx1ZSA8PSBVSU5UMzFfTUFYXG59XG5cbmZ1bmN0aW9uIEJJUDMyUGF0aCAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVmb3JjZS5TdHJpbmcodmFsdWUpICYmIHZhbHVlLm1hdGNoKC9eKG1cXC8pPyhcXGQrJz9cXC8pKlxcZCsnPyQvKVxufVxuQklQMzJQYXRoLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdCSVAzMiBkZXJpdmF0aW9uIHBhdGgnIH1cblxudmFyIFNBVE9TSElfTUFYID0gMjEgKiAxZTE0XG5mdW5jdGlvbiBTYXRvc2hpICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZWZvcmNlLlVJbnQ1Myh2YWx1ZSkgJiYgdmFsdWUgPD0gU0FUT1NISV9NQVhcbn1cblxuLy8gZXh0ZXJuYWwgZGVwZW5kZW50IHR5cGVzXG52YXIgQmlnSW50ID0gdHlwZWZvcmNlLnF1YWNrc0xpa2UoJ0JpZ0ludGVnZXInKVxudmFyIEVDUG9pbnQgPSB0eXBlZm9yY2UucXVhY2tzTGlrZSgnUG9pbnQnKVxuXG4vLyBleHBvc2VkLCBleHRlcm5hbCBBUElcbnZhciBFQ1NpZ25hdHVyZSA9IHR5cGVmb3JjZS5jb21waWxlKHsgcjogQmlnSW50LCBzOiBCaWdJbnQgfSlcbnZhciBOZXR3b3JrID0gdHlwZWZvcmNlLmNvbXBpbGUoe1xuICBtZXNzYWdlUHJlZml4OiB0eXBlZm9yY2Uub25lT2YodHlwZWZvcmNlLkJ1ZmZlciwgdHlwZWZvcmNlLlN0cmluZyksXG4gIGJpcDMyOiB7XG4gICAgcHVibGljOiB0eXBlZm9yY2UuVUludDMyLFxuICAgIHByaXZhdGU6IHR5cGVmb3JjZS5VSW50MzJcbiAgfSxcbiAgcHViS2V5SGFzaDogdHlwZWZvcmNlLlVJbnQxNixcbiAgc2NyaXB0SGFzaDogdHlwZWZvcmNlLlVJbnQxNixcbiAgd2lmOiB0eXBlZm9yY2UuVUludDhcbn0pXG5cbi8vIGV4dGVuZCB0eXBlZm9yY2UgdHlwZXMgd2l0aCBvdXJzXG52YXIgdHlwZXMgPSB7XG4gIEJpZ0ludDogQmlnSW50LFxuICBCSVAzMlBhdGg6IEJJUDMyUGF0aCxcbiAgQnVmZmVyMjU2Yml0OiB0eXBlZm9yY2UuQnVmZmVyTigzMiksXG4gIEVDUG9pbnQ6IEVDUG9pbnQsXG4gIEVDU2lnbmF0dXJlOiBFQ1NpZ25hdHVyZSxcbiAgSGFzaDE2MGJpdDogdHlwZWZvcmNlLkJ1ZmZlck4oMjApLFxuICBIYXNoMjU2Yml0OiB0eXBlZm9yY2UuQnVmZmVyTigzMiksXG4gIE5ldHdvcms6IE5ldHdvcmssXG4gIFNhdG9zaGk6IFNhdG9zaGksXG4gIFVJbnQzMTogVUludDMxXG59XG5cbmZvciAodmFyIHR5cGVOYW1lIGluIHR5cGVmb3JjZSkge1xuICB0eXBlc1t0eXBlTmFtZV0gPSB0eXBlZm9yY2VbdHlwZU5hbWVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZXNcbiIsIlxuXG4vL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5b2IyMWxMM0JsWlhCbFpTOWtaWFl2YUdRdGQyRnNiR1YwTFRNdmFHUXRkMkZzYkdWMEwyNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEpsYzI5c2RtVXZaVzF3ZEhrdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSnZkWFF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SWlYWDA9IiwidmFyIGJhc2V4ID0gcmVxdWlyZSgnYmFzZS14JylcbnZhciBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2V4KEFMUEhBQkVUKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNTggPSByZXF1aXJlKCdiczU4JylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxuXG4vLyBTSEEyNTYoU0hBMjU2KGJ1ZmZlcikpXG5mdW5jdGlvbiBzaGEyNTZ4MiAoYnVmZmVyKSB7XG4gIHZhciB0bXAgPSBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxuICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHRtcCkuZGlnZXN0KClcbn1cblxuLy8gRW5jb2RlIGEgYnVmZmVyIGFzIGEgYmFzZTU4LWNoZWNrIGVuY29kZWQgc3RyaW5nXG5mdW5jdGlvbiBlbmNvZGUgKHBheWxvYWQpIHtcbiAgdmFyIGNoZWNrc3VtID0gc2hhMjU2eDIocGF5bG9hZClcblxuICByZXR1cm4gYmFzZTU4LmVuY29kZShCdWZmZXIuY29uY2F0KFtcbiAgICBwYXlsb2FkLFxuICAgIGNoZWNrc3VtXG4gIF0sIHBheWxvYWQubGVuZ3RoICsgNCkpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVJhdyAoYnVmZmVyKSB7XG4gIHZhciBwYXlsb2FkID0gYnVmZmVyLnNsaWNlKDAsIC00KVxuICB2YXIgY2hlY2tzdW0gPSBidWZmZXIuc2xpY2UoLTQpXG4gIHZhciBuZXdDaGVja3N1bSA9IHNoYTI1NngyKHBheWxvYWQpXG5cbiAgaWYgKGNoZWNrc3VtWzBdIF4gbmV3Q2hlY2tzdW1bMF0gfFxuICAgICAgY2hlY2tzdW1bMV0gXiBuZXdDaGVja3N1bVsxXSB8XG4gICAgICBjaGVja3N1bVsyXSBeIG5ld0NoZWNrc3VtWzJdIHxcbiAgICAgIGNoZWNrc3VtWzNdIF4gbmV3Q2hlY2tzdW1bM10pIHJldHVyblxuXG4gIHJldHVybiBwYXlsb2FkXG59XG5cbi8vIERlY29kZSBhIGJhc2U1OC1jaGVjayBlbmNvZGVkIHN0cmluZyB0byBhIGJ1ZmZlciwgbm8gcmVzdWx0IGlmIGNoZWNrc3VtIGlzIHdyb25nXG5mdW5jdGlvbiBkZWNvZGVVbnNhZmUgKHN0cmluZykge1xuICB2YXIgYnVmZmVyID0gYmFzZTU4LmRlY29kZVVuc2FmZShzdHJpbmcpXG4gIGlmICghYnVmZmVyKSByZXR1cm5cblxuICByZXR1cm4gZGVjb2RlUmF3KGJ1ZmZlcilcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgdmFyIGJ1ZmZlciA9IGJhc2U1OC5kZWNvZGUoc3RyaW5nKVxuICB2YXIgcGF5bG9hZCA9IGRlY29kZVJhdyhidWZmZXIpXG4gIGlmICghcGF5bG9hZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNoZWNrc3VtJylcbiAgcmV0dXJuIHBheWxvYWRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG5cbiAgLy8gRklYTUU6IHJlbW92ZSBpbiAyLjAuMFxuICBkZWNvZGVSYXc6IGRlY29kZVVuc2FmZVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSlcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0FycmF5QnVmZmVyVmlldyhvYmopIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoaXNBcnJheUJ1ZmZlclZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBOb2RlIDAuMTAgc3VwcG9ydHMgYEFycmF5QnVmZmVyYCBidXQgbGFja3MgYEFycmF5QnVmZmVyLmlzVmlld2BcbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3IChvYmopIHtcbiAgcmV0dXJuICh0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxufVxuXG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuaW5oZXJpdHMoQ2lwaGVyQmFzZSwgVHJhbnNmb3JtKVxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIHRoaXMuX2RlY29kZXIgPSBudWxsXG4gIHRoaXMuX2VuY29kaW5nID0gbnVsbFxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGlucHV0RW5jKVxuICB9XG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuICByZXR1cm4gb3V0RGF0YVxufVxuXG5DaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uICgpIHt9XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIGRvbmUoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9maW5hbCgpIHx8IG5ldyBCdWZmZXIoJycpXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG4gIGlmICh0aGlzLl9lbmNvZGluZyAhPT0gZW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuICB9XG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuICByZXR1cm4gb3V0XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbWQ1ID0gcmVxdWlyZSgnLi9tZDUnKVxudmFyIHJtZDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2hOb0NvbnN0cnVjdG9yKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG4gIHRoaXMuYnVmZmVycyA9IFtdXG59XG5cbmluaGVyaXRzKEhhc2hOb0NvbnN0cnVjdG9yLCBCYXNlKVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGRhdGEpXG59XG5cbkhhc2hOb0NvbnN0cnVjdG9yLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycylcbiAgdmFyIHIgPSB0aGlzLl9oYXNoKGJ1ZilcbiAgdGhpcy5idWZmZXJzID0gbnVsbFxuXG4gIHJldHVybiByXG59XG5cbmZ1bmN0aW9uIEhhc2goaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKCdtZDUnID09PSBhbGcpIHJldHVybiBuZXcgSGFzaE5vQ29uc3RydWN0b3IobWQ1KVxuICBpZiAoJ3JtZDE2MCcgPT09IGFsZyB8fCAncmlwZW1kMTYwJyA9PT0gYWxnKSByZXR1cm4gbmV3IEhhc2hOb0NvbnN0cnVjdG9yKHJtZDE2MClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW50U2l6ZSA9IDQ7XG52YXIgemVyb0J1ZmZlciA9IG5ldyBCdWZmZXIoaW50U2l6ZSk7IHplcm9CdWZmZXIuZmlsbCgwKTtcbnZhciBjaHJzeiA9IDg7XG5cbmZ1bmN0aW9uIHRvQXJyYXkoYnVmLCBiaWdFbmRpYW4pIHtcbiAgaWYgKChidWYubGVuZ3RoICUgaW50U2l6ZSkgIT09IDApIHtcbiAgICB2YXIgbGVuID0gYnVmLmxlbmd0aCArIChpbnRTaXplIC0gKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSk7XG4gICAgYnVmID0gQnVmZmVyLmNvbmNhdChbYnVmLCB6ZXJvQnVmZmVyXSwgbGVuKTtcbiAgfVxuXG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGZuID0gYmlnRW5kaWFuID8gYnVmLnJlYWRJbnQzMkJFIDogYnVmLnJlYWRJbnQzMkxFO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKz0gaW50U2l6ZSkge1xuICAgIGFyci5wdXNoKGZuLmNhbGwoYnVmLCBpKSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gdG9CdWZmZXIoYXJyLCBzaXplLCBiaWdFbmRpYW4pIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gIHZhciBmbiA9IGJpZ0VuZGlhbiA/IGJ1Zi53cml0ZUludDMyQkUgOiBidWYud3JpdGVJbnQzMkxFO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGZuLmNhbGwoYnVmLCBhcnJbaV0sIGkgKiA0LCB0cnVlKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufVxuXG5mdW5jdGlvbiBoYXNoKGJ1ZiwgZm4sIGhhc2hTaXplLCBiaWdFbmRpYW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gbmV3IEJ1ZmZlcihidWYpO1xuICB2YXIgYXJyID0gZm4odG9BcnJheShidWYsIGJpZ0VuZGlhbiksIGJ1Zi5sZW5ndGggKiBjaHJzeik7XG4gIHJldHVybiB0b0J1ZmZlcihhcnIsIGhhc2hTaXplLCBiaWdFbmRpYW4pO1xufVxuZXhwb3J0cy5oYXNoID0gaGFzaDsiLCIndXNlIHN0cmljdCc7XG4vKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4xIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby5cbiAqL1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aFxuICovXG5mdW5jdGlvbiBjb3JlX21kNSh4LCBsZW4pXG57XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKChsZW4pICUgMzIpO1xuICB4WygoKGxlbiArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBsZW47XG5cbiAgdmFyIGEgPSAgMTczMjU4NDE5MztcbiAgdmFyIGIgPSAtMjcxNzMzODc5O1xuICB2YXIgYyA9IC0xNzMyNTg0MTk0O1xuICB2YXIgZCA9ICAyNzE3MzM4Nzg7XG5cbiAgZm9yKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KVxuICB7XG4gICAgdmFyIG9sZGEgPSBhO1xuICAgIHZhciBvbGRiID0gYjtcbiAgICB2YXIgb2xkYyA9IGM7XG4gICAgdmFyIG9sZGQgPSBkO1xuXG4gICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2krIDBdLCA3ICwgLTY4MDg3NjkzNik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDFdLCAxMiwgLTM4OTU2NDU4Nik7XG4gICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krIDJdLCAxNywgIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyA0XSwgNyAsIC0xNzY0MTg4OTcpO1xuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpKyA1XSwgMTIsICAxMjAwMDgwNDI2KTtcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krIDddLCAyMiwgLTQ1NzA1OTgzKTtcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsgOF0sIDcgLCAgMTc3MDAzNTQxNik7XG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKzEyXSwgNyAsICAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsxM10sIDEyLCAtNDAzNDExMDEpO1xuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpKzE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSsxNV0sIDIyLCAgMTIzNjUzNTMyOSk7XG5cbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgMV0sIDUgLCAtMTY1Nzk2NTEwKTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgNl0sIDkgLCAtMTA2OTUwMTYzMik7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krMTFdLCAxNCwgIDY0MzcxNzcxMyk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2krIDVdLCA1ICwgLTcwMTU1ODY5MSk7XG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTBdLCA5ICwgIDM4MDE2MDgzKTtcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDUgLCAgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsxNF0sIDkgLCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDhdLCAyMCwgIDExNjM1MzE1MDEpO1xuICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKzEzXSwgNSAsIC0xNDQ0NjgxNDY3KTtcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSsgMl0sIDkgLCAtNTE0MDM3ODQpO1xuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKyA3XSwgMTQsICAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7XG5cbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgNV0sIDQgLCAtMzc4NTU4KTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krMTFdLCAxNiwgIDE4MzkwMzA1NjIpO1xuICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKzE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krIDFdLCA0ICwgLTE1MzA5OTIwNjApO1xuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyA0XSwgMTEsICAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsxMF0sIDIzLCAtMTA5NDczMDY0MCk7XG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2krMTNdLCA0ICwgIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDBdLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2krIDNdLCAxNiwgLTcyMjUyMTk3OSk7XG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2krIDZdLCAyMywgIDc2MDI5MTg5KTtcbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDQgLCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1X2hoKGQsIGEsIGIsIGMsIHhbaSsxMl0sIDExLCAtNDIxODE1ODM1KTtcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsxNV0sIDE2LCAgNTMwNzQyNTIwKTtcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcblxuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpKyAwXSwgNiAsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyA3XSwgMTAsICAxMTI2ODkxNDE1KTtcbiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDYgLCAgMTcwMDQ4NTU3MSk7XG4gICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2krIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krIDhdLCA2ICwgIDE4NzMzMTMzNTkpO1xuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKzE1XSwgMTAsIC0zMDYxMTc0NCk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKzEzXSwgMjEsICAxMzA5MTUxNjQ5KTtcbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsgNF0sIDYgLCAtMTQ1NTIzMDcwKTtcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2krIDJdLCAxNSwgIDcxODc4NzI1OSk7XG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krIDldLCAyMSwgLTM0MzQ4NTU1MSk7XG5cbiAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7XG4gICAgYiA9IHNhZmVfYWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlX2FkZChjLCBvbGRjKTtcbiAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7XG4gIH1cbiAgcmV0dXJuIEFycmF5KGEsIGIsIGMsIGQpO1xuXG59XG5cbi8qXG4gKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLlxuICovXG5mdW5jdGlvbiBtZDVfY21uKHEsIGEsIGIsIHgsIHMsIHQpXG57XG4gIHJldHVybiBzYWZlX2FkZChiaXRfcm9sKHNhZmVfYWRkKHNhZmVfYWRkKGEsIHEpLCBzYWZlX2FkZCh4LCB0KSksIHMpLGIpO1xufVxuZnVuY3Rpb24gbWQ1X2ZmKGEsIGIsIGMsIGQsIHgsIHMsIHQpXG57XG4gIHJldHVybiBtZDVfY21uKChiICYgYykgfCAoKH5iKSAmIGQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNV9nZyhhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbigoYiAmIGQpIHwgKGMgJiAofmQpKSwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVfaGgoYSwgYiwgYywgZCwgeCwgcywgdClcbntcbiAgcmV0dXJuIG1kNV9jbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNV9paShhLCBiLCBjLCBkLCB4LCBzLCB0KVxue1xuICByZXR1cm4gbWQ1X2NtbihjIF4gKGIgfCAofmQpKSwgYSwgYiwgeCwgcywgdCk7XG59XG5cbi8qXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLlxuICovXG5mdW5jdGlvbiBzYWZlX2FkZCh4LCB5KVxue1xuICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpO1xuICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7XG4gIHJldHVybiAobXN3IDw8IDE2KSB8IChsc3cgJiAweEZGRkYpO1xufVxuXG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBiaXRfcm9sKG51bSwgY250KVxue1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWQ1KGJ1Zikge1xuICByZXR1cm4gaGVscGVycy5oYXNoKGJ1ZiwgY29yZV9tZDUsIDE2KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9icm93c2VyJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cblxudmFyIFpFUk9TID0gbmV3IEJ1ZmZlcigxMjgpXG5aRVJPUy5maWxsKDApXG5cbmZ1bmN0aW9uIEhtYWMoYWxnLCBrZXkpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gbmV3IEJ1ZmZlcihrZXkpXG4gIH1cblxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGNyZWF0ZUhhc2goYWxnKS51cGRhdGUoa2V5KS5kaWdlc3QoKVxuXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBuZXcgQnVmZmVyKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gbmV3IEJ1ZmZlcihibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGFsZykudXBkYXRlKGlwYWQpXG59XG5cbmluaGVyaXRzKEhtYWMsIFRyYW5zZm9ybSlcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhLCBlbmMpXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSG1hYy5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG5cbiAgbmV4dCgpXG59XG5cbkhtYWMucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gIHRoaXMucHVzaCh0aGlzLmRpZ2VzdCgpKVxuXG4gIG5leHQoKVxufVxuXG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciBoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuXG4gIHJldHVybiBjcmVhdGVIYXNoKHRoaXMuX2FsZykudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoZW5jKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMoYWxnLCBrZXkpIHtcbiAgcmV0dXJuIG5ldyBIbWFjKGFsZywga2V5KVxufVxuIiwidmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKVxuXG52YXIgUG9pbnQgPSByZXF1aXJlKCcuL3BvaW50JylcblxuZnVuY3Rpb24gQ3VydmUgKHAsIGEsIGIsIEd4LCBHeSwgbiwgaCkge1xuICB0aGlzLnAgPSBwXG4gIHRoaXMuYSA9IGFcbiAgdGhpcy5iID0gYlxuICB0aGlzLkcgPSBQb2ludC5mcm9tQWZmaW5lKHRoaXMsIEd4LCBHeSlcbiAgdGhpcy5uID0gblxuICB0aGlzLmggPSBoXG5cbiAgdGhpcy5pbmZpbml0eSA9IG5ldyBQb2ludCh0aGlzLCBudWxsLCBudWxsLCBCaWdJbnRlZ2VyLlpFUk8pXG5cbiAgLy8gcmVzdWx0IGNhY2hpbmdcbiAgdGhpcy5wT3ZlckZvdXIgPSBwLmFkZChCaWdJbnRlZ2VyLk9ORSkuc2hpZnRSaWdodCgyKVxuXG4gIC8vIGRldGVybWluZSBzaXplIG9mIHAgaW4gYnl0ZXNcbiAgdGhpcy5wTGVuZ3RoID0gTWF0aC5mbG9vcigodGhpcy5wLmJpdExlbmd0aCgpICsgNykgLyA4KVxufVxuXG5DdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIChpc09kZCwgeCkge1xuICB2YXIgYWxwaGEgPSB4LnBvdygzKS5hZGQodGhpcy5hLm11bHRpcGx5KHgpKS5hZGQodGhpcy5iKS5tb2QodGhpcy5wKVxuICB2YXIgYmV0YSA9IGFscGhhLm1vZFBvdyh0aGlzLnBPdmVyRm91ciwgdGhpcy5wKSAvLyBYWFg6IG5vdCBjb21wYXRpYmxlIHdpdGggYWxsIGN1cnZlc1xuXG4gIHZhciB5ID0gYmV0YVxuICBpZiAoYmV0YS5pc0V2ZW4oKSBeICFpc09kZCkge1xuICAgIHkgPSB0aGlzLnAuc3VidHJhY3QoeSkgLy8gLXkgJSBwXG4gIH1cblxuICByZXR1cm4gUG9pbnQuZnJvbUFmZmluZSh0aGlzLCB4LCB5KVxufVxuXG5DdXJ2ZS5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIChRKSB7XG4gIGlmIChRID09PSB0aGlzLmluZmluaXR5KSByZXR1cm4gdHJ1ZVxuXG4gIHJldHVybiBRLnouc2lnbnVtKCkgPT09IDAgJiYgUS55LnNpZ251bSgpICE9PSAwXG59XG5cbkN1cnZlLnByb3RvdHlwZS5pc09uQ3VydmUgPSBmdW5jdGlvbiAoUSkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KFEpKSByZXR1cm4gdHJ1ZVxuXG4gIHZhciB4ID0gUS5hZmZpbmVYXG4gIHZhciB5ID0gUS5hZmZpbmVZXG4gIHZhciBhID0gdGhpcy5hXG4gIHZhciBiID0gdGhpcy5iXG4gIHZhciBwID0gdGhpcy5wXG5cbiAgLy8gQ2hlY2sgdGhhdCB4USBhbmQgeVEgYXJlIGludGVnZXJzIGluIHRoZSBpbnRlcnZhbCBbMCwgcCAtIDFdXG4gIGlmICh4LnNpZ251bSgpIDwgMCB8fCB4LmNvbXBhcmVUbyhwKSA+PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKHkuc2lnbnVtKCkgPCAwIHx8IHkuY29tcGFyZVRvKHApID49IDApIHJldHVybiBmYWxzZVxuXG4gIC8vIGFuZCBjaGVjayB0aGF0IHleMiA9IHheMyArIGF4ICsgYiAobW9kIHApXG4gIHZhciBsaHMgPSB5LnNxdWFyZSgpLm1vZChwKVxuICB2YXIgcmhzID0geC5wb3coMykuYWRkKGEubXVsdGlwbHkoeCkpLmFkZChiKS5tb2QocClcbiAgcmV0dXJuIGxocy5lcXVhbHMocmhzKVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIGFuIGVsbGlwdGljIGN1cnZlIHBvaW50LlxuICpcbiAqIFNlZSBTRUMgMSwgc2VjdGlvbiAzLjIuMi4xOiBFbGxpcHRpYyBDdXJ2ZSBQdWJsaWMgS2V5IFZhbGlkYXRpb24gUHJpbWl0aXZlXG4gKi9cbkN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChRKSB7XG4gIC8vIENoZWNrIFEgIT0gT1xuICBhc3NlcnQoIXRoaXMuaXNJbmZpbml0eShRKSwgJ1BvaW50IGlzIGF0IGluZmluaXR5JylcbiAgYXNzZXJ0KHRoaXMuaXNPbkN1cnZlKFEpLCAnUG9pbnQgaXMgbm90IG9uIHRoZSBjdXJ2ZScpXG5cbiAgLy8gQ2hlY2sgblEgPSBPICh3aGVyZSBRIGlzIGEgc2NhbGFyIG11bHRpcGxlIG9mIEcpXG4gIHZhciBuUSA9IFEubXVsdGlwbHkodGhpcy5uKVxuICBhc3NlcnQodGhpcy5pc0luZmluaXR5KG5RKSwgJ1BvaW50IGlzIG5vdCBhIHNjYWxhciBtdWx0aXBsZSBvZiBHJylcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEN1cnZlXG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwic2VjcDEyOHIxXCI6IHtcbiAgICBcInBcIjogXCJmZmZmZmZmZGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiLFxuICAgIFwiYVwiOiBcImZmZmZmZmZkZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjXCIsXG4gICAgXCJiXCI6IFwiZTg3NTc5YzExMDc5ZjQzZGQ4MjQ5OTNjMmNlZTVlZDNcIixcbiAgICBcIm5cIjogXCJmZmZmZmZmZTAwMDAwMDAwNzVhMzBkMWI5MDM4YTExNVwiLFxuICAgIFwiaFwiOiBcIjAxXCIsXG4gICAgXCJHeFwiOiBcIjE2MWZmNzUyOGI4OTliMmQwYzI4NjA3Y2E1MmM1Yjg2XCIsXG4gICAgXCJHeVwiOiBcImNmNWFjODM5NWJhZmViMTNjMDJkYTI5MmRkZWQ3YTgzXCJcbiAgfSxcbiAgXCJzZWNwMTYwazFcIjoge1xuICAgIFwicFwiOiBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlZmZmZmFjNzNcIixcbiAgICBcImFcIjogXCIwMFwiLFxuICAgIFwiYlwiOiBcIjA3XCIsXG4gICAgXCJuXCI6IFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMWI4ZmExNmRmYWI5YWNhMTZiNmIzXCIsXG4gICAgXCJoXCI6IFwiMDFcIixcbiAgICBcIkd4XCI6IFwiM2I0YzM4MmNlMzdhYTE5MmE0MDE5ZTc2MzAzNmY0ZjVkZDRkN2ViYlwiLFxuICAgIFwiR3lcIjogXCI5MzhjZjkzNTMxOGZkY2VkNmJjMjgyODY1MzE3MzNjM2YwM2M0ZmVlXCJcbiAgfSxcbiAgXCJzZWNwMTYwcjFcIjoge1xuICAgIFwicFwiOiBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmN2ZmZmZmZmZcIixcbiAgICBcImFcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjdmZmZmZmZjXCIsXG4gICAgXCJiXCI6IFwiMWM5N2JlZmM1NGJkN2E4YjY1YWNmODlmODFkNGQ0YWRjNTY1ZmE0NVwiLFxuICAgIFwiblwiOiBcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFmNGM4ZjkyN2FlZDNjYTc1MjI1N1wiLFxuICAgIFwiaFwiOiBcIjAxXCIsXG4gICAgXCJHeFwiOiBcIjRhOTZiNTY4OGVmNTczMjg0NjY0Njk4OTY4YzM4YmI5MTNjYmZjODJcIixcbiAgICBcIkd5XCI6IFwiMjNhNjI4NTUzMTY4OTQ3ZDU5ZGNjOTEyMDQyMzUxMzc3YWM1ZmIzMlwiXG4gIH0sXG4gIFwic2VjcDE5MmsxXCI6IHtcbiAgICBcInBcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlZmZmZmVlMzdcIixcbiAgICBcImFcIjogXCIwMFwiLFxuICAgIFwiYlwiOiBcIjAzXCIsXG4gICAgXCJuXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlMjZmMmZjMTcwZjY5NDY2YTc0ZGVmZDhkXCIsXG4gICAgXCJoXCI6IFwiMDFcIixcbiAgICBcIkd4XCI6IFwiZGI0ZmYxMGVjMDU3ZTlhZTI2YjA3ZDAyODBiN2Y0MzQxZGE1ZDFiMWVhZTA2YzdkXCIsXG4gICAgXCJHeVwiOiBcIjliMmYyZjZkOWM1NjI4YTc4NDQxNjNkMDE1YmU4NjM0NDA4MmFhODhkOTVlMmY5ZFwiXG4gIH0sXG4gIFwic2VjcDE5MnIxXCI6IHtcbiAgICBcInBcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmZmZmZmZmZmZmZmZcIixcbiAgICBcImFcIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmZmZmZmZmZmZmZmNcIixcbiAgICBcImJcIjogXCI2NDIxMDUxOWU1OWM4MGU3MGZhN2U5YWI3MjI0MzA0OWZlYjhkZWVjYzE0NmI5YjFcIixcbiAgICBcIm5cIjogXCJmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY5OWRlZjgzNjE0NmJjOWIxYjRkMjI4MzFcIixcbiAgICBcImhcIjogXCIwMVwiLFxuICAgIFwiR3hcIjogXCIxODhkYTgwZWIwMzA5MGY2N2NiZjIwZWI0M2ExODgwMGY0ZmYwYWZkODJmZjEwMTJcIixcbiAgICBcIkd5XCI6IFwiMDcxOTJiOTVmZmM4ZGE3ODYzMTAxMWVkNmIyNGNkZDU3M2Y5NzdhMTFlNzk0ODExXCJcbiAgfSxcbiAgXCJzZWNwMjU2azFcIjoge1xuICAgIFwicFwiOiBcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlZmZmZmZjMmZcIixcbiAgICBcImFcIjogXCIwMFwiLFxuICAgIFwiYlwiOiBcIjA3XCIsXG4gICAgXCJuXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MVwiLFxuICAgIFwiaFwiOiBcIjAxXCIsXG4gICAgXCJHeFwiOiBcIjc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OThcIixcbiAgICBcIkd5XCI6IFwiNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOFwiXG4gIH0sXG4gIFwic2VjcDI1NnIxXCI6IHtcbiAgICBcInBcIjogXCJmZmZmZmZmZjAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIsXG4gICAgXCJhXCI6IFwiZmZmZmZmZmYwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY1wiLFxuICAgIFwiYlwiOiBcIjVhYzYzNWQ4YWEzYTkzZTdiM2ViYmQ1NTc2OTg4NmJjNjUxZDA2YjBjYzUzYjBmNjNiY2UzYzNlMjdkMjYwNGJcIixcbiAgICBcIm5cIjogXCJmZmZmZmZmZjAwMDAwMDAwZmZmZmZmZmZmZmZmZmZmZmJjZTZmYWFkYTcxNzllODRmM2I5Y2FjMmZjNjMyNTUxXCIsXG4gICAgXCJoXCI6IFwiMDFcIixcbiAgICBcIkd4XCI6IFwiNmIxN2QxZjJlMTJjNDI0N2Y4YmNlNmU1NjNhNDQwZjI3NzAzN2Q4MTJkZWIzM2EwZjRhMTM5NDVkODk4YzI5NlwiLFxuICAgIFwiR3lcIjogXCI0ZmUzNDJlMmZlMWE3ZjliOGVlN2ViNGE3YzBmOWUxNjJiY2UzMzU3NmIzMTVlY2VjYmI2NDA2ODM3YmY1MWY1XCJcbiAgfVxufVxuIiwidmFyIFBvaW50ID0gcmVxdWlyZSgnLi9wb2ludCcpXG52YXIgQ3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJylcblxudmFyIGdldEN1cnZlQnlOYW1lID0gcmVxdWlyZSgnLi9uYW1lcycpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDdXJ2ZTogQ3VydmUsXG4gIFBvaW50OiBQb2ludCxcbiAgZ2V0Q3VydmVCeU5hbWU6IGdldEN1cnZlQnlOYW1lXG59XG4iLCJ2YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoJ2JpZ2knKVxuXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG52YXIgQ3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJylcblxuZnVuY3Rpb24gZ2V0Q3VydmVCeU5hbWUgKG5hbWUpIHtcbiAgdmFyIGN1cnZlID0gY3VydmVzW25hbWVdXG4gIGlmICghY3VydmUpIHJldHVybiBudWxsXG5cbiAgdmFyIHAgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5wLCAxNilcbiAgdmFyIGEgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5hLCAxNilcbiAgdmFyIGIgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5iLCAxNilcbiAgdmFyIG4gPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5uLCAxNilcbiAgdmFyIGggPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5oLCAxNilcbiAgdmFyIEd4ID0gbmV3IEJpZ0ludGVnZXIoY3VydmUuR3gsIDE2KVxuICB2YXIgR3kgPSBuZXcgQmlnSW50ZWdlcihjdXJ2ZS5HeSwgMTYpXG5cbiAgcmV0dXJuIG5ldyBDdXJ2ZShwLCBhLCBiLCBHeCwgR3ksIG4sIGgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q3VydmVCeU5hbWVcbiIsInZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxudmFyIEJpZ0ludGVnZXIgPSByZXF1aXJlKCdiaWdpJylcblxudmFyIFRIUkVFID0gQmlnSW50ZWdlci52YWx1ZU9mKDMpXG5cbmZ1bmN0aW9uIFBvaW50IChjdXJ2ZSwgeCwgeSwgeikge1xuICBhc3NlcnQubm90U3RyaWN0RXF1YWwoeiwgdW5kZWZpbmVkLCAnTWlzc2luZyBaIGNvb3JkaW5hdGUnKVxuXG4gIHRoaXMuY3VydmUgPSBjdXJ2ZVxuICB0aGlzLnggPSB4XG4gIHRoaXMueSA9IHlcbiAgdGhpcy56ID0gelxuICB0aGlzLl96SW52ID0gbnVsbFxuXG4gIHRoaXMuY29tcHJlc3NlZCA9IHRydWVcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBvaW50LnByb3RvdHlwZSwgJ3pJbnYnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl96SW52ID09PSBudWxsKSB7XG4gICAgICB0aGlzLl96SW52ID0gdGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5wKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl96SW52XG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsICdhZmZpbmVYJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy54Lm11bHRpcGx5KHRoaXMuekludikubW9kKHRoaXMuY3VydmUucClcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBvaW50LnByb3RvdHlwZSwgJ2FmZmluZVknLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnkubXVsdGlwbHkodGhpcy56SW52KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB9XG59KVxuXG5Qb2ludC5mcm9tQWZmaW5lID0gZnVuY3Rpb24gKGN1cnZlLCB4LCB5KSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIHgsIHksIEJpZ0ludGVnZXIuT05FKVxufVxuXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIGlmIChvdGhlciA9PT0gdGhpcykgcmV0dXJuIHRydWVcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIHRoaXMuY3VydmUuaXNJbmZpbml0eShvdGhlcilcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eShvdGhlcikpIHJldHVybiB0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcylcblxuICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgdmFyIHUgPSBvdGhlci55Lm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55Lm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIGlmICh1LnNpZ251bSgpICE9PSAwKSByZXR1cm4gZmFsc2VcblxuICAvLyB2ID0gWDIgKiBaMSAtIFgxICogWjJcbiAgdmFyIHYgPSBvdGhlci54Lm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54Lm11bHRpcGx5KG90aGVyLnopKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiB2LnNpZ251bSgpID09PSAwXG59XG5cblBvaW50LnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB5ID0gdGhpcy5jdXJ2ZS5wLnN1YnRyYWN0KHRoaXMueSlcblxuICByZXR1cm4gbmV3IFBvaW50KHRoaXMuY3VydmUsIHRoaXMueCwgeSwgdGhpcy56KVxufVxuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuIGJcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eShiKSkgcmV0dXJuIHRoaXNcblxuICB2YXIgeDEgPSB0aGlzLnhcbiAgdmFyIHkxID0gdGhpcy55XG4gIHZhciB4MiA9IGIueFxuICB2YXIgeTIgPSBiLnlcblxuICAvLyB1ID0gWTIgKiBaMSAtIFkxICogWjJcbiAgdmFyIHUgPSB5Mi5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHkxLm11bHRpcGx5KGIueikpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHYgPSBYMiAqIFoxIC0gWDEgKiBaMlxuICB2YXIgdiA9IHgyLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QoeDEubXVsdGlwbHkoYi56KSkubW9kKHRoaXMuY3VydmUucClcblxuICBpZiAodi5zaWdudW0oKSA9PT0gMCkge1xuICAgIGlmICh1LnNpZ251bSgpID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50d2ljZSgpIC8vIHRoaXMgPT0gYiwgc28gZG91YmxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHkgLy8gdGhpcyA9IC1iLCBzbyBpbmZpbml0eVxuICB9XG5cbiAgdmFyIHYyID0gdi5zcXVhcmUoKVxuICB2YXIgdjMgPSB2Mi5tdWx0aXBseSh2KVxuICB2YXIgeDF2MiA9IHgxLm11bHRpcGx5KHYyKVxuICB2YXIgenUyID0gdS5zcXVhcmUoKS5tdWx0aXBseSh0aGlzLnopXG5cbiAgLy8geDMgPSB2ICogKHoyICogKHoxICogdV4yIC0gMiAqIHgxICogdl4yKSAtIHZeMylcbiAgdmFyIHgzID0genUyLnN1YnRyYWN0KHgxdjIuc2hpZnRMZWZ0KDEpKS5tdWx0aXBseShiLnopLnN1YnRyYWN0KHYzKS5tdWx0aXBseSh2KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB5MyA9IHoyICogKDMgKiB4MSAqIHUgKiB2XjIgLSB5MSAqIHZeMyAtIHoxICogdV4zKSArIHUgKiB2XjNcbiAgdmFyIHkzID0geDF2Mi5tdWx0aXBseShUSFJFRSkubXVsdGlwbHkodSkuc3VidHJhY3QoeTEubXVsdGlwbHkodjMpKS5zdWJ0cmFjdCh6dTIubXVsdGlwbHkodSkpLm11bHRpcGx5KGIueikuYWRkKHUubXVsdGlwbHkodjMpKS5tb2QodGhpcy5jdXJ2ZS5wKVxuICAvLyB6MyA9IHZeMyAqIHoxICogejJcbiAgdmFyIHozID0gdjMubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShiLnopLm1vZCh0aGlzLmN1cnZlLnApXG5cbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmN1cnZlLCB4MywgeTMsIHozKVxufVxuXG5Qb2ludC5wcm90b3R5cGUudHdpY2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiB0aGlzXG4gIGlmICh0aGlzLnkuc2lnbnVtKCkgPT09IDApIHJldHVybiB0aGlzLmN1cnZlLmluZmluaXR5XG5cbiAgdmFyIHgxID0gdGhpcy54XG4gIHZhciB5MSA9IHRoaXMueVxuXG4gIHZhciB5MXoxID0geTEubXVsdGlwbHkodGhpcy56KS5tb2QodGhpcy5jdXJ2ZS5wKVxuICB2YXIgeTFzcXoxID0geTF6MS5tdWx0aXBseSh5MSkubW9kKHRoaXMuY3VydmUucClcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmFcblxuICAvLyB3ID0gMyAqIHgxXjIgKyBhICogejFeMlxuICB2YXIgdyA9IHgxLnNxdWFyZSgpLm11bHRpcGx5KFRIUkVFKVxuXG4gIGlmIChhLnNpZ251bSgpICE9PSAwKSB7XG4gICAgdyA9IHcuYWRkKHRoaXMuei5zcXVhcmUoKS5tdWx0aXBseShhKSlcbiAgfVxuXG4gIHcgPSB3Lm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHgzID0gMiAqIHkxICogejEgKiAod14yIC0gOCAqIHgxICogeTFeMiAqIHoxKVxuICB2YXIgeDMgPSB3LnNxdWFyZSgpLnN1YnRyYWN0KHgxLnNoaWZ0TGVmdCgzKS5tdWx0aXBseSh5MXNxejEpKS5zaGlmdExlZnQoMSkubXVsdGlwbHkoeTF6MSkubW9kKHRoaXMuY3VydmUucClcbiAgLy8geTMgPSA0ICogeTFeMiAqIHoxICogKDMgKiB3ICogeDEgLSAyICogeTFeMiAqIHoxKSAtIHdeM1xuICB2YXIgeTMgPSB3Lm11bHRpcGx5KFRIUkVFKS5tdWx0aXBseSh4MSkuc3VidHJhY3QoeTFzcXoxLnNoaWZ0TGVmdCgxKSkuc2hpZnRMZWZ0KDIpLm11bHRpcGx5KHkxc3F6MSkuc3VidHJhY3Qody5wb3coMykpLm1vZCh0aGlzLmN1cnZlLnApXG4gIC8vIHozID0gOCAqICh5MSAqIHoxKV4zXG4gIHZhciB6MyA9IHkxejEucG93KDMpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5wKVxuXG4gIHJldHVybiBuZXcgUG9pbnQodGhpcy5jdXJ2ZSwgeDMsIHkzLCB6Mylcbn1cblxuLy8gU2ltcGxlIE5BRiAoTm9uLUFkamFjZW50IEZvcm0pIG11bHRpcGxpY2F0aW9uIGFsZ29yaXRobVxuLy8gVE9ETzogbW9kdWxhcml6ZSB0aGUgbXVsdGlwbGljYXRpb24gYWxnb3JpdGhtXG5Qb2ludC5wcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiAoaykge1xuICBpZiAodGhpcy5jdXJ2ZS5pc0luZmluaXR5KHRoaXMpKSByZXR1cm4gdGhpc1xuICBpZiAoay5zaWdudW0oKSA9PT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuaW5maW5pdHlcblxuICB2YXIgZSA9IGtcbiAgdmFyIGggPSBlLm11bHRpcGx5KFRIUkVFKVxuXG4gIHZhciBuZWcgPSB0aGlzLm5lZ2F0ZSgpXG4gIHZhciBSID0gdGhpc1xuXG4gIGZvciAodmFyIGkgPSBoLmJpdExlbmd0aCgpIC0gMjsgaSA+IDA7IC0taSkge1xuICAgIHZhciBoQml0ID0gaC50ZXN0Qml0KGkpXG4gICAgdmFyIGVCaXQgPSBlLnRlc3RCaXQoaSlcblxuICAgIFIgPSBSLnR3aWNlKClcblxuICAgIGlmIChoQml0ICE9PSBlQml0KSB7XG4gICAgICBSID0gUi5hZGQoaEJpdCA/IHRoaXMgOiBuZWcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJcbn1cblxuLy8gQ29tcHV0ZSB0aGlzKmogKyB4KmsgKHNpbXVsdGFuZW91cyBtdWx0aXBsaWNhdGlvbilcblBvaW50LnByb3RvdHlwZS5tdWx0aXBseVR3byA9IGZ1bmN0aW9uIChqLCB4LCBrKSB7XG4gIHZhciBpID0gTWF0aC5tYXgoai5iaXRMZW5ndGgoKSwgay5iaXRMZW5ndGgoKSkgLSAxXG4gIHZhciBSID0gdGhpcy5jdXJ2ZS5pbmZpbml0eVxuICB2YXIgYm90aCA9IHRoaXMuYWRkKHgpXG5cbiAgd2hpbGUgKGkgPj0gMCkge1xuICAgIHZhciBqQml0ID0gai50ZXN0Qml0KGkpXG4gICAgdmFyIGtCaXQgPSBrLnRlc3RCaXQoaSlcblxuICAgIFIgPSBSLnR3aWNlKClcblxuICAgIGlmIChqQml0KSB7XG4gICAgICBpZiAoa0JpdCkge1xuICAgICAgICBSID0gUi5hZGQoYm90aClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFIgPSBSLmFkZCh0aGlzKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa0JpdCkge1xuICAgICAgUiA9IFIuYWRkKHgpXG4gICAgfVxuICAgIC0taVxuICB9XG5cbiAgcmV0dXJuIFJcbn1cblxuUG9pbnQucHJvdG90eXBlLmdldEVuY29kZWQgPSBmdW5jdGlvbiAoY29tcHJlc3NlZCkge1xuICBpZiAoY29tcHJlc3NlZCA9PSBudWxsKSBjb21wcmVzc2VkID0gdGhpcy5jb21wcmVzc2VkXG4gIGlmICh0aGlzLmN1cnZlLmlzSW5maW5pdHkodGhpcykpIHJldHVybiBuZXcgQnVmZmVyKCcwMCcsICdoZXgnKSAvLyBJbmZpbml0eSBwb2ludCBlbmNvZGVkIGlzIHNpbXBseSAnMDAnXG5cbiAgdmFyIHggPSB0aGlzLmFmZmluZVhcbiAgdmFyIHkgPSB0aGlzLmFmZmluZVlcbiAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmN1cnZlLnBMZW5ndGhcbiAgdmFyIGJ1ZmZlclxuXG4gIC8vIDB4MDIvMHgwMyB8IFhcbiAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICBidWZmZXIgPSBuZXcgQnVmZmVyKDEgKyBieXRlTGVuZ3RoKVxuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KHkuaXNFdmVuKCkgPyAweDAyIDogMHgwMywgMClcblxuICAvLyAweDA0IHwgWCB8IFlcbiAgfSBlbHNlIHtcbiAgICBidWZmZXIgPSBuZXcgQnVmZmVyKDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aClcbiAgICBidWZmZXIud3JpdGVVSW50OCgweDA0LCAwKVxuXG4gICAgeS50b0J1ZmZlcihieXRlTGVuZ3RoKS5jb3B5KGJ1ZmZlciwgMSArIGJ5dGVMZW5ndGgpXG4gIH1cblxuICB4LnRvQnVmZmVyKGJ5dGVMZW5ndGgpLmNvcHkoYnVmZmVyLCAxKVxuXG4gIHJldHVybiBidWZmZXJcbn1cblxuUG9pbnQuZGVjb2RlRnJvbSA9IGZ1bmN0aW9uIChjdXJ2ZSwgYnVmZmVyKSB7XG4gIHZhciB0eXBlID0gYnVmZmVyLnJlYWRVSW50OCgwKVxuICB2YXIgY29tcHJlc3NlZCA9ICh0eXBlICE9PSA0KVxuXG4gIHZhciBieXRlTGVuZ3RoID0gTWF0aC5mbG9vcigoY3VydmUucC5iaXRMZW5ndGgoKSArIDcpIC8gOClcbiAgdmFyIHggPSBCaWdJbnRlZ2VyLmZyb21CdWZmZXIoYnVmZmVyLnNsaWNlKDEsIDEgKyBieXRlTGVuZ3RoKSlcblxuICB2YXIgUVxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIGFzc2VydC5lcXVhbChidWZmZXIubGVuZ3RoLCBieXRlTGVuZ3RoICsgMSwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcbiAgICBhc3NlcnQodHlwZSA9PT0gMHgwMiB8fCB0eXBlID09PSAweDAzLCAnSW52YWxpZCBzZXF1ZW5jZSB0YWcnKVxuXG4gICAgdmFyIGlzT2RkID0gKHR5cGUgPT09IDB4MDMpXG4gICAgUSA9IGN1cnZlLnBvaW50RnJvbVgoaXNPZGQsIHgpXG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlci5sZW5ndGgsIDEgKyBieXRlTGVuZ3RoICsgYnl0ZUxlbmd0aCwgJ0ludmFsaWQgc2VxdWVuY2UgbGVuZ3RoJylcblxuICAgIHZhciB5ID0gQmlnSW50ZWdlci5mcm9tQnVmZmVyKGJ1ZmZlci5zbGljZSgxICsgYnl0ZUxlbmd0aCkpXG4gICAgUSA9IFBvaW50LmZyb21BZmZpbmUoY3VydmUsIHgsIHkpXG4gIH1cblxuICBRLmNvbXByZXNzZWQgPSBjb21wcmVzc2VkXG4gIHJldHVybiBRXG59XG5cblBvaW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY3VydmUuaXNJbmZpbml0eSh0aGlzKSkgcmV0dXJuICcoSU5GSU5JVFkpJ1xuXG4gIHJldHVybiAnKCcgKyB0aGlzLmFmZmluZVgudG9TdHJpbmcoKSArICcsJyArIHRoaXMuYWZmaW5lWS50b1N0cmluZygpICsgJyknXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIvLyBjb25zdGFudC1zcGFjZSBtZXJrbGUgcm9vdCBjYWxjdWxhdGlvbiBhbGdvcml0aG1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmFzdFJvb3QgKHZhbHVlcywgZGlnZXN0Rm4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgdmFsdWVzIEFycmF5JylcbiAgaWYgKHR5cGVvZiBkaWdlc3RGbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBkaWdlc3QgRnVuY3Rpb24nKVxuXG4gIHZhciBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoXG4gIHZhciByZXN1bHQgPSB2YWx1ZXMuY29uY2F0KClcblxuICB3aGlsZSAobGVuZ3RoID4gMSkge1xuICAgIHZhciBqID0gMFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMiwgKytqKSB7XG4gICAgICB2YXIgaW5wdXQgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgICAgcmVzdWx0W2ldLFxuICAgICAgICBpICsgMSAhPT0gbGVuZ3RoID8gcmVzdWx0W2kgKyAxXSA6IHJlc3VsdFtpXVxuICAgICAgXSlcblxuICAgICAgcmVzdWx0W2pdID0gZGlnZXN0Rm4oaW5wdXQpXG4gICAgfVxuXG4gICAgbGVuZ3RoID0galxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFswXVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IG5leHRUaWNrO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzLm5leHRUaWNrO1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIE9QUyA9IHJlcXVpcmUoJ2JpdGNvaW4tb3BzJylcblxuZnVuY3Rpb24gZW5jb2RpbmdMZW5ndGggKGkpIHtcbiAgcmV0dXJuIGkgPCBPUFMuT1BfUFVTSERBVEExID8gMVxuICA6IGkgPD0gMHhmZiA/IDJcbiAgOiBpIDw9IDB4ZmZmZiA/IDNcbiAgOiA1XG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoYnVmZmVyLCBudW1iZXIsIG9mZnNldCkge1xuICB2YXIgc2l6ZSA9IGVuY29kaW5nTGVuZ3RoKG51bWJlcilcblxuICAvLyB+NiBiaXRcbiAgaWYgKHNpemUgPT09IDEpIHtcbiAgICBidWZmZXIud3JpdGVVSW50OChudW1iZXIsIG9mZnNldClcblxuICAvLyA4IGJpdFxuICB9IGVsc2UgaWYgKHNpemUgPT09IDIpIHtcbiAgICBidWZmZXIud3JpdGVVSW50OChPUFMuT1BfUFVTSERBVEExLCBvZmZzZXQpXG4gICAgYnVmZmVyLndyaXRlVUludDgobnVtYmVyLCBvZmZzZXQgKyAxKVxuXG4gIC8vIDE2IGJpdFxuICB9IGVsc2UgaWYgKHNpemUgPT09IDMpIHtcbiAgICBidWZmZXIud3JpdGVVSW50OChPUFMuT1BfUFVTSERBVEEyLCBvZmZzZXQpXG4gICAgYnVmZmVyLndyaXRlVUludDE2TEUobnVtYmVyLCBvZmZzZXQgKyAxKVxuXG4gIC8vIDMyIGJpdFxuICB9IGVsc2Uge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KE9QUy5PUF9QVVNIREFUQTQsIG9mZnNldClcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRShudW1iZXIsIG9mZnNldCArIDEpXG4gIH1cblxuICByZXR1cm4gc2l6ZVxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gIHZhciBvcGNvZGUgPSBidWZmZXIucmVhZFVJbnQ4KG9mZnNldClcbiAgdmFyIG51bWJlciwgc2l6ZVxuXG4gIC8vIH42IGJpdFxuICBpZiAob3Bjb2RlIDwgT1BTLk9QX1BVU0hEQVRBMSkge1xuICAgIG51bWJlciA9IG9wY29kZVxuICAgIHNpemUgPSAxXG5cbiAgLy8gOCBiaXRcbiAgfSBlbHNlIGlmIChvcGNvZGUgPT09IE9QUy5PUF9QVVNIREFUQTEpIHtcbiAgICBpZiAob2Zmc2V0ICsgMiA+IGJ1ZmZlci5sZW5ndGgpIHJldHVybiBudWxsXG4gICAgbnVtYmVyID0gYnVmZmVyLnJlYWRVSW50OChvZmZzZXQgKyAxKVxuICAgIHNpemUgPSAyXG5cbiAgLy8gMTYgYml0XG4gIH0gZWxzZSBpZiAob3Bjb2RlID09PSBPUFMuT1BfUFVTSERBVEEyKSB7XG4gICAgaWYgKG9mZnNldCArIDMgPiBidWZmZXIubGVuZ3RoKSByZXR1cm4gbnVsbFxuICAgIG51bWJlciA9IGJ1ZmZlci5yZWFkVUludDE2TEUob2Zmc2V0ICsgMSlcbiAgICBzaXplID0gM1xuXG4gIC8vIDMyIGJpdFxuICB9IGVsc2Uge1xuICAgIGlmIChvZmZzZXQgKyA1ID4gYnVmZmVyLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICBpZiAob3Bjb2RlICE9PSBPUFMuT1BfUFVTSERBVEE0KSB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgb3Bjb2RlJylcblxuICAgIG51bWJlciA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0ICsgMSlcbiAgICBzaXplID0gNVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvcGNvZGU6IG9wY29kZSxcbiAgICBudW1iZXI6IG51bWJlcixcbiAgICBzaXplOiBzaXplXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kaW5nTGVuZ3RoOiBlbmNvZGluZ0xlbmd0aCxcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGRlY29kZTogZGVjb2RlXG59XG4iLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclxcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxuXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cblxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXNcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gb2xkQnJvd3NlclxufVxuXG5mdW5jdGlvbiByYW5kb21CeXRlcyAoc2l6ZSwgY2IpIHtcbiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93XG4gIGlmIChzaXplID4gNjU1MzYpIHRocm93IG5ldyBFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpXG4gIC8vIGluIGNhc2UgYnJvd3NlcmlmeSAgaXNuJ3QgdXNpbmcgdGhlIFVpbnQ4QXJyYXkgdmVyc2lvblxuICB2YXIgcmF3Qnl0ZXMgPSBuZXcgZ2xvYmFsLlVpbnQ4QXJyYXkoc2l6ZSlcblxuICAvLyBUaGlzIHdpbGwgbm90IHdvcmsgaW4gb2xkZXIgYnJvd3NlcnMuXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgaWYgKHNpemUgPiAwKSB7ICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFpbHMgb24gSUUgaWYgc2l6ZSA9PSAwXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYXdCeXRlcylcbiAgfVxuICAvLyBwaGFudG9tanMgZG9lc24ndCBsaWtlIGEgYnVmZmVyIGJlaW5nIHBhc3NlZCBoZXJlXG4gIHZhciBieXRlcyA9IG5ldyBCdWZmZXIocmF3Qnl0ZXMuYnVmZmVyKVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYihudWxsLCBieXRlcylcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKVxuIiwiLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG52YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbmZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwcm9jZXNzTmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn0iLCIvLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW07XG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0JyArICdyZWFtJyk7XG4gIH0gY2F0Y2ggKF8pIHt9IGZpbmFsbHkge1xuICAgIGlmICghU3RyZWFtKSBTdHJlYW0gPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4gIH1cbn0pKCk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHVuZGVmaW5lZDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBEdXBsZXg7XG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+IH50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5idWZmZXIgPSBbXTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuXG4gIC8vIGFmdGVyIHJlYWQoKWluZyBhbGwgdGhlIGJ5dGVzIGFuZCBub3QgZ2V0dGluZyBhbnkgcHVzaGJhY2suXG4gIHRoaXMucmFuT3V0ID0gZmFsc2U7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbnZhciBEdXBsZXg7XG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICBlbmNvZGluZyA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssICcnLCB0cnVlKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkge1xuICB2YXIgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2UgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHN0YXRlLmVuZGVkICYmICFhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kRW1pdHRlZCAmJiBhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2tpcEFkZDtcbiAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICBza2lwQWRkID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgY2h1bmsubGVuZ3RoID09PSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFkZFRvRnJvbnQpIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRG9uJ3QgYWRkIHRvIHRoZSBidWZmZXIgaWYgd2UndmUgZGVjb2RlZCB0byBhbiBlbXB0eSBzdHJpbmcgY2h1bmsgYW5kXG4gICAgICAvLyB3ZSdyZSBub3QgaW4gb2JqZWN0IG1vZGVcbiAgICAgIGlmICghc2tpcEFkZCkge1xuICAgICAgICAvLyBpZiB3ZSB3YW50IHRoZSBkYXRhIG5vdywganVzdCBlbWl0IGl0LlxuICAgICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICAgICAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcblxuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIG4gPT09IDAgPyAwIDogMTtcblxuICBpZiAobiA9PT0gbnVsbCB8fCBpc05hTihuKSkge1xuICAgIC8vIG9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXJbMF0ubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChuIDw9IDApIHJldHVybiAwO1xuXG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSB0YXJnZXQgYnVmZmVyIGxldmVsLFxuICAvLyB0aGVuIHJhaXNlIHRoZSB3YXRlciBtYXJrLiAgQnVtcCB1cCB0byB0aGUgbmV4dCBoaWdoZXN0XG4gIC8vIHBvd2VyIG9mIDIsIHRvIHByZXZlbnQgaW5jcmVhc2luZyBpdCBleGNlc3NpdmVseSBpbiB0aW55XG4gIC8vIGFtb3VudHMuXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuXG4gIC8vIGRvbid0IGhhdmUgdGhhdCBtdWNoLiAgcmV0dXJuIG51bGwsIHVubGVzcyB3ZSd2ZSBlbmRlZC5cbiAgaWYgKG4gPiBzdGF0ZS5sZW5ndGgpIHtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG47XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuID4gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfVxuXG4gIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gIH1cblxuICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gIGlmIChkb1JlYWQgJiYgIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9XG5cbiAgc3RhdGUubGVuZ3RoIC09IG47XG5cbiAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlciA9IG51bGw7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcHJvY2Vzc05leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogY2xlYW51cDtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3NOZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlc1swXSA9PT0gZGVzdCAmJiBzcmMubGlzdGVuZXJDb3VudCgnZGF0YScpID09PSAxICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cbiAgLy8gVGhpcyBpcyBhIGJydXRhbGx5IHVnbHkgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlclxuICAvLyBpcyBhdHRhY2hlZCBiZWZvcmUgYW55IHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLlxuICBpZiAoIWRlc3QuX2V2ZW50cyB8fCAhZGVzdC5fZXZlbnRzLmVycm9yKSBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO2Vsc2UgaWYgKGlzQXJyYXkoZGVzdC5fZXZlbnRzLmVycm9yKSkgZGVzdC5fZXZlbnRzLmVycm9yLnVuc2hpZnQob25lcnJvcik7ZWxzZSBkZXN0Ll9ldmVudHMuZXJyb3IgPSBbb25lcnJvciwgZGVzdC5fZXZlbnRzLmVycm9yXTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGVuOyBfaSsrKSB7XG4gICAgICBkZXN0c1tfaV0uZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGkgPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGkgPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaSwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICAvLyBJZiBsaXN0ZW5pbmcgdG8gZGF0YSwgYW5kIGl0IGhhcyBub3QgZXhwbGljaXRseSBiZWVuIHBhdXNlZCxcbiAgLy8gdGhlbiBjYWxsIHJlc3VtZSB0byBzdGFydCB0aGUgZmxvdyBvZiBkYXRhIG9uIHRoZSBuZXh0IHRpY2suXG4gIGlmIChldiA9PT0gJ2RhdGEnICYmIGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICB0aGlzLnJlc3VtZSgpO1xuICB9XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwcm9jZXNzTmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcywgc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHByb2Nlc3NOZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgY2h1bmsgPSBzdHJlYW0ucmVhZCgpO1xuICAgIH0gd2hpbGUgKG51bGwgIT09IGNodW5rICYmIHN0YXRlLmZsb3dpbmcpO1xuICB9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBzZWxmLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHNlbGYucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgdmFyIGV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcbiAgZm9yRWFjaChldmVudHMsIGZ1bmN0aW9uIChldikge1xuICAgIHN0cmVhbS5vbihldiwgc2VsZi5lbWl0LmJpbmQoc2VsZiwgZXYpKTtcbiAgfSk7XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgc2VsZi5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIHZhciBsaXN0ID0gc3RhdGUuYnVmZmVyO1xuICB2YXIgbGVuZ3RoID0gc3RhdGUubGVuZ3RoO1xuICB2YXIgc3RyaW5nTW9kZSA9ICEhc3RhdGUuZGVjb2RlcjtcbiAgdmFyIG9iamVjdE1vZGUgPSAhIXN0YXRlLm9iamVjdE1vZGU7XG4gIHZhciByZXQ7XG5cbiAgLy8gbm90aGluZyBpbiB0aGUgbGlzdCwgZGVmaW5pdGVseSBlbXB0eS5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICBpZiAobGVuZ3RoID09PSAwKSByZXQgPSBudWxsO2Vsc2UgaWYgKG9iamVjdE1vZGUpIHJldCA9IGxpc3Quc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IGxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgYXJyYXkuXG4gICAgaWYgKHN0cmluZ01vZGUpIHJldCA9IGxpc3Quam9pbignJyk7ZWxzZSBpZiAobGlzdC5sZW5ndGggPT09IDEpIHJldCA9IGxpc3RbMF07ZWxzZSByZXQgPSBCdWZmZXIuY29uY2F0KGxpc3QsIGxlbmd0aCk7XG4gICAgbGlzdC5sZW5ndGggPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQganVzdCBzb21lIG9mIGl0LlxuICAgIGlmIChuIDwgbGlzdFswXS5sZW5ndGgpIHtcbiAgICAgIC8vIGp1c3QgdGFrZSBhIHBhcnQgb2YgdGhlIGZpcnN0IGxpc3QgaXRlbS5cbiAgICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzLlxuICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG4gICAgICByZXQgPSBidWYuc2xpY2UoMCwgbik7XG4gICAgICBsaXN0WzBdID0gYnVmLnNsaWNlKG4pO1xuICAgIH0gZWxzZSBpZiAobiA9PT0gbGlzdFswXS5sZW5ndGgpIHtcbiAgICAgIC8vIGZpcnN0IGxpc3QgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbXBsZXggY2FzZS5cbiAgICAgIC8vIHdlIGhhdmUgZW5vdWdoIHRvIGNvdmVyIGl0LCBidXQgaXQgc3BhbnMgcGFzdCB0aGUgZmlyc3QgYnVmZmVyLlxuICAgICAgaWYgKHN0cmluZ01vZGUpIHJldCA9ICcnO2Vsc2UgcmV0ID0gbmV3IEJ1ZmZlcihuKTtcblxuICAgICAgdmFyIGMgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGwgJiYgYyA8IG47IGkrKykge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFswXTtcbiAgICAgICAgdmFyIGNweSA9IE1hdGgubWluKG4gLSBjLCBidWYubGVuZ3RoKTtcblxuICAgICAgICBpZiAoc3RyaW5nTW9kZSkgcmV0ICs9IGJ1Zi5zbGljZSgwLCBjcHkpO2Vsc2UgYnVmLmNvcHkocmV0LCBjLCAwLCBjcHkpO1xuXG4gICAgICAgIGlmIChjcHkgPCBidWYubGVuZ3RoKSBsaXN0WzBdID0gYnVmLnNsaWNlKGNweSk7ZWxzZSBsaXN0LnNoaWZ0KCk7XG5cbiAgICAgICAgYyArPSBjcHk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignZW5kUmVhZGFibGUgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcHJvY2Vzc05leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gVHJhbnNmb3JtU3RhdGUoc3RyZWFtKSB7XG4gIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRoaXMud3JpdGVlbmNvZGluZyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdubyB3cml0ZWNiIGluIFRyYW5zZm9ybSBjbGFzcycpKTtcblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKSBzdHJlYW0ucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUodGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyKSB7XG4gICAgICBkb25lKHN0cmVhbSwgZXIpO1xuICAgIH0pO2Vsc2UgZG9uZShzdHJlYW0pO1xuICB9KTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIHZhciB3cyA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAod3MubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmICh0cy50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIvLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcHJvY2Vzc05leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW07XG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0JyArICdyZWFtJyk7XG4gIH0gY2F0Y2ggKF8pIHt9IGZpbmFsbHkge1xuICAgIGlmICghU3RyZWFtKSBTdHJlYW0gPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4gIH1cbn0pKCk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG52YXIgRHVwbGV4O1xuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+IH50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gY3JlYXRlIHRoZSB0d28gb2JqZWN0cyBuZWVkZWQgdG8gc3RvcmUgdGhlIGNvcmtlZCByZXF1ZXN0c1xuICAvLyB0aGV5IGFyZSBub3QgYSBsaW5rZWQgbGlzdCwgYXMgbm8gbmV3IGVsZW1lbnRzIGFyZSBpbnNlcnRlZCBpbiB0aGVyZVxuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVHZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxudmFyIER1cGxleDtcbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRob3VnaCB0aGV5J3JlIG5vdFxuICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBXcml0YWJsZSkgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLiBOb3QgcmVhZGFibGUuJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcHJvY2Vzc05leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIElmIHdlIGdldCBzb21ldGhpbmcgdGhhdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgbnVsbCwgb3IgdW5kZWZpbmVkLFxuLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci5cbi8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZVxuLy8gd2F0ZXJtYXJrcyBkZXRlcm1pbmUgaG93IG1hbnkgb2JqZWN0cyB0byBrZWVwIGluIHRoZSBidWZmZXIsIHJhdGhlciB0aGFuXG4vLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgdmFyIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwcm9jZXNzTmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmICh2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IG5ldyBCdWZmZXIoY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuICBpZiAoc3luYykgcHJvY2Vzc05leHRUaWNrKGNiLCBlcik7ZWxzZSBjYihlcik7XG5cbiAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCkge1xuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcHJvY2Vzc05leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcblxuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZW50cnkgPSBfdGhpcy5lbnRyeTtcbiAgICBfdGhpcy5lbnRyeSA9IG51bGw7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgICAgY2IoZXJyKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBfdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gX3RoaXM7XG4gICAgfVxuICB9O1xufSIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiKVxuIiwidmFyIFN0cmVhbSA9IChmdW5jdGlvbiAoKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnc3QnICsgJ3JlYW0nKTsgLy8gaGFjayB0byBmaXggYSBjaXJjdWxhciBkZXBlbmRlbmN5IGlzc3VlIHdoZW4gdXNlZCB3aXRoIGJyb3dzZXJpZnlcbiAgfSBjYXRjaChfKXt9XG59KCkpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW0gfHwgZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qc1wiKVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV93cml0YWJsZS5qc1wiKVxuIiwiLypcbkNyeXB0b0pTIHYzLjEuMlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4vKiogQHByZXNlcnZlXG4oYykgMjAxMiBieSBDw6lkcmljIE1lc25pbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gICAgLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cblRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8vIGNvbnN0YW50cyB0YWJsZVxudmFyIHpsID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dXG5cbnZhciB6ciA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXVxuXG52YXIgc2wgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dXG5cbnZhciBzciA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl1cblxudmFyIGhsID0gWzB4MDAwMDAwMDAsIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4QTk1M0ZENEVdXG52YXIgaHIgPSBbMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF1cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzIChieXRlcykge1xuICB2YXIgd29yZHMgPSBbXVxuICBmb3IgKHZhciBpID0gMCwgYiA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKywgYiArPSA4KSB7XG4gICAgd29yZHNbYiA+Pj4gNV0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gYiAlIDMyKVxuICB9XG4gIHJldHVybiB3b3Jkc1xufVxuXG5mdW5jdGlvbiB3b3Jkc1RvQnl0ZXMgKHdvcmRzKSB7XG4gIHZhciBieXRlcyA9IFtdXG4gIGZvciAodmFyIGIgPSAwOyBiIDwgd29yZHMubGVuZ3RoICogMzI7IGIgKz0gOCkge1xuICAgIGJ5dGVzLnB1c2goKHdvcmRzW2IgPj4+IDVdID4+PiAoMjQgLSBiICUgMzIpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NCbG9jayAoSCwgTSwgb2Zmc2V0KSB7XG4gIC8vIHN3YXAgZW5kaWFuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGlcbiAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldXG5cbiAgICAvLyBTd2FwXG4gICAgTVtvZmZzZXRfaV0gPSAoXG4gICAgICAoKChNX29mZnNldF9pIDw8IDgpIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG4gICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxuICAgIClcbiAgfVxuXG4gIC8vIFdvcmtpbmcgdmFyaWFibGVzXG4gIHZhciBhbCwgYmwsIGNsLCBkbCwgZWxcbiAgdmFyIGFyLCBiciwgY3IsIGRyLCBlclxuXG4gIGFyID0gYWwgPSBIWzBdXG4gIGJyID0gYmwgPSBIWzFdXG4gIGNyID0gY2wgPSBIWzJdXG4gIGRyID0gZGwgPSBIWzNdXG4gIGVyID0gZWwgPSBIWzRdXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgdmFyIHRcbiAgZm9yIChpID0gMDsgaSA8IDgwOyBpICs9IDEpIHtcbiAgICB0ID0gKGFsICsgTVtvZmZzZXQgKyB6bFtpXV0pIHwgMFxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHQgKz0gZjEoYmwsIGNsLCBkbCkgKyBobFswXVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0ICs9IGYyKGJsLCBjbCwgZGwpICsgaGxbMV1cbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdCArPSBmMyhibCwgY2wsIGRsKSArIGhsWzJdXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHQgKz0gZjQoYmwsIGNsLCBkbCkgKyBobFszXVxuICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcbiAgICAgIHQgKz0gZjUoYmwsIGNsLCBkbCkgKyBobFs0XVxuICAgIH1cbiAgICB0ID0gdCB8IDBcbiAgICB0ID0gcm90bCh0LCBzbFtpXSlcbiAgICB0ID0gKHQgKyBlbCkgfCAwXG4gICAgYWwgPSBlbFxuICAgIGVsID0gZGxcbiAgICBkbCA9IHJvdGwoY2wsIDEwKVxuICAgIGNsID0gYmxcbiAgICBibCA9IHRcblxuICAgIHQgPSAoYXIgKyBNW29mZnNldCArIHpyW2ldXSkgfCAwXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdCArPSBmNShiciwgY3IsIGRyKSArIGhyWzBdXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHQgKz0gZjQoYnIsIGNyLCBkcikgKyBoclsxXVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0ICs9IGYzKGJyLCBjciwgZHIpICsgaHJbMl1cbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdCArPSBmMihiciwgY3IsIGRyKSArIGhyWzNdXG4gICAgfSBlbHNlIHsvLyBpZiAoaTw4MCkge1xuICAgICAgdCArPSBmMShiciwgY3IsIGRyKSArIGhyWzRdXG4gICAgfVxuXG4gICAgdCA9IHQgfCAwXG4gICAgdCA9IHJvdGwodCwgc3JbaV0pXG4gICAgdCA9ICh0ICsgZXIpIHwgMFxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0XG4gIH1cblxuICAvLyBpbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuICB0ID0gKEhbMV0gKyBjbCArIGRyKSB8IDBcbiAgSFsxXSA9IChIWzJdICsgZGwgKyBlcikgfCAwXG4gIEhbMl0gPSAoSFszXSArIGVsICsgYXIpIHwgMFxuICBIWzNdID0gKEhbNF0gKyBhbCArIGJyKSB8IDBcbiAgSFs0XSA9IChIWzBdICsgYmwgKyBjcikgfCAwXG4gIEhbMF0gPSB0XG59XG5cbmZ1bmN0aW9uIGYxICh4LCB5LCB6KSB7XG4gIHJldHVybiAoKHgpIF4gKHkpIF4gKHopKVxufVxuXG5mdW5jdGlvbiBmMiAoeCwgeSwgeikge1xuICByZXR1cm4gKCgoeCkgJiAoeSkpIHwgKCh+eCkgJiAoeikpKVxufVxuXG5mdW5jdGlvbiBmMyAoeCwgeSwgeikge1xuICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKVxufVxuXG5mdW5jdGlvbiBmNCAoeCwgeSwgeikge1xuICByZXR1cm4gKCgoeCkgJiAoeikpIHwgKCh5KSAmICh+KHopKSkpXG59XG5cbmZ1bmN0aW9uIGY1ICh4LCB5LCB6KSB7XG4gIHJldHVybiAoKHgpIF4gKCh5KSB8ICh+KHopKSkpXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiByaXBlbWQxNjAgKG1lc3NhZ2UpIHtcbiAgdmFyIEggPSBbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF1cblxuICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IG5ldyBCdWZmZXIobWVzc2FnZSwgJ3V0ZjgnKVxuICB9XG5cbiAgdmFyIG0gPSBieXRlc1RvV29yZHMobWVzc2FnZSlcblxuICB2YXIgbkJpdHNMZWZ0ID0gbWVzc2FnZS5sZW5ndGggKiA4XG4gIHZhciBuQml0c1RvdGFsID0gbWVzc2FnZS5sZW5ndGggKiA4XG5cbiAgLy8gQWRkIHBhZGRpbmdcbiAgbVtuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpXG4gIG1bKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IChcbiAgICAoKChuQml0c1RvdGFsIDw8IDgpIHwgKG5CaXRzVG90YWwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG4gICAgKCgobkJpdHNUb3RhbCA8PCAyNCkgfCAobkJpdHNUb3RhbCA+Pj4gOCkpICYgMHhmZjAwZmYwMClcbiAgKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICBwcm9jZXNzQmxvY2soSCwgbSwgaSlcbiAgfVxuXG4gIC8vIHN3YXAgZW5kaWFuXG4gIGZvciAoaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAvLyBzaG9ydGN1dFxuICAgIHZhciBIX2kgPSBIW2ldXG5cbiAgICAvLyBTd2FwXG4gICAgSFtpXSA9ICgoKEhfaSA8PCA4KSB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG4gICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICYgMHhmZjAwZmYwMClcbiAgfVxuXG4gIHZhciBkaWdlc3RieXRlcyA9IHdvcmRzVG9CeXRlcyhIKVxuICByZXR1cm4gbmV3IEJ1ZmZlcihkaWdlc3RieXRlcylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByaXBlbWQxNjBcbiIsIi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gbmV3IEJ1ZmZlcihibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9zID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGwgPSB0aGlzLl9sZW4gKz0gZGF0YS5sZW5ndGhcbiAgdmFyIHMgPSB0aGlzLl9zIHx8IDBcbiAgdmFyIGYgPSAwXG4gIHZhciBidWZmZXIgPSB0aGlzLl9ibG9ja1xuXG4gIHdoaWxlIChzIDwgbCkge1xuICAgIHZhciB0ID0gTWF0aC5taW4oZGF0YS5sZW5ndGgsIGYgKyB0aGlzLl9ibG9ja1NpemUgLSAocyAlIHRoaXMuX2Jsb2NrU2l6ZSkpXG4gICAgdmFyIGNoID0gKHQgLSBmKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaDsgaSsrKSB7XG4gICAgICBidWZmZXJbKHMgJSB0aGlzLl9ibG9ja1NpemUpICsgaV0gPSBkYXRhW2kgKyBmXVxuICAgIH1cblxuICAgIHMgKz0gY2hcbiAgICBmICs9IGNoXG5cbiAgICBpZiAoKHMgJSB0aGlzLl9ibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYnVmZmVyKVxuICAgIH1cbiAgfVxuICB0aGlzLl9zID0gc1xuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgLy8gU3VwcG9zZSB0aGUgbGVuZ3RoIG9mIHRoZSBtZXNzYWdlIE0sIGluIGJpdHMsIGlzIGxcbiAgdmFyIGwgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gQXBwZW5kIHRoZSBiaXQgMSB0byB0aGUgZW5kIG9mIHRoZSBtZXNzYWdlXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZV0gPSAweDgwXG5cbiAgLy8gYW5kIHRoZW4gayB6ZXJvIGJpdHMsIHdoZXJlIGsgaXMgdGhlIHNtYWxsZXN0IG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGwgKyAxICsgaykgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplICsgMSlcblxuICBpZiAobCAlICh0aGlzLl9ibG9ja1NpemUgKiA4KSA+PSB0aGlzLl9maW5hbFNpemUgKiA4KSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIC8vIHRvIHRoaXMgYXBwZW5kIHRoZSBibG9jayB3aGljaCBpcyBlcXVhbCB0byB0aGUgbnVtYmVyIGwgd3JpdHRlbiBpbiBiaW5hcnlcbiAgLy8gVE9ETzogaGFuZGxlIGNhc2Ugd2hlcmUgbCBpcyA+IE1hdGgucG93KDIsIDI5KVxuICB0aGlzLl9ibG9jay53cml0ZUludDMyQkUobCwgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICB2YXIgaGFzaCA9IHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaykgfHwgdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhLCBIYXNoKVxuXG5TaGEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7ICsraikge1xuICAgIHZhciBzID0gfn4oaiAvIDIwKVxuICAgIHZhciB0ID0gKHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10pIHwgMFxuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb3RsMzAoYilcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcigyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTFcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG5cbnZhciBLID0gW1xuICAweDQyOEEyRjk4LCAweDcxMzc0NDkxLCAweEI1QzBGQkNGLCAweEU5QjVEQkE1LFxuICAweDM5NTZDMjVCLCAweDU5RjExMUYxLCAweDkyM0Y4MkE0LCAweEFCMUM1RUQ1LFxuICAweEQ4MDdBQTk4LCAweDEyODM1QjAxLCAweDI0MzE4NUJFLCAweDU1MEM3REMzLFxuICAweDcyQkU1RDc0LCAweDgwREVCMUZFLCAweDlCREMwNkE3LCAweEMxOUJGMTc0LFxuICAweEU0OUI2OUMxLCAweEVGQkU0Nzg2LCAweDBGQzE5REM2LCAweDI0MENBMUNDLFxuICAweDJERTkyQzZGLCAweDRBNzQ4NEFBLCAweDVDQjBBOURDLCAweDc2Rjk4OERBLFxuICAweDk4M0U1MTUyLCAweEE4MzFDNjZELCAweEIwMDMyN0M4LCAweEJGNTk3RkM3LFxuICAweEM2RTAwQkYzLCAweEQ1QTc5MTQ3LCAweDA2Q0E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3QjcwQTg1LCAweDJFMUIyMTM4LCAweDREMkM2REZDLCAweDUzMzgwRDEzLFxuICAweDY1MEE3MzU0LCAweDc2NkEwQUJCLCAweDgxQzJDOTJFLCAweDkyNzIyQzg1LFxuICAweEEyQkZFOEExLCAweEE4MUE2NjRCLCAweEMyNEI4QjcwLCAweEM3NkM1MUEzLFxuICAweEQxOTJFODE5LCAweEQ2OTkwNjI0LCAweEY0MEUzNTg1LCAweDEwNkFBMDcwLFxuICAweDE5QTRDMTE2LCAweDFFMzc2QzA4LCAweDI3NDg3NzRDLCAweDM0QjBCQ0I1LFxuICAweDM5MUMwQ0IzLCAweDRFRDhBQTRBLCAweDVCOUNDQTRGLCAweDY4MkU2RkYzLFxuICAweDc0OEY4MkVFLCAweDc4QTU2MzZGLCAweDg0Qzg3ODE0LCAweDhDQzcwMjA4LFxuICAweDkwQkVGRkZBLCAweEE0NTA2Q0VCLCAweEJFRjlBM0Y3LCAweEM2NzE3OEYyXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyNTYgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyNTYsIEhhc2gpXG5cblNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYiA9IDB4YmI2N2FlODVcbiAgdGhpcy5fYyA9IDB4M2M2ZWYzNzJcbiAgdGhpcy5fZCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZSA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZiA9IDB4OWIwNTY4OGNcbiAgdGhpcy5fZyA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faCA9IDB4NWJlMGNkMTlcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBjaCAoeCwgeSwgeikge1xuICByZXR1cm4geiBeICh4ICYgKHkgXiB6KSlcbn1cblxuZnVuY3Rpb24gbWFqICh4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIHwgKHogJiAoeCB8IHkpKVxufVxuXG5mdW5jdGlvbiBzaWdtYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAyIHwgeCA8PCAzMCkgXiAoeCA+Pj4gMTMgfCB4IDw8IDE5KSBeICh4ID4+PiAyMiB8IHggPDwgMTApXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1IHwgeCA8PCA3KVxufVxuXG5mdW5jdGlvbiBnYW1tYTAgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA3IHwgeCA8PCAyNSkgXiAoeCA+Pj4gMTggfCB4IDw8IDE0KSBeICh4ID4+PiAzKVxufVxuXG5mdW5jdGlvbiBnYW1tYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiAxNyB8IHggPDwgMTUpIF4gKHggPj4+IDE5IHwgeCA8PCAxMykgXiAoeCA+Pj4gMTApXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuICB2YXIgZiA9IHRoaXMuX2YgfCAwXG4gIHZhciBnID0gdGhpcy5fZyB8IDBcbiAgdmFyIGggPSB0aGlzLl9oIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgNjQ7ICsraSkgV1tpXSA9IChnYW1tYTEoV1tpIC0gMl0pICsgV1tpIC0gN10gKyBnYW1tYTAoV1tpIC0gMTVdKSArIFdbaSAtIDE2XSkgfCAwXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7XG4gICAgdmFyIFQxID0gKGggKyBzaWdtYTEoZSkgKyBjaChlLCBmLCBnKSArIEtbal0gKyBXW2pdKSB8IDBcbiAgICB2YXIgVDIgPSAoc2lnbWEwKGEpICsgbWFqKGEsIGIsIGMpKSB8IDBcblxuICAgIGggPSBnXG4gICAgZyA9IGZcbiAgICBmID0gZVxuICAgIGUgPSAoZCArIFQxKSB8IDBcbiAgICBkID0gY1xuICAgIGMgPSBiXG4gICAgYiA9IGFcbiAgICBhID0gKFQxICsgVDIpIHwgMFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxuICB0aGlzLl9mID0gKGYgKyB0aGlzLl9mKSB8IDBcbiAgdGhpcy5fZyA9IChnICsgdGhpcy5fZykgfCAwXG4gIHRoaXMuX2ggPSAoaCArIHRoaXMuX2gpIHwgMFxufVxuXG5TaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IG5ldyBCdWZmZXIoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gbmV3IEJ1ZmZlcig2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGlzQnVmZmVyRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZ1xuICB8fCBmdW5jdGlvbihlbmNvZGluZykge1xuICAgICAgIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgY2FzZSAnaGV4JzogY2FzZSAndXRmOCc6IGNhc2UgJ3V0Zi04JzogY2FzZSAnYXNjaWknOiBjYXNlICdiaW5hcnknOiBjYXNlICdiYXNlNjQnOiBjYXNlICd1Y3MyJzogY2FzZSAndWNzLTInOiBjYXNlICd1dGYxNmxlJzogY2FzZSAndXRmLTE2bGUnOiBjYXNlICdyYXcnOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICB9XG4gICAgIH1cblxuXG5mdW5jdGlvbiBhc3NlcnRFbmNvZGluZyhlbmNvZGluZykge1xuICBpZiAoZW5jb2RpbmcgJiYgIWlzQnVmZmVyRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB9XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuXG4vL1xuLy8gQFRPRE8gSGFuZGxpbmcgYWxsIGVuY29kaW5ncyBpbnNpZGUgYSBzaW5nbGUgb2JqZWN0IG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0XG4vLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS5cbi8vIEBUT0RPIFRoZXJlIHNob3VsZCBiZSBhIHV0Zjgtc3RyaWN0IGVuY29kaW5nIHRoYXQgcmVqZWN0cyBpbnZhbGlkIFVURi04IGNvZGVcbi8vIHBvaW50cyBhcyB1c2VkIGJ5IENFU1UtOC5cbnZhciBTdHJpbmdEZWNvZGVyID0gZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IChlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sICcnKTtcbiAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgLy8gVVRGLTE2IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAyLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLlxuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVub3VnaCBzcGFjZSB0byBzdG9yZSBhbGwgYnl0ZXMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLiBVVEYtOCBuZWVkcyA0XG4gIC8vIGJ5dGVzLCBidXQgQ0VTVS04IG1heSByZXF1aXJlIHVwIHRvIDYgKDMgYnl0ZXMgcGVyIHN1cnJvZ2F0ZSkuXG4gIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7XG4gIC8vIE51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSAwO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhckxlbmd0aCA9IDA7XG59O1xuXG5cbi8vIHdyaXRlIGRlY29kZXMgdGhlIGdpdmVuIGJ1ZmZlciBhbmQgcmV0dXJucyBpdCBhcyBKUyBzdHJpbmcgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZVxuLy8gcmV0dXJuZWQgd2hlbiBjYWxsaW5nIHdyaXRlIGFnYWluIHdpdGggdGhlIHJlbWFpbmluZyBieXRlcy5cbi8vXG4vLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZ1xuLy8gY3VycmVudGx5IHdvcmtzLCBidXQgY29udmVydGluZyBhIFN0cmluZyB0byBhIEJ1ZmZlciAodmlhIGBuZXcgQnVmZmVyYCwgb3Jcbi8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlXG4vLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIGNoYXJTdHIgPSAnJztcbiAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXJcbiAgd2hpbGUgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXJcbiAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID9cbiAgICAgICAgdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQgOlxuICAgICAgICBidWZmZXIubGVuZ3RoO1xuXG4gICAgLy8gYWRkIHRoZSBuZXcgYnl0ZXMgdG8gdGhlIGNoYXIgYnVmZmVyXG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCB0aGlzLmNoYXJSZWNlaXZlZCwgMCwgYXZhaWxhYmxlKTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBhdmFpbGFibGU7XG5cbiAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQgPCB0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGJ5dGVzIGJlbG9uZ2luZyB0byB0aGUgY3VycmVudCBjaGFyYWN0ZXIgZnJvbSB0aGUgYnVmZmVyXG4gICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7XG5cbiAgICAvLyBnZXQgdGhlIGNoYXJhY3RlciB0aGF0IHdhcyBzcGxpdFxuICAgIGNoYXJTdHIgPSB0aGlzLmNoYXJCdWZmZXIuc2xpY2UoMCwgdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoY2hhclN0ci5sZW5ndGggLSAxKTtcbiAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoICs9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICAgIGNoYXJTdHIgPSAnJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IHRoaXMuY2hhckxlbmd0aCA9IDA7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBpbiB0aGlzIGJ1ZmZlciwganVzdCBlbWl0IG91ciBjaGFyXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjaGFyU3RyO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuXG4gIC8vIGRldGVybWluZSBhbmQgc2V0IGNoYXJMZW5ndGggLyBjaGFyUmVjZWl2ZWRcbiAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpO1xuXG4gIHZhciBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gYnVmZmVyIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlciBieXRlcyB3ZSBnb3RcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCwgZW5kKTtcbiAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gIH1cblxuICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpO1xuXG4gIHZhciBlbmQgPSBjaGFyU3RyLmxlbmd0aCAtIDE7XG4gIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChlbmQpO1xuICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgdGhpcy5jaGFyTGVuZ3RoICs9IHNpemU7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJCdWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHNpemUsIDAsIHNpemUpO1xuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgMCwgc2l6ZSk7XG4gICAgcmV0dXJuIGNoYXJTdHIuc3Vic3RyaW5nKDAsIGVuZCk7XG4gIH1cblxuICAvLyBvciBqdXN0IGVtaXQgdGhlIGNoYXJTdHJcbiAgcmV0dXJuIGNoYXJTdHI7XG59O1xuXG4vLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0XG4vLyB0aGUgZW5kIG9mIHRoZSBnaXZlbiBidWZmZXIuIElmIHNvLCBpdCBzZXRzIHRoaXMuY2hhckxlbmd0aCB0byB0aGUgYnl0ZVxuLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4vLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlclxuICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7XG5cbiAgLy8gRmlndXJlIG91dCBpZiBvbmUgb2YgdGhlIGxhc3QgaSBieXRlcyBvZiBvdXIgYnVmZmVyIGFubm91bmNlcyBhblxuICAvLyBpbmNvbXBsZXRlIGNoYXIuXG4gIGZvciAoOyBpID4gMDsgaS0tKSB7XG4gICAgdmFyIGMgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIGldO1xuXG4gICAgLy8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTgjRGVzY3JpcHRpb25cblxuICAgIC8vIDExMFhYWFhYXG4gICAgaWYgKGkgPT0gMSAmJiBjID4+IDUgPT0gMHgwNikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTBYWFhYXG4gICAgaWYgKGkgPD0gMiAmJiBjID4+IDQgPT0gMHgwRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTEwWFhYXG4gICAgaWYgKGkgPD0gMyAmJiBjID4+IDMgPT0gMHgxRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpXG4gICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpO1xuXG4gIGlmICh0aGlzLmNoYXJSZWNlaXZlZCkge1xuICAgIHZhciBjciA9IHRoaXMuY2hhclJlY2VpdmVkO1xuICAgIHZhciBidWYgPSB0aGlzLmNoYXJCdWZmZXI7XG4gICAgdmFyIGVuYyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgcmVzICs9IGJ1Zi5zbGljZSgwLCBjcikudG9TdHJpbmcoZW5jKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAyO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDIgOiAwO1xufVxuXG5mdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMztcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAzIDogMDtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBuYXRpdmUgPSByZXF1aXJlKCcuL25hdGl2ZScpXG5cbmZ1bmN0aW9uIFRmVHlwZUVycm9yICh0eXBlLCB2YWx1ZSwgdmFsdWVUeXBlTmFtZSkge1xuICB0aGlzLl9fZXJyb3IgPSBFcnJvci5jYWxsKHRoaXMpXG4gIHRoaXMuX190eXBlID0gdHlwZVxuICB0aGlzLl9fdmFsdWUgPSB2YWx1ZVxuICB0aGlzLl9fdmFsdWVUeXBlTmFtZSA9IHZhbHVlVHlwZU5hbWVcblxuICB2YXIgbWVzc2FnZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtZXNzYWdlKSByZXR1cm4gbWVzc2FnZVxuXG4gICAgICB2YWx1ZVR5cGVOYW1lID0gdmFsdWVUeXBlTmFtZSB8fCBnZXRWYWx1ZVR5cGVOYW1lKHZhbHVlKVxuICAgICAgbWVzc2FnZSA9IHRmRXJyb3JTdHJpbmcodHlwZSwgdmFsdWUsIHZhbHVlVHlwZU5hbWUpXG5cbiAgICAgIHJldHVybiBtZXNzYWdlXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiBUZlByb3BlcnR5VHlwZUVycm9yICh0eXBlLCBwcm9wZXJ0eSwgbGFiZWwsIHZhbHVlLCBlcnJvciwgdmFsdWVUeXBlTmFtZSkge1xuICB0aGlzLl9fZXJyb3IgPSBlcnJvciB8fCBFcnJvci5jYWxsKHRoaXMpXG4gIHRoaXMuX19sYWJlbCA9IGxhYmVsXG4gIHRoaXMuX19wcm9wZXJ0eSA9IHByb3BlcnR5XG4gIHRoaXMuX190eXBlID0gdHlwZVxuICB0aGlzLl9fdmFsdWUgPSB2YWx1ZVxuICB0aGlzLl9fdmFsdWVUeXBlTmFtZSA9IHZhbHVlVHlwZU5hbWVcblxuICB2YXIgbWVzc2FnZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtZXNzYWdlKSByZXR1cm4gbWVzc2FnZVxuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgdmFsdWVUeXBlTmFtZSA9IHZhbHVlVHlwZU5hbWUgfHwgZ2V0VmFsdWVUeXBlTmFtZSh2YWx1ZSlcbiAgICAgICAgbWVzc2FnZSA9IHRmUHJvcGVydHlFcnJvclN0cmluZyh0eXBlLCBsYWJlbCwgcHJvcGVydHksIHZhbHVlLCB2YWx1ZVR5cGVOYW1lKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSA9ICdVbmV4cGVjdGVkIHByb3BlcnR5IFwiJyArIHByb3BlcnR5ICsgJ1wiJ1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVzc2FnZVxuICAgIH1cbiAgfSlcbn1cblxuLy8gaW5oZXJpdCBmcm9tIEVycm9yLCBhc3NpZ24gc3RhY2tcbltUZlR5cGVFcnJvciwgVGZQcm9wZXJ0eVR5cGVFcnJvcl0uZm9yRWFjaChmdW5jdGlvbiAodGZFcnJvclR5cGUpIHtcbiAgaW5oZXJpdHModGZFcnJvclR5cGUsIEVycm9yKVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGZFcnJvclR5cGUsICdzdGFjaycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX19lcnJvci5zdGFjayB9XG4gIH0pXG59KVxuXG5mdW5jdGlvbiB0ZkN1c3RvbUVycm9yIChleHBlY3RlZCwgYWN0dWFsKSB7XG4gIHJldHVybiBuZXcgVGZUeXBlRXJyb3IoZXhwZWN0ZWQsIHt9LCBhY3R1YWwpXG59XG5cbmZ1bmN0aW9uIHRmU3ViRXJyb3IgKGUsIHByb3BlcnR5LCBsYWJlbCkge1xuICAvLyBzdWIgY2hpbGQ/XG4gIGlmIChlIGluc3RhbmNlb2YgVGZQcm9wZXJ0eVR5cGVFcnJvcikge1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkgKyAnLicgKyBlLl9fcHJvcGVydHlcbiAgICBsYWJlbCA9IGUuX19sYWJlbFxuXG4gICAgcmV0dXJuIG5ldyBUZlByb3BlcnR5VHlwZUVycm9yKFxuICAgICAgZS5fX3R5cGUsIHByb3BlcnR5LCBsYWJlbCwgZS5fX3ZhbHVlLCBlLl9fZXJyb3IsIGUuX192YWx1ZVR5cGVOYW1lXG4gICAgKVxuICB9XG5cbiAgLy8gY2hpbGQ/XG4gIGlmIChlIGluc3RhbmNlb2YgVGZUeXBlRXJyb3IpIHtcbiAgICByZXR1cm4gbmV3IFRmUHJvcGVydHlUeXBlRXJyb3IoXG4gICAgICBlLl9fdHlwZSwgcHJvcGVydHksIGxhYmVsLCBlLl9fdmFsdWUsIGUuX19lcnJvciwgZS5fX3ZhbHVlVHlwZU5hbWVcbiAgICApXG4gIH1cblxuICByZXR1cm4gZVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlTmFtZSAoZm4pIHtcbiAgcmV0dXJuIGZuLm5hbWUgfHwgZm4udG9TdHJpbmcoKS5tYXRjaCgvZnVuY3Rpb24gKC4qPylcXHMqXFwoLylbMV1cbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVUeXBlTmFtZSAodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZS5OdWxsKHZhbHVlKSA/ICcnIDogZ2V0VHlwZU5hbWUodmFsdWUuY29uc3RydWN0b3IpXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlICh2YWx1ZSkge1xuICBpZiAobmF0aXZlLkZ1bmN0aW9uKHZhbHVlKSkgcmV0dXJuICcnXG4gIGlmIChuYXRpdmUuU3RyaW5nKHZhbHVlKSkgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICBpZiAodmFsdWUgJiYgbmF0aXZlLk9iamVjdCh2YWx1ZSkpIHJldHVybiAnJ1xuICByZXR1cm4gdmFsdWVcbn1cblxuZnVuY3Rpb24gdGZKU09OICh0eXBlKSB7XG4gIGlmIChuYXRpdmUuRnVuY3Rpb24odHlwZSkpIHJldHVybiB0eXBlLnRvSlNPTiA/IHR5cGUudG9KU09OKCkgOiBnZXRUeXBlTmFtZSh0eXBlKVxuICBpZiAobmF0aXZlLkFycmF5KHR5cGUpKSByZXR1cm4gJ0FycmF5J1xuICBpZiAodHlwZSAmJiBuYXRpdmUuT2JqZWN0KHR5cGUpKSByZXR1cm4gJ09iamVjdCdcblxuICByZXR1cm4gdHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZSA6ICcnXG59XG5cbmZ1bmN0aW9uIHRmRXJyb3JTdHJpbmcgKHR5cGUsIHZhbHVlLCB2YWx1ZVR5cGVOYW1lKSB7XG4gIHZhciB2YWx1ZUpzb24gPSBnZXRWYWx1ZSh2YWx1ZSlcblxuICByZXR1cm4gJ0V4cGVjdGVkICcgKyB0ZkpTT04odHlwZSkgKyAnLCBnb3QnICtcbiAgICAodmFsdWVUeXBlTmFtZSAhPT0gJycgPyAnICcgKyB2YWx1ZVR5cGVOYW1lIDogJycpICtcbiAgICAodmFsdWVKc29uICE9PSAnJyA/ICcgJyArIHZhbHVlSnNvbiA6ICcnKVxufVxuXG5mdW5jdGlvbiB0ZlByb3BlcnR5RXJyb3JTdHJpbmcgKHR5cGUsIGxhYmVsLCBuYW1lLCB2YWx1ZSwgdmFsdWVUeXBlTmFtZSkge1xuICB2YXIgZGVzY3JpcHRpb24gPSAnXCIgb2YgdHlwZSAnXG4gIGlmIChsYWJlbCA9PT0gJ2tleScpIGRlc2NyaXB0aW9uID0gJ1wiIHdpdGgga2V5IHR5cGUgJ1xuXG4gIHJldHVybiB0ZkVycm9yU3RyaW5nKCdwcm9wZXJ0eSBcIicgKyB0ZkpTT04obmFtZSkgKyBkZXNjcmlwdGlvbiArIHRmSlNPTih0eXBlKSwgdmFsdWUsIHZhbHVlVHlwZU5hbWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUZlR5cGVFcnJvcjogVGZUeXBlRXJyb3IsXG4gIFRmUHJvcGVydHlUeXBlRXJyb3I6IFRmUHJvcGVydHlUeXBlRXJyb3IsXG4gIHRmQ3VzdG9tRXJyb3I6IHRmQ3VzdG9tRXJyb3IsXG4gIHRmU3ViRXJyb3I6IHRmU3ViRXJyb3IsXG4gIHRmSlNPTjogdGZKU09OLFxuICBnZXRWYWx1ZVR5cGVOYW1lOiBnZXRWYWx1ZVR5cGVOYW1lXG59XG4iLCJ2YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKVxuXG5mdW5jdGlvbiBfQnVmZmVyICh2YWx1ZSkge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKHZhbHVlKVxufVxuX0J1ZmZlci50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQnVmZmVyJyB9XG5cbmZ1bmN0aW9uIF9CdWZmZXJOIChsZW5ndGgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTiAodmFsdWUpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybiBmYWxzZVxuICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IGxlbmd0aCkge1xuICAgICAgdGhyb3cgZXJyb3JzLnRmQ3VzdG9tRXJyb3IoJ0J1ZmZlcihMZW5ndGg6ICcgKyBsZW5ndGggKyAnKScsICdCdWZmZXIoTGVuZ3RoOiAnICsgdmFsdWUubGVuZ3RoICsgJyknKVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgQnVmZmVyTi50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQnVmZmVyJyB9XG5cbiAgcmV0dXJuIEJ1ZmZlck5cbn1cblxuZnVuY3Rpb24gSGV4ICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXihbMC05YS1mXXsyfSkrJC9pLnRlc3QodmFsdWUpXG59XG5cbmZ1bmN0aW9uIF9IZXhOIChsZW5ndGgpIHtcbiAgZnVuY3Rpb24gSGV4TiAodmFsdWUpIHtcbiAgICBpZiAoIUhleCh2YWx1ZSkpIHJldHVybiBmYWxzZVxuICAgIGlmICh2YWx1ZS5sZW5ndGggIT09IGxlbmd0aCkge1xuICAgICAgdGhyb3cgZXJyb3JzLnRmQ3VzdG9tRXJyb3IoJ0hleChMZW5ndGg6ICcgKyBsZW5ndGggKyAnKScsICdIZXgoTGVuZ3RoOiAnICsgdmFsdWUubGVuZ3RoICsgJyknKVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgSGV4Ti50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnSGV4JyB9XG5cbiAgcmV0dXJuIEhleE5cbn1cblxudmFyIFVJTlQ1M19NQVggPSBNYXRoLnBvdygyLCA1MykgLSAxXG5cbmZ1bmN0aW9uIEZpbml0ZSAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpXG59XG5mdW5jdGlvbiBJbnQ4ICh2YWx1ZSkgeyByZXR1cm4gKCh2YWx1ZSA8PCAyNCkgPj4gMjQpID09PSB2YWx1ZSB9XG5mdW5jdGlvbiBJbnQxNiAodmFsdWUpIHsgcmV0dXJuICgodmFsdWUgPDwgMTYpID4+IDE2KSA9PT0gdmFsdWUgfVxuZnVuY3Rpb24gSW50MzIgKHZhbHVlKSB7IHJldHVybiAodmFsdWUgfCAwKSA9PT0gdmFsdWUgfVxuZnVuY3Rpb24gVUludDggKHZhbHVlKSB7IHJldHVybiAodmFsdWUgJiAweGZmKSA9PT0gdmFsdWUgfVxuZnVuY3Rpb24gVUludDE2ICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlICYgMHhmZmZmKSA9PT0gdmFsdWUgfVxuZnVuY3Rpb24gVUludDMyICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlID4+PiAwKSA9PT0gdmFsdWUgfVxuZnVuY3Rpb24gVUludDUzICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID49IDAgJiZcbiAgICB2YWx1ZSA8PSBVSU5UNTNfTUFYICYmXG4gICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCdWZmZXI6IF9CdWZmZXIsXG4gIEJ1ZmZlck46IF9CdWZmZXJOLFxuICBGaW5pdGU6IEZpbml0ZSxcbiAgSGV4OiBIZXgsXG4gIEhleE46IF9IZXhOLFxuICBJbnQ4OiBJbnQ4LFxuICBJbnQxNjogSW50MTYsXG4gIEludDMyOiBJbnQzMixcbiAgVUludDg6IFVJbnQ4LFxuICBVSW50MTY6IFVJbnQxNixcbiAgVUludDMyOiBVSW50MzIsXG4gIFVJbnQ1MzogVUludDUzXG59XG4iLCJ2YXIgRVJST1JTID0gcmVxdWlyZSgnLi9lcnJvcnMnKVxudmFyIE5BVElWRSA9IHJlcXVpcmUoJy4vbmF0aXZlJylcblxuLy8gc2hvcnQtaGFuZFxudmFyIHRmSlNPTiA9IEVSUk9SUy50ZkpTT05cbnZhciBUZlR5cGVFcnJvciA9IEVSUk9SUy5UZlR5cGVFcnJvclxudmFyIFRmUHJvcGVydHlUeXBlRXJyb3IgPSBFUlJPUlMuVGZQcm9wZXJ0eVR5cGVFcnJvclxudmFyIHRmU3ViRXJyb3IgPSBFUlJPUlMudGZTdWJFcnJvclxudmFyIGdldFZhbHVlVHlwZU5hbWUgPSBFUlJPUlMuZ2V0VmFsdWVUeXBlTmFtZVxuXG52YXIgVFlQRVMgPSB7XG4gIGFycmF5T2Y6IGZ1bmN0aW9uIGFycmF5T2YgKHR5cGUpIHtcbiAgICB0eXBlID0gY29tcGlsZSh0eXBlKVxuXG4gICAgZnVuY3Rpb24gX2FycmF5T2YgKGFycmF5LCBzdHJpY3QpIHtcbiAgICAgIGlmICghTkFUSVZFLkFycmF5KGFycmF5KSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgIHJldHVybiBhcnJheS5ldmVyeShmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdHlwZWZvcmNlKHR5cGUsIHZhbHVlLCBzdHJpY3QpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aHJvdyB0ZlN1YkVycm9yKGUsIGkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIF9hcnJheU9mLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdbJyArIHRmSlNPTih0eXBlKSArICddJyB9XG5cbiAgICByZXR1cm4gX2FycmF5T2ZcbiAgfSxcblxuICBtYXliZTogZnVuY3Rpb24gbWF5YmUgKHR5cGUpIHtcbiAgICB0eXBlID0gY29tcGlsZSh0eXBlKVxuXG4gICAgZnVuY3Rpb24gX21heWJlICh2YWx1ZSwgc3RyaWN0KSB7XG4gICAgICByZXR1cm4gTkFUSVZFLk51bGwodmFsdWUpIHx8IHR5cGUodmFsdWUsIHN0cmljdCwgbWF5YmUpXG4gICAgfVxuICAgIF9tYXliZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnPycgKyB0ZkpTT04odHlwZSkgfVxuXG4gICAgcmV0dXJuIF9tYXliZVxuICB9LFxuXG4gIG1hcDogZnVuY3Rpb24gbWFwIChwcm9wZXJ0eVR5cGUsIHByb3BlcnR5S2V5VHlwZSkge1xuICAgIHByb3BlcnR5VHlwZSA9IGNvbXBpbGUocHJvcGVydHlUeXBlKVxuICAgIGlmIChwcm9wZXJ0eUtleVR5cGUpIHByb3BlcnR5S2V5VHlwZSA9IGNvbXBpbGUocHJvcGVydHlLZXlUeXBlKVxuXG4gICAgZnVuY3Rpb24gX21hcCAodmFsdWUsIHN0cmljdCkge1xuICAgICAgaWYgKCFOQVRJVkUuT2JqZWN0KHZhbHVlLCBzdHJpY3QpKSByZXR1cm4gZmFsc2VcbiAgICAgIGlmIChOQVRJVkUuTnVsbCh2YWx1ZSwgc3RyaWN0KSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eUtleVR5cGUpIHtcbiAgICAgICAgICAgIHR5cGVmb3JjZShwcm9wZXJ0eUtleVR5cGUsIHByb3BlcnR5TmFtZSwgc3RyaWN0KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IHRmU3ViRXJyb3IoZSwgcHJvcGVydHlOYW1lLCAna2V5JylcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHByb3BlcnR5VmFsdWUgPSB2YWx1ZVtwcm9wZXJ0eU5hbWVdXG4gICAgICAgICAgdHlwZWZvcmNlKHByb3BlcnR5VHlwZSwgcHJvcGVydHlWYWx1ZSwgc3RyaWN0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgdGZTdWJFcnJvcihlLCBwcm9wZXJ0eU5hbWUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAocHJvcGVydHlLZXlUeXBlKSB7XG4gICAgICBfbWFwLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICd7JyArIHRmSlNPTihwcm9wZXJ0eUtleVR5cGUpICsgJzogJyArIHRmSlNPTihwcm9wZXJ0eVR5cGUpICsgJ30nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9tYXAudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3snICsgdGZKU09OKHByb3BlcnR5VHlwZSkgKyAnfScgfVxuICAgIH1cblxuICAgIHJldHVybiBfbWFwXG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QgKHVuY29tcGlsZWQpIHtcbiAgICB2YXIgdHlwZSA9IHt9XG5cbiAgICBmb3IgKHZhciB0eXBlUHJvcGVydHlOYW1lIGluIHVuY29tcGlsZWQpIHtcbiAgICAgIHR5cGVbdHlwZVByb3BlcnR5TmFtZV0gPSBjb21waWxlKHVuY29tcGlsZWRbdHlwZVByb3BlcnR5TmFtZV0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX29iamVjdCAodmFsdWUsIHN0cmljdCkge1xuICAgICAgaWYgKCFOQVRJVkUuT2JqZWN0KHZhbHVlKSkgcmV0dXJuIGZhbHNlXG4gICAgICBpZiAoTkFUSVZFLk51bGwodmFsdWUpKSByZXR1cm4gZmFsc2VcblxuICAgICAgdmFyIHByb3BlcnR5TmFtZVxuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHByb3BlcnR5TmFtZSBpbiB0eXBlKSB7XG4gICAgICAgICAgdmFyIHByb3BlcnR5VHlwZSA9IHR5cGVbcHJvcGVydHlOYW1lXVxuICAgICAgICAgIHZhciBwcm9wZXJ0eVZhbHVlID0gdmFsdWVbcHJvcGVydHlOYW1lXVxuXG4gICAgICAgICAgdHlwZWZvcmNlKHByb3BlcnR5VHlwZSwgcHJvcGVydHlWYWx1ZSwgc3RyaWN0KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IHRmU3ViRXJyb3IoZSwgcHJvcGVydHlOYW1lKVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGZvciAocHJvcGVydHlOYW1lIGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVbcHJvcGVydHlOYW1lXSkgY29udGludWVcblxuICAgICAgICAgIHRocm93IG5ldyBUZlByb3BlcnR5VHlwZUVycm9yKHVuZGVmaW5lZCwgcHJvcGVydHlOYW1lKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIF9vYmplY3QudG9KU09OID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGZKU09OKHR5cGUpIH1cblxuICAgIHJldHVybiBfb2JqZWN0XG4gIH0sXG5cbiAgb25lT2Y6IGZ1bmN0aW9uIG9uZU9mICgpIHtcbiAgICB2YXIgdHlwZXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykubWFwKGNvbXBpbGUpXG5cbiAgICBmdW5jdGlvbiBfb25lT2YgKHZhbHVlLCBzdHJpY3QpIHtcbiAgICAgIHJldHVybiB0eXBlcy5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVmb3JjZSh0eXBlLCB2YWx1ZSwgc3RyaWN0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIF9vbmVPZi50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlcy5tYXAodGZKU09OKS5qb2luKCd8JykgfVxuXG4gICAgcmV0dXJuIF9vbmVPZlxuICB9LFxuXG4gIHF1YWNrc0xpa2U6IGZ1bmN0aW9uIHF1YWNrc0xpa2UgKHR5cGUpIHtcbiAgICBmdW5jdGlvbiBfcXVhY2tzTGlrZSAodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlID09PSBnZXRWYWx1ZVR5cGVOYW1lKHZhbHVlKVxuICAgIH1cbiAgICBfcXVhY2tzTGlrZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlIH1cblxuICAgIHJldHVybiBfcXVhY2tzTGlrZVxuICB9LFxuXG4gIHR1cGxlOiBmdW5jdGlvbiB0dXBsZSAoKSB7XG4gICAgdmFyIHR5cGVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLm1hcChjb21waWxlKVxuXG4gICAgZnVuY3Rpb24gX3R1cGxlICh2YWx1ZXMsIHN0cmljdCkge1xuICAgICAgcmV0dXJuIHR5cGVzLmV2ZXJ5KGZ1bmN0aW9uICh0eXBlLCBpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVmb3JjZSh0eXBlLCB2YWx1ZXNbaV0sIHN0cmljdClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IHRmU3ViRXJyb3IoZSwgaSlcbiAgICAgICAgfVxuICAgICAgfSkgJiYgKCFzdHJpY3QgfHwgdmFsdWVzLmxlbmd0aCA9PT0gYXJndW1lbnRzLmxlbmd0aClcbiAgICB9XG4gICAgX3R1cGxlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcoJyArIHR5cGVzLm1hcCh0ZkpTT04pLmpvaW4oJywgJykgKyAnKScgfVxuXG4gICAgcmV0dXJuIF90dXBsZVxuICB9LFxuXG4gIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSAoZXhwZWN0ZWQpIHtcbiAgICBmdW5jdGlvbiBfdmFsdWUgKGFjdHVhbCkge1xuICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gZXhwZWN0ZWRcbiAgICB9XG4gICAgX3ZhbHVlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4cGVjdGVkIH1cblxuICAgIHJldHVybiBfdmFsdWVcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlICh0eXBlKSB7XG4gIGlmIChOQVRJVkUuU3RyaW5nKHR5cGUpKSB7XG4gICAgaWYgKHR5cGVbMF0gPT09ICc/JykgcmV0dXJuIFRZUEVTLm1heWJlKGNvbXBpbGUodHlwZS5zbGljZSgxKSkpXG5cbiAgICByZXR1cm4gTkFUSVZFW3R5cGVdIHx8IFRZUEVTLnF1YWNrc0xpa2UodHlwZSlcbiAgfSBlbHNlIGlmICh0eXBlICYmIE5BVElWRS5PYmplY3QodHlwZSkpIHtcbiAgICBpZiAoTkFUSVZFLkFycmF5KHR5cGUpKSByZXR1cm4gVFlQRVMuYXJyYXlPZihjb21waWxlKHR5cGVbMF0pKVxuXG4gICAgcmV0dXJuIFRZUEVTLm9iamVjdCh0eXBlKVxuICB9IGVsc2UgaWYgKE5BVElWRS5GdW5jdGlvbih0eXBlKSkge1xuICAgIHJldHVybiB0eXBlXG4gIH1cblxuICByZXR1cm4gVFlQRVMudmFsdWUodHlwZSlcbn1cblxuZnVuY3Rpb24gdHlwZWZvcmNlICh0eXBlLCB2YWx1ZSwgc3RyaWN0LCBzdXJyb2dhdGUpIHtcbiAgaWYgKE5BVElWRS5GdW5jdGlvbih0eXBlKSkge1xuICAgIGlmICh0eXBlKHZhbHVlLCBzdHJpY3QpKSByZXR1cm4gdHJ1ZVxuXG4gICAgdGhyb3cgbmV3IFRmVHlwZUVycm9yKHN1cnJvZ2F0ZSB8fCB0eXBlLCB2YWx1ZSlcbiAgfVxuXG4gIC8vIEpJVFxuICByZXR1cm4gdHlwZWZvcmNlKGNvbXBpbGUodHlwZSksIHZhbHVlLCBzdHJpY3QpXG59XG5cbi8vIGFzc2lnbiB0eXBlcyB0byB0eXBlZm9yY2UgZnVuY3Rpb25cbmZvciAodmFyIHR5cGVOYW1lIGluIE5BVElWRSkge1xuICB0eXBlZm9yY2VbdHlwZU5hbWVdID0gTkFUSVZFW3R5cGVOYW1lXVxufVxuXG5mb3IgKHR5cGVOYW1lIGluIFRZUEVTKSB7XG4gIHR5cGVmb3JjZVt0eXBlTmFtZV0gPSBUWVBFU1t0eXBlTmFtZV1cbn1cblxudmFyIGV4dHJhID0gcmVxdWlyZSgnLi9leHRyYScpXG5mb3IgKHR5cGVOYW1lIGluIGV4dHJhKSB7XG4gIHR5cGVmb3JjZVt0eXBlTmFtZV0gPSBleHRyYVt0eXBlTmFtZV1cbn1cblxuLy8gYXN5bmMgd3JhcHBlclxuZnVuY3Rpb24gX19hc3luYyAodHlwZSwgdmFsdWUsIHN0cmljdCwgY2FsbGJhY2spIHtcbiAgLy8gZGVmYXVsdCB0byBmYWxzeSBzdHJpY3QgaWYgdXNpbmcgc2hvcnRoYW5kIG92ZXJsb2FkXG4gIGlmICh0eXBlb2Ygc3RyaWN0ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gX19hc3luYyh0eXBlLCB2YWx1ZSwgZmFsc2UsIHN0cmljdClcblxuICB0cnkge1xuICAgIHR5cGVmb3JjZSh0eXBlLCB2YWx1ZSwgc3RyaWN0KVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gIH1cblxuICBjYWxsYmFjaygpXG59XG5cbnR5cGVmb3JjZS5hc3luYyA9IF9fYXN5bmNcbnR5cGVmb3JjZS5jb21waWxlID0gY29tcGlsZVxudHlwZWZvcmNlLlRmVHlwZUVycm9yID0gVGZUeXBlRXJyb3JcbnR5cGVmb3JjZS5UZlByb3BlcnR5VHlwZUVycm9yID0gVGZQcm9wZXJ0eVR5cGVFcnJvclxuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVmb3JjZVxuIiwidmFyIHR5cGVzID0ge1xuICBBcnJheTogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSB9LFxuICBCb29sZWFuOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIH0sXG4gIEZ1bmN0aW9uOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB9LFxuICBOdWxsOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfSxcbiAgTnVtYmVyOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfSxcbiAgT2JqZWN0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfSxcbiAgU3RyaW5nOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfSxcbiAgJyc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfVxufVxuXG5mb3IgKHZhciB0eXBlTmFtZSBpbiB0eXBlcykge1xuICB0eXBlc1t0eXBlTmFtZV0udG9KU09OID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdFxuICB9LmJpbmQobnVsbCwgdHlwZU5hbWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZXNcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG4vLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxXG5cbmZ1bmN0aW9uIGNoZWNrVUludDUzIChuKSB7XG4gIGlmIChuIDwgMCB8fCBuID4gTUFYX1NBRkVfSU5URUdFUiB8fCBuICUgMSAhPT0gMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbHVlIG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIGVuY29kZSAobnVtYmVyLCBidWZmZXIsIG9mZnNldCkge1xuICBjaGVja1VJbnQ1MyhudW1iZXIpXG5cbiAgaWYgKCFidWZmZXIpIGJ1ZmZlciA9IG5ldyBCdWZmZXIoZW5jb2RpbmdMZW5ndGgobnVtYmVyKSlcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAoIW9mZnNldCkgb2Zmc2V0ID0gMFxuXG4gIC8vIDggYml0XG4gIGlmIChudW1iZXIgPCAweGZkKSB7XG4gICAgYnVmZmVyLndyaXRlVUludDgobnVtYmVyLCBvZmZzZXQpXG4gICAgZW5jb2RlLmJ5dGVzID0gMVxuXG4gIC8vIDE2IGJpdFxuICB9IGVsc2UgaWYgKG51bWJlciA8PSAweGZmZmYpIHtcbiAgICBidWZmZXIud3JpdGVVSW50OCgweGZkLCBvZmZzZXQpXG4gICAgYnVmZmVyLndyaXRlVUludDE2TEUobnVtYmVyLCBvZmZzZXQgKyAxKVxuICAgIGVuY29kZS5ieXRlcyA9IDNcblxuICAvLyAzMiBiaXRcbiAgfSBlbHNlIGlmIChudW1iZXIgPD0gMHhmZmZmZmZmZikge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KDB4ZmUsIG9mZnNldClcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRShudW1iZXIsIG9mZnNldCArIDEpXG4gICAgZW5jb2RlLmJ5dGVzID0gNVxuXG4gIC8vIDY0IGJpdFxuICB9IGVsc2Uge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KDB4ZmYsIG9mZnNldClcbiAgICBidWZmZXIud3JpdGVVSW50MzJMRShudW1iZXIgPj4+IDAsIG9mZnNldCArIDEpXG4gICAgYnVmZmVyLndyaXRlVUludDMyTEUoKG51bWJlciAvIDB4MTAwMDAwMDAwKSB8IDAsIG9mZnNldCArIDUpXG4gICAgZW5jb2RlLmJ5dGVzID0gOVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2J1ZmZlciBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKCFvZmZzZXQpIG9mZnNldCA9IDBcblxuICB2YXIgZmlyc3QgPSBidWZmZXIucmVhZFVJbnQ4KG9mZnNldClcblxuICAvLyA4IGJpdFxuICBpZiAoZmlyc3QgPCAweGZkKSB7XG4gICAgZGVjb2RlLmJ5dGVzID0gMVxuICAgIHJldHVybiBmaXJzdFxuXG4gIC8vIDE2IGJpdFxuICB9IGVsc2UgaWYgKGZpcnN0ID09PSAweGZkKSB7XG4gICAgZGVjb2RlLmJ5dGVzID0gM1xuICAgIHJldHVybiBidWZmZXIucmVhZFVJbnQxNkxFKG9mZnNldCArIDEpXG5cbiAgLy8gMzIgYml0XG4gIH0gZWxzZSBpZiAoZmlyc3QgPT09IDB4ZmUpIHtcbiAgICBkZWNvZGUuYnl0ZXMgPSA1XG4gICAgcmV0dXJuIGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0ICsgMSlcblxuICAvLyA2NCBiaXRcbiAgfSBlbHNlIHtcbiAgICBkZWNvZGUuYnl0ZXMgPSA5XG4gICAgdmFyIGxvID0gYnVmZmVyLnJlYWRVSW50MzJMRShvZmZzZXQgKyAxKVxuICAgIHZhciBoaSA9IGJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0ICsgNSlcbiAgICB2YXIgbnVtYmVyID0gaGkgKiAweDAxMDAwMDAwMDAgKyBsb1xuICAgIGNoZWNrVUludDUzKG51bWJlcilcblxuICAgIHJldHVybiBudW1iZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGluZ0xlbmd0aCAobnVtYmVyKSB7XG4gIGNoZWNrVUludDUzKG51bWJlcilcblxuICByZXR1cm4gKFxuICAgIG51bWJlciA8IDB4ZmQgPyAxXG4gIDogbnVtYmVyIDw9IDB4ZmZmZiA/IDNcbiAgOiBudW1iZXIgPD0gMHhmZmZmZmZmZiA/IDVcbiAgOiA5XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGVuY29kZTogZW5jb2RlLCBkZWNvZGU6IGRlY29kZSwgZW5jb2RpbmdMZW5ndGg6IGVuY29kaW5nTGVuZ3RoIH1cbiIsInZhciBiczU4Y2hlY2sgPSByZXF1aXJlKCdiczU4Y2hlY2snKVxuXG5mdW5jdGlvbiBkZWNvZGVSYXcgKGJ1ZmZlciwgdmVyc2lvbikge1xuICAvLyBjaGVjayB2ZXJzaW9uIG9ubHkgaWYgZGVmaW5lZFxuICBpZiAodmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIGJ1ZmZlclswXSAhPT0gdmVyc2lvbikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG5ldHdvcmsgdmVyc2lvbicpXG5cbiAgLy8gdW5jb21wcmVzc2VkXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAzMykge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uOiBidWZmZXJbMF0sXG4gICAgICBwcml2YXRlS2V5OiBidWZmZXIuc2xpY2UoMSwgMzMpLFxuICAgICAgY29tcHJlc3NlZDogZmFsc2VcbiAgICB9XG4gIH1cblxuICAvLyBpbnZhbGlkIGxlbmd0aFxuICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gMzQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBXSUYgbGVuZ3RoJylcblxuICAvLyBpbnZhbGlkIGNvbXByZXNzaW9uIGZsYWdcbiAgaWYgKGJ1ZmZlclszM10gIT09IDB4MDEpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb21wcmVzc2lvbiBmbGFnJylcblxuICByZXR1cm4ge1xuICAgIHZlcnNpb246IGJ1ZmZlclswXSxcbiAgICBwcml2YXRlS2V5OiBidWZmZXIuc2xpY2UoMSwgMzMpLFxuICAgIGNvbXByZXNzZWQ6IHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGVSYXcgKHZlcnNpb24sIHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBCdWZmZXIoY29tcHJlc3NlZCA/IDM0IDogMzMpXG5cbiAgcmVzdWx0LndyaXRlVUludDgodmVyc2lvbiwgMClcbiAgcHJpdmF0ZUtleS5jb3B5KHJlc3VsdCwgMSlcblxuICBpZiAoY29tcHJlc3NlZCkge1xuICAgIHJlc3VsdFszM10gPSAweDAxXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoc3RyaW5nLCB2ZXJzaW9uKSB7XG4gIHJldHVybiBkZWNvZGVSYXcoYnM1OGNoZWNrLmRlY29kZShzdHJpbmcpLCB2ZXJzaW9uKVxufVxuXG5mdW5jdGlvbiBlbmNvZGUgKHZlcnNpb24sIHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnbnVtYmVyJykgcmV0dXJuIGJzNThjaGVjay5lbmNvZGUoZW5jb2RlUmF3KHZlcnNpb24sIHByaXZhdGVLZXksIGNvbXByZXNzZWQpKVxuXG4gIHJldHVybiBiczU4Y2hlY2suZW5jb2RlKFxuICAgIGVuY29kZVJhdyhcbiAgICAgIHZlcnNpb24udmVyc2lvbixcbiAgICAgIHZlcnNpb24ucHJpdmF0ZUtleSxcbiAgICAgIHZlcnNpb24uY29tcHJlc3NlZFxuICAgIClcbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGRlY29kZVJhdzogZGVjb2RlUmF3LFxuICBlbmNvZGU6IGVuY29kZSxcbiAgZW5jb2RlUmF3OiBlbmNvZGVSYXdcbn1cbiIsIi8vIGJhc2UteCBlbmNvZGluZ1xuLy8gRm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0b2NvaW5qcy9iczU4XG4vLyBPcmlnaW5hbGx5IHdyaXR0ZW4gYnkgTWlrZSBIZWFybiBmb3IgQml0Y29pbkpcbi8vIENvcHlyaWdodCAoYykgMjAxMSBHb29nbGUgSW5jXG4vLyBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBTdGVmYW4gVGhvbWFzXG4vLyBNZXJnZWQgQnVmZmVyIHJlZmFjdG9yaW5ncyBmcm9tIGJhc2U1OC1uYXRpdmUgYnkgU3RlcGhlbiBQYWlyXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgQml0UGF5IEluY1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJhc2UgKEFMUEhBQkVUKSB7XG4gIHZhciBBTFBIQUJFVF9NQVAgPSB7fVxuICB2YXIgQkFTRSA9IEFMUEhBQkVULmxlbmd0aFxuICB2YXIgTEVBREVSID0gQUxQSEFCRVQuY2hhckF0KDApXG5cbiAgLy8gcHJlLWNvbXB1dGUgbG9va3VwIHRhYmxlXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQUxQSEFCRVQubGVuZ3RoOyBpKyspIHtcbiAgICBBTFBIQUJFVF9NQVBbQUxQSEFCRVQuY2hhckF0KGkpXSA9IGlcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZSAoc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVybiAnJ1xuXG4gICAgdmFyIGRpZ2l0cyA9IFswXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBzb3VyY2VbaV07IGogPCBkaWdpdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgY2FycnkgKz0gZGlnaXRzW2pdIDw8IDhcbiAgICAgICAgZGlnaXRzW2pdID0gY2FycnkgJSBCQVNFXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgfCAwXG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcbiAgICAgICAgZGlnaXRzLnB1c2goY2FycnkgJSBCQVNFKVxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSAnJ1xuXG4gICAgLy8gZGVhbCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICBmb3IgKHZhciBrID0gMDsgc291cmNlW2tdID09PSAwICYmIGsgPCBzb3VyY2UubGVuZ3RoIC0gMTsgKytrKSBzdHJpbmcgKz0gQUxQSEFCRVRbMF1cbiAgICAvLyBjb252ZXJ0IGRpZ2l0cyB0byBhIHN0cmluZ1xuICAgIGZvciAodmFyIHEgPSBkaWdpdHMubGVuZ3RoIC0gMTsgcSA+PSAwOyAtLXEpIHN0cmluZyArPSBBTFBIQUJFVFtkaWdpdHNbcV1dXG5cbiAgICByZXR1cm4gc3RyaW5nXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUgKHN0cmluZykge1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSByZXR1cm4gW11cblxuICAgIHZhciBieXRlcyA9IFswXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBBTFBIQUJFVF9NQVBbc3RyaW5nW2ldXVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSB2YWx1ZTsgaiA8IGJ5dGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGJ5dGVzW2pdICogQkFTRVxuICAgICAgICBieXRlc1tqXSA9IGNhcnJ5ICYgMHhmZlxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2FycnkgJiAweGZmKVxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHN0cmluZ1trXSA9PT0gTEVBREVSICYmIGsgPCBzdHJpbmcubGVuZ3RoIC0gMTsgKytrKSB7XG4gICAgICBieXRlcy5wdXNoKDApXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ5dGVzLnJldmVyc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYXJyYXkgPSBkZWNvZGVVbnNhZmUoc3RyaW5nKVxuICAgIGlmIChhcnJheSkgcmV0dXJuIGFycmF5XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi1iYXNlJyArIEJBU0UgKyAnIGNoYXJhY3RlcicpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbiIsInZhciBiYXNleCA9IHJlcXVpcmUoJ2Jhc2UteCcpXG52YXIgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNleChBTFBIQUJFVClcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTU4ID0gcmVxdWlyZSgnYnM1OCcpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcblxuLy8gU0hBMjU2KFNIQTI1NihidWZmZXIpKVxuZnVuY3Rpb24gc2hhMjU2eDIgKGJ1ZmZlcikge1xuICB2YXIgdG1wID0gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbiAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZSh0bXApLmRpZ2VzdCgpXG59XG5cbi8vIEVuY29kZSBhIGJ1ZmZlciBhcyBhIGJhc2U1OC1jaGVjayBlbmNvZGVkIHN0cmluZ1xuZnVuY3Rpb24gZW5jb2RlIChwYXlsb2FkKSB7XG4gIHZhciBjaGVja3N1bSA9IHNoYTI1NngyKHBheWxvYWQpXG5cbiAgcmV0dXJuIGJhc2U1OC5lbmNvZGUoQnVmZmVyLmNvbmNhdChbXG4gICAgcGF5bG9hZCxcbiAgICBjaGVja3N1bVxuICBdLCBwYXlsb2FkLmxlbmd0aCArIDQpKVxufVxuXG5mdW5jdGlvbiBkZWNvZGVSYXcgKGJ1ZmZlcikge1xuICB2YXIgcGF5bG9hZCA9IGJ1ZmZlci5zbGljZSgwLCAtNClcbiAgdmFyIGNoZWNrc3VtID0gYnVmZmVyLnNsaWNlKC00KVxuICB2YXIgbmV3Q2hlY2tzdW0gPSBzaGEyNTZ4MihwYXlsb2FkKVxuXG4gIGlmIChjaGVja3N1bVswXSBeIG5ld0NoZWNrc3VtWzBdIHxcbiAgICAgIGNoZWNrc3VtWzFdIF4gbmV3Q2hlY2tzdW1bMV0gfFxuICAgICAgY2hlY2tzdW1bMl0gXiBuZXdDaGVja3N1bVsyXSB8XG4gICAgICBjaGVja3N1bVszXSBeIG5ld0NoZWNrc3VtWzNdKSByZXR1cm5cblxuICByZXR1cm4gcGF5bG9hZFxufVxuXG4vLyBEZWNvZGUgYSBiYXNlNTgtY2hlY2sgZW5jb2RlZCBzdHJpbmcgdG8gYSBidWZmZXIsIG5vIHJlc3VsdCBpZiBjaGVja3N1bSBpcyB3cm9uZ1xuZnVuY3Rpb24gZGVjb2RlVW5zYWZlIChzdHJpbmcpIHtcbiAgdmFyIGFycmF5ID0gYmFzZTU4LmRlY29kZVVuc2FmZShzdHJpbmcpXG4gIGlmICghYXJyYXkpIHJldHVyblxuXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGFycmF5KVxuICByZXR1cm4gZGVjb2RlUmF3KGJ1ZmZlcilcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgdmFyIGFycmF5ID0gYmFzZTU4LmRlY29kZShzdHJpbmcpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGFycmF5KVxuICB2YXIgcGF5bG9hZCA9IGRlY29kZVJhdyhidWZmZXIpXG4gIGlmICghcGF5bG9hZCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNoZWNrc3VtJylcbiAgcmV0dXJuIHBheWxvYWRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG5cbiAgLy8gRklYTUU6IHJlbW92ZSBpbiAyLjAuMFxuICBkZWNvZGVSYXc6IGRlY29kZVVuc2FmZVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy5sb2FkQmxvY2tSYW5nZSA9IGxvYWRCbG9ja1JhbmdlO1xuXG52YXIgX2NoYW5uZWwgPSByZXF1aXJlKCcuL2NoYW5uZWwnKTtcblxuLy8gU29tZSBoZWxwZXIgZnVuY3Rpb25zIGZvciBsb2FkaW5nIGJsb2NrIHN0YXR1c1xuLy8gZnJvbSBibG9ja2NoYWluXG5cbmZ1bmN0aW9uIGxvYWRCbG9ja1JhbmdlKGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBwQmxvY2sgPSBpbml0aWFsU3RhdGUubGFzdEJsb2NrO1xuXG4gICAgcmV0dXJuIGdldEJsb2NrKDApLnRoZW4oZnVuY3Rpb24gKG51bGxCbG9jaykge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudEJsb2NrKCkudGhlbihmdW5jdGlvbiAobGFzdCkge1xuICAgICAgICAgICAgdmFyIGZpcnN0ID0gcEJsb2NrLmhlaWdodCAhPT0gMCA/IGdldEJsb2NrKHBCbG9jay5oZWlnaHQpLnRoZW4oZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmhhc2ggPT09IHBCbG9jay5oYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Jsb2NraGFzaCBtaXNtYXRjaCcsIHBCbG9jaywgYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbEJsb2NrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09ICdSUENFcnJvcjogQmxvY2sgaGVpZ2h0IG91dCBvZiByYW5nZScpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdCbG9jayBoZWlnaHQgb3V0IG9mIHJhbmdlJywgcEJsb2NrLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsQmxvY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pIDogUHJvbWlzZS5yZXNvbHZlKG51bGxCbG9jayk7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbZmlyc3QsIGxhc3RdKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gX3JlZjJbMF0sXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBfcmVmMlsxXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZpcnN0OiBmaXJzdCwgbGFzdDogbGFzdCwgbnVsbEJsb2NrOiBudWxsQmxvY2sgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2soaGVpZ2h0KSB7XG4gICAgcmV0dXJuICgwLCBfY2hhbm5lbC5sb29rdXBCbG9ja0hhc2gpKGhlaWdodCkudGhlbihmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICByZXR1cm4geyBoYXNoOiBoYXNoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50QmxvY2soKSB7XG4gICAgcmV0dXJuICgwLCBfY2hhbm5lbC5sb29rdXBTeW5jU3RhdHVzKSgpLnRoZW4oZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICByZXR1cm4gZ2V0QmxvY2soaGVpZ2h0KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSnNiMk5yY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpzYjJGa1FteHZZMnRTWVc1blpTSXNJbWx1YVhScFlXeFRkR0YwWlNJc0luQkNiRzlqYXlJc0lteGhjM1JDYkc5amF5SXNJbWRsZEVKc2IyTnJJaXdpZEdobGJpSXNJbWRsZEVOMWNuSmxiblJDYkc5amF5SXNJbVpwY25OMElpd2lhR1ZwWjJoMElpd2lZbXh2WTJzaUxDSm9ZWE5vSWl3aVkyOXVjMjlzWlNJc0luZGhjbTRpTENKdWRXeHNRbXh2WTJzaUxDSmxjbklpTENKdFpYTnpZV2RsSWl3aVVISnZiV2x6WlNJc0luSmxjMjlzZG1VaUxDSmhiR3dpTENKc1lYTjBJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3p0UlFXdENaMEpCTEdNc1IwRkJRVUVzWXpzN1FVRlNhRUk3TzBGQlMwRTdRVUZEUVRzN1FVRkZUeXhUUVVGVFFTeGpRVUZVTEVOQlFYZENReXhaUVVGNFFpeEZRVUYzUlR0QlFVTXpSU3hSUVVGTlF5eFRRVUZuUWtRc1lVRkJZVVVzVTBGQmJrTTdPMEZCUlVFc1YwRkJUME1zVTBGQlV5eERRVUZVTEVWQlFWbERMRWxCUVZvc1EwRkJhVUlzY1VKQlFXRTdRVUZEYWtNc1pVRkJUME1zYTBKQlFXdENSQ3hKUVVGc1FpeERRVUYxUWl4blFrRkJVVHRCUVVOc1F5eG5Ra0ZCVFVVc1VVRkJkMEpNTEU5QlFVOU5MRTFCUVZBc1MwRkJhMElzUTBGQmJFSXNSMEZGZUVKS0xGTkJRVk5HTEU5QlFVOU5MRTFCUVdoQ0xFVkJRWGRDU0N4SlFVRjRRaXhEUVVFMlFpeFZRVUZEU1N4TFFVRkVMRVZCUVZjN1FVRkRkRU1zYjBKQlFVbEJMRTFCUVUxRExFbEJRVTRzUzBGQlpWSXNUMEZCVDFFc1NVRkJNVUlzUlVGQlowTTdRVUZETlVJc01rSkJRVTlFTEV0QlFWQTdRVUZEU0N4cFFrRkdSQ3hOUVVWUE8wRkJRMGhGTERSQ1FVRlJReXhKUVVGU0xFTkJRV0VzYjBKQlFXSXNSVUZCYlVOV0xFMUJRVzVETEVWQlFUSkRUeXhMUVVFelF6dEJRVU5CTERKQ1FVRlBTU3hUUVVGUU8wRkJRMGc3UVVGRFNpeGhRVkJETEVWQlQwTXNWVUZCUTBNc1IwRkJSQ3hGUVVGVE8wRkJRMUlzYjBKQlFVbEJMRWxCUVVsRExFOUJRVW9zUzBGQlowSXNjVU5CUVhCQ0xFVkJRVEpFTzBGQlEzWkVTaXcwUWtGQlVVTXNTVUZCVWl4RFFVRmhMREpDUVVGaUxFVkJRVEJEVml4UFFVRlBUU3hOUVVGcVJEdEJRVU5CTERKQ1FVRlBTeXhUUVVGUU8wRkJRMGc3UVVGRFJDeHpRa0ZCVFVNc1IwRkJUanRCUVVOSUxHRkJZa01zUTBGR2QwSXNSMEZwUW5oQ1JTeFJRVUZSUXl4UFFVRlNMRU5CUVdkQ1NpeFRRVUZvUWl4RFFXcENUanM3UVVGdFFrRXNiVUpCUVU5SExGRkJRVkZGTEVkQlFWSXNRMEZCV1N4RFFVRkRXQ3hMUVVGRUxFVkJRVkZaTEVsQlFWSXNRMEZCV2l4RlFVTlJaQ3hKUVVSU0xFTkJRMkU3UVVGQlFUdEJRVUZCTEc5Q1FVRkZSU3hMUVVGR08wRkJRVUVzYjBKQlFWTlpMRWxCUVZRN08wRkJRVUVzZFVKQlFXOUNMRVZCUVVWYUxGbEJRVVlzUlVGQlUxa3NWVUZCVkN4RlFVRmxUaXh2UWtGQlppeEZRVUZ3UWp0QlFVRkJMR0ZCUkdJc1EwRkJVRHRCUVVWSUxGTkJkRUpOTEVOQlFWQTdRVUYxUWtnc1MwRjRRazBzUTBGQlVEdEJRWGxDU0RzN1FVRkZSQ3hUUVVGVFZDeFJRVUZVTEVOQlFXdENTU3hOUVVGc1FpeEZRVUZyUkR0QlFVTTVReXhYUVVGUExEaENRVUZuUWtFc1RVRkJhRUlzUlVGRFdVZ3NTVUZFV2l4RFFVTnBRaXhWUVVGRFN5eEpRVUZFTzBGQlFVRXNaVUZCVnl4RlFVRkZRU3hWUVVGR0xFVkJRVkZHTEdOQlFWSXNSVUZCV0R0QlFVRkJMRXRCUkdwQ0xFTkJRVkE3UVVGRlNEczdRVUZGUkN4VFFVRlRSaXhsUVVGVUxFZEJRVEpETzBGQlEzWkRMRmRCUVU4c2FVTkJRMWRFTEVsQlJGZ3NRMEZEWjBJc1ZVRkJRMGNzVFVGQlJDeEZRVUZaTzBGQlFVVXNaVUZCVDBvc1UwRkJVMGtzVFVGQlZDeERRVUZRTzBGQlFUQkNMRXRCUkhoRUxFTkJRVkE3UVVGRlNDSXNJbVpwYkdVaU9pSmliRzlqYTNNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lCQVpteHZkeUFxTDF4dWFXMXdiM0owSUhSNWNHVWdlMXh1SUNBZ0lFRmpZMjkxYm5SSmJtWnZMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOXBibVJsZUNjN1hHNWNibWx0Y0c5eWRDQjBlWEJsSUh0Y2JpQWdJQ0JDYkc5amF5eGNiaUFnSUNCQ2JHOWphMUpoYm1kbExGeHVmU0JtY205dElDY3VMaTkwZVhCbGN5YzdYRzVjYm1sdGNHOXlkQ0I3WEc0Z0lDQWdiRzl2YTNWd1UzbHVZMU4wWVhSMWN5eGNiaUFnSUNCc2IyOXJkWEJDYkc5amEwaGhjMmdzWEc1OUlHWnliMjBnSnk0dlkyaGhibTVsYkNjN1hHNWNiaTh2SUZOdmJXVWdhR1ZzY0dWeUlHWjFibU4wYVc5dWN5Qm1iM0lnYkc5aFpHbHVaeUJpYkc5amF5QnpkR0YwZFhOY2JpOHZJR1p5YjIwZ1lteHZZMnRqYUdGcGJseHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdiRzloWkVKc2IyTnJVbUZ1WjJVb2FXNXBkR2xoYkZOMFlYUmxPaUJCWTJOdmRXNTBTVzVtYnlrNklGQnliMjFwYzJVOFFteHZZMnRTWVc1blpUNGdlMXh1SUNBZ0lHTnZibk4wSUhCQ2JHOWphem9nUW14dlkyc2dQU0JwYm1sMGFXRnNVM1JoZEdVdWJHRnpkRUpzYjJOck8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdkbGRFSnNiMk5yS0RBcExuUm9aVzRvYm5Wc2JFSnNiMk5ySUQwK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHZGxkRU4xY25KbGJuUkNiRzlqYXlncExuUm9aVzRvYkdGemRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbWFYSnpkRG9nVUhKdmJXbHpaVHhDYkc5amF6NGdQU0J3UW14dlkyc3VhR1ZwWjJoMElDRTlQU0F3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHZGxkRUpzYjJOcktIQkNiRzlqYXk1b1pXbG5hSFFwTG5Sb1pXNG9LR0pzYjJOcktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpYkc5amF5NW9ZWE5vSUQwOVBTQndRbXh2WTJzdWFHRnphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0pzYjJOck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkQ2JHOWphMmhoYzJnZ2JXbHpiV0YwWTJnbkxDQndRbXh2WTJzc0lHSnNiMk5yS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c1FteHZZMnM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0FvWlhKeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25JdWJXVnpjMkZuWlNBOVBUMGdKMUpRUTBWeWNtOXlPaUJDYkc5amF5Qm9aV2xuYUhRZ2IzVjBJRzltSUhKaGJtZGxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZENiRzlqYXlCb1pXbG5hSFFnYjNWMElHOW1JSEpoYm1kbEp5d2djRUpzYjJOckxtaGxhV2RvZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JFSnNiMk5yTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJRY205dGFYTmxMbkpsYzI5c2RtVW9iblZzYkVKc2IyTnJLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdVlXeHNLRnRtYVhKemRDd2diR0Z6ZEYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NoYlptbHljM1FzSUd4aGMzUmRLU0E5UGlBb2V5Qm1hWEp6ZEN3Z2JHRnpkQ3dnYm5Wc2JFSnNiMk5ySUgwcEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEVKc2IyTnJLR2hsYVdkb2REb2diblZ0WW1WeUtUb2dVSEp2YldselpUeENiRzlqYXo0Z2UxeHVJQ0FnSUhKbGRIVnliaUJzYjI5cmRYQkNiRzlqYTBoaGMyZ29hR1ZwWjJoMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1MGFHVnVLQ2hvWVhOb0tTQTlQaUFvZXlCb1lYTm9MQ0JvWldsbmFIUWdmU2twTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSRGRYSnlaVzUwUW14dlkyc29LVG9nVUhKdmJXbHpaVHhDYkc5amF6NGdlMXh1SUNBZ0lISmxkSFZ5YmlCc2IyOXJkWEJUZVc1alUzUmhkSFZ6S0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtDaG9aV2xuYUhRcElEMCtJSHNnY21WMGRYSnVJR2RsZEVKc2IyTnJLR2hsYVdkb2RDazdJSDBwTzF4dWZWeHVYRzRpWFgwPSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zdGFydERpc2NvdmVyeVByb21pc2UgPSBleHBvcnRzLmluaXRQcm9taXNlID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5sb29rdXBTeW5jU3RhdHVzID0gbG9va3VwU3luY1N0YXR1cztcbmV4cG9ydHMubG9va3VwQmxvY2tIYXNoID0gbG9va3VwQmxvY2tIYXNoO1xuZXhwb3J0cy5kb2VzVHJhbnNhY3Rpb25FeGlzdCA9IGRvZXNUcmFuc2FjdGlvbkV4aXN0O1xuZXhwb3J0cy5jaHVua1RyYW5zYWN0aW9ucyA9IGNodW5rVHJhbnNhY3Rpb25zO1xuZXhwb3J0cy5yZXR1cm5TdWNjZXNzID0gcmV0dXJuU3VjY2VzcztcbmV4cG9ydHMucmV0dXJuRXJyb3IgPSByZXR1cm5FcnJvcjtcblxudmFyIF9kZWZlcnJlZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2RlZmVycmVkJyk7XG5cbnZhciBfc3RyZWFtID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvc3RyZWFtJyk7XG5cbi8vIENvZGUgZm9yIGFsbCBjb21tdW5pY2F0aW9uIHdpdGggb3V0c2lkZVxuXG4vLyBUaGVyZSBpcyBhIG1lY2hhbmlzbSBmb3IgXCJzZW5kaW5nXCIgUHJvbWlzZSBmcm9tIG91dHNpZGUgaGVyZVxuLy8gLSBmaXJzdCBJIHNlbmQgcHJvbWlzZVJlcXVlc3QgZnJvbSB3b3JrZXIgdG8gb3V0c2lkZSxcbi8vIGFuZCBJIGVpdGhlciBnZXQgcHJvbWlzZVJlc3BvbnNlU3VjY2VzcyBvciBwcm9taXNlUmVzcG9uc2VGYWlsdXJlXG4vL1xuLy8gU2ltaWxhciBsb2dpYyBmb3IgU3RyZWFtIC0gSSBnZXQgc3RyZWFtUmVxdWVzdCBhbmRcbi8vIHN0cmVhbVJlc3BvbnNlVXBkYXRlIGFuZCBzdHJlYW1SZXNwb25zZUZpbmlzaFxuLy9cbi8vIEl0J3MgbWF5YmUgYSBsaXR0bGUgb3ZlcmtpbGwgOiggYnV0IGl0IGFsbG93cyBtZSB0byBoYXZlIG11bHRpcGxlIHN0cmVhbXNcbi8vIGFuZCBwcm9taXNlcyBvdmVyIG9uZSB3b3JrZXIgY29tbXVuaWNhdGlvblxuXG52YXIgbGFzdElkID0gMDtcblxudmFyIG1lc3NhZ2VFbWl0dGVyID0gbmV3IF9zdHJlYW0uRW1pdHRlcigpO1xuXG5mdW5jdGlvbiBhc2tQcm9taXNlKHJlcXVlc3QpIHtcbiAgICB2YXIgaWQgPSBsYXN0SWQgKyAxO1xuICAgIGxhc3RJZCsrO1xuICAgIGRvUG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAncHJvbWlzZVJlcXVlc3QnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBpZDogaWRcbiAgICB9KTtcbiAgICB2YXIgZGZkID0gKDAsIF9kZWZlcnJlZC5kZWZlcnJlZCkoKTtcbiAgICBtZXNzYWdlRW1pdHRlci5hdHRhY2goZnVuY3Rpb24gKG1lc3NhZ2UsIGRldGFjaCkge1xuICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAncHJvbWlzZVJlc3BvbnNlU3VjY2VzcycpIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlLnR5cGUgPT09IHJlcXVlc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgZGZkLnJlc29sdmUobWVzc2FnZS5yZXNwb25zZS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdwcm9taXNlUmVzcG9uc2VGYWlsdXJlJykge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgZGZkLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZS5mYWlsdXJlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGZkLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGFza1N0cmVhbShyZXF1ZXN0KSB7XG4gICAgdmFyIGlkID0gbGFzdElkICsgMTtcbiAgICBsYXN0SWQrKztcbiAgICBkb1Bvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ3N0cmVhbVJlcXVlc3QnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBpZDogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IF9zdHJlYW0uU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICB2YXIgZW1pdHRlckRldGFjaCA9IGZ1bmN0aW9uIGVtaXR0ZXJEZXRhY2goKSB7fTtcbiAgICAgICAgbWVzc2FnZUVtaXR0ZXIuYXR0YWNoKGZ1bmN0aW9uIChtZXNzYWdlLCBkZXRhY2gpIHtcbiAgICAgICAgICAgIGVtaXR0ZXJEZXRhY2ggPSBkZXRhY2g7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAnc3RyZWFtUmVzcG9uc2VVcGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudXBkYXRlLnR5cGUgPT09IHJlcXVlc3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZShtZXNzYWdlLnVwZGF0ZS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAnc3RyZWFtUmVzcG9uc2VGaW5pc2gnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW1pdHRlckRldGFjaCgpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb29rdXBTeW5jU3RhdHVzKCkge1xuICAgIHJldHVybiBhc2tQcm9taXNlKHsgdHlwZTogJ2xvb2t1cFN5bmNTdGF0dXMnIH0pO1xufVxuXG5mdW5jdGlvbiBsb29rdXBCbG9ja0hhc2goaGVpZ2h0KSB7XG4gICAgcmV0dXJuIGFza1Byb21pc2UoeyB0eXBlOiAnbG9va3VwQmxvY2tIYXNoJywgaGVpZ2h0OiBoZWlnaHQgfSk7XG59XG5cbmZ1bmN0aW9uIGRvZXNUcmFuc2FjdGlvbkV4aXN0KHR4aWQpIHtcbiAgICByZXR1cm4gYXNrUHJvbWlzZSh7IHR5cGU6ICdkb2VzVHJhbnNhY3Rpb25FeGlzdCcsIHR4aWQ6IHR4aWQgfSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rVHJhbnNhY3Rpb25zKGNoYWluSWQsIGZpcnN0SW5kZXgsIGxhc3RJbmRleCwgc3RhcnRCbG9jaywgZW5kQmxvY2ssIHBzZXVkb0NvdW50LCBhZGRyZXNzZXMpIHtcbiAgICByZXR1cm4gYXNrU3RyZWFtKHtcbiAgICAgICAgdHlwZTogJ2NodW5rVHJhbnNhY3Rpb25zJyxcbiAgICAgICAgY2hhaW5JZDogY2hhaW5JZCxcbiAgICAgICAgZmlyc3RJbmRleDogZmlyc3RJbmRleCxcbiAgICAgICAgbGFzdEluZGV4OiBsYXN0SW5kZXgsXG4gICAgICAgIHN0YXJ0QmxvY2s6IHN0YXJ0QmxvY2ssXG4gICAgICAgIGVuZEJsb2NrOiBlbmRCbG9jayxcbiAgICAgICAgcHNldWRvQ291bnQ6IHBzZXVkb0NvdW50LFxuICAgICAgICBhZGRyZXNzZXM6IGFkZHJlc3Nlc1xuICAgIH0pLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiByZXR1cm5TdWNjZXNzKHJlc3VsdCkge1xuICAgIGRvUG9zdE1lc3NhZ2UoeyB0eXBlOiAncmVzdWx0JywgcmVzdWx0OiByZXN1bHQgfSk7XG59XG5cbmZ1bmN0aW9uIHJldHVybkVycm9yKGVycm9yKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICBkb1Bvc3RNZXNzYWdlKHsgdHlwZTogJ2Vycm9yJywgZXJyb3I6IGVycm9yTWVzc2FnZSB9KTtcbn1cblxuZnVuY3Rpb24gZG9Qb3N0TWVzc2FnZShkYXRhKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5zZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICBtZXNzYWdlRW1pdHRlci5lbWl0KGRhdGEpO1xufTtcblxudmFyIGluaXREZmQgPSAoMCwgX2RlZmVycmVkLmRlZmVycmVkKSgpO1xudmFyIGluaXRQcm9taXNlID0gZXhwb3J0cy5pbml0UHJvbWlzZSA9IGluaXREZmQucHJvbWlzZTtcblxubWVzc2FnZUVtaXR0ZXIuYXR0YWNoKGZ1bmN0aW9uIChtZXNzYWdlLCBkZXRhY2gpIHtcbiAgICBpZiAobWVzc2FnZS50eXBlID09PSAnaW5pdCcpIHtcbiAgICAgICAgZGV0YWNoKCk7XG4gICAgICAgIGluaXREZmQucmVzb2x2ZSh7IGFjY291bnRJbmZvOiBtZXNzYWdlLnN0YXRlLCBuZXR3b3JrOiBtZXNzYWdlLm5ldHdvcmssIHhwdWI6IG1lc3NhZ2UueHB1Yiwgc2Vnd2l0OiBtZXNzYWdlLnNlZ3dpdCwgd2ViYXNzZW1ibHk6IG1lc3NhZ2Uud2ViYXNzZW1ibHkgfSk7XG4gICAgfVxufSk7XG5cbnZhciBzdGFydERpc2NvdmVyeURmZCA9ICgwLCBfZGVmZXJyZWQuZGVmZXJyZWQpKCk7XG52YXIgc3RhcnREaXNjb3ZlcnlQcm9taXNlID0gZXhwb3J0cy5zdGFydERpc2NvdmVyeVByb21pc2UgPSBzdGFydERpc2NvdmVyeURmZC5wcm9taXNlO1xuXG5tZXNzYWdlRW1pdHRlci5hdHRhY2goZnVuY3Rpb24gKG1lc3NhZ2UsIGRldGFjaCkge1xuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdzdGFydERpc2NvdmVyeScpIHtcbiAgICAgICAgZGV0YWNoKCk7XG4gICAgICAgIHN0YXJ0RGlzY292ZXJ5RGZkLnJlc29sdmUoKTtcbiAgICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTm9ZVzV1Wld3dWFuTWlYU3dpYm1GdFpYTWlPbHNpYkc5dmEzVndVM2x1WTFOMFlYUjFjeUlzSW14dmIydDFjRUpzYjJOclNHRnphQ0lzSW1SdlpYTlVjbUZ1YzJGamRHbHZia1Y0YVhOMElpd2lZMmgxYm10VWNtRnVjMkZqZEdsdmJuTWlMQ0p5WlhSMWNtNVRkV05qWlhOeklpd2ljbVYwZFhKdVJYSnliM0lpTENKc1lYTjBTV1FpTENKdFpYTnpZV2RsUlcxcGRIUmxjaUlzSW1GemExQnliMjFwYzJVaUxDSnlaWEYxWlhOMElpd2lhV1FpTENKa2IxQnZjM1JOWlhOellXZGxJaXdpZEhsd1pTSXNJbVJtWkNJc0ltRjBkR0ZqYUNJc0ltMWxjM05oWjJVaUxDSmtaWFJoWTJnaUxDSnlaWE53YjI1elpTSXNJbkpsYzI5c2RtVWlMQ0p5WldwbFkzUWlMQ0pGY25KdmNpSXNJbVpoYVd4MWNtVWlMQ0p3Y205dGFYTmxJaXdpWVhOclUzUnlaV0Z0SWl3aWRYQmtZWFJsSWl3aVptbHVhWE5vSWl3aVpXMXBkSFJsY2tSbGRHRmphQ0lzSW1obGFXZG9kQ0lzSW5SNGFXUWlMQ0pqYUdGcGJrbGtJaXdpWm1seWMzUkpibVJsZUNJc0lteGhjM1JKYm1SbGVDSXNJbk4wWVhKMFFteHZZMnNpTENKbGJtUkNiRzlqYXlJc0luQnpaWFZrYjBOdmRXNTBJaXdpWVdSa2NtVnpjMlZ6SWl3aWJXRndJaXdpYXlJc0luSmxjM1ZzZENJc0ltVnljbTl5SWl3aVpYSnliM0pOWlhOellXZGxJaXdpZEc5VGRISnBibWNpTENKa1lYUmhJaXdpYzJWc1ppSXNJbkJ2YzNSTlpYTnpZV2RsSWl3aWIyNXRaWE56WVdkbElpd2laWFpsYm5RaUxDSmxiV2wwSWl3aWFXNXBkRVJtWkNJc0ltbHVhWFJRY205dGFYTmxJaXdpWVdOamIzVnVkRWx1Wm04aUxDSnpkR0YwWlNJc0ltNWxkSGR2Y21zaUxDSjRjSFZpSWl3aWMyVm5kMmwwSWl3aWQyVmlZWE56WlcxaWJIa2lMQ0p6ZEdGeWRFUnBjMk52ZG1WeWVVUm1aQ0lzSW5OMFlYSjBSR2x6WTI5MlpYSjVVSEp2YldselpTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPMUZCTmtablFrRXNaMElzUjBGQlFVRXNaMEk3VVVGSlFVTXNaU3hIUVVGQlFTeGxPMUZCU1VGRExHOUNMRWRCUVVGQkxHOUNPMUZCU1VGRExHbENMRWRCUVVGQkxHbENPMUZCTUVKQlF5eGhMRWRCUVVGQkxHRTdVVUZKUVVNc1Z5eEhRVUZCUVN4WE96dEJRWEpKYUVJN08wRkJRMEU3TzBGQlkwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxFbEJRVWxETEZOQlFXbENMRU5CUVhKQ096dEJRVVZCTEVsQlFVMURMR2xDUVVGeFF5eHhRa0ZCTTBNN08wRkJSVUVzVTBGQlUwTXNWVUZCVkN4RFFVRnZRa01zVDBGQmNFSXNSVUZCSzBRN1FVRkRNMFFzVVVGQlRVTXNTMEZCUzBvc1UwRkJVeXhEUVVGd1FqdEJRVU5CUVR0QlFVTkJTeXhyUWtGQll6dEJRVU5XUXl4alFVRk5MR2RDUVVSSk8wRkJSVlpJTEhkQ1FVWlZPMEZCUjFaRE8wRkJTRlVzUzBGQlpEdEJRVXRCTEZGQlFVMUhMRTFCUVUwc2VVSkJRVm83UVVGRFFVNHNiVUpCUVdWUExFMUJRV1lzUTBGQmMwSXNWVUZCUTBNc1QwRkJSQ3hGUVVGVlF5eE5RVUZXTEVWQlFYRkNPMEZCUTNaRExGbEJRVWxFTEZGQlFWRklMRWxCUVZJc1MwRkJhVUlzZDBKQlFYSkNMRVZCUVN0RE8wRkJRek5ETEdkQ1FVRkpSeXhSUVVGUlJTeFJRVUZTTEVOQlFXbENUQ3hKUVVGcVFpeExRVUV3UWtnc1VVRkJVVWNzU1VGQmRFTXNSVUZCTkVNN1FVRkRlRU1zYjBKQlFVbEhMRkZCUVZGTUxFVkJRVklzUzBGQlpVRXNSVUZCYmtJc1JVRkJkVUk3UVVGRGJrSk5PMEZCUTBGSUxIZENRVUZKU3l4UFFVRktMRU5CUVZsSUxGRkJRVkZGTEZGQlFWSXNRMEZCYVVKQkxGRkJRVGRDTzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBRc1dVRkJTVVlzVVVGQlVVZ3NTVUZCVWl4TFFVRnBRaXgzUWtGQmNrSXNSVUZCSzBNN1FVRkRNME1zWjBKQlFVbEhMRkZCUVZGTUxFVkJRVklzUzBGQlpVRXNSVUZCYmtJc1JVRkJkVUk3UVVGRGJrSk5PMEZCUTBGSUxHOUNRVUZKVFN4TlFVRktMRU5CUVZjc1NVRkJTVU1zUzBGQlNpeERRVUZWVEN4UlFVRlJUU3hQUVVGc1FpeERRVUZZTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCWmtRN1FVRm5Ra0VzVjBGQlQxSXNTVUZCU1ZNc1QwRkJXRHRCUVVOSU96dEJRVVZFTEZOQlFWTkRMRk5CUVZRc1EwRkJiVUprTEU5QlFXNUNMRVZCUVRSRU8wRkJRM2hFTEZGQlFVMURMRXRCUVV0S0xGTkJRVk1zUTBGQmNFSTdRVUZEUVVFN1FVRkRRVXNzYTBKQlFXTTdRVUZEVmtNc1kwRkJUU3hsUVVSSk8wRkJSVlpJTEhkQ1FVWlZPMEZCUjFaRE8wRkJTRlVzUzBGQlpEdEJRVXRCTEZkQlFVOHNiVUpCUVZjc1ZVRkJRMk1zVFVGQlJDeEZRVUZUUXl4TlFVRlVMRVZCUVc5Q08wRkJRMnhETEZsQlFVbERMR2RDUVVGblFpeDVRa0ZCVFN4RFFVRkZMRU5CUVRWQ08wRkJRMEZ1UWl4MVFrRkJaVThzVFVGQlppeERRVUZ6UWl4VlFVRkRReXhQUVVGRUxFVkJRWEZDUXl4TlFVRnlRaXhGUVVGblF6dEJRVU5zUkZVc05FSkJRV2RDVml4TlFVRm9RanRCUVVOQkxHZENRVUZKUkN4UlFVRlJTQ3hKUVVGU0xFdEJRV2xDTEhOQ1FVRnlRaXhGUVVFMlF6dEJRVU42UXl4dlFrRkJTVWNzVVVGQlVWTXNUVUZCVWl4RFFVRmxXaXhKUVVGbUxFdEJRWGRDU0N4UlFVRlJSeXhKUVVGd1F5eEZRVUV3UXp0QlFVTjBReXgzUWtGQlNVY3NVVUZCVVV3c1JVRkJVaXhMUVVGbFFTeEZRVUZ1UWl4RlFVRjFRanRCUVVOdVFtTXNLMEpCUVU5VUxGRkJRVkZUTEUxQlFWSXNRMEZCWlZBc1VVRkJkRUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4blFrRkJTVVlzVVVGQlVVZ3NTVUZCVWl4TFFVRnBRaXh6UWtGQmNrSXNSVUZCTmtNN1FVRkRla01zYjBKQlFVbEhMRkZCUVZGTUxFVkJRVklzUzBGQlpVRXNSVUZCYmtJc1JVRkJkVUk3UVVGRGJrSk5PMEZCUTBGVE8wRkJRMGc3UVVGRFNqdEJRVU5LTEZOQlprUTdRVUZuUWtFc1pVRkJUeXhaUVVGTk8wRkJRMVJETzBGQlEwZ3NVMEZHUkR0QlFVZElMRXRCY2tKTkxFTkJRVkE3UVVGelFrZzdPMEZCUlUwc1UwRkJVekZDTEdkQ1FVRlVMRWRCUVRaRE8wRkJRMmhFTEZkQlFVOVJMRmRCUVZjc1JVRkJRMGtzVFVGQlRTeHJRa0ZCVUN4RlFVRllMRU5CUVZBN1FVRkRTRHM3UVVGRlRTeFRRVUZUV0N4bFFVRlVMRU5CUVhsQ01FSXNUVUZCZWtJc1JVRkJNRVE3UVVGRE4wUXNWMEZCVDI1Q0xGZEJRVmNzUlVGQlEwa3NUVUZCVFN4cFFrRkJVQ3hGUVVFd1FtVXNZMEZCTVVJc1JVRkJXQ3hEUVVGUU8wRkJRMGc3TzBGQlJVMHNVMEZCVTNwQ0xHOUNRVUZVTEVOQlFUaENNRUlzU1VGQk9VSXNSVUZCT0VRN1FVRkRha1VzVjBGQlQzQkNMRmRCUVZjc1JVRkJRMGtzVFVGQlRTeHpRa0ZCVUN4RlFVRXJRbWRDTEZWQlFTOUNMRVZCUVZnc1EwRkJVRHRCUVVOSU96dEJRVVZOTEZOQlFWTjZRaXhwUWtGQlZDeERRVU5JTUVJc1QwRkVSeXhGUVVWSVF5eFZRVVpITEVWQlIwaERMRk5CU0Vjc1JVRkpTRU1zVlVGS1J5eEZRVXRJUXl4UlFVeEhMRVZCVFVoRExGZEJUa2NzUlVGUFNFTXNVMEZRUnl4RlFWRXJRanRCUVVOc1F5eFhRVUZQV2l4VlFVRlZPMEZCUTJKWUxHTkJRVTBzYlVKQlJFODdRVUZGWW1sQ0xIZENRVVpoTzBGQlIySkRMRGhDUVVoaE8wRkJTV0pETERSQ1FVcGhPMEZCUzJKRExEaENRVXhoTzBGQlRXSkRMREJDUVU1aE8wRkJUMkpETEdkRFFWQmhPMEZCVVdKRE8wRkJVbUVzUzBGQlZpeEZRVk5LUXl4SFFWUkpMRU5CVTBFc1ZVRkJRME1zUTBGQlJDeEZRVUZyUlR0QlFVTnlSU3haUVVGSkxFOUJRVTlCTEVOQlFWQXNTMEZCWVN4UlFVRnFRaXhGUVVFeVFqdEJRVU4yUWl4dFFrRkJUeXhKUVVGSmFrSXNTMEZCU2l4RFFVRlZhVUlzUTBGQlZpeERRVUZRTzBGQlEwZzdRVUZEUkN4bFFVRlBRU3hEUVVGUU8wRkJRMGdzUzBGa1RTeERRVUZRTzBGQlpVZzdPMEZCUlUwc1UwRkJVMnBETEdGQlFWUXNRMEZCZFVKclF5eE5RVUYyUWl4RlFVRnJSRHRCUVVOeVJETkNMR3RDUVVGakxFVkJRVU5ETEUxQlFVMHNVVUZCVUN4RlFVRnBRakJDTEdOQlFXcENMRVZCUVdRN1FVRkRTRHM3UVVGRlRTeFRRVUZUYWtNc1YwRkJWQ3hEUVVGeFFtdERMRXRCUVhKQ0xFVkJRV3RFTzBGQlEzSkVMRkZCUVUxRExHVkJRWFZDUkN4cFFrRkJhVUp1UWl4TFFVRnFRaXhIUVVGNVFtMUNMRTFCUVUxNFFpeFBRVUV2UWl4SFFVRjVRM2RDTEUxQlFVMUZMRkZCUVU0c1JVRkJkRVU3UVVGRFFUbENMR3RDUVVGakxFVkJRVU5ETEUxQlFVMHNUMEZCVUN4RlFVRm5RakpDTEU5QlFVOURMRmxCUVhaQ0xFVkJRV1E3UVVGRFNEczdRVUZGUkN4VFFVRlROMElzWVVGQlZDeERRVUYxUWl0Q0xFbEJRWFpDTEVWQlFYbERPMEZCUTNKRFF5eFRRVUZMUXl4WFFVRk1MRU5CUTBsR0xFbEJSRW83UVVGSFNEczdRVUZGUkR0QlFVTkJReXhMUVVGTFJTeFRRVUZNTEVkQlFXbENMRlZCUVZWRExFdEJRVllzUlVGQmIwTTdRVUZEYWtRc1VVRkJUVW9zVDBGQmEwSkpMRTFCUVUxS0xFbEJRVGxDTzBGQlEwRnVReXh0UWtGQlpYZERMRWxCUVdZc1EwRkJiMEpNTEVsQlFYQkNPMEZCUTBnc1EwRklSRHM3UVVGTFFTeEpRVUZOVFN4VlFVRlZMSGxDUVVGb1FqdEJRVU5QTEVsQlFVMURMRzlEUVVGdlNVUXNVVUZCVVRGQ0xFOUJRV3hLT3p0QlFVVlFaaXhsUVVGbFR5eE5RVUZtTEVOQlFYTkNMRlZCUVVORExFOUJRVVFzUlVGQlZVTXNUVUZCVml4RlFVRnhRanRCUVVOMlF5eFJRVUZKUkN4UlFVRlJTQ3hKUVVGU0xFdEJRV2xDTEUxQlFYSkNMRVZCUVRaQ08wRkJRM3BDU1R0QlFVTkJaME1zWjBKQlFWRTVRaXhQUVVGU0xFTkJRV2RDTEVWQlFVTm5ReXhoUVVGaGJrTXNVVUZCVVc5RExFdEJRWFJDTEVWQlFUWkNReXhUUVVGVGNrTXNVVUZCVVhGRExFOUJRVGxETEVWQlFYVkVReXhOUVVGTmRFTXNVVUZCVVhORExFbEJRWEpGTEVWQlFUSkZReXhSUVVGUmRrTXNVVUZCVVhWRExFMUJRVE5HTEVWQlFXMUhReXhoUVVGaGVFTXNVVUZCVVhkRExGZEJRWGhJTEVWQlFXaENPMEZCUTBnN1FVRkRTaXhEUVV4RU96dEJRVTlCTEVsQlFVMURMRzlDUVVGdlFpeDVRa0ZCTVVJN1FVRkRUeXhKUVVGTlF5eDNSRUZCZFVORUxHdENRVUZyUW14RExFOUJRUzlFT3p0QlFVVlFaaXhsUVVGbFR5eE5RVUZtTEVOQlFYTkNMRlZCUVVORExFOUJRVVFzUlVGQlZVTXNUVUZCVml4RlFVRnhRanRCUVVOMlF5eFJRVUZKUkN4UlFVRlJTQ3hKUVVGU0xFdEJRV2xDTEdkQ1FVRnlRaXhGUVVGMVF6dEJRVU51UTBrN1FVRkRRWGRETERCQ1FVRnJRblJETEU5QlFXeENPMEZCUTBnN1FVRkRTaXhEUVV4RUlpd2labWxzWlNJNkltTm9ZVzV1Wld3dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lCQVpteHZkeUFxTDF4dVhHNXBiWEJ2Y25RZ2V5QmtaV1psY25KbFpDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVjBhV3h6TDJSbFptVnljbVZrSnp0Y2JtbHRjRzl5ZENCN0lFVnRhWFIwWlhJc0lGTjBjbVZoYlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNWMGFXeHpMM04wY21WaGJTYzdYRzVwYlhCdmNuUWdkSGx3WlNCN1hHNGdJQ0FnU1c1TlpYTnpZV2RsTEZ4dUlDQWdJRkJ5YjIxcGMyVlNaWEYxWlhOMFZIbHdaU3hjYmlBZ0lDQlRkSEpsWVcxU1pYRjFaWE4wVkhsd1pTeGNiaUFnSUNCRGFIVnVhMFJwYzJOdmRtVnllVWx1Wm04c1hHNGdJQ0FnVDNWMFRXVnpjMkZuWlN4Y2JuMGdabkp2YlNBbkxpNHZkSGx3WlhNbk8xeHVYRzVwYlhCdmNuUWdkSGx3WlNCN1hHNGdJQ0FnUVdOamIzVnVkRWx1Wm04c1hHNTlJR1p5YjIwZ0p5NHVMeTR1TDJsdVpHVjRKenRjYm1sdGNHOXlkQ0IwZVhCbElIdE9aWFIzYjNKcklHRnpJRUpwZEdOdmFXNUtjMDVsZEhkdmNtdDlJR1p5YjIwZ0oySnBkR052YVc1cWN5MXNhV0l0ZW1OaGMyZ25PMXh1WEc0dkx5QkRiMlJsSUdadmNpQmhiR3dnWTI5dGJYVnVhV05oZEdsdmJpQjNhWFJvSUc5MWRITnBaR1ZjYmx4dUx5OGdWR2hsY21VZ2FYTWdZU0J0WldOb1lXNXBjMjBnWm05eUlGd2ljMlZ1WkdsdVoxd2lJRkJ5YjIxcGMyVWdabkp2YlNCdmRYUnphV1JsSUdobGNtVmNiaTh2SUMwZ1ptbHljM1FnU1NCelpXNWtJSEJ5YjIxcGMyVlNaWEYxWlhOMElHWnliMjBnZDI5eWEyVnlJSFJ2SUc5MWRITnBaR1VzWEc0dkx5QmhibVFnU1NCbGFYUm9aWElnWjJWMElIQnliMjFwYzJWU1pYTndiMjV6WlZOMVkyTmxjM01nYjNJZ2NISnZiV2x6WlZKbGMzQnZibk5sUm1GcGJIVnlaVnh1THk5Y2JpOHZJRk5wYldsc1lYSWdiRzluYVdNZ1ptOXlJRk4wY21WaGJTQXRJRWtnWjJWMElITjBjbVZoYlZKbGNYVmxjM1FnWVc1a1hHNHZMeUJ6ZEhKbFlXMVNaWE53YjI1elpWVndaR0YwWlNCaGJtUWdjM1J5WldGdFVtVnpjRzl1YzJWR2FXNXBjMmhjYmk4dlhHNHZMeUJKZENkeklHMWhlV0psSUdFZ2JHbDBkR3hsSUc5MlpYSnJhV3hzSURvb0lHSjFkQ0JwZENCaGJHeHZkM01nYldVZ2RHOGdhR0YyWlNCdGRXeDBhWEJzWlNCemRISmxZVzF6WEc0dkx5QmhibVFnY0hKdmJXbHpaWE1nYjNabGNpQnZibVVnZDI5eWEyVnlJR052YlcxMWJtbGpZWFJwYjI1Y2JseHViR1YwSUd4aGMzUkpaRG9nYm5WdFltVnlJRDBnTUR0Y2JseHVZMjl1YzNRZ2JXVnpjMkZuWlVWdGFYUjBaWEk2SUVWdGFYUjBaWEk4U1c1TlpYTnpZV2RsUGlBOUlHNWxkeUJGYldsMGRHVnlLQ2s3WEc1Y2JtWjFibU4wYVc5dUlHRnphMUJ5YjIxcGMyVW9jbVZ4ZFdWemREb2dVSEp2YldselpWSmxjWFZsYzNSVWVYQmxLVG9nVUhKdmJXbHpaVHhoYm5rK0lIdGNiaUFnSUNCamIyNXpkQ0JwWkNBOUlHeGhjM1JKWkNBcklERTdYRzRnSUNBZ2JHRnpkRWxrS3lzN1hHNGdJQ0FnWkc5UWIzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZHdjbTl0YVhObFVtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNRc1hHNGdJQ0FnSUNBZ0lHbGtMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lHTnZibk4wSUdSbVpDQTlJR1JsWm1WeWNtVmtLQ2s3WEc0Z0lDQWdiV1Z6YzJGblpVVnRhWFIwWlhJdVlYUjBZV05vS0NodFpYTnpZV2RsTENCa1pYUmhZMmdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjNCeWIyMXBjMlZTWlhOd2IyNXpaVk4xWTJObGMzTW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldWemMyRm5aUzV5WlhOd2IyNXpaUzUwZVhCbElEMDlQU0J5WlhGMVpYTjBMblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldWemMyRm5aUzVwWkNBOVBUMGdhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1YwWVdOb0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbVpDNXlaWE52YkhabEtHMWxjM05oWjJVdWNtVnpjRzl1YzJVdWNtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYldWemMyRm5aUzUwZVhCbElEMDlQU0FuY0hKdmJXbHpaVkpsYzNCdmJuTmxSbUZwYkhWeVpTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhOellXZGxMbWxrSUQwOVBTQnBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGRHRmphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbVpDNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtHMWxjM05oWjJVdVptRnBiSFZ5WlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJR1JtWkM1d2NtOXRhWE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJoYzJ0VGRISmxZVzBvY21WeGRXVnpkRG9nVTNSeVpXRnRVbVZ4ZFdWemRGUjVjR1VwT2lCVGRISmxZVzA4WVc1NVBpQjdYRzRnSUNBZ1kyOXVjM1FnYVdRZ1BTQnNZWE4wU1dRZ0t5QXhPMXh1SUNBZ0lHeGhjM1JKWkNzck8xeHVJQ0FnSUdSdlVHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5jM1J5WldGdFVtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNRc1hHNGdJQ0FnSUNBZ0lHbGtMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVM1J5WldGdEtDaDFjR1JoZEdVc0lHWnBibWx6YUNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pXMXBkSFJsY2tSbGRHRmphQ0E5SUNncElEMCtJSHQ5TzF4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsUlcxcGRIUmxjaTVoZEhSaFkyZ29LRzFsYzNOaFoyVTZJRWx1VFdWemMyRm5aU3dnWkdWMFlXTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYldsMGRHVnlSR1YwWVdOb0lEMGdaR1YwWVdOb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0ozTjBjbVZoYlZKbGMzQnZibk5sVlhCa1lYUmxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRaWE56WVdkbExuVndaR0YwWlM1MGVYQmxJRDA5UFNCeVpYRjFaWE4wTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsYzNOaFoyVXVhV1FnUFQwOUlHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9iV1Z6YzJGblpTNTFjR1JoZEdVdWNtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsYzNOaFoyVXVkSGx3WlNBOVBUMGdKM04wY21WaGJWSmxjM0J2Ym5ObFJtbHVhWE5vSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhOellXZGxMbWxrSUQwOVBTQnBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWFJoWTJnb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdWFYTm9LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnRhWFIwWlhKRVpYUmhZMmdvS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUd4dmIydDFjRk41Ym1OVGRHRjBkWE1vS1RvZ1VISnZiV2x6WlR4dWRXMWlaWEkrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZWE5yVUhKdmJXbHpaU2g3ZEhsd1pUb2dKMnh2YjJ0MWNGTjVibU5UZEdGMGRYTW5mU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnNiMjlyZFhCQ2JHOWphMGhoYzJnb2FHVnBaMmgwT2lCdWRXMWlaWElwT2lCUWNtOXRhWE5sUEhOMGNtbHVaejRnZTF4dUlDQWdJSEpsZEhWeWJpQmhjMnRRY205dGFYTmxLSHQwZVhCbE9pQW5iRzl2YTNWd1FteHZZMnRJWVhOb0p5d2dhR1ZwWjJoMGZTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa2IyVnpWSEpoYm5OaFkzUnBiMjVGZUdsemRDaDBlR2xrT2lCemRISnBibWNwT2lCUWNtOXRhWE5sUEdKdmIyeGxZVzQrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZWE5yVUhKdmJXbHpaU2g3ZEhsd1pUb2dKMlJ2WlhOVWNtRnVjMkZqZEdsdmJrVjRhWE4wSnl3Z2RIaHBaSDBwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMmgxYm10VWNtRnVjMkZqZEdsdmJuTW9YRzRnSUNBZ1kyaGhhVzVKWkRvZ2JuVnRZbVZ5TEZ4dUlDQWdJR1pwY25OMFNXNWtaWGc2SUc1MWJXSmxjaXhjYmlBZ0lDQnNZWE4wU1c1a1pYZzZJRzUxYldKbGNpeGNiaUFnSUNCemRHRnlkRUpzYjJOck9pQnVkVzFpWlhJc1hHNGdJQ0FnWlc1a1FteHZZMnM2SUc1MWJXSmxjaXhjYmlBZ0lDQndjMlYxWkc5RGIzVnVkRG9nYm5WdFltVnlMRnh1SUNBZ0lHRmtaSEpsYzNObGN6b2dQMEZ5Y21GNVBITjBjbWx1Wno1Y2JpazZJRk4wY21WaGJUeERhSFZ1YTBScGMyTnZkbVZ5ZVVsdVptOGdmQ0JGY25KdmNqNGdlMXh1SUNBZ0lISmxkSFZ5YmlCaGMydFRkSEpsWVcwb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBblkyaDFibXRVY21GdWMyRmpkR2x2Ym5NbkxGeHVJQ0FnSUNBZ0lDQmphR0ZwYmtsa0xGeHVJQ0FnSUNBZ0lDQm1hWEp6ZEVsdVpHVjRMRnh1SUNBZ0lDQWdJQ0JzWVhOMFNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUhOMFlYSjBRbXh2WTJzc1hHNGdJQ0FnSUNBZ0lHVnVaRUpzYjJOckxGeHVJQ0FnSUNBZ0lDQndjMlYxWkc5RGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnWVdSa2NtVnpjMlZ6TEZ4dUlDQWdJSDBwTG0xaGNDZ29hem9nUTJoMWJtdEVhWE5qYjNabGNubEpibVp2SUh3Z2MzUnlhVzVuS1RvZ0tFTm9kVzVyUkdselkyOTJaWEo1U1c1bWJ5QjhJRVZ5Y205eUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2F5QTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUlhKeWIzSW9heWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdzN1hHNGdJQ0FnZlNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WlhSMWNtNVRkV05qWlhOektISmxjM1ZzZERvZ1FXTmpiM1Z1ZEVsdVptOHBPaUIyYjJsa0lIdGNiaUFnSUNCa2IxQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5jbVZ6ZFd4MEp5d2djbVZ6ZFd4MGZTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCeVpYUjFjbTVGY25KdmNpaGxjbkp2Y2pvZ1JYSnliM0lnZkNCemRISnBibWNwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCbGNuSnZjazFsYzNOaFoyVTZJSE4wY21sdVp5QTlJR1Z5Y205eUlHbHVjM1JoYm1ObGIyWWdSWEp5YjNJZ1B5Qmxjbkp2Y2k1dFpYTnpZV2RsSURvZ1pYSnliM0l1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0JrYjFCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBblpYSnliM0luTENCbGNuSnZjam9nWlhKeWIzSk5aWE56WVdkbGZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnZVRzl6ZEUxbGMzTmhaMlVvWkdGMFlUb2dUM1YwVFdWemMyRm5aU2tnZTF4dUlDQWdJSE5sYkdZdWNHOXpkRTFsYzNOaFoyVW9YRzRnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FwTzF4dWZWeHVYRzR2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNWtaV1pjYm5ObGJHWXViMjV0WlhOellXZGxJRDBnWm5WdVkzUnBiMjRnS0dWMlpXNTBPaUI3WkdGMFlUb2dTVzVOWlhOellXZGxmU2tnZTF4dUlDQWdJR052Ym5OMElHUmhkR0U2SUVsdVRXVnpjMkZuWlNBOUlHVjJaVzUwTG1SaGRHRTdYRzRnSUNBZ2JXVnpjMkZuWlVWdGFYUjBaWEl1WlcxcGRDaGtZWFJoS1R0Y2JuMDdYRzVjYm1OdmJuTjBJR2x1YVhSRVptUWdQU0JrWldabGNuSmxaQ2dwTzF4dVpYaHdiM0owSUdOdmJuTjBJR2x1YVhSUWNtOXRhWE5sT2lCUWNtOXRhWE5sUEh0aFkyTnZkVzUwU1c1bWJ6b2dQMEZqWTI5MWJuUkpibVp2TENCdVpYUjNiM0pyT2lCQ2FYUmpiMmx1U25OT1pYUjNiM0pyTENCNGNIVmlPaUJ6ZEhKcGJtY3NJSE5sWjNkcGREb2dZbTl2YkdWaGJpd2dkMlZpWVhOelpXMWliSGs2SUdKdmIyeGxZVzU5UGlBOUlHbHVhWFJFWm1RdWNISnZiV2x6WlR0Y2JseHViV1Z6YzJGblpVVnRhWFIwWlhJdVlYUjBZV05vS0NodFpYTnpZV2RsTENCa1pYUmhZMmdwSUQwK0lIdGNiaUFnSUNCcFppQW9iV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5hVzVwZENjcElIdGNiaUFnSUNBZ0lDQWdaR1YwWVdOb0tDazdYRzRnSUNBZ0lDQWdJR2x1YVhSRVptUXVjbVZ6YjJ4MlpTaDdZV05qYjNWdWRFbHVabTg2SUcxbGMzTmhaMlV1YzNSaGRHVXNJRzVsZEhkdmNtczZJRzFsYzNOaFoyVXVibVYwZDI5eWF5d2dlSEIxWWpvZ2JXVnpjMkZuWlM1NGNIVmlMQ0J6WldkM2FYUTZJRzFsYzNOaFoyVXVjMlZuZDJsMExDQjNaV0poYzNObGJXSnNlVG9nYldWemMyRm5aUzUzWldKaGMzTmxiV0pzZVgwcE8xeHVJQ0FnSUgxY2JuMHBPMXh1WEc1amIyNXpkQ0J6ZEdGeWRFUnBjMk52ZG1WeWVVUm1aQ0E5SUdSbFptVnljbVZrS0NrN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnYzNSaGNuUkVhWE5qYjNabGNubFFjbTl0YVhObE9pQlFjbTl0YVhObFBIWnZhV1ErSUQwZ2MzUmhjblJFYVhOamIzWmxjbmxFWm1RdWNISnZiV2x6WlR0Y2JseHViV1Z6YzJGblpVVnRhWFIwWlhJdVlYUjBZV05vS0NodFpYTnpZV2RsTENCa1pYUmhZMmdwSUQwK0lIdGNiaUFnSUNCcFppQW9iV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5jM1JoY25SRWFYTmpiM1psY25rbktTQjdYRzRnSUNBZ0lDQWdJR1JsZEdGamFDZ3BPMXh1SUNBZ0lDQWdJQ0J6ZEdGeWRFUnBjMk52ZG1WeWVVUm1aQzV5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdmVnh1ZlNrN1hHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlcml2ZURhdGVGb3JtYXRzID0gZGVyaXZlRGF0ZUZvcm1hdHM7XG5cblxuLy8gRnVuY3Rpb25zIGZvciBkYXRlIGZvcm1hdHRpbmdcbmZ1bmN0aW9uIGRlcml2ZURhdGVGb3JtYXRzKHQpIHtcbiAgICBpZiAodCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlSW5mbzogbnVsbCxcbiAgICAgICAgICAgIGRhdGVJbmZvRGF5Rm9ybWF0OiBudWxsLFxuICAgICAgICAgICAgZGF0ZUluZm9UaW1lRm9ybWF0OiBudWxsXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRfID0gdDtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0XyAqIDEwMDApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0ZUluZm86IGRhdGUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGRhdGVJbmZvRGF5Rm9ybWF0OiBkYXRlVG9EYXlGb3JtYXQoZGF0ZSksXG4gICAgICAgICAgICBkYXRlSW5mb1RpbWVGb3JtYXQ6IGRhdGVUb1RpbWVGb3JtYXQoZGF0ZSlcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUb1RpbWVGb3JtYXQoZGF0ZSkge1xuICAgIHZhciBoaCA9IGFkZFplcm8oZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkpO1xuICAgIHZhciBtbSA9IGFkZFplcm8oZGF0ZS5nZXRNaW51dGVzKCkudG9TdHJpbmcoKSk7XG4gICAgdmFyIHNzID0gYWRkWmVybyhkYXRlLmdldFNlY29uZHMoKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gaGggKyAnOicgKyBtbSArICc6JyArIHNzO1xufVxuXG5mdW5jdGlvbiBkYXRlVG9EYXlGb3JtYXQoZGF0ZSkge1xuICAgIHZhciB5eXl5ID0gZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgdmFyIG1tID0gYWRkWmVybygoZGF0ZS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSk7IC8vIGdldE1vbnRoKCkgaXMgemVyby1iYXNlZFxuICAgIHZhciBkZCA9IGFkZFplcm8oZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHl5eXkgKyAnLScgKyBtbSArICctJyArIGRkO1xufVxuXG5mdW5jdGlvbiBhZGRaZXJvKHMpIHtcbiAgICBpZiAocy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuICcwJyArIHM7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SaGRHVnpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUmxjbWwyWlVSaGRHVkdiM0p0WVhSeklpd2lkQ0lzSW1SaGRHVkpibVp2SWl3aVpHRjBaVWx1Wm05RVlYbEdiM0p0WVhRaUxDSmtZWFJsU1c1bWIxUnBiV1ZHYjNKdFlYUWlMQ0owWHlJc0ltUmhkR1VpTENKRVlYUmxJaXdpZEc5VGRISnBibWNpTENKa1lYUmxWRzlFWVhsR2IzSnRZWFFpTENKa1lYUmxWRzlVYVcxbFJtOXliV0YwSWl3aWFHZ2lMQ0poWkdSYVpYSnZJaXdpWjJWMFNHOTFjbk1pTENKdGJTSXNJbWRsZEUxcGJuVjBaWE1pTENKemN5SXNJbWRsZEZObFkyOXVaSE1pTENKNWVYbDVJaXdpWjJWMFJuVnNiRmxsWVhJaUxDSm5aWFJOYjI1MGFDSXNJbVJrSWl3aVoyVjBSR0YwWlNJc0luTWlMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPMUZCUjJkQ1FTeHBRaXhIUVVGQlFTeHBRanM3TzBGQlJHaENPMEZCUTA4c1UwRkJVMEVzYVVKQlFWUXNRMEZCTWtKRExFTkJRVE5DTEVWQlNVdzdRVUZEUlN4UlFVRkpRU3hMUVVGTExFbEJRVlFzUlVGQlpUdEJRVU5ZTEdWQlFVODdRVUZEU0VNc2MwSkJRVlVzU1VGRVVEdEJRVVZJUXl3clFrRkJiVUlzU1VGR2FFSTdRVUZIU0VNc1owTkJRVzlDTzBGQlNHcENMRk5CUVZBN1FVRkxTQ3hMUVU1RUxFMUJUVTg3UVVGRFNDeFpRVUZOUXl4TFFVRmhTaXhEUVVGdVFqdEJRVU5CTEZsQlFVMUxMRTlCUVU4c1NVRkJTVU1zU1VGQlNpeERRVUZUUml4TFFVRkxMRWxCUVdRc1EwRkJZanRCUVVOQkxHVkJRVTg3UVVGRFNFZ3NjMEpCUVZWSkxFdEJRVXRGTEZGQlFVd3NSVUZFVUR0QlFVVklUQ3dyUWtGQmJVSk5MR2RDUVVGblFrZ3NTVUZCYUVJc1EwRkdhRUk3UVVGSFNFWXNaME5CUVc5Q1RTeHBRa0ZCYVVKS0xFbEJRV3BDTzBGQlNHcENMRk5CUVZBN1FVRkxTRHRCUVVOS096dEJRVVZFTEZOQlFWTkpMR2RDUVVGVUxFTkJRVEJDU2l4SlFVRXhRaXhGUVVFNFF6dEJRVU14UXl4UlFVRk5TeXhMUVVGTFF5eFJRVUZSVGl4TFFVRkxUeXhSUVVGTUxFZEJRV2RDVEN4UlFVRm9RaXhGUVVGU0xFTkJRVmc3UVVGRFFTeFJRVUZOVFN4TFFVRkxSaXhSUVVGUlRpeExRVUZMVXl4VlFVRk1MRWRCUVd0Q1VDeFJRVUZzUWl4RlFVRlNMRU5CUVZnN1FVRkRRU3hSUVVGTlVTeExRVUZMU2l4UlFVRlJUaXhMUVVGTFZ5eFZRVUZNTEVkQlFXdENWQ3hSUVVGc1FpeEZRVUZTTEVOQlFWZzdRVUZEUVN4WFFVRlBSeXhMUVVGTExFZEJRVXdzUjBGQlYwY3NSVUZCV0N4SFFVRm5RaXhIUVVGb1FpeEhRVUZ6UWtVc1JVRkJOMEk3UVVGRFNEczdRVUZGUkN4VFFVRlRVQ3hsUVVGVUxFTkJRWGxDU0N4SlFVRjZRaXhGUVVFMlF6dEJRVU42UXl4UlFVRk5XU3hQUVVGUFdpeExRVUZMWVN4WFFVRk1MRWRCUVcxQ1dDeFJRVUZ1UWl4RlFVRmlPMEZCUTBFc1VVRkJUVTBzUzBGQlMwWXNVVUZCVVN4RFFVRkRUaXhMUVVGTFl5eFJRVUZNTEV0QlFXdENMRU5CUVc1Q0xFVkJRWE5DV2l4UlFVRjBRaXhGUVVGU0xFTkJRVmdzUTBGR2VVTXNRMEZGWVR0QlFVTjBSQ3hSUVVGTllTeExRVUZMVkN4UlFVRlJUaXhMUVVGTFowSXNUMEZCVEN4SFFVRmxaQ3hSUVVGbUxFVkJRVklzUTBGQldEdEJRVU5CTEZkQlFVOVZMRTlCUVU4c1IwRkJVQ3hIUVVGaFNpeEZRVUZpTEVkQlFXdENMRWRCUVd4Q0xFZEJRWGRDVHl4RlFVRXZRanRCUVVOSU96dEJRVVZFTEZOQlFWTlVMRTlCUVZRc1EwRkJhVUpYTEVOQlFXcENMRVZCUVc5RE8wRkJRMmhETEZGQlFVbEJMRVZCUVVWRExFMUJRVVlzUzBGQllTeERRVUZxUWl4RlFVRnZRanRCUVVOb1FpeGxRVUZQTEUxQlFVMUVMRU5CUVdJN1FVRkRTRHRCUVVORUxGZEJRVTlCTEVOQlFWQTdRVUZEU0NJc0ltWnBiR1VpT2lKa1lYUmxjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFJRUJtYkc5M0lDb3ZYRzVjYmk4dklFWjFibU4wYVc5dWN5Qm1iM0lnWkdGMFpTQm1iM0p0WVhSMGFXNW5YRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR1Z5YVhabFJHRjBaVVp2Y20xaGRITW9kRG9nUDI1MWJXSmxjaWs2SUh0Y2JpQWdJQ0JrWVhSbFNXNW1iem9nUDNOMGNtbHVaeXhjYmlBZ0lDQmtZWFJsU1c1bWIwUmhlVVp2Y20xaGREb2dQM04wY21sdVp5eGNiaUFnSUNCa1lYUmxTVzVtYjFScGJXVkdiM0p0WVhRNklEOXpkSEpwYm1jc1hHNTlJSHRjYmlBZ0lDQnBaaUFvZENBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSbFNXNW1iem9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHVkpibVp2UkdGNVJtOXliV0YwT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBaVWx1Wm05VWFXMWxSbTl5YldGME9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJmT2lCdWRXMWlaWElnUFNCME8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa1lYUmxJRDBnYm1WM0lFUmhkR1VvZEY4Z0tpQXhNREF3S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdWSmJtWnZPaUJrWVhSbExuUnZVM1J5YVc1bktDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmxTVzVtYjBSaGVVWnZjbTFoZERvZ1pHRjBaVlJ2UkdGNVJtOXliV0YwS0dSaGRHVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBaVWx1Wm05VWFXMWxSbTl5YldGME9pQmtZWFJsVkc5VWFXMWxSbTl5YldGMEtHUmhkR1VwTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdGMFpWUnZWR2x0WlVadmNtMWhkQ2hrWVhSbE9pQkVZWFJsS1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0JqYjI1emRDQm9hQ0E5SUdGa1pGcGxjbThvWkdGMFpTNW5aWFJJYjNWeWN5Z3BMblJ2VTNSeWFXNW5LQ2twTzF4dUlDQWdJR052Ym5OMElHMXRJRDBnWVdSa1dtVnlieWhrWVhSbExtZGxkRTFwYm5WMFpYTW9LUzUwYjFOMGNtbHVaeWdwS1R0Y2JpQWdJQ0JqYjI1emRDQnpjeUE5SUdGa1pGcGxjbThvWkdGMFpTNW5aWFJUWldOdmJtUnpLQ2t1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnY21WMGRYSnVJR2hvSUNzZ0p6b25JQ3NnYlcwZ0t5QW5PaWNnS3lCemN6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHRjBaVlJ2UkdGNVJtOXliV0YwS0dSaGRHVTZJRVJoZEdVcE9pQnpkSEpwYm1jZ2UxeHVJQ0FnSUdOdmJuTjBJSGw1ZVhrZ1BTQmtZWFJsTG1kbGRFWjFiR3haWldGeUtDa3VkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQmpiMjV6ZENCdGJTQTlJR0ZrWkZwbGNtOG9LR1JoZEdVdVoyVjBUVzl1ZEdnb0tTQXJJREVwTG5SdlUzUnlhVzVuS0NrcE95QXZMeUJuWlhSTmIyNTBhQ2dwSUdseklIcGxjbTh0WW1GelpXUmNiaUFnSUNCamIyNXpkQ0JrWkNBOUlHRmtaRnBsY204b1pHRjBaUzVuWlhSRVlYUmxLQ2t1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnY21WMGRYSnVJSGw1ZVhrZ0t5QW5MU2NnS3lCdGJTQXJJQ2N0SnlBcklHUmtPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhaR1JhWlhKdktITTZJSE4wY21sdVp5azZJSE4wY21sdVp5QjdYRzRnSUNBZ2FXWWdLSE11YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5NQ2NnS3lCek8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjenRjYm4xY2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVyaXZlQW5hbHlzaXMgPSBkZXJpdmVBbmFseXNpcztcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZGF0ZXMgPSByZXF1aXJlKCcuL2RhdGVzJyk7XG5cbnZhciBfYml0Y29pbmpzTGliWmNhc2ggPSByZXF1aXJlKCdiaXRjb2luanMtbGliLXpjYXNoJyk7XG5cbi8vIFByZXR0eSBjb21wbGljYXRlZCBmdW5jdGlvbiBmb3IgZGVyaXZpbmcgdHJhbnNhY3Rpb24gYW5hbHlzaXMuXG4vL1xuLy8gVHJhbnNhY3Rpb24gYW5hbHlzaXMgaXMgYSBsaXR0bGUgaGV1cmlzdGljIC0gSSBoYXZlIHRyYW5zYWN0aW9ucyBhbmQgSSB0cnlcbi8vIHRvIGZpbmQgb3V0IHdoaWNoIGFyZSBcInBvc2l0aXZlXCIgYW5kIHdoaWNoIGFyZSBcIm5lZ2F0aXZlXCJcbi8vIGFuZCB3aGljaCBvdXRwdXRzIHRvIFwiZGlzcGxheSB0byB1c2VyXCJcbi8vXG4vLyBBbHNvLCB3aGF0IGlzIHRoZSBcImVmZmVjdGl2ZSBiYWxhbmNlXCIgb2YgdGhlIHRyYW5zYWN0aW9uXG4vL1xuLy8gSSBkbyBub3QgcmUtYW5hbHl6ZSBvbGQgdHJhbnNhY3Rpb25zLCBJIGp1c3QgYW5hbHl6ZSBuZXcgdHJhbnNhY3Rpb25zXG5cbmZ1bmN0aW9uIGRlcml2ZUFuYWx5c2lzKG5ld1RyYW5zYWN0aW9ucywgb2xkVHJhbnNhY3Rpb25zLCBhZGRyZXNzVG9QYXRoKSB7XG4gICAgLy8gSSBuZWVkIHRoZSBvdXRwdXRzIGluIGZvcm1hdCB0eGlkK2kgLT4gYWRkcmVzcy92YWx1ZVxuICAgIC8vIEZvciBvbGQgdHJhbnNhY3Rpb25zLCB0aGF0IGFyZSBpbiBoaXN0b3J5LCBJIGp1c3QgbmVlZCBteSBvdXRwdXRzXG4gICAgLy8gRm9yIG5ldyB0cmFuc2FjdGlvbnMsIEkgbmVlZCBhbGwgb3V0cHV0cyAoSSB3aWxsIGJlIGFuYWx5emluZyB0aGVtKVxuICAgIHZhciBvdXRwdXRzRm9yQW5hbHlzaXMgPSBkZXJpdmVPdXRwdXRzRm9yQW5hbHlzaXNNYXAobmV3VHJhbnNhY3Rpb25zLCBvbGRUcmFuc2FjdGlvbnMpO1xuXG4gICAgLy8gRm9yIGVhY2ggdHgsIGRlcml2ZSBpbmZvIGFib3V0IGl0cyBpbXBhY3QsXG4gICAgLy8gYnV0IHNpbmNlIHdlIGRvbid0IGtub3cgb3JkZXIsIHdlIGRvbid0IGtub3cgYmFsYW5jZSBhZnRlciBpdFxuICAgIHZhciBhbmFseXNpcyA9IGRlcml2ZUJhbGFuY2VsZXNzQW5hbHlzaXNNYXAobmV3VHJhbnNhY3Rpb25zLCBvbGRUcmFuc2FjdGlvbnMsIG91dHB1dHNGb3JBbmFseXNpcywgYWRkcmVzc1RvUGF0aCk7XG5cbiAgICAvLyBBZGQgXCJiYWxhbmNlXCIgKHdoaWNoIG1lYW5zIGJhbGFuY2UgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uKVxuICAgIHZhciB0cmFuc2FjdGlvbnMgPSBkZXJpdmVGdWxsSW5mbyhhbmFseXNpcyk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9ucztcbn1cblxuLy8gQWxsIGluZm8gYWJvdXQgb3V0cHV0c1xuZnVuY3Rpb24gZGVyaXZlT3V0cHV0c0ZvckFuYWx5c2lzTWFwKG5ld1RzLCBvbGRUcykge1xuICAgIC8vIFRha2Ugb25seSBteSBvdXRwdXRzIGZyb20gb2xkXG4gICAgZnVuY3Rpb24gZ2V0T3V0cHV0c0Zyb21PbGRUcmFuc2FjdGlvbih0KSB7XG4gICAgICAgIHZhciBvdXRwdXRzID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHQubXlPdXRwdXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBvdXRwdXRzW3BhcnNlSW50KGkpXSA9IHQubXlPdXRwdXRzW3BhcnNlSW50KGkpXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0eGlkID0gdC5oYXNoO1xuICAgICAgICByZXR1cm4geyB0eGlkOiB0eGlkLCBvdXRwdXRzOiBvdXRwdXRzIH07XG4gICAgfVxuXG4gICAgLy8gdGFrZSBhbGwgaW5mbyBmcm9tIG5ldyB0eHMsIHNpbmNlIEkgd2lsbCBiZSBnb2luZyB0aHJvdWcgdGhlbSAxIGJ5IDFcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRzRnJvbU5ld1RyYW5zYWN0aW9uKHQpIHtcbiAgICAgICAgdmFyIG91dHB1dHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHQudHgub3V0cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0LnR4Lm91dHNbX2ldO1xuICAgICAgICAgICAgdmFyIF9hZGRyZXNzID0gdC5vdXRwdXRBZGRyZXNzZXNbX2ldO1xuICAgICAgICAgICAgb3V0cHV0cy5wdXNoKHsgYWRkcmVzczogX2FkZHJlc3MsIHZhbHVlOiBvdXRwdXQudmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR4aWQgPSB0Lmhhc2g7XG4gICAgICAgIHJldHVybiB7IHR4aWQ6IHR4aWQsIG91dHB1dHM6IG91dHB1dHMgfTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIG5ld091dHB1dHMgPSAoMCwgX3V0aWxzLm9iamVjdFZhbHVlcykobmV3VHMpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ2V0T3V0cHV0c0Zyb21OZXdUcmFuc2FjdGlvbih0KTtcbiAgICB9KTtcbiAgICB2YXIgb2xkT3V0cHV0cyA9IG9sZFRzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ2V0T3V0cHV0c0Zyb21PbGRUcmFuc2FjdGlvbih0KTtcbiAgICB9KTtcblxuICAgIC8vIG5ldyB0eHMgYXJlIHJlcGxhY2luZyB0aGUgb2xkIG9uZXNcbiAgICAvLyAocmFyZSBjYXNlIC0gbmV3IHR4IGNhbiBoYXZlIG5ldyBhZGRyZXNzIFwiZGlzY292ZXJlZFwiKVxuICAgIG9sZE91dHB1dHMuY29uY2F0KG5ld091dHB1dHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHR4aWQgPSBfcmVmLnR4aWQsXG4gICAgICAgICAgICBvdXRwdXRzID0gX3JlZi5vdXRwdXRzO1xuXG4gICAgICAgIHJlc1t0eGlkXSA9IG91dHB1dHM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gZGVyaXZlQmFsYW5jZWxlc3NBbmFseXNpc01hcChuZXdUcywgb2xkVHMsIG91dHB1dHMsIGFkZHJlc3NUb1BhdGgpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgLy8gZmlyc3QsIHNhdmUgdGhlIG9sZCBvbmVzXG4gICAgb2xkVHMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXNbdC5oYXNoXSA9IHQ7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMobmV3VHMpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJlc1tpZF0gPSBhbmFseXplVHJhbnNhY3Rpb24obmV3VHNbaWRdLCBvdXRwdXRzLCBhZGRyZXNzVG9QYXRoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBBbmFseXplIHNpbmdsZSB0cmFuc2FjdGlvblxuZnVuY3Rpb24gYW5hbHl6ZVRyYW5zYWN0aW9uKHQsIG91dHB1dHMsIGFkZHJlc3NUb1BhdGgpIHtcbiAgICB2YXIgaW5wdXRJZHMgPSB0LnR4Lmlucy5tYXAoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB7IGlkOiAoMCwgX3V0aWxzLmdldElucHV0SWQpKGlucHV0KSwgaW5kZXg6IGlucHV0LmluZGV4IH07XG4gICAgfSk7XG4gICAgdmFyIGhhc0pvaW5zcGxpdHMgPSB0LnR4LmpvaW5zcGxpdHMgPT0gbnVsbCA/IHRydWUgOiB0LnR4LmpvaW5zcGxpdHMubGVuZ3RoID4gMDtcblxuICAgIHZhciBpc0NvaW5iYXNlID0gdC50eC5pbnMuc29tZShmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gX2JpdGNvaW5qc0xpYlpjYXNoLlRyYW5zYWN0aW9uLmlzQ29pbmJhc2VIYXNoKGkuaGFzaCk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFzaCA9IHQuaGFzaDtcblxuICAgIC8vIHRoZSBtYWluIGxvZ2ljIGlzIGhlcmVcbiAgICB2YXIgdGFyZ2V0cyA9IGdldFRhcmdldHNGcm9tVHJhbnNhY3Rpb24oaW5wdXRJZHMsIG91dHB1dHMsIGFkZHJlc3NUb1BhdGgsIGhhc2gsIGhhc0pvaW5zcGxpdHMpO1xuICAgIHZhciBkYXRlcyA9ICgwLCBfZGF0ZXMuZGVyaXZlRGF0ZUZvcm1hdHMpKHQudGltZXN0YW1wKTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIGlzQ29pbmJhc2U6IGlzQ29pbmJhc2VcbiAgICB9LCBkYXRlcywge1xuICAgICAgICBoZWlnaHQ6IHQuaGVpZ2h0LFxuICAgICAgICBoYXNoOiBoYXNoXG4gICAgfSwgdGFyZ2V0cywge1xuICAgICAgICBpbnB1dHM6IGlucHV0SWRzLFxuICAgICAgICB0c2l6ZTogdC50eC5ieXRlTGVuZ3RoKCksXG4gICAgICAgIHZzaXplOiB0LnZzaXplLFxuICAgICAgICBmZWU6IHQuZmVlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldHNGcm9tVHJhbnNhY3Rpb24oaW5wdXRJZHMsIG91dHB1dHMsIGFkZHJlc3NUb1BhdGgsIGlkLCBoYXNKb2luc3BsaXRzKSB7XG4gICAgdmFyIGN1cnJlbnRPdXRwdXRzID0gb3V0cHV0c1tpZF07XG5cbiAgICB2YXIgbkNyZWRpdCA9IDA7XG4gICAgdmFyIG5EZWJpdCA9IDA7XG4gICAgdmFyIHZhbHVlID0gMDtcblxuICAgIC8vIHRlc3RpbmcgaWYgYWRkcmVzcyBpcyBtaW5lIC8gY2hhbmdlIC8gbm90IGNoYW5nZSAvIC4uLlxuICAgIGZ1bmN0aW9uIGlzRXh0ZXJuYWwoYSkge1xuICAgICAgICByZXR1cm4gYSAhPSBudWxsICYmIGFkZHJlc3NUb1BhdGhbYV0gIT0gbnVsbCAmJiBhZGRyZXNzVG9QYXRoW2FdWzBdID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW50ZXJuYWwoYSkge1xuICAgICAgICByZXR1cm4gYSAhPSBudWxsICYmIGFkZHJlc3NUb1BhdGhbYV0gIT0gbnVsbCAmJiBhZGRyZXNzVG9QYXRoW2FdWzBdID09PSAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ3JlZGl0KGEpIHtcbiAgICAgICAgcmV0dXJuIGEgIT0gbnVsbCAmJiBhZGRyZXNzVG9QYXRoW2FdICE9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEZWJpdChhKSB7XG4gICAgICAgIHJldHVybiAhaXNDcmVkaXQoYSk7XG4gICAgfVxuXG4gICAgLy8gc3VidHJhY3QgZGViaXQgaW1wYWN0IHZhbHVlXG5cbiAgICAvLyBUcmFuc2FjdGlvbiBpcyBUQUtJTkcgbWUgbXkgbW9uZXksXG4gICAgLy8gaWYgaXRzIGlucHV0IGlzIG1pbmVcbiAgICAvLyA9PSBpZiBpdHMgaW5wdXQgYmVsb25ncyB0byBhIHRyYW5zYWN0aW9uIHRoYXQncyBtaW5lIEFORCB0aGUgYWRkcmVzcyBvZiBjb3JyZXNwb25kaW5nIG91dHB1dCBpcyBtaW5lXG4gICAgaW5wdXRJZHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIGlkID0gX3JlZjIuaWQsXG4gICAgICAgICAgICBpbmRleCA9IF9yZWYyLmluZGV4O1xuXG4gICAgICAgIHZhciBpbmZvID0gb3V0cHV0c1tpZF07XG4gICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gaW5mb1tpbmRleF07XG4gICAgICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQ3JlZGl0KG91dHB1dC5hZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPSBvdXRwdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG5EZWJpdCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIG15T3V0cHV0cyA9IHt9O1xuXG4gICAgLy8gYWRkIGNyZWRpdCBpbXBhY3QgdmFsdWVcblxuICAgIC8vIFRyYW5zYW5zY3Rpb24gaXMgR0lWSU5HIG1lIG1vbmV5LFxuICAgIC8vIGlmIGl0cyBvdXRwdXQgaGFzIGFkZHJlc3MgdGhhdCBpcyBtaW5lLiAoT24gYW55IGNoYWluLilcbiAgICBjdXJyZW50T3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChvdXRwdXQsIGkpIHtcbiAgICAgICAgaWYgKG91dHB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoaXNDcmVkaXQob3V0cHV0LmFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gb3V0cHV0LnZhbHVlO1xuICAgICAgICAgICAgICAgIG5DcmVkaXQrKztcbiAgICAgICAgICAgICAgICBteU91dHB1dHNbaV0gPSB7IGFkZHJlc3M6IG91dHB1dC5hZGRyZXNzLCB2YWx1ZTogb3V0cHV0LnZhbHVlLCBpOiBpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB0YXJnZXRzID0gW107XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJUYXJnZXRzKGZpbHRlckZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgY3VycmVudE91dHB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaW5mbywgaSkge1xuICAgICAgICAgICAgaWYgKGluZm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBfYWRkcmVzczIgPSBpbmZvLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZSA9IGluZm8udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyRnVuY3Rpb24oX2FkZHJlc3MyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaCh7IGFkZHJlc3M6IF9hZGRyZXNzMiwgdmFsdWU6IF92YWx1ZSwgaTogaSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHZhciB0eXBlID0gdm9pZCAwO1xuXG4gICAgdmFyIGluc0xlbmd0aCA9IGlucHV0SWRzLmxlbmd0aDtcbiAgICB2YXIgb3V0c0xlbmd0aCA9IGN1cnJlbnRPdXRwdXRzLmxlbmd0aDtcblxuICAgIC8vIGpvaW5zcGxpdCBpcyBhIHNwZWNpYWwgKHpjYXNoKSBjYXNlIC0gaXQgaGFzIG5vIGlucHV0cyAtIGJ1dCBvdXRwdXRzIHN0aWxsIG1pbmVcblxuICAgIC8vIGlmIGFsbCBpbnB1dHMgYXJlIG1pbmUgYW5kIGFsbCBvdXRwdXRzIGFyZSBtaW5lIC0gbm8gdGFyZ2V0c1xuICAgIGlmIChuRGViaXQgPT09IGluc0xlbmd0aCAmJiAhaGFzSm9pbnNwbGl0cyAmJiBuQ3JlZGl0ID09PSBvdXRzTGVuZ3RoKSB7XG4gICAgICAgIC8vIHdpdGhpbiB0aGUgc2FtZSBhY2NvdW50XG4gICAgICAgIHR5cGUgPSAnc2VsZic7XG4gICAgICAgIHRhcmdldHMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAvLyBpbmNvbWluZyB0cmFuc2FjdGlvbiwgdGFyZ2V0cyBhcmUgZWl0aGVyIGV4dGVybmFsIG9yIGludGVybmFsIG91dHB1dHNcbiAgICAgICAgdHlwZSA9ICdyZWN2JztcbiAgICAgICAgdGFyZ2V0cyA9IGZpbHRlclRhcmdldHMoZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0V4dGVybmFsKGFkZHJlc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRhcmdldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0YXJnZXRzID0gZmlsdGVyVGFyZ2V0cyhmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0ludGVybmFsKGFkZHJlc3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdXRnb2luZyB0cmFuc2FjdGlvbiwgdGFyZ2V0cyBhcmUgZGViaXQgb3V0cHV0c1xuICAgICAgICB0eXBlID0gJ3NlbnQnO1xuICAgICAgICB0YXJnZXRzID0gZmlsdGVyVGFyZ2V0cyhmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIGlzRGViaXQoYWRkcmVzcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vID8gd2hvIGtub3dzLCBzaG93IHNlbGYgYXMgYSBiYWNrdXBcbiAgICAgICAgICAgIHR5cGUgPSAnc2VsZic7XG4gICAgICAgICAgICB0YXJnZXRzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBub3RlIHRoYXQgdGFyZ2V0IHNlbGVjdGlvbiBkb2VzIE5PVCBhZmZlY3QgdmFsdWUvYmFsYW5jZVxuICAgIC8vIG1ha2VzIHNlbnNlIC0gZXZlbiBcInNlbnQgdG8gc2VsZlwiIHRyYW5zYWN0aW9ucyBhcmUgbmVnYXRpdmUgLSBjb3N0IGZlZVxuXG4gICAgcmV0dXJuIHsgdGFyZ2V0czogdGFyZ2V0cywgdHlwZTogdHlwZSwgdmFsdWU6IHZhbHVlLCBteU91dHB1dHM6IG15T3V0cHV0cyB9O1xufVxuXG4vLyBGdWxsIGluZm8gaXMganVzdCBhbmFseXNpcyBzb3J0ZWQgYW5kIHdpdGggYWRkZWQgYmFsYW5jZXNcbmZ1bmN0aW9uIGRlcml2ZUZ1bGxJbmZvKGFuYWx5c2lzKSB7XG4gICAgdmFyIHNvcnRlZEFuYWx5c2lzID0gKDAsIF91dGlscy5vYmplY3RWYWx1ZXMpKGFuYWx5c2lzKS5zb3J0KGNvbXBhcmVCeU9sZGVzdEFuZFR5cGUpO1xuXG4gICAgdmFyIHByZXYgPSBudWxsO1xuICAgIHZhciBpbXBhY3RzID0gc29ydGVkQW5hbHlzaXMubWFwKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHZhciBiYWxhbmNlID0gcHJldiAhPSBudWxsID8gcHJldi5iYWxhbmNlICsgaW5mby52YWx1ZSA6IGluZm8udmFsdWU7XG4gICAgICAgIHByZXYgPSBfZXh0ZW5kcyh7fSwgaW5mbywge1xuICAgICAgICAgICAgYmFsYW5jZTogYmFsYW5jZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSk7XG4gICAgcmV0dXJuIGltcGFjdHMucmV2ZXJzZSgpO1xufVxuXG52YXIgSU1QQUNUX09SREVSSU5HID0gWydyZWN2JywgJ3NlbGYnLCAnc2VudCddO1xuXG5mdW5jdGlvbiBjb21wYXJlQnlPbGRlc3RBbmRUeXBlKGEsIGIpIHtcbiAgICB2YXIgYWggPSBhLmhlaWdodCAhPSBudWxsID8gYS5oZWlnaHQgOiBJbmZpbml0eTtcbiAgICB2YXIgYmggPSBiLmhlaWdodCAhPSBudWxsID8gYi5oZWlnaHQgOiBJbmZpbml0eTtcbiAgICByZXR1cm4gYWggLSBiaCB8fCAwIHx8IC8vIEluZmluaXR5IC0gSW5maW5pdHkgPSBOYU5cbiAgICBJTVBBQ1RfT1JERVJJTkcuaW5kZXhPZihhLnR5cGUpIC0gSU1QQUNUX09SREVSSU5HLmluZGV4T2YoYi50eXBlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxjbWwyWlMxaGJtRnNlWE5wY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUprWlhKcGRtVkJibUZzZVhOcGN5SXNJbTVsZDFSeVlXNXpZV04wYVc5dWN5SXNJbTlzWkZSeVlXNXpZV04wYVc5dWN5SXNJbUZrWkhKbGMzTlViMUJoZEdnaUxDSnZkWFJ3ZFhSelJtOXlRVzVoYkhsemFYTWlMQ0prWlhKcGRtVlBkWFJ3ZFhSelJtOXlRVzVoYkhsemFYTk5ZWEFpTENKaGJtRnNlWE5wY3lJc0ltUmxjbWwyWlVKaGJHRnVZMlZzWlhOelFXNWhiSGx6YVhOTllYQWlMQ0owY21GdWMyRmpkR2x2Ym5NaUxDSmtaWEpwZG1WR2RXeHNTVzVtYnlJc0ltNWxkMVJ6SWl3aWIyeGtWSE1pTENKblpYUlBkWFJ3ZFhSelJuSnZiVTlzWkZSeVlXNXpZV04wYVc5dUlpd2lkQ0lzSW05MWRIQjFkSE1pTENKUFltcGxZM1FpTENKclpYbHpJaXdpYlhsUGRYUndkWFJ6SWl3aVptOXlSV0ZqYUNJc0luQmhjbk5sU1c1MElpd2lhU0lzSW5SNGFXUWlMQ0pvWVhOb0lpd2laMlYwVDNWMGNIVjBjMFp5YjIxT1pYZFVjbUZ1YzJGamRHbHZiaUlzSW5SNElpd2liM1YwY3lJc0lteGxibWQwYUNJc0ltOTFkSEIxZENJc0ltRmtaSEpsYzNNaUxDSnZkWFJ3ZFhSQlpHUnlaWE56WlhNaUxDSndkWE5vSWl3aWRtRnNkV1VpTENKeVpYTWlMQ0p1WlhkUGRYUndkWFJ6SWl3aWJXRndJaXdpYjJ4a1QzVjBjSFYwY3lJc0ltTnZibU5oZENJc0ltbGtJaXdpWVc1aGJIbDZaVlJ5WVc1ellXTjBhVzl1SWl3aWFXNXdkWFJKWkhNaUxDSnBibk1pTENKcGJuQjFkQ0lzSW1sdVpHVjRJaXdpYUdGelNtOXBibk53YkdsMGN5SXNJbXB2YVc1emNHeHBkSE1pTENKcGMwTnZhVzVpWVhObElpd2ljMjl0WlNJc0ltbHpRMjlwYm1KaGMyVklZWE5vSWl3aWRHRnlaMlYwY3lJc0ltZGxkRlJoY21kbGRITkdjbTl0VkhKaGJuTmhZM1JwYjI0aUxDSmtZWFJsY3lJc0luUnBiV1Z6ZEdGdGNDSXNJbWhsYVdkb2RDSXNJbWx1Y0hWMGN5SXNJblJ6YVhwbElpd2lZbmwwWlV4bGJtZDBhQ0lzSW5aemFYcGxJaXdpWm1WbElpd2lZM1Z5Y21WdWRFOTFkSEIxZEhNaUxDSnVRM0psWkdsMElpd2lia1JsWW1sMElpd2lhWE5GZUhSbGNtNWhiQ0lzSW1FaUxDSnBjMGx1ZEdWeWJtRnNJaXdpYVhORGNtVmthWFFpTENKcGMwUmxZbWwwSWl3aWFXNW1ieUlzSW1acGJIUmxjbFJoY21kbGRITWlMQ0ptYVd4MFpYSkdkVzVqZEdsdmJpSXNJblI1Y0dVaUxDSnBibk5NWlc1bmRHZ2lMQ0p2ZFhSelRHVnVaM1JvSWl3aWMyOXlkR1ZrUVc1aGJIbHphWE1pTENKemIzSjBJaXdpWTI5dGNHRnlaVUo1VDJ4a1pYTjBRVzVrVkhsd1pTSXNJbkJ5WlhZaUxDSnBiWEJoWTNSeklpd2lZbUZzWVc1alpTSXNJbkpsZG1WeWMyVWlMQ0pKVFZCQlExUmZUMUpFUlZKSlRrY2lMQ0ppSWl3aVlXZ2lMQ0pKYm1acGJtbDBlU0lzSW1Kb0lpd2lhVzVrWlhoUFppSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3VVVGM1EyZENRU3hqTEVkQlFVRkJMR003TzBGQk0wSm9RanM3UVVGTFFUczdRVUZKUVRzN1FVRlJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVThzVTBGQlUwRXNZMEZCVkN4RFFVTklReXhsUVVSSExFVkJSVWhETEdWQlJrY3NSVUZIU0VNc1lVRklSeXhGUVVsTU8wRkJRMFU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCVFVNc2NVSkJRWEZDUXl3MFFrRkRka0pLTEdWQlJIVkNMRVZCUlhaQ1F5eGxRVVoxUWl4RFFVRXpRanM3UVVGTFFUdEJRVU5CTzBGQlEwRXNVVUZCVFVrc1YwRkJWME1zTmtKQlEySk9MR1ZCUkdFc1JVRkZZa01zWlVGR1lTeEZRVWRpUlN4clFrRklZU3hGUVVsaVJDeGhRVXBoTEVOQlFXcENPenRCUVU5Qk8wRkJRMEVzVVVGQlRVc3NaVUZCWlVNc1pVRkJaVWdzVVVGQlppeERRVUZ5UWp0QlFVTkJMRmRCUVU5RkxGbEJRVkE3UVVGRFNEczdRVUZGUkR0QlFVTkJMRk5CUVZOSUxESkNRVUZVTEVOQlEwbExMRXRCUkVvc1JVRkZTVU1zUzBGR1NpeEZRVWQ1UWp0QlFVTnlRanRCUVVOQkxHRkJRVk5ETERSQ1FVRlVMRU5CUVhORFF5eERRVUYwUXl4RlFVZEZPMEZCUTBVc1dVRkJUVU1zVlVGQlZTeEZRVUZvUWp0QlFVTkJReXhsUVVGUFF5eEpRVUZRTEVOQlFWbElMRVZCUVVWSkxGTkJRV1FzUlVGQmVVSkRMRTlCUVhwQ0xFTkJRV2xETEdGQlFVczdRVUZEYkVOS0xHOUNRVUZSU3l4VFFVRlRReXhEUVVGVUxFTkJRVklzU1VGQmRVSlFMRVZCUVVWSkxGTkJRVVlzUTBGQldVVXNVMEZCVTBNc1EwRkJWQ3hEUVVGYUxFTkJRWFpDTzBGQlEwZ3NVMEZHUkR0QlFVZEJMRmxCUVUxRExFOUJRVTlTTEVWQlFVVlRMRWxCUVdZN1FVRkRRU3hsUVVGUExFVkJRVU5FTEZWQlFVUXNSVUZCVDFBc1owSkJRVkFzUlVGQlVEdEJRVU5JT3p0QlFVVkVPMEZCUTBFc1lVRkJVMU1zTkVKQlFWUXNRMEZCYzBOV0xFTkJRWFJETEVWQlIwVTdRVUZEUlN4WlFVRk5ReXhWUVVGVkxFVkJRV2hDTzBGQlEwRXNZVUZCU3l4SlFVRkpUU3hMUVVGSkxFTkJRV0lzUlVGQlowSkJMRXRCUVVsUUxFVkJRVVZYTEVWQlFVWXNRMEZCUzBNc1NVRkJUQ3hEUVVGVlF5eE5RVUU1UWl4RlFVRnpRMDRzU1VGQmRFTXNSVUZCTWtNN1FVRkRka01zWjBKQlFVMVBMRk5CUVZOa0xFVkJRVVZYTEVWQlFVWXNRMEZCUzBNc1NVRkJUQ3hEUVVGVlRDeEZRVUZXTEVOQlFXWTdRVUZEUVN4blFrRkJUVkVzVjBGQlZXWXNSVUZCUldkQ0xHVkJRVVlzUTBGQmEwSlVMRVZCUVd4Q0xFTkJRV2hDTzBGQlEwRk9MRzlDUVVGUlowSXNTVUZCVWl4RFFVRmhMRVZCUVVOR0xHbENRVUZFTEVWQlFWVkhMRTlCUVU5S0xFOUJRVTlKTEV0QlFYaENMRVZCUVdJN1FVRkRTRHRCUVVORUxGbEJRVTFXTEU5QlFVOVNMRVZCUVVWVExFbEJRV1k3UVVGRFFTeGxRVUZQTEVWQlFVTkVMRlZCUVVRc1JVRkJUMUFzWjBKQlFWQXNSVUZCVUR0QlFVTklPenRCUVVWRUxGRkJRVTFyUWl4TlFVRk5MRVZCUVZvN1FVRkRRU3hSUVVGTlF5eGhRVUZoTEhsQ1FVRmhka0lzUzBGQllpeEZRVUZ2UW5kQ0xFZEJRWEJDTEVOQlFYZENPMEZCUVVFc1pVRkJTMWdzTmtKQlFUWkNWaXhEUVVFM1FpeERRVUZNTzBGQlFVRXNTMEZCZUVJc1EwRkJia0k3UVVGRFFTeFJRVUZOYzBJc1lVRkJZWGhDTEUxQlFVMTFRaXhIUVVGT0xFTkJRVlU3UVVGQlFTeGxRVUZMZEVJc05rSkJRVFpDUXl4RFFVRTNRaXhEUVVGTU8wRkJRVUVzUzBGQlZpeERRVUZ1UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEZ6UWl4bFFVRlhReXhOUVVGWUxFTkJRV3RDU0N4VlFVRnNRaXhGUVVFNFFtWXNUMEZCT1VJc1EwRkJjME1zWjBKQlFYRkNPMEZCUVVFc1dVRkJia0pITEVsQlFXMUNMRkZCUVc1Q1FTeEpRVUZ0UWp0QlFVRkJMRmxCUVdKUUxFOUJRV0VzVVVGQllrRXNUMEZCWVRzN1FVRkRka1JyUWl4WlFVRkpXQ3hKUVVGS0xFbEJRVmxRTEU5QlFWbzdRVUZEU0N4TFFVWkVPMEZCUjBFc1YwRkJUMnRDTEVkQlFWQTdRVUZEU0RzN1FVRkZSQ3hUUVVGVGVrSXNORUpCUVZRc1EwRkRTVWNzUzBGRVNpeEZRVVZKUXl4TFFVWktMRVZCUjBsSExFOUJTRW9zUlVGSlNWZ3NZVUZLU2l4RlFVczRRenRCUVVNeFF5eFJRVUZOTmtJc1RVRkJUU3hGUVVGYU8wRkJRMEU3UVVGRFFYSkNMRlZCUVUxUExFOUJRVTRzUTBGQll5eGhRVUZMTzBGQlEyWmpMRmxCUVVsdVFpeEZRVUZGVXl4SlFVRk9MRWxCUVdOVUxFTkJRV1E3UVVGRFNDeExRVVpFTzBGQlIwRkZMRmRCUVU5RExFbEJRVkFzUTBGQldVNHNTMEZCV2l4RlFVRnRRbEVzVDBGQmJrSXNRMEZCTWtJc1kwRkJUVHRCUVVNM1FtTXNXVUZCU1Vzc1JVRkJTaXhKUVVGVlF5eHRRa0ZCYlVJMVFpeE5RVUZOTWtJc1JVRkJUaXhEUVVGdVFpeEZRVUU0UW5aQ0xFOUJRVGxDTEVWQlFYVkRXQ3hoUVVGMlF5eERRVUZXTzBGQlEwZ3NTMEZHUkR0QlFVZEJMRmRCUVU4MlFpeEhRVUZRTzBGQlEwZzdPMEZCUlVRN1FVRkRRU3hUUVVGVFRTeHJRa0ZCVkN4RFFVTkpla0lzUTBGRVNpeEZRVVZKUXl4UFFVWktMRVZCUjBsWUxHRkJTRW9zUlVGSk9FSTdRVUZETVVJc1VVRkJUVzlETEZkQlFWY3hRaXhGUVVGRlZ5eEZRVUZHTEVOQlFVdG5RaXhIUVVGTUxFTkJRVk5PTEVkQlFWUXNRMEZCWVR0QlFVRkJMR1ZCUTNwQ0xFVkJRVU5ITEVsQlFVa3NkVUpCUVZkSkxFdEJRVmdzUTBGQlRDeEZRVUYzUWtNc1QwRkJUMFFzVFVGQlRVTXNTMEZCY2tNc1JVRkVlVUk3UVVGQlFTeExRVUZpTEVOQlFXcENPMEZCUjBFc1VVRkJUVU1zWjBKQlFXZENPVUlzUlVGQlJWY3NSVUZCUml4RFFVRkxiMElzVlVGQlRDeEpRVUZ0UWl4SlFVRnVRaXhIUVVFd1FpeEpRVUV4UWl4SFFVRnBReTlDTEVWQlFVVlhMRVZCUVVZc1EwRkJTMjlDTEZWQlFVd3NRMEZCWjBKc1FpeE5RVUZvUWl4SFFVRjVRaXhEUVVGb1JqczdRVUZGUVN4UlFVRk5iVUlzWVVGQllXaERMRVZCUVVWWExFVkJRVVlzUTBGQlMyZENMRWRCUVV3c1EwRkJVMDBzU1VGQlZDeERRVUZqTEZWQlFVTXhRaXhEUVVGRU8wRkJRVUVzWlVGQlR5d3JRa0ZCY1VJeVFpeGpRVUZ5UWl4RFFVRnZRek5DTEVWQlFVVkZMRWxCUVhSRExFTkJRVkE3UVVGQlFTeExRVUZrTEVOQlFXNUNPenRCUVVWQkxGRkJRVTFCTEU5QlFVOVVMRVZCUVVWVExFbEJRV1k3TzBGQlJVRTdRVUZEUVN4UlFVRk5NRUlzVlVGQlZVTXNNRUpCUTFwV0xGRkJSRmtzUlVGRlducENMRTlCUmxrc1JVRkhXbGdzWVVGSVdTeEZRVWxhYlVJc1NVRktXU3hGUVV0YWNVSXNZVUZNV1N4RFFVRm9RanRCUVU5QkxGRkJRVTFQTEZGQlFWRXNPRUpCUVd0Q2NrTXNSVUZCUlhORExGTkJRWEJDTEVOQlFXUTdPMEZCUlVFN1FVRkRTVTQ3UVVGRVNpeFBRVVZQU3l4TFFVWlFPMEZCUjBsRkxHZENRVUZSZGtNc1JVRkJSWFZETEUxQlNHUTdRVUZKU1RsQ08wRkJTa29zVDBGTFR6QkNMRTlCVEZBN1FVRk5TVXNzWjBKQlFWRmtMRkZCVGxvN1FVRlBTV1VzWlVGQlQzcERMRVZCUVVWWExFVkJRVVlzUTBGQlN5dENMRlZCUVV3c1JVRlFXRHRCUVZGSlF5eGxRVUZQTTBNc1JVRkJSVEpETEV0QlVtSTdRVUZUU1VNc1lVRkJTelZETEVWQlFVVTBRenRCUVZSWU8wRkJWMGc3TzBGQlJVUXNVMEZCVTFJc2VVSkJRVlFzUTBGRFNWWXNVVUZFU2l4RlFVVkpla0lzVDBGR1NpeEZRVWRKV0N4aFFVaEtMRVZCU1VsclF5eEZRVXBLTEVWQlMwbE5MR0ZCVEVvc1JVRk5aVHRCUVVOWUxGRkJRVTFsTEdsQ1FVRnBRalZETEZGQlFWRjFRaXhGUVVGU0xFTkJRWFpDT3p0QlFVVkJMRkZCUVVselFpeFZRVUZWTEVOQlFXUTdRVUZEUVN4UlFVRkpReXhUUVVGVExFTkJRV0k3UVVGRFFTeFJRVUZKTjBJc1VVRkJVU3hEUVVGYU96dEJRVVZCTzBGQlEwRXNZVUZCVXpoQ0xGVkJRVlFzUTBGQmIwSkRMRU5CUVhCQ0xFVkJRWGxETzBGQlEzSkRMR1ZCUVZGQkxFdEJRVXNzU1VGQlRDeEpRVUZoTTBRc1kwRkJZekpFTEVOQlFXUXNTMEZCYjBJc1NVRkJha01zU1VGQmVVTXpSQ3hqUVVGak1rUXNRMEZCWkN4RlFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4RFFVRjZSVHRCUVVOSU96dEJRVVZFTEdGQlFWTkRMRlZCUVZRc1EwRkJiMEpFTEVOQlFYQkNMRVZCUVhsRE8wRkJRM0pETEdWQlFWRkJMRXRCUVVzc1NVRkJUQ3hKUVVGaE0wUXNZMEZCWXpKRUxFTkJRV1FzUzBGQmIwSXNTVUZCYWtNc1NVRkJlVU16UkN4alFVRmpNa1FzUTBGQlpDeEZRVUZwUWl4RFFVRnFRaXhOUVVGM1FpeERRVUY2UlR0QlFVTklPenRCUVVWRUxHRkJRVk5GTEZGQlFWUXNRMEZCYTBKR0xFTkJRV3hDTEVWQlFYVkRPMEZCUTI1RExHVkJRVkZCTEV0QlFVc3NTVUZCVEN4SlFVRmhNMFFzWTBGQll6SkVMRU5CUVdRc1MwRkJiMElzU1VGQmVrTTdRVUZEU0RzN1FVRkZSQ3hoUVVGVFJ5eFBRVUZVTEVOQlFXbENTQ3hEUVVGcVFpeEZRVUZ6UXp0QlFVTnNReXhsUVVGUExFTkJRVU5GTEZOQlFWTkdMRU5CUVZRc1EwRkJVanRCUVVOSU96dEJRVVZFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQmRrSXNZVUZCVTNKQ0xFOUJRVlFzUTBGQmFVSXNhVUpCUVdsQ08wRkJRVUVzV1VGQlptMUNMRVZCUVdVc1UwRkJaa0VzUlVGQlpUdEJRVUZCTEZsQlFWaExMRXRCUVZjc1UwRkJXRUVzUzBGQlZ6czdRVUZET1VJc1dVRkJUWGRDTEU5QlFVOXdSQ3hSUVVGUmRVSXNSVUZCVWl4RFFVRmlPMEZCUTBFc1dVRkJTVFpDTEVsQlFVb3NSVUZCVlR0QlFVTk9MR2RDUVVGTmRrTXNVMEZCVTNWRExFdEJRVXQ0UWl4TFFVRk1MRU5CUVdZN1FVRkRRU3huUWtGQlNXWXNUVUZCU2l4RlFVRlpPMEZCUTFJc2IwSkJRVWx4UXl4VFFVRlRja01zVDBGQlQwTXNUMEZCYUVJc1EwRkJTaXhGUVVFNFFqdEJRVU14UWtjc05rSkJRVk5LTEU5QlFVOUpMRXRCUVdoQ08wRkJRMEUyUWp0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVOS0xFdEJXRVE3TzBGQllVRXNVVUZCVFRORExGbEJRWFZETEVWQlFUZERPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVhsRExHMUNRVUZsZUVNc1QwRkJaaXhEUVVGMVFpeFZRVUZEVXl4TlFVRkVMRVZCUVZOUUxFTkJRVlFzUlVGQlpUdEJRVU5zUXl4WlFVRkpUeXhWUVVGVkxFbEJRV1FzUlVGQmIwSTdRVUZEYUVJc1owSkJRVWx4UXl4VFFVRlRja01zVDBGQlQwTXNUMEZCYUVJc1EwRkJTaXhGUVVFNFFqdEJRVU14UWtjc2VVSkJRVk5LTEU5QlFVOUpMRXRCUVdoQ08wRkJRMEUwUWp0QlFVTkJNVU1zTUVKQlFWVkhMRU5CUVZZc1NVRkJaU3hGUVVGRFVTeFRRVUZUUkN4UFFVRlBReXhQUVVGcVFpeEZRVUV3UWtjc1QwRkJUMG9zVDBGQlQwa3NTMEZCZUVNc1JVRkJLME5ZTEVsQlFTOURMRVZCUVdZN1FVRkRTRHRCUVVOS08wRkJRMG9zUzBGU1JEczdRVUZWUVN4UlFVRkpORUlzVlVGQk5rSXNSVUZCYWtNN08wRkJSVUVzWVVGQlUyMUNMR0ZCUVZRc1EwRkJkVUpETEdOQlFYWkNMRVZCUVhkR08wRkJRM0JHTEZsQlFVMXdReXhOUVVGTkxFVkJRVm83UVVGRFFUQkNMSFZDUVVGbGVFTXNUMEZCWml4RFFVRjFRaXhWUVVGRFowUXNTVUZCUkN4RlFVRlBPVU1zUTBGQlVDeEZRVUZoTzBGQlEyaERMR2RDUVVGSk9FTXNVVUZCVVN4SlFVRmFMRVZCUVd0Q08wRkJRVUVzYjBKQlExQjBReXhUUVVSUExFZEJRMWR6UXl4SlFVUllMRU5CUTFCMFF5eFBRVVJQTzBGQlFVRXNiMEpCUTBWSExFMUJSRVlzUjBGRFYyMURMRWxCUkZnc1EwRkRSVzVETEV0QlJFWTdPMEZCUldRc2IwSkJRVWx4UXl4bFFVRmxlRU1zVTBGQlppeERRVUZLTEVWQlFUWkNPMEZCUTNwQ1NTeDNRa0ZCU1VZc1NVRkJTaXhEUVVGVExFVkJRVU5HTEd0Q1FVRkVMRVZCUVZWSExHRkJRVllzUlVGQmFVSllMRWxCUVdwQ0xFVkJRVlE3UVVGRFNEdEJRVU5LTzBGQlEwb3NVMEZRUkR0QlFWRkJMR1ZCUVU5WkxFZEJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpjVU1zWVVGQlNqczdRVUZGUVN4UlFVRk5ReXhaUVVGWkwwSXNVMEZCVTJJc1RVRkJNMEk3UVVGRFFTeFJRVUZOTmtNc1lVRkJZV0lzWlVGQlpXaERMRTFCUVd4RE96dEJRVVZCT3p0QlFVVkJPMEZCUTBFc1VVRkJTV3RETEZkQlFWZFZMRk5CUVZnc1NVRkJlVUlzUTBGQlF6TkNMR0ZCUVRGQ0xFbEJRVFJEWjBJc1dVRkJXVmtzVlVGQk5VUXNSVUZCZDBVN1FVRkRjRVU3UVVGRFFVWXNaVUZCVHl4TlFVRlFPMEZCUTBGeVFpeHJRa0ZCVlN4RlFVRldPMEZCUTBnc1MwRktSQ3hOUVVsUExFbEJRVWxxUWl4UlFVRlJMRU5CUVZvc1JVRkJaVHRCUVVOc1FqdEJRVU5CYzBNc1pVRkJUeXhOUVVGUU8wRkJRMEZ5UWl4clFrRkJWVzFDTEdOQlFXTTdRVUZCUVN4dFFrRkJWMDRzVjBGQlYycERMRTlCUVZnc1EwRkJXRHRCUVVGQkxGTkJRV1FzUTBGQlZqdEJRVU5CTEZsQlFVbHZRaXhSUVVGUmRFSXNUVUZCVWl4TFFVRnRRaXhEUVVGMlFpeEZRVUV3UWp0QlFVTjBRbk5DTEhOQ1FVRlZiVUlzWTBGQll6dEJRVUZCTEhWQ1FVRlhTaXhYUVVGWGJrTXNUMEZCV0N4RFFVRllPMEZCUVVFc1lVRkJaQ3hEUVVGV08wRkJRMGc3UVVGRFNpeExRVkJOTEUxQlQwRTdRVUZEU0R0QlFVTkJlVU1zWlVGQlR5eE5RVUZRTzBGQlEwRnlRaXhyUWtGQlZXMUNMR05CUVdNN1FVRkJRU3h0UWtGQlYwWXNVVUZCVVhKRExFOUJRVklzUTBGQldEdEJRVUZCTEZOQlFXUXNRMEZCVmp0QlFVTkJMRmxCUVVsdlFpeFJRVUZSZEVJc1RVRkJVaXhMUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVOMFFqdEJRVU5CTWtNc2JVSkJRVThzVFVGQlVEdEJRVU5CY2tJc2MwSkJRVlVzUlVGQlZqdEJRVU5JTzBGQlEwbzdPMEZCUlVRN1FVRkRRVHM3UVVGRlFTeFhRVUZQTEVWQlFVTkJMR2RDUVVGRUxFVkJRVlZ4UWl4VlFVRldMRVZCUVdkQ2RFTXNXVUZCYUVJc1JVRkJkVUprTEc5Q1FVRjJRaXhGUVVGUU8wRkJRMGc3TzBGQlJVUTdRVUZEUVN4VFFVRlRVaXhqUVVGVUxFTkJRMGxJTEZGQlJFb3NSVUZGTUVJN1FVRkRkRUlzVVVGQlRXdEZMR2xDUVVGcFFpeDVRa0ZCWVd4RkxGRkJRV0lzUlVGQmRVSnRSU3hKUVVGMlFpeERRVUUwUWtNc2MwSkJRVFZDTEVOQlFYWkNPenRCUVVWQkxGRkJRVWxETEU5QlFVOHNTVUZCV0R0QlFVTkJMRkZCUVUxRExGVkJRVlZLTEdWQlFXVjBReXhIUVVGbUxFTkJRVzFDTEZWQlFVTm5ReXhKUVVGRUxFVkJRWFZFTzBGQlEzUkdMRmxCUVUxWExGVkJRMFJHTEZGQlFWRXNTVUZCVkN4SFFVTk5RU3hMUVVGTFJTeFBRVUZNTEVkQlFXVllMRXRCUVV0dVF5eExRVVF4UWl4SFFVVk5iVU1zUzBGQlMyNURMRXRCU0dZN1FVRkpRVFJETERSQ1FVTlBWQ3hKUVVSUU8wRkJSVWxYTzBGQlJrbzdRVUZKUVN4bFFVRlBSaXhKUVVGUU8wRkJRMGdzUzBGV1pTeERRVUZvUWp0QlFWZEJMRmRCUVU5RExGRkJRVkZGTEU5QlFWSXNSVUZCVUR0QlFVTklPenRCUVVWRUxFbEJRVTFETEd0Q1FVRnJRaXhEUVVGRExFMUJRVVFzUlVGQlV5eE5RVUZVTEVWQlFXbENMRTFCUVdwQ0xFTkJRWGhDT3p0QlFVVkJMRk5CUVZOTUxITkNRVUZVTEVOQlEwbGFMRU5CUkVvc1JVRkZTV3RDTEVOQlJrb3NSVUZIVlR0QlFVTk9MRkZCUVUxRExFdEJRVTF1UWl4RlFVRkZWaXhOUVVGR0xFbEJRVmtzU1VGQldpeEhRVUZ0UWxVc1JVRkJSVllzVFVGQmNrSXNSMEZCT0VJNFFpeFJRVUV4UXp0QlFVTkJMRkZCUVUxRExFdEJRVTFJTEVWQlFVVTFRaXhOUVVGR0xFbEJRVmtzU1VGQldpeEhRVUZ0UWpSQ0xFVkJRVVUxUWl4TlFVRnlRaXhIUVVFNFFqaENMRkZCUVRGRE8wRkJRMEVzVjBGQlUwUXNTMEZCUzBVc1JVRkJUaXhKUVVGaExFTkJRV1FzU1VGQmIwSTdRVUZEZEVKS0xHOUNRVUZuUWtzc1QwRkJhRUlzUTBGQmQwSjBRaXhGUVVGRlR5eEpRVUV4UWl4SlFVTkVWU3huUWtGQlowSkxMRTlCUVdoQ0xFTkJRWGRDU2l4RlFVRkZXQ3hKUVVFeFFpeERRVVpLTzBGQlIwZ2lMQ0ptYVd4bElqb2laR1Z5YVhabExXRnVZV3g1YzJsekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ1FHWnNiM2NnS2k5Y2JtbHRjRzl5ZENCMGVYQmxJSHRjYmlBZ0lDQkRhR0ZwYms1bGQxUnlZVzV6WVdOMGFXOXVMRnh1SUNBZ0lFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lFRmtaSEpsYzNOVWIxQmhkR2dzWEc0Z0lDQWdWSEpoYm5OaFkzUnBiMjVKYm1adlFtRnNZVzVqWld4bGMzTXNYRzRnSUNBZ1ZHRnlaMlYwYzFSNWNHVXNYRzU5SUdaeWIyMGdKeTR1TDNSNWNHVnpKenRjYm1sdGNHOXlkQ0IwZVhCbElIdGNiaUFnSUNCVWNtRnVjMkZqZEdsdmJrbHVabThzWEc0Z0lDQWdWR0Z5WjJWMFNXNW1ieXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZhVzVrWlhnbk8xeHVYRzVwYlhCdmNuUWdlMXh1SUNBZ0lHOWlhbVZqZEZaaGJIVmxjeXhjYmlBZ0lDQm5aWFJKYm5CMWRFbGtMRnh1ZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWM3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnWkdWeWFYWmxSR0YwWlVadmNtMWhkSE1zWEc1OUlHWnliMjBnSnk0dlpHRjBaWE1uTzF4dVhHNXBiWEJ2Y25RZ2UxeHVJQ0FnSUZSeVlXNXpZV04wYVc5dUlHRnpJRUpwZEdOdmFXNUtjMVJ5WVc1ellXTjBhVzl1TEZ4dWZTQm1jbTl0SUNkaWFYUmpiMmx1YW5NdGJHbGlMWHBqWVhOb0p6dGNibHh1ZEhsd1pTQlBkWFJ3ZFhSR2IzSkJibUZzZVhOcGN5QTlJRDk3WVdSa2NtVnpjem9nYzNSeWFXNW5MQ0IyWVd4MVpUb2diblZ0WW1WeWZUdGNiblI1Y0dVZ1QzVjBjSFYwYzBadmNrRnVZV3g1YzJseklEMGdRWEp5WVhrOFQzVjBjSFYwUm05eVFXNWhiSGx6YVhNK08xeHVkSGx3WlNCUGRYUndkWFJ6Um05eVFXNWhiSGx6YVhOTllYQWdQU0I3VzNSNGFXUTZJSE4wY21sdVoxMDZJRTkxZEhCMWRITkdiM0pCYm1Gc2VYTnBjMzA3WEc1Y2JpOHZJRkJ5WlhSMGVTQmpiMjF3YkdsallYUmxaQ0JtZFc1amRHbHZiaUJtYjNJZ1pHVnlhWFpwYm1jZ2RISmhibk5oWTNScGIyNGdZVzVoYkhsemFYTXVYRzR2TDF4dUx5OGdWSEpoYm5OaFkzUnBiMjRnWVc1aGJIbHphWE1nYVhNZ1lTQnNhWFIwYkdVZ2FHVjFjbWx6ZEdsaklDMGdTU0JvWVhabElIUnlZVzV6WVdOMGFXOXVjeUJoYm1RZ1NTQjBjbmxjYmk4dklIUnZJR1pwYm1RZ2IzVjBJSGRvYVdOb0lHRnlaU0JjSW5CdmMybDBhWFpsWENJZ1lXNWtJSGRvYVdOb0lHRnlaU0JjSW01bFoyRjBhWFpsWENKY2JpOHZJR0Z1WkNCM2FHbGphQ0J2ZFhSd2RYUnpJSFJ2SUZ3aVpHbHpjR3hoZVNCMGJ5QjFjMlZ5WENKY2JpOHZYRzR2THlCQmJITnZMQ0IzYUdGMElHbHpJSFJvWlNCY0ltVm1abVZqZEdsMlpTQmlZV3hoYm1ObFhDSWdiMllnZEdobElIUnlZVzV6WVdOMGFXOXVYRzR2TDF4dUx5OGdTU0JrYnlCdWIzUWdjbVV0WVc1aGJIbDZaU0J2YkdRZ2RISmhibk5oWTNScGIyNXpMQ0JKSUdwMWMzUWdZVzVoYkhsNlpTQnVaWGNnZEhKaGJuTmhZM1JwYjI1elhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmtaWEpwZG1WQmJtRnNlWE5wY3loY2JpQWdJQ0J1WlhkVWNtRnVjMkZqZEdsdmJuTTZJRU5vWVdsdVRtVjNWSEpoYm5OaFkzUnBiMjV6TEZ4dUlDQWdJRzlzWkZSeVlXNXpZV04wYVc5dWN6b2dRWEp5WVhrOFZISmhibk5oWTNScGIyNUpibVp2UGl4Y2JpQWdJQ0JoWkdSeVpYTnpWRzlRWVhSb09pQkJaR1J5WlhOelZHOVFZWFJvWEc0cElIdGNiaUFnSUNBdkx5QkpJRzVsWldRZ2RHaGxJRzkxZEhCMWRITWdhVzRnWm05eWJXRjBJSFI0YVdRcmFTQXRQaUJoWkdSeVpYTnpMM1poYkhWbFhHNGdJQ0FnTHk4Z1JtOXlJRzlzWkNCMGNtRnVjMkZqZEdsdmJuTXNJSFJvWVhRZ1lYSmxJR2x1SUdocGMzUnZjbmtzSUVrZ2FuVnpkQ0J1WldWa0lHMTVJRzkxZEhCMWRITmNiaUFnSUNBdkx5QkdiM0lnYm1WM0lIUnlZVzV6WVdOMGFXOXVjeXdnU1NCdVpXVmtJR0ZzYkNCdmRYUndkWFJ6SUNoSklIZHBiR3dnWW1VZ1lXNWhiSGw2YVc1bklIUm9aVzBwWEc0Z0lDQWdZMjl1YzNRZ2IzVjBjSFYwYzBadmNrRnVZV3g1YzJseklEMGdaR1Z5YVhabFQzVjBjSFYwYzBadmNrRnVZV3g1YzJselRXRndLRnh1SUNBZ0lDQWdJQ0J1WlhkVWNtRnVjMkZqZEdsdmJuTXNYRzRnSUNBZ0lDQWdJRzlzWkZSeVlXNXpZV04wYVc5dWMxeHVJQ0FnSUNrN1hHNWNiaUFnSUNBdkx5QkdiM0lnWldGamFDQjBlQ3dnWkdWeWFYWmxJR2x1Wm04Z1lXSnZkWFFnYVhSeklHbHRjR0ZqZEN4Y2JpQWdJQ0F2THlCaWRYUWdjMmx1WTJVZ2QyVWdaRzl1SjNRZ2EyNXZkeUJ2Y21SbGNpd2dkMlVnWkc5dUozUWdhMjV2ZHlCaVlXeGhibU5sSUdGbWRHVnlJR2wwWEc0Z0lDQWdZMjl1YzNRZ1lXNWhiSGx6YVhNZ1BTQmtaWEpwZG1WQ1lXeGhibU5sYkdWemMwRnVZV3g1YzJselRXRndLRnh1SUNBZ0lDQWdJQ0J1WlhkVWNtRnVjMkZqZEdsdmJuTXNYRzRnSUNBZ0lDQWdJRzlzWkZSeVlXNXpZV04wYVc5dWN5eGNiaUFnSUNBZ0lDQWdiM1YwY0hWMGMwWnZja0Z1WVd4NWMybHpMRnh1SUNBZ0lDQWdJQ0JoWkdSeVpYTnpWRzlRWVhSb1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUM4dklFRmtaQ0JjSW1KaGJHRnVZMlZjSWlBb2QyaHBZMmdnYldWaGJuTWdZbUZzWVc1alpTQmhablJsY2lCMGFHVWdkSEpoYm5OaFkzUnBiMjRwWEc0Z0lDQWdZMjl1YzNRZ2RISmhibk5oWTNScGIyNXpJRDBnWkdWeWFYWmxSblZzYkVsdVptOG9ZVzVoYkhsemFYTXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGNtRnVjMkZqZEdsdmJuTTdYRzU5WEc1Y2JpOHZJRUZzYkNCcGJtWnZJR0ZpYjNWMElHOTFkSEIxZEhOY2JtWjFibU4wYVc5dUlHUmxjbWwyWlU5MWRIQjFkSE5HYjNKQmJtRnNlWE5wYzAxaGNDaGNiaUFnSUNCdVpYZFVjem9nUTJoaGFXNU9aWGRVY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnYjJ4a1ZITTZJRUZ5Y21GNVBGUnlZVzV6WVdOMGFXOXVTVzVtYno1Y2JpazZJRTkxZEhCMWRITkdiM0pCYm1Gc2VYTnBjMDFoY0NCN1hHNGdJQ0FnTHk4Z1ZHRnJaU0J2Ym14NUlHMTVJRzkxZEhCMWRITWdabkp2YlNCdmJHUmNiaUFnSUNCbWRXNWpkR2x2YmlCblpYUlBkWFJ3ZFhSelJuSnZiVTlzWkZSeVlXNXpZV04wYVc5dUtIUTZJRlJ5WVc1ellXTjBhVzl1U1c1bWJ5azZJSHRjYmlBZ0lDQWdJQ0FnZEhocFpEb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQnZkWFJ3ZFhSek9pQlBkWFJ3ZFhSelJtOXlRVzVoYkhsemFYTXNYRzRnSUNBZ2ZTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOTFkSEIxZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2RDNXRlVTkxZEhCMWRITXBMbVp2Y2tWaFkyZ29hU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUnpXM0JoY25ObFNXNTBLR2twWFNBOUlIUXViWGxQZFhSd2RYUnpXM0JoY25ObFNXNTBLR2twWFR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIUjRhV1FnUFNCMExtaGhjMmc3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3ZEhocFpDd2diM1YwY0hWMGMzMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdkR0ZyWlNCaGJHd2dhVzVtYnlCbWNtOXRJRzVsZHlCMGVITXNJSE5wYm1ObElFa2dkMmxzYkNCaVpTQm5iMmx1WnlCMGFISnZkV2NnZEdobGJTQXhJR0o1SURGY2JpQWdJQ0JtZFc1amRHbHZiaUJuWlhSUGRYUndkWFJ6Um5KdmJVNWxkMVJ5WVc1ellXTjBhVzl1S0hRNklFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNHBPaUI3WEc0Z0lDQWdJQ0FnSUhSNGFXUTZJSE4wY21sdVp5eGNiaUFnSUNBZ0lDQWdiM1YwY0hWMGN6b2dUM1YwY0hWMGMwWnZja0Z1WVd4NWMybHpMRnh1SUNBZ0lIMGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZkWFJ3ZFhSeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RDNTBlQzV2ZFhSekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdmRYUndkWFFnUFNCMExuUjRMbTkxZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoWkdSeVpYTnpJRDBnZEM1dmRYUndkWFJCWkdSeVpYTnpaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUnpMbkIxYzJnb2UyRmtaSEpsYzNNc0lIWmhiSFZsT2lCdmRYUndkWFF1ZG1Gc2RXVjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwZUdsa0lEMGdkQzVvWVhOb08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UzUjRhV1FzSUc5MWRIQjFkSE45TzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElISmxjeUE5SUh0OU8xeHVJQ0FnSUdOdmJuTjBJRzVsZDA5MWRIQjFkSE1nUFNCdlltcGxZM1JXWVd4MVpYTW9ibVYzVkhNcExtMWhjQ2gwSUQwK0lHZGxkRTkxZEhCMWRITkdjbTl0VG1WM1ZISmhibk5oWTNScGIyNG9kQ2twTzF4dUlDQWdJR052Ym5OMElHOXNaRTkxZEhCMWRITWdQU0J2YkdSVWN5NXRZWEFvZENBOVBpQm5aWFJQZFhSd2RYUnpSbkp2YlU5c1pGUnlZVzV6WVdOMGFXOXVLSFFwS1R0Y2JseHVJQ0FnSUM4dklHNWxkeUIwZUhNZ1lYSmxJSEpsY0d4aFkybHVaeUIwYUdVZ2IyeGtJRzl1WlhOY2JpQWdJQ0F2THlBb2NtRnlaU0JqWVhObElDMGdibVYzSUhSNElHTmhiaUJvWVhabElHNWxkeUJoWkdSeVpYTnpJRndpWkdselkyOTJaWEpsWkZ3aUtWeHVJQ0FnSUc5c1pFOTFkSEIxZEhNdVkyOXVZMkYwS0c1bGQwOTFkSEIxZEhNcExtWnZja1ZoWTJnb0tIdDBlR2xrTENCdmRYUndkWFJ6ZlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhOYmRIaHBaRjBnUFNCdmRYUndkWFJ6TzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE03WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JsY21sMlpVSmhiR0Z1WTJWc1pYTnpRVzVoYkhsemFYTk5ZWEFvWEc0Z0lDQWdibVYzVkhNNklFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lHOXNaRlJ6T2lCQmNuSmhlVHhVY21GdWMyRmpkR2x2YmtsdVptOCtMRnh1SUNBZ0lHOTFkSEIxZEhNNklFOTFkSEIxZEhOR2IzSkJibUZzZVhOcGMwMWhjQ3hjYmlBZ0lDQmhaR1J5WlhOelZHOVFZWFJvT2lCQlpHUnlaWE56Vkc5UVlYUm9YRzRwT2lCN1cybGtPaUJ6ZEhKcGJtZGRPaUJVY21GdWMyRmpkR2x2YmtsdVptOUNZV3hoYm1ObGJHVnpjMzBnZTF4dUlDQWdJR052Ym5OMElISmxjeUE5SUh0OU8xeHVJQ0FnSUM4dklHWnBjbk4wTENCellYWmxJSFJvWlNCdmJHUWdiMjVsYzF4dUlDQWdJRzlzWkZSekxtWnZja1ZoWTJnb2RDQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGMxdDBMbWhoYzJoZElEMGdkRHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWh1WlhkVWN5a3VabTl5UldGamFDaHBaQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxjMXRwWkYwZ1BTQmhibUZzZVhwbFZISmhibk5oWTNScGIyNG9ibVYzVkhOYmFXUmRMQ0J2ZFhSd2RYUnpMQ0JoWkdSeVpYTnpWRzlRWVhSb0tUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc0dkx5QkJibUZzZVhwbElITnBibWRzWlNCMGNtRnVjMkZqZEdsdmJseHVablZ1WTNScGIyNGdZVzVoYkhsNlpWUnlZVzV6WVdOMGFXOXVLRnh1SUNBZ0lIUTZJRU5vWVdsdVRtVjNWSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdiM1YwY0hWMGN6b2dUM1YwY0hWMGMwWnZja0Z1WVd4NWMybHpUV0Z3TEZ4dUlDQWdJR0ZrWkhKbGMzTlViMUJoZEdnNklFRmtaSEpsYzNOVWIxQmhkR2hjYmlrNklGUnlZVzV6WVdOMGFXOXVTVzVtYjBKaGJHRnVZMlZzWlhOeklIdGNiaUFnSUNCamIyNXpkQ0JwYm5CMWRFbGtjeUE5SUhRdWRIZ3VhVzV6TG0xaGNDaHBibkIxZENBOVBseHVJQ0FnSUNBZ0lDQW9lMmxrT2lCblpYUkpibkIxZEVsa0tHbHVjSFYwS1N3Z2FXNWtaWGc2SUdsdWNIVjBMbWx1WkdWNGZTbGNiaUFnSUNBcE8xeHVJQ0FnSUdOdmJuTjBJR2hoYzBwdmFXNXpjR3hwZEhNZ1BTQjBMblI0TG1wdmFXNXpjR3hwZEhNZ1BUMGdiblZzYkNBL0lIUnlkV1VnT2lCMExuUjRMbXB2YVc1emNHeHBkSE11YkdWdVozUm9JRDRnTUR0Y2JseHVJQ0FnSUdOdmJuTjBJR2x6UTI5cGJtSmhjMlVnUFNCMExuUjRMbWx1Y3k1emIyMWxLQ2hwS1NBOVBpQkNhWFJqYjJsdVNuTlVjbUZ1YzJGamRHbHZiaTVwYzBOdmFXNWlZWE5sU0dGemFDaHBMbWhoYzJncEtUdGNibHh1SUNBZ0lHTnZibk4wSUdoaGMyZ2dQU0IwTG1oaGMyZzdYRzVjYmlBZ0lDQXZMeUIwYUdVZ2JXRnBiaUJzYjJkcFl5QnBjeUJvWlhKbFhHNGdJQ0FnWTI5dWMzUWdkR0Z5WjJWMGN5QTlJR2RsZEZSaGNtZGxkSE5HY205dFZISmhibk5oWTNScGIyNG9YRzRnSUNBZ0lDQWdJR2x1Y0hWMFNXUnpMRnh1SUNBZ0lDQWdJQ0J2ZFhSd2RYUnpMRnh1SUNBZ0lDQWdJQ0JoWkdSeVpYTnpWRzlRWVhSb0xGeHVJQ0FnSUNBZ0lDQm9ZWE5vTEZ4dUlDQWdJQ0FnSUNCb1lYTktiMmx1YzNCc2FYUnpYRzRnSUNBZ0tUdGNiaUFnSUNCamIyNXpkQ0JrWVhSbGN5QTlJR1JsY21sMlpVUmhkR1ZHYjNKdFlYUnpLSFF1ZEdsdFpYTjBZVzF3S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUdselEyOXBibUpoYzJVc1hHNGdJQ0FnSUNBZ0lDNHVMbVJoZEdWekxGeHVJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIUXVhR1ZwWjJoMExGeHVJQ0FnSUNBZ0lDQm9ZWE5vTEZ4dUlDQWdJQ0FnSUNBdUxpNTBZWEpuWlhSekxGeHVJQ0FnSUNBZ0lDQnBibkIxZEhNNklHbHVjSFYwU1dSekxGeHVJQ0FnSUNBZ0lDQjBjMmw2WlRvZ2RDNTBlQzVpZVhSbFRHVnVaM1JvS0Nrc1hHNGdJQ0FnSUNBZ0lIWnphWHBsT2lCMExuWnphWHBsTEZ4dUlDQWdJQ0FnSUNCbVpXVTZJSFF1Wm1WbExGeHVJQ0FnSUgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGUmhjbWRsZEhOR2NtOXRWSEpoYm5OaFkzUnBiMjRvWEc0Z0lDQWdhVzV3ZFhSSlpITTZJRUZ5Y21GNVBIdHBaRG9nYzNSeWFXNW5MQ0JwYm1SbGVEb2diblZ0WW1WeWZUNHNYRzRnSUNBZ2IzVjBjSFYwY3pvZ1QzVjBjSFYwYzBadmNrRnVZV3g1YzJselRXRndMRnh1SUNBZ0lHRmtaSEpsYzNOVWIxQmhkR2c2SUVGa1pISmxjM05VYjFCaGRHZ3NYRzRnSUNBZ2FXUTZJSE4wY21sdVp5eGNiaUFnSUNCb1lYTktiMmx1YzNCc2FYUnpPaUJpYjI5c1pXRnVMRnh1S1RvZ1ZHRnlaMlYwYzFSNWNHVWdlMXh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblJQZFhSd2RYUnpJRDBnYjNWMGNIVjBjMXRwWkYwN1hHNWNiaUFnSUNCc1pYUWdia055WldScGRDQTlJREE3WEc0Z0lDQWdiR1YwSUc1RVpXSnBkQ0E5SURBN1hHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ01EdGNibHh1SUNBZ0lDOHZJSFJsYzNScGJtY2dhV1lnWVdSa2NtVnpjeUJwY3lCdGFXNWxJQzhnWTJoaGJtZGxJQzhnYm05MElHTm9ZVzVuWlNBdklDNHVMbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHpSWGgwWlhKdVlXd29ZVG9nUDNOMGNtbHVaeWs2SUdKdmIyeGxZVzRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0dFZ0lUMGdiblZzYkNBbUppQmhaR1J5WlhOelZHOVFZWFJvVzJGZElDRTlJRzUxYkd3Z0ppWWdZV1JrY21WemMxUnZVR0YwYUZ0aFhWc3dYU0E5UFQwZ01DazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2FYTkpiblJsY201aGJDaGhPaUEvYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvWVNBaFBTQnVkV3hzSUNZbUlHRmtaSEpsYzNOVWIxQmhkR2hiWVYwZ0lUMGdiblZzYkNBbUppQmhaR1J5WlhOelZHOVFZWFJvVzJGZFd6QmRJRDA5UFNBeEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCcGMwTnlaV1JwZENoaE9pQS9jM1J5YVc1bktUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9ZU0FoUFNCdWRXeHNJQ1ltSUdGa1pISmxjM05VYjFCaGRHaGJZVjBnSVQwZ2JuVnNiQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdhWE5FWldKcGRDaGhPaUEvYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoYVhORGNtVmthWFFvWVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z2MzVmlkSEpoWTNRZ1pHVmlhWFFnYVcxd1lXTjBJSFpoYkhWbFhHNWNiaUFnSUNBdkx5QlVjbUZ1YzJGamRHbHZiaUJwY3lCVVFVdEpUa2NnYldVZ2JYa2diVzl1Wlhrc1hHNGdJQ0FnTHk4Z2FXWWdhWFJ6SUdsdWNIVjBJR2x6SUcxcGJtVmNiaUFnSUNBdkx5QTlQU0JwWmlCcGRITWdhVzV3ZFhRZ1ltVnNiMjVuY3lCMGJ5QmhJSFJ5WVc1ellXTjBhVzl1SUhSb1lYUW5jeUJ0YVc1bElFRk9SQ0IwYUdVZ1lXUmtjbVZ6Y3lCdlppQmpiM0p5WlhOd2IyNWthVzVuSUc5MWRIQjFkQ0JwY3lCdGFXNWxYRzRnSUNBZ2FXNXdkWFJKWkhNdVptOXlSV0ZqYUNnb2UybGtMQ0JwYm1SbGVIMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1bWJ5QTlJRzkxZEhCMWRITmJhV1JkTzF4dUlDQWdJQ0FnSUNCcFppQW9hVzVtYnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiM1YwY0hWMElEMGdhVzVtYjF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNWMGNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpRM0psWkdsMEtHOTFkSEIxZEM1aFpHUnlaWE56S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQXRQU0J2ZFhSd2RYUXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVFWldKcGRDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2JYbFBkWFJ3ZFhSek9pQjdXMms2SUc1MWJXSmxjbDA2SUZSaGNtZGxkRWx1Wm05OUlEMGdlMzA3WEc1Y2JpQWdJQ0F2THlCaFpHUWdZM0psWkdsMElHbHRjR0ZqZENCMllXeDFaVnh1WEc0Z0lDQWdMeThnVkhKaGJuTmhibk5qZEdsdmJpQnBjeUJIU1ZaSlRrY2diV1VnYlc5dVpYa3NYRzRnSUNBZ0x5OGdhV1lnYVhSeklHOTFkSEIxZENCb1lYTWdZV1JrY21WemN5QjBhR0YwSUdseklHMXBibVV1SUNoUGJpQmhibmtnWTJoaGFXNHVLVnh1SUNBZ0lHTjFjbkpsYm5SUGRYUndkWFJ6TG1admNrVmhZMmdvS0c5MWRIQjFkQ3dnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2IzVjBjSFYwSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwTnlaV1JwZENodmRYUndkWFF1WVdSa2NtVnpjeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU0FyUFNCdmRYUndkWFF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdia055WldScGRDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzE1VDNWMGNIVjBjMXRwWFNBOUlIdGhaR1J5WlhOek9pQnZkWFJ3ZFhRdVlXUmtjbVZ6Y3l3Z2RtRnNkV1U2SUc5MWRIQjFkQzUyWVd4MVpTd2dhWDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR3hsZENCMFlYSm5aWFJ6T2lCQmNuSmhlVHhVWVhKblpYUkpibVp2UGlBOUlGdGRPMXh1WEc0Z0lDQWdablZ1WTNScGIyNGdabWxzZEdWeVZHRnlaMlYwY3lobWFXeDBaWEpHZFc1amRHbHZiam9nS0dGa1pISmxjM002SUhOMGNtbHVaeWtnUFQ0Z1ltOXZiR1ZoYmlrNklFRnljbUY1UEZSaGNtZGxkRWx1Wm04K0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SUGRYUndkWFJ6TG1admNrVmhZMmdvS0dsdVptOHNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBibVp2SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3WVdSa2NtVnpjeXdnZG1Gc2RXVjlJRDBnYVc1bWJ6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1sc2RHVnlSblZ1WTNScGIyNG9ZV1JrY21WemN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpMbkIxYzJnb2UyRmtaSEpsYzNNc0lIWmhiSFZsTENCcGZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2RIbHdaVHRjYmx4dUlDQWdJR052Ym5OMElHbHVjMHhsYm1kMGFDQTlJR2x1Y0hWMFNXUnpMbXhsYm1kMGFEdGNiaUFnSUNCamIyNXpkQ0J2ZFhSelRHVnVaM1JvSUQwZ1kzVnljbVZ1ZEU5MWRIQjFkSE11YkdWdVozUm9PMXh1WEc0Z0lDQWdMeThnYW05cGJuTndiR2wwSUdseklHRWdjM0JsWTJsaGJDQW9lbU5oYzJncElHTmhjMlVnTFNCcGRDQm9ZWE1nYm04Z2FXNXdkWFJ6SUMwZ1luVjBJRzkxZEhCMWRITWdjM1JwYkd3Z2JXbHVaVnh1WEc0Z0lDQWdMeThnYVdZZ1lXeHNJR2x1Y0hWMGN5QmhjbVVnYldsdVpTQmhibVFnWVd4c0lHOTFkSEIxZEhNZ1lYSmxJRzFwYm1VZ0xTQnVieUIwWVhKblpYUnpYRzRnSUNBZ2FXWWdLRzVFWldKcGRDQTlQVDBnYVc1elRHVnVaM1JvSUNZbUlDZ2hhR0Z6U205cGJuTndiR2wwY3lrZ0ppWWdia055WldScGRDQTlQVDBnYjNWMGMweGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYVhSb2FXNGdkR2hsSUhOaGJXVWdZV05qYjNWdWRGeHVJQ0FnSUNBZ0lDQjBlWEJsSUQwZ0ozTmxiR1luTzF4dUlDQWdJQ0FnSUNCMFlYSm5aWFJ6SUQwZ1cxMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDJZV3gxWlNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXNWpiMjFwYm1jZ2RISmhibk5oWTNScGIyNHNJSFJoY21kbGRITWdZWEpsSUdWcGRHaGxjaUJsZUhSbGNtNWhiQ0J2Y2lCcGJuUmxjbTVoYkNCdmRYUndkWFJ6WEc0Z0lDQWdJQ0FnSUhSNWNHVWdQU0FuY21WamRpYzdYRzRnSUNBZ0lDQWdJSFJoY21kbGRITWdQU0JtYVd4MFpYSlVZWEpuWlhSektHRmtaSEpsYzNNZ1BUNGdhWE5GZUhSbGNtNWhiQ2hoWkdSeVpYTnpLU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBZWEpuWlhSekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMGN5QTlJR1pwYkhSbGNsUmhjbWRsZEhNb1lXUmtjbVZ6Y3lBOVBpQnBjMGx1ZEdWeWJtRnNLR0ZrWkhKbGMzTXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzh2SUc5MWRHZHZhVzVuSUhSeVlXNXpZV04wYVc5dUxDQjBZWEpuWlhSeklHRnlaU0JrWldKcGRDQnZkWFJ3ZFhSelhHNGdJQ0FnSUNBZ0lIUjVjR1VnUFNBbmMyVnVkQ2M3WEc0Z0lDQWdJQ0FnSUhSaGNtZGxkSE1nUFNCbWFXeDBaWEpVWVhKblpYUnpLR0ZrWkhKbGMzTWdQVDRnYVhORVpXSnBkQ2hoWkdSeVpYTnpLU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBZWEpuWlhSekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUHlCM2FHOGdhMjV2ZDNNc0lITm9iM2NnYzJWc1ppQmhjeUJoSUdKaFkydDFjRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaU0E5SUNkelpXeG1KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUc1dmRHVWdkR2hoZENCMFlYSm5aWFFnYzJWc1pXTjBhVzl1SUdSdlpYTWdUazlVSUdGbVptVmpkQ0IyWVd4MVpTOWlZV3hoYm1ObFhHNGdJQ0FnTHk4Z2JXRnJaWE1nYzJWdWMyVWdMU0JsZG1WdUlGd2ljMlZ1ZENCMGJ5QnpaV3htWENJZ2RISmhibk5oWTNScGIyNXpJR0Z5WlNCdVpXZGhkR2wyWlNBdElHTnZjM1FnWm1WbFhHNWNiaUFnSUNCeVpYUjFjbTRnZTNSaGNtZGxkSE1zSUhSNWNHVXNJSFpoYkhWbExDQnRlVTkxZEhCMWRITjlPMXh1ZlZ4dVhHNHZMeUJHZFd4c0lHbHVabThnYVhNZ2FuVnpkQ0JoYm1Gc2VYTnBjeUJ6YjNKMFpXUWdZVzVrSUhkcGRHZ2dZV1JrWldRZ1ltRnNZVzVqWlhOY2JtWjFibU4wYVc5dUlHUmxjbWwyWlVaMWJHeEpibVp2S0Z4dUlDQWdJR0Z1WVd4NWMybHpPaUI3VzJsa09pQnpkSEpwYm1kZE9pQlVjbUZ1YzJGamRHbHZia2x1Wm05Q1lXeGhibU5sYkdWemMzMWNiaWs2SUVGeWNtRjVQRlJ5WVc1ellXTjBhVzl1U1c1bWJ6NGdlMXh1SUNBZ0lHTnZibk4wSUhOdmNuUmxaRUZ1WVd4NWMybHpJRDBnYjJKcVpXTjBWbUZzZFdWektHRnVZV3g1YzJsektTNXpiM0owS0dOdmJYQmhjbVZDZVU5c1pHVnpkRUZ1WkZSNWNHVXBPMXh1WEc0Z0lDQWdiR1YwSUhCeVpYWWdQU0J1ZFd4c08xeHVJQ0FnSUdOdmJuTjBJR2x0Y0dGamRITWdQU0J6YjNKMFpXUkJibUZzZVhOcGN5NXRZWEFvS0dsdVptODZJRlJ5WVc1ellXTjBhVzl1U1c1bWIwSmhiR0Z1WTJWc1pYTnpLVG9nVkhKaGJuTmhZM1JwYjI1SmJtWnZJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWW1Gc1lXNWpaU0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9jSEpsZGlBaFBTQnVkV3hzS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2NISmxkaTVpWVd4aGJtTmxJQ3NnYVc1bWJ5NTJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FXNW1ieTUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdjSEpsZGlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM0dUxtbHVabThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZV3hoYm1ObExGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSEpsZGp0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdhVzF3WVdOMGN5NXlaWFpsY25ObEtDazdYRzU5WEc1Y2JtTnZibk4wSUVsTlVFRkRWRjlQVWtSRlVrbE9SeUE5SUZzbmNtVmpkaWNzSUNkelpXeG1KeXdnSjNObGJuUW5YVHRjYmx4dVpuVnVZM1JwYjI0Z1kyOXRjR0Z5WlVKNVQyeGtaWE4wUVc1a1ZIbHdaU2hjYmlBZ0lDQmhPaUJVY21GdWMyRmpkR2x2YmtsdVptOUNZV3hoYm1ObGJHVnpjeXhjYmlBZ0lDQmlPaUJVY21GdWMyRmpkR2x2YmtsdVptOUNZV3hoYm1ObGJHVnpjMXh1S1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0JqYjI1emRDQmhhQ0E5SUNoaExtaGxhV2RvZENBaFBTQnVkV3hzSUQ4Z1lTNW9aV2xuYUhRZ09pQkpibVpwYm1sMGVTazdYRzRnSUNBZ1kyOXVjM1FnWW1nZ1BTQW9ZaTVvWldsbmFIUWdJVDBnYm5Wc2JDQS9JR0l1YUdWcFoyaDBJRG9nU1c1bWFXNXBkSGtwTzF4dUlDQWdJSEpsZEhWeWJpQW9LR0ZvSUMwZ1ltZ3BJSHg4SURBcElIeDhJQzh2SUVsdVptbHVhWFI1SUMwZ1NXNW1hVzVwZEhrZ1BTQk9ZVTVjYmlBZ0lDQWdJQ0FnS0VsTlVFRkRWRjlQVWtSRlVrbE9SeTVwYm1SbGVFOW1LR0V1ZEhsd1pTa2dMVnh1SUNBZ0lDQWdJQ0JKVFZCQlExUmZUMUpFUlZKSlRrY3VhVzVrWlhoUFppaGlMblI1Y0dVcEtUdGNibjFjYmx4dUlsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVyaXZlVXR4b3MgPSBkZXJpdmVVdHhvcztcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfYml0Y29pbmpzTGliWmNhc2ggPSByZXF1aXJlKCdiaXRjb2luanMtbGliLXpjYXNoJyk7XG5cbmZ1bmN0aW9uIGRlcml2ZVV0eG9zKG5ld0luZm8sIG9sZEluZm8sIGFkZHJlc3NUb1BhdGgsIGpvaW5lZCkge1xuICAgIC8vIEZpcnN0IGRvIHByZXBhcmF0aW9uc1xuICAgIC8vIE1ha2Ugc2V0IG9mIGFsbCBteSB0cmFuc2FjdGlvbiBJRHMsIG9sZCBhbmQgbmV3XG4gICAgdmFyIGFsbFRyYW5zYWN0aW9uSGFzaGVzID0gZGVyaXZlQWxsVHJhbnNhY3Rpb25IYXNoZXMobmV3SW5mby5tYWluLm5ld1RyYW5zYWN0aW9ucywgbmV3SW5mby5jaGFuZ2UubmV3VHJhbnNhY3Rpb25zLCBvbGRJbmZvLnRyYW5zYWN0aW9ucyk7XG5cbiAgICAvLyBUaGVuLCBtYWtlIHNldCBvZiBzcGVudCBvdXRwdXRzXG4gICAgLy8gKHR4ICsgXCI6XCIgKyBpZClcbiAgICB2YXIgc3BlbnRPdXRwdXRzID0gZGVyaXZlU3BlbnRPdXRwdXRzKGFsbFRyYW5zYWN0aW9uSGFzaGVzLCBuZXdJbmZvLm1haW4ubmV3VHJhbnNhY3Rpb25zLCBuZXdJbmZvLmNoYW5nZS5uZXdUcmFuc2FjdGlvbnMsIG9sZEluZm8udHJhbnNhY3Rpb25zKTtcblxuICAgIC8vIGFjdHVhbCBsb2dpY1xuICAgIHZhciB1dHhvcyA9IF9kZXJpdmVVdHhvcyhvbGRJbmZvLnV0eG9zLCBqb2luZWQsIGFkZHJlc3NUb1BhdGgsIHNwZW50T3V0cHV0cyk7XG5cbiAgICByZXR1cm4gdXR4b3M7XG59XG5cbmZ1bmN0aW9uIGRlcml2ZUFsbFRyYW5zYWN0aW9uSGFzaGVzKG1haW4sIGNoYW5nZSwgb2xkKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBTZXQoKTtcblxuICAgIE9iamVjdC5rZXlzKG1haW4pLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJlcy5hZGQoaWQpO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKGNoYW5nZSkuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmVzLmFkZChpZCk7XG4gICAgfSk7XG4gICAgb2xkLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmVzLmFkZCh0Lmhhc2gpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gZGVyaXZlU3BlbnRPdXRwdXRzKGFsbFRyYW5zYWN0aW9uSGFzaGVzLCBtYWluLCBjaGFuZ2UsIG9sZCkge1xuICAgIHZhciByZXMgPSBuZXcgU2V0KCk7XG5cbiAgICAvLyBzYXZpbmcgb25seSBtaW5lIHNwZW50IG91dHB1dHNcbiAgICAvLyAodG8gc2F2ZSBzb21lIHRpbWUpXG4gICAgZnVuY3Rpb24gY2FuVHhCZU1pbmUoaWQpIHtcbiAgICAgICAgcmV0dXJuIGFsbFRyYW5zYWN0aW9uSGFzaGVzLmhhcyhpZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2F2ZU5ldyh0cykge1xuICAgICAgICAoMCwgX3V0aWxzLm9iamVjdFZhbHVlcykodHMpLmZvckVhY2goZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgICAgICB0eC50eC5pbnMuZm9yRWFjaChmdW5jdGlvbiAoaW5wKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBpbnAuaW5kZXg7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gKDAsIF91dGlscy5nZXRJbnB1dElkKShpbnApO1xuICAgICAgICAgICAgICAgIGlmIChjYW5UeEJlTWluZShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmFkZChpZCArICc6JyArIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbGQuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICB0LmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gX3JlZi5pbmRleDtcblxuICAgICAgICAgICAgaWYgKGNhblR4QmVNaW5lKGlkKSkge1xuICAgICAgICAgICAgICAgIHJlcy5hZGQoaWQgKyAnOicgKyBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2F2ZU5ldyhtYWluKTtcbiAgICBzYXZlTmV3KGNoYW5nZSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBfZGVyaXZlVXR4b3MoY3VycmVudFV0eG9zLCBuZXdUcmFuc2FjdGlvbnMsIGFkZHJlc3NUb1BhdGgsIHNwZW50T3V0cHV0cykge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIHZhciBpc093bkFkZHJlc3MgPSBmdW5jdGlvbiBpc093bkFkZHJlc3MoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gYWRkcmVzcyAmJiBhZGRyZXNzVG9QYXRoW2FkZHJlc3NdICE9IG51bGw7XG4gICAgfTtcblxuICAgIHZhciBpc0NvaW5iYXNlID0gZnVuY3Rpb24gaXNDb2luYmFzZSh0eCkge1xuICAgICAgICByZXR1cm4gdHguaW5zLnNvbWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBfYml0Y29pbmpzTGliWmNhc2guVHJhbnNhY3Rpb24uaXNDb2luYmFzZUhhc2goaS5oYXNoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGZpcnN0LCBkZWxldGUgc3BlbnQgdXR4b3MgZnJvbSBjdXJyZW50IGJhdGNoIGZyb20gc3RheWluZ1xuICAgIHZhciBmaWx0ZXJlZFV0eG9zID0gY3VycmVudFV0eG9zLmZpbHRlcihmdW5jdGlvbiAodXR4bykge1xuICAgICAgICB2YXIgaXggPSB1dHhvLnRyYW5zYWN0aW9uSGFzaCArICc6JyArIHV0eG8uaW5kZXg7XG4gICAgICAgIHJldHVybiAhc3BlbnRPdXRwdXRzLmhhcyhpeCk7XG4gICAgfSk7XG5cbiAgICAvLyBzZWNvbmQsIGFkZCB0aGVtIHRvIGhhc2gsIHNvIGlmIHRoZXJlIGlzIG5ldyBhbmQgY29uZmlybWVkIHV0eG8sXG4gICAgLy8gaXQgd2lsbCBvdmVyd3JpdGUgZXhpc3RpbmcgdXR4b1xuICAgIGZpbHRlcmVkVXR4b3MuZm9yRWFjaChmdW5jdGlvbiAodXR4bykge1xuICAgICAgICB2YXIgaXggPSB1dHhvLnRyYW5zYWN0aW9uSGFzaCArICc6JyArIHV0eG8uaW5kZXg7XG4gICAgICAgIHJlc1tpeF0gPSB1dHhvO1xuICAgIH0pO1xuXG4gICAgLy8gdGhpcmQsIGZpbmQgdXR4b3MgaW4gbmV3IHR4cyBhbmQgbWF5YmUgb3ZlcndyaXRlIGV4aXN0aW5nXG4gICAgdmFyIG5ld1R4cyA9ICgwLCBfdXRpbHMub2JqZWN0VmFsdWVzKShuZXdUcmFuc2FjdGlvbnMpO1xuICAgIG5ld1R4cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgaGFzaCA9IF9yZWYyLmhhc2gsXG4gICAgICAgICAgICB0eCA9IF9yZWYyLnR4LFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0LFxuICAgICAgICAgICAgb3V0cHV0QWRkcmVzc2VzID0gX3JlZjIub3V0cHV0QWRkcmVzc2VzLFxuICAgICAgICAgICAgaW5wdXRBZGRyZXNzZXMgPSBfcmVmMi5pbnB1dEFkZHJlc3NlcyxcbiAgICAgICAgICAgIHZzaXplID0gX3JlZjIudnNpemUsXG4gICAgICAgICAgICBmZWUgPSBfcmVmMi5mZWU7XG5cbiAgICAgICAgdmFyIGNvaW5iYXNlID0gaXNDb2luYmFzZSh0eCk7XG4gICAgICAgIHZhciBvd24gPSBvdXRwdXRBZGRyZXNzZXMuc29tZShmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIGlzT3duQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHgub3V0cy5mb3JFYWNoKGZ1bmN0aW9uIChvLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGl4ID0gaGFzaCArICc6JyArIGluZGV4O1xuICAgICAgICAgICAgdmFyIGFkZHJlc3MgPSBvdXRwdXRBZGRyZXNzZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHNwZW50T3V0cHV0cy5oYXMoaXgpIHx8ICFpc093bkFkZHJlc3MoYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhZGRyZXNzUGF0aCA9IGFkZHJlc3NUb1BhdGhbYWRkcmVzc107XG4gICAgICAgICAgICB2YXIgcmVzSXggPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBvLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogaGFzaCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2luYmFzZTogY29pbmJhc2UsXG4gICAgICAgICAgICAgICAgYWRkcmVzc1BhdGg6IGFkZHJlc3NQYXRoLFxuICAgICAgICAgICAgICAgIHZzaXplOiB2c2l6ZSxcbiAgICAgICAgICAgICAgICB0c2l6ZTogdHguYnl0ZUxlbmd0aCgpLFxuICAgICAgICAgICAgICAgIGZlZTogZmVlLFxuICAgICAgICAgICAgICAgIG93bjogb3duXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzW2l4XSA9IHJlc0l4O1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoMCwgX3V0aWxzLm9iamVjdFZhbHVlcykocmVzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxjbWwyWlMxMWRIaHZjeTVxY3lKZExDSnVZVzFsY3lJNld5SmtaWEpwZG1WVmRIaHZjeUlzSW01bGQwbHVabThpTENKdmJHUkpibVp2SWl3aVlXUmtjbVZ6YzFSdlVHRjBhQ0lzSW1wdmFXNWxaQ0lzSW1Gc2JGUnlZVzV6WVdOMGFXOXVTR0Z6YUdWeklpd2laR1Z5YVhabFFXeHNWSEpoYm5OaFkzUnBiMjVJWVhOb1pYTWlMQ0p0WVdsdUlpd2libVYzVkhKaGJuTmhZM1JwYjI1eklpd2lZMmhoYm1kbElpd2lkSEpoYm5OaFkzUnBiMjV6SWl3aWMzQmxiblJQZFhSd2RYUnpJaXdpWkdWeWFYWmxVM0JsYm5SUGRYUndkWFJ6SWl3aWRYUjRiM01pTENKZlpHVnlhWFpsVlhSNGIzTWlMQ0p2YkdRaUxDSnlaWE1pTENKVFpYUWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2labTl5UldGamFDSXNJbUZrWkNJc0ltbGtJaXdpZENJc0ltaGhjMmdpTENKallXNVVlRUpsVFdsdVpTSXNJbWhoY3lJc0luTmhkbVZPWlhjaUxDSjBjeUlzSW5SNElpd2lhVzV6SWl3aWFXNXdJaXdpYVNJc0ltbHVaR1Y0SWl3aWFXNXdkWFJ6SWl3aVkzVnljbVZ1ZEZWMGVHOXpJaXdpYVhOUGQyNUJaR1J5WlhOeklpd2lZV1JrY21WemN5SXNJbWx6UTI5cGJtSmhjMlVpTENKemIyMWxJaXdpYVhORGIybHVZbUZ6WlVoaGMyZ2lMQ0ptYVd4MFpYSmxaRlYwZUc5eklpd2labWxzZEdWeUlpd2lhWGdpTENKMWRIaHZJaXdpZEhKaGJuTmhZM1JwYjI1SVlYTm9JaXdpYm1WM1ZIaHpJaXdpYUdWcFoyaDBJaXdpYjNWMGNIVjBRV1JrY21WemMyVnpJaXdpYVc1d2RYUkJaR1J5WlhOelpYTWlMQ0oyYzJsNlpTSXNJbVpsWlNJc0ltTnZhVzVpWVhObElpd2liM2R1SWl3aWIzVjBjeUlzSW04aUxDSmhaR1J5WlhOelVHRjBhQ0lzSW5KbGMwbDRJaXdpZG1Gc2RXVWlMQ0owYzJsNlpTSXNJbUo1ZEdWTVpXNW5kR2dpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzFGQmRVSm5Ra0VzVnl4SFFVRkJRU3hYT3p0QlFWWm9RanM3UVVGTlFUczdRVUZKVHl4VFFVRlRRU3hYUVVGVUxFTkJRMGhETEU5QlJFY3NSVUZGU0VNc1QwRkdSeXhGUVVkSVF5eGhRVWhITEVWQlNVaERMRTFCU2tjc1JVRkxURHRCUVVORk8wRkJRMEU3UVVGRFFTeFJRVUZOUXl4MVFrRkJkVUpETERKQ1FVTjZRa3dzVVVGQlVVMHNTVUZCVWl4RFFVRmhReXhsUVVSWkxFVkJSWHBDVUN4UlFVRlJVU3hOUVVGU0xFTkJRV1ZFTEdWQlJsVXNSVUZIZWtKT0xGRkJRVkZSTEZsQlNHbENMRU5CUVRkQ096dEJRVTFCTzBGQlEwRTdRVUZEUVN4UlFVRk5ReXhsUVVGbFF5eHRRa0ZEYWtKUUxHOUNRVVJwUWl4RlFVVnFRa29zVVVGQlVVMHNTVUZCVWl4RFFVRmhReXhsUVVaSkxFVkJSMnBDVUN4UlFVRlJVU3hOUVVGU0xFTkJRV1ZFTEdWQlNFVXNSVUZKYWtKT0xGRkJRVkZSTEZsQlNsTXNRMEZCY2tJN08wRkJUMEU3UVVGRFFTeFJRVUZOUnl4UlFVRlJReXhoUVVOV1dpeFJRVUZSVnl4TFFVUkZMRVZCUlZaVUxFMUJSbFVzUlVGSFZrUXNZVUZJVlN4RlFVbFdVU3haUVVwVkxFTkJRV1E3TzBGQlQwRXNWMEZCVDBVc1MwRkJVRHRCUVVOSU96dEJRVVZFTEZOQlFWTlFMREJDUVVGVUxFTkJRMGxETEVsQlJFb3NSVUZGU1VVc1RVRkdTaXhGUVVkSlRTeEhRVWhLTEVWQlNXVTdRVUZEV0N4UlFVRk5ReXhOUVVGTkxFbEJRVWxETEVkQlFVb3NSVUZCV2pzN1FVRkZRVU1zVjBGQlQwTXNTVUZCVUN4RFFVRlpXaXhKUVVGYUxFVkJRV3RDWVN4UFFVRnNRaXhEUVVFd1FpeGpRVUZOTzBGQlF6VkNTaXhaUVVGSlN5eEhRVUZLTEVOQlFWRkRMRVZCUVZJN1FVRkRTQ3hMUVVaRU8wRkJSMEZLTEZkQlFVOURMRWxCUVZBc1EwRkJXVllzVFVGQldpeEZRVUZ2UWxjc1QwRkJjRUlzUTBGQk5FSXNZMEZCVFR0QlFVTTVRa29zV1VGQlNVc3NSMEZCU2l4RFFVRlJReXhGUVVGU08wRkJRMGdzUzBGR1JEdEJRVWRCVUN4UlFVRkpTeXhQUVVGS0xFTkJRVmtzWVVGQlN6dEJRVU5pU2l4WlFVRkpTeXhIUVVGS0xFTkJRVkZGTEVWQlFVVkRMRWxCUVZZN1FVRkRTQ3hMUVVaRU96dEJRVWxCTEZkQlFVOVNMRWRCUVZBN1FVRkRTRHM3UVVGRlJDeFRRVUZUU2l4clFrRkJWQ3hEUVVOSlVDeHZRa0ZFU2l4RlFVVkpSU3hKUVVaS0xFVkJSMGxGTEUxQlNFb3NSVUZKU1Uwc1IwRktTaXhGUVV0bE8wRkJRMWdzVVVGQlRVTXNUVUZCVFN4SlFVRkpReXhIUVVGS0xFVkJRVm83TzBGQlJVRTdRVUZEUVR0QlFVTkJMR0ZCUVZOUkxGZEJRVlFzUTBGQmNVSklMRVZCUVhKQ0xFVkJRVEJETzBGQlEzUkRMR1ZCUVU5cVFpeHhRa0ZCY1VKeFFpeEhRVUZ5UWl4RFFVRjVRa29zUlVGQmVrSXNRMEZCVUR0QlFVTklPenRCUVVWRUxHRkJRVk5MTEU5QlFWUXNRMEZCYVVKRExFVkJRV3BDTEVWQlFUSkRPMEZCUTNaRExHbERRVUZoUVN4RlFVRmlMRVZCUVdsQ1VpeFBRVUZxUWl4RFFVRjVRaXhqUVVGTk8wRkJRek5DVXl4bFFVRkhRU3hGUVVGSUxFTkJRVTFETEVkQlFVNHNRMEZCVlZZc1QwRkJWaXhEUVVGclFpeFZRVUZEVnl4SFFVRkVMRVZCUVhsQ08wRkJRM1pETEc5Q1FVRk5ReXhKUVVGSlJDeEpRVUZKUlN4TFFVRmtPMEZCUTBFc2IwSkJRVTFZTEV0QlFVc3NkVUpCUVZkVExFZEJRVmdzUTBGQldEdEJRVU5CTEc5Q1FVRkpUaXhaUVVGWlNDeEZRVUZhTEVOQlFVb3NSVUZCY1VJN1FVRkRha0pPTEhkQ1FVRkpTeXhIUVVGS0xFTkJRVkZETEV0QlFVc3NSMEZCVEN4SFFVRlhWU3hEUVVGdVFqdEJRVU5JTzBGQlEwb3NZVUZPUkR0QlFVOUlMRk5CVWtRN1FVRlRTRHM3UVVGRlJHcENMRkZCUVVsTExFOUJRVW9zUTBGQldTeGhRVUZMTzBGQlEySkhMRlZCUVVWWExFMUJRVVlzUTBGQlUyUXNUMEZCVkN4RFFVRnBRaXhuUWtGQmFVSTdRVUZCUVN4blFrRkJaa1VzUlVGQlpTeFJRVUZtUVN4RlFVRmxPMEZCUVVFc1owSkJRVmhYTEV0QlFWY3NVVUZCV0VFc1MwRkJWenM3UVVGRE9VSXNaMEpCUVVsU0xGbEJRVmxJTEVWQlFWb3NRMEZCU2l4RlFVRnhRanRCUVVOcVFrNHNiMEpCUVVsTExFZEJRVW9zUTBGQlVVTXNTMEZCU3l4SFFVRk1MRWRCUVZkWExFdEJRVzVDTzBGQlEwZzdRVUZEU2l4VFFVcEVPMEZCUzBnc1MwRk9SRHM3UVVGUlFVNHNXVUZCVVhCQ0xFbEJRVkk3UVVGRFFXOUNMRmxCUVZGc1FpeE5RVUZTT3p0QlFVVkJMRmRCUVU5UExFZEJRVkE3UVVGRFNEczdRVUZGUkN4VFFVRlRSaXhaUVVGVUxFTkJRMGx4UWl4WlFVUktMRVZCUlVrelFpeGxRVVpLTEVWQlIwbE1MR0ZCU0Vvc1JVRkpTVkVzV1VGS1NpeEZRVXR0UWp0QlFVTm1MRkZCUVUxTExFMUJRU3RDTEVWQlFYSkRPenRCUVVWQkxGRkJRVTF2UWl4bFFVRmxMRk5CUVdaQkxGbEJRV1VzUTBGQlEwTXNUMEZCUkN4RlFVRmhPMEZCUXpsQ0xHVkJRVTlCTEZkQlEwaHNReXhqUVVGamEwTXNUMEZCWkN4TFFVRXdRaXhKUVVRNVFqdEJRVVZJTEV0QlNFUTdPMEZCUzBFc1VVRkJUVU1zWVVGQllTeFRRVUZpUVN4VlFVRmhMRU5CUVVOVUxFVkJRVVFzUlVGQlVUdEJRVU4yUWl4bFFVRlBRU3hIUVVGSFF5eEhRVUZJTEVOQlFVOVRMRWxCUVZBc1EwRkJXU3hWUVVGRFVDeERRVUZFTzBGQlFVRXNiVUpCUVU4c0swSkJRWEZDVVN4alFVRnlRaXhEUVVGdlExSXNSVUZCUlZJc1NVRkJkRU1zUTBGQlVEdEJRVUZCTEZOQlFWb3NRMEZCVUR0QlFVTklMRXRCUmtRN08wRkJTVUU3UVVGRFFTeFJRVUZOYVVJc1owSkJRV2RDVGl4aFFVRmhUeXhOUVVGaUxFTkJRVzlDTEdkQ1FVRlJPMEZCUXpsRExGbEJRVTFETEV0QlFVdERMRXRCUVV0RExHVkJRVXdzUjBGQmRVSXNSMEZCZGtJc1IwRkJOa0pFTEV0QlFVdFlMRXRCUVRkRE8wRkJRMEVzWlVGQlR5eERRVUZGZEVJc1lVRkJZV1VzUjBGQllpeERRVUZwUW1sQ0xFVkJRV3BDTEVOQlFWUTdRVUZEU0N4TFFVaHhRaXhEUVVGMFFqczdRVUZMUVR0QlFVTkJPMEZCUTBGR0xHdENRVUZqY2tJc1QwRkJaQ3hEUVVGelFpeG5Ra0ZCVVR0QlFVTXhRaXhaUVVGTmRVSXNTMEZCUzBNc1MwRkJTME1zWlVGQlRDeEhRVUYxUWl4SFFVRjJRaXhIUVVFMlFrUXNTMEZCUzFnc1MwRkJOME03UVVGRFFXcENMRmxCUVVreVFpeEZRVUZLTEVsQlFWVkRMRWxCUVZZN1FVRkRTQ3hMUVVoRU96dEJRVXRCTzBGQlEwRXNVVUZCVFVVc1UwRkJVeXg1UWtGQllYUkRMR1ZCUVdJc1EwRkJaanRCUVVOQmMwTXNWMEZCVHpGQ0xFOUJRVkFzUTBGQlpTeHBRa0ZCY1VVN1FVRkJRU3haUVVGdVJVa3NTVUZCYlVVc1UwRkJia1ZCTEVsQlFXMUZPMEZCUVVFc1dVRkJOMFJMTEVWQlFUWkVMRk5CUVRkRVFTeEZRVUUyUkR0QlFVRkJMRmxCUVhwRWEwSXNUVUZCZVVRc1UwRkJla1JCTEUxQlFYbEVPMEZCUVVFc1dVRkJha1JETEdWQlFXbEVMRk5CUVdwRVFTeGxRVUZwUkR0QlFVRkJMRmxCUVdoRFF5eGpRVUZuUXl4VFFVRm9RMEVzWTBGQlowTTdRVUZCUVN4WlFVRm9Ra01zUzBGQlowSXNVMEZCYUVKQkxFdEJRV2RDTzBGQlFVRXNXVUZCVkVNc1IwRkJVeXhUUVVGVVFTeEhRVUZUT3p0QlFVTm9SaXhaUVVGTlF5eFhRVUZYWkN4WFFVRlhWQ3hGUVVGWUxFTkJRV3BDTzBGQlEwRXNXVUZCVFhkQ0xFMUJRVTFNTEdkQ1FVRm5RbFFzU1VGQmFFSXNRMEZCY1VJN1FVRkJRU3h0UWtGQlYwZ3NZVUZCWVVNc1QwRkJZaXhEUVVGWU8wRkJRVUVzVTBGQmNrSXNRMEZCV2pzN1FVRkZRVklzVjBGQlIzbENMRWxCUVVnc1EwRkJVV3hETEU5QlFWSXNRMEZCWjBJc1ZVRkJRMjFETEVOQlFVUXNSVUZCU1hSQ0xFdEJRVW9zUlVGQll6dEJRVU14UWl4blFrRkJUVlVzUzBGQlMyNUNMRTlCUVU4c1IwRkJVQ3hIUVVGaFV5eExRVUY0UWp0QlFVTkJMR2RDUVVGTlNTeFZRVUZWVnl4blFrRkJaMEptTEV0QlFXaENMRU5CUVdoQ08wRkJRMEVzWjBKQlFVdDBRaXhoUVVGaFpTeEhRVUZpTEVOQlFXbENhVUlzUlVGQmFrSXNRMEZCUkN4SlFVRXdRaXhEUVVGRFVDeGhRVUZoUXl4UFFVRmlMRU5CUVM5Q0xFVkJRWE5FTzBGQlEyeEVPMEZCUTBnN08wRkJSVVFzWjBKQlFVMXRRaXhqUVVGamNrUXNZMEZCWTJ0RExFOUJRV1FzUTBGQmNFSTdRVUZEUVN4blFrRkJUVzlDTEZGQlFXdENPMEZCUTNCQ2VFSXNkVUpCUVU5QkxFdEJSR0U3UVVGRmNFSjVRaXgxUWtGQlQwZ3NSVUZCUlVjc1MwRkdWenRCUVVkd1FtSXNhVU5CUVdsQ2NrSXNTVUZJUnp0QlFVbHdRblZDTEhkQ1FVRlJRU3hOUVVwWk8wRkJTM0JDU3l3d1FrRkJWVUVzVVVGTVZUdEJRVTF3UWtrc2QwTkJUbTlDTzBGQlQzQkNUaXcwUWtGUWIwSTdRVUZSY0VKVExIVkNRVUZQT1VJc1IwRkJSeXRDTEZWQlFVZ3NSVUZTWVR0QlFWTndRbFFzZDBKQlZHOUNPMEZCVlhCQ1JUdEJRVlp2UWl4aFFVRjRRanRCUVZsQmNrTXNaMEpCUVVreVFpeEZRVUZLTEVsQlFWVmpMRXRCUVZZN1FVRkRTQ3hUUVhKQ1JEdEJRWE5DU0N4TFFURkNSRHM3UVVFMFFrRXNWMEZCVHl4NVFrRkJZWHBETEVkQlFXSXNRMEZCVUR0QlFVTklJaXdpWm1sc1pTSTZJbVJsY21sMlpTMTFkSGh2Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSUVCbWJHOTNJQ292WEc1Y2JtbHRjRzl5ZENCMGVYQmxJSHRjYmlBZ0lDQkRhR0ZwYms1bGQxUnlZVzV6WVdOMGFXOXVjeXhjYmlBZ0lDQkJaR1J5WlhOelZHOVFZWFJvTEZ4dUlDQWdJRUZqWTI5MWJuUk9aWGRKYm1adkxGeHVmU0JtY205dElDY3VMaTkwZVhCbGN5YzdYRzVwYlhCdmNuUWdkSGx3WlNCN1hHNGdJQ0FnVkhKaGJuTmhZM1JwYjI1SmJtWnZMRnh1SUNBZ0lFRmpZMjkxYm5SSmJtWnZMRnh1SUNBZ0lGVjBlRzlKYm1adkxGeHVmU0JtY205dElDY3VMaTh1TGk5cGJtUmxlQ2M3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnYjJKcVpXTjBWbUZzZFdWekxGeHVJQ0FnSUdkbGRFbHVjSFYwU1dRc1hHNTlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1YVcxd2IzSjBJSFI1Y0dVZ2V5QkpibkIxZENCaGN5QkNhWFJqYjJsdVNuTkpibkIxZENCOUlHWnliMjBnSjJKcGRHTnZhVzVxY3kxc2FXSXRlbU5oYzJnbk8xeHVhVzF3YjNKMElIdGNiaUFnSUNCVWNtRnVjMkZqZEdsdmJpQmhjeUJDYVhSamIybHVTbk5VY21GdWMyRmpkR2x2Yml4Y2JuMGdabkp2YlNBblltbDBZMjlwYm1wekxXeHBZaTE2WTJGemFDYzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWlhKcGRtVlZkSGh2Y3loY2JpQWdJQ0J1WlhkSmJtWnZPaUJCWTJOdmRXNTBUbVYzU1c1bWJ5eGNiaUFnSUNCdmJHUkpibVp2T2lCQlkyTnZkVzUwU1c1bWJ5eGNiaUFnSUNCaFpHUnlaWE56Vkc5UVlYUm9PaUJCWkdSeVpYTnpWRzlRWVhSb0xGeHVJQ0FnSUdwdmFXNWxaRG9nUTJoaGFXNU9aWGRVY21GdWMyRmpkR2x2Ym5OY2Jpa2dlMXh1SUNBZ0lDOHZJRVpwY25OMElHUnZJSEJ5WlhCaGNtRjBhVzl1YzF4dUlDQWdJQzh2SUUxaGEyVWdjMlYwSUc5bUlHRnNiQ0J0ZVNCMGNtRnVjMkZqZEdsdmJpQkpSSE1zSUc5c1pDQmhibVFnYm1WM1hHNGdJQ0FnWTI5dWMzUWdZV3hzVkhKaGJuTmhZM1JwYjI1SVlYTm9aWE1nUFNCa1pYSnBkbVZCYkd4VWNtRnVjMkZqZEdsdmJraGhjMmhsY3loY2JpQWdJQ0FnSUNBZ2JtVjNTVzVtYnk1dFlXbHVMbTVsZDFSeVlXNXpZV04wYVc5dWN5eGNiaUFnSUNBZ0lDQWdibVYzU1c1bWJ5NWphR0Z1WjJVdWJtVjNWSEpoYm5OaFkzUnBiMjV6TEZ4dUlDQWdJQ0FnSUNCdmJHUkpibVp2TG5SeVlXNXpZV04wYVc5dWMxeHVJQ0FnSUNrN1hHNWNiaUFnSUNBdkx5QlVhR1Z1TENCdFlXdGxJSE5sZENCdlppQnpjR1Z1ZENCdmRYUndkWFJ6WEc0Z0lDQWdMeThnS0hSNElDc2dYQ0k2WENJZ0t5QnBaQ2xjYmlBZ0lDQmpiMjV6ZENCemNHVnVkRTkxZEhCMWRITWdQU0JrWlhKcGRtVlRjR1Z1ZEU5MWRIQjFkSE1vWEc0Z0lDQWdJQ0FnSUdGc2JGUnlZVzV6WVdOMGFXOXVTR0Z6YUdWekxGeHVJQ0FnSUNBZ0lDQnVaWGRKYm1adkxtMWhhVzR1Ym1WM1ZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lDQWdJQ0J1WlhkSmJtWnZMbU5vWVc1blpTNXVaWGRVY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnSUNBZ0lHOXNaRWx1Wm04dWRISmhibk5oWTNScGIyNXpYRzRnSUNBZ0tUdGNibHh1SUNBZ0lDOHZJR0ZqZEhWaGJDQnNiMmRwWTF4dUlDQWdJR052Ym5OMElIVjBlRzl6SUQwZ1gyUmxjbWwyWlZWMGVHOXpLRnh1SUNBZ0lDQWdJQ0J2YkdSSmJtWnZMblYwZUc5ekxGeHVJQ0FnSUNBZ0lDQnFiMmx1WldRc1hHNGdJQ0FnSUNBZ0lHRmtaSEpsYzNOVWIxQmhkR2dzWEc0Z0lDQWdJQ0FnSUhOd1pXNTBUM1YwY0hWMGMxeHVJQ0FnSUNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZFhSNGIzTTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxjbWwyWlVGc2JGUnlZVzV6WVdOMGFXOXVTR0Z6YUdWektGeHVJQ0FnSUcxaGFXNDZJRU5vWVdsdVRtVjNWSEpoYm5OaFkzUnBiMjV6TEZ4dUlDQWdJR05vWVc1blpUb2dRMmhoYVc1T1pYZFVjbUZ1YzJGamRHbHZibk1zWEc0Z0lDQWdiMnhrT2lCQmNuSmhlVHhVY21GdWMyRmpkR2x2YmtsdVptOCtYRzRwT2lCVFpYUThjM1J5YVc1blBpQjdYRzRnSUNBZ1kyOXVjM1FnY21WeklEMGdibVYzSUZObGRDZ3BPMXh1WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vYldGcGJpa3VabTl5UldGamFDaHBaQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxjeTVoWkdRb2FXUXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR05vWVc1blpTa3VabTl5UldGamFDaHBaQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxjeTVoWkdRb2FXUXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHOXNaQzVtYjNKRllXTm9LSFFnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWE11WVdSa0tIUXVhR0Z6YUNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pYSnBkbVZUY0dWdWRFOTFkSEIxZEhNb1hHNGdJQ0FnWVd4c1ZISmhibk5oWTNScGIyNUlZWE5vWlhNNklGTmxkRHh6ZEhKcGJtYytMRnh1SUNBZ0lHMWhhVzQ2SUVOb1lXbHVUbVYzVkhKaGJuTmhZM1JwYjI1ekxGeHVJQ0FnSUdOb1lXNW5aVG9nUTJoaGFXNU9aWGRVY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnYjJ4a09pQkJjbkpoZVR4VWNtRnVjMkZqZEdsdmJrbHVabTgrWEc0cE9pQlRaWFE4YzNSeWFXNW5QaUI3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpJRDBnYm1WM0lGTmxkQ2dwTzF4dVhHNGdJQ0FnTHk4Z2MyRjJhVzVuSUc5dWJIa2diV2x1WlNCemNHVnVkQ0J2ZFhSd2RYUnpYRzRnSUNBZ0x5OGdLSFJ2SUhOaGRtVWdjMjl0WlNCMGFXMWxLVnh1SUNBZ0lHWjFibU4wYVc5dUlHTmhibFI0UW1WTmFXNWxLR2xrT2lCemRISnBibWNwT2lCaWIyOXNaV0Z1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGc2JGUnlZVzV6WVdOMGFXOXVTR0Z6YUdWekxtaGhjeWhwWkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzJGMlpVNWxkeWgwY3pvZ1EyaGhhVzVPWlhkVWNtRnVjMkZqZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnYjJKcVpXTjBWbUZzZFdWektIUnpLUzVtYjNKRllXTm9LSFI0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNExuUjRMbWx1Y3k1bWIzSkZZV05vS0NocGJuQTZJRUpwZEdOdmFXNUtjMGx1Y0hWMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhU0E5SUdsdWNDNXBibVJsZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwWkNBOUlHZGxkRWx1Y0hWMFNXUW9hVzV3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZ1VkhoQ1pVMXBibVVvYVdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5NWhaR1FvYVdRZ0t5QW5PaWNnS3lCcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiMnhrTG1admNrVmhZMmdvZENBOVBpQjdYRzRnSUNBZ0lDQWdJSFF1YVc1d2RYUnpMbVp2Y2tWaFkyZ29LSHRwWkN3Z2FXNWtaWGg5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZ1VkhoQ1pVMXBibVVvYVdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6TG1Ga1pDaHBaQ0FySUNjNkp5QXJJR2x1WkdWNEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnpZWFpsVG1WM0tHMWhhVzRwTzF4dUlDQWdJSE5oZG1WT1pYY29ZMmhoYm1kbEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWtaWEpwZG1WVmRIaHZjeWhjYmlBZ0lDQmpkWEp5Wlc1MFZYUjRiM002SUVGeWNtRjVQRlYwZUc5SmJtWnZQaXhjYmlBZ0lDQnVaWGRVY21GdWMyRmpkR2x2Ym5NNklFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lHRmtaSEpsYzNOVWIxQmhkR2c2SUVGa1pISmxjM05VYjFCaGRHZ3NYRzRnSUNBZ2MzQmxiblJQZFhSd2RYUnpPaUJUWlhROGMzUnlhVzVuUGx4dUtUb2dRWEp5WVhrOFZYUjRiMGx1Wm04K0lIdGNiaUFnSUNCamIyNXpkQ0J5WlhNNklIdGJhVG9nYzNSeWFXNW5YVG9nVlhSNGIwbHVabTk5SUQwZ2UzMDdYRzVjYmlBZ0lDQmpiMjV6ZENCcGMwOTNia0ZrWkhKbGMzTWdQU0FvWVdSa2NtVnpjeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXUmtjbVZ6Y3lBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2NtVnpjMVJ2VUdGMGFGdGhaR1J5WlhOelhTQWhQU0J1ZFd4c08xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0JwYzBOdmFXNWlZWE5sSUQwZ0tIUjRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGVDNXBibk11YzI5dFpTZ29hU2tnUFQ0Z1FtbDBZMjlwYmtwelZISmhibk5oWTNScGIyNHVhWE5EYjJsdVltRnpaVWhoYzJnb2FTNW9ZWE5vS1NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4dklHWnBjbk4wTENCa1pXeGxkR1VnYzNCbGJuUWdkWFI0YjNNZ1puSnZiU0JqZFhKeVpXNTBJR0poZEdOb0lHWnliMjBnYzNSaGVXbHVaMXh1SUNBZ0lHTnZibk4wSUdacGJIUmxjbVZrVlhSNGIzTWdQU0JqZFhKeVpXNTBWWFI0YjNNdVptbHNkR1Z5S0hWMGVHOGdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwZUNBOUlIVjBlRzh1ZEhKaGJuTmhZM1JwYjI1SVlYTm9JQ3NnSnpvbklDc2dkWFI0Ynk1cGJtUmxlRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VvYzNCbGJuUlBkWFJ3ZFhSekxtaGhjeWhwZUNrcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdjMlZqYjI1a0xDQmhaR1FnZEdobGJTQjBieUJvWVhOb0xDQnpieUJwWmlCMGFHVnlaU0JwY3lCdVpYY2dZVzVrSUdOdmJtWnBjbTFsWkNCMWRIaHZMRnh1SUNBZ0lDOHZJR2wwSUhkcGJHd2diM1psY25keWFYUmxJR1Y0YVhOMGFXNW5JSFYwZUc5Y2JpQWdJQ0JtYVd4MFpYSmxaRlYwZUc5ekxtWnZja1ZoWTJnb2RYUjRieUE5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsNElEMGdkWFI0Ynk1MGNtRnVjMkZqZEdsdmJraGhjMmdnS3lBbk9pY2dLeUIxZEhodkxtbHVaR1Y0TzF4dUlDQWdJQ0FnSUNCeVpYTmJhWGhkSUQwZ2RYUjRienRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzh2SUhSb2FYSmtMQ0JtYVc1a0lIVjBlRzl6SUdsdUlHNWxkeUIwZUhNZ1lXNWtJRzFoZVdKbElHOTJaWEozY21sMFpTQmxlR2x6ZEdsdVoxeHVJQ0FnSUdOdmJuTjBJRzVsZDFSNGN5QTlJRzlpYW1WamRGWmhiSFZsY3lodVpYZFVjbUZ1YzJGamRHbHZibk1wTzF4dUlDQWdJRzVsZDFSNGN5NW1iM0pGWVdOb0tDaDdhR0Z6YUN3Z2RIZ3NJR2hsYVdkb2RDd2diM1YwY0hWMFFXUmtjbVZ6YzJWekxDQnBibkIxZEVGa1pISmxjM05sY3l3Z2RuTnBlbVVzSUdabFpYMHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5cGJtSmhjMlVnUFNCcGMwTnZhVzVpWVhObEtIUjRLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM2R1SUQwZ2IzVjBjSFYwUVdSa2NtVnpjMlZ6TG5OdmJXVW9ZV1JrY21WemN5QTlQaUJwYzA5M2JrRmtaSEpsYzNNb1lXUmtjbVZ6Y3lrcE8xeHVYRzRnSUNBZ0lDQWdJSFI0TG05MWRITXVabTl5UldGamFDZ29ieXdnYVc1a1pYZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbDRJRDBnYUdGemFDQXJJQ2M2SnlBcklHbHVaR1Y0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lXUmtjbVZ6Y3lBOUlHOTFkSEIxZEVGa1pISmxjM05sYzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvS0hOd1pXNTBUM1YwY0hWMGN5NW9ZWE1vYVhncEtTQjhmQ0FoYVhOUGQyNUJaR1J5WlhOektHRmtaSEpsYzNNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmhaR1J5WlhOelVHRjBhQ0E5SUdGa1pISmxjM05VYjFCaGRHaGJZV1JrY21WemMxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5WlhOSmVEb2dWWFI0YjBsdVptOGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZzZJR2x1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdkxuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVNHRnphRG9nYUdGemFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHaGxhV2RvZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIybHVZbUZ6WlRvZ1kyOXBibUpoYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmtjbVZ6YzFCaGRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbk5wZW1Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RITnBlbVU2SUhSNExtSjVkR1ZNWlc1bmRHZ29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzZHVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMxdHBlRjBnUFNCeVpYTkplRHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYjJKcVpXTjBWbUZzZFdWektISmxjeWs3WEc1OVhHNGlYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdldENoYWluVHJhbnNhY3Rpb25zID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG4vLyBUaGlzIGlzIHdoYXQgaGFwcGVucyBJTlNJREUgdGhlIHdvcmtlclxuLy8gV2UgYXNrIHRoZSBNQUlOIHRvIGZldGNoIHVzIHRyYW5zYWN0aW9ucyBmcm9tIHRoZVxuLy8gYmxvY2tjaGFpbiBhbmQgYWRkcmVzc2VzXG4vLyBUaGUgTUFJTiB0aHJlYWQgcmVwbGllcyBiYWNrIHRvIHRoZSB3b3JrZXIsIGFuZCB3ZSB3b3JrIGZyb20gdGhlcmVcbi8vXG4vL1xuLy8gSXQncyBjb21wbGljYXRlZCBsaWtlIHRoaXMsIGJlY2F1c2Vcbi8vICgxKSB3ZSB3YW50IHRvIGtlZXAgdGhlIGxvZ2ljIGluIHRoZSB3b3JrZXJcbi8vICgyKSBidXQgdGhlIHdvcmtlciBjYW5ub3QgZGlyZWN0bHkgY2FsbCBhbm90aGVyIHdvcmtlciwgYW5kIHdlIGhhdmUgYWxsXG4vLyAgICAgIG90aGVyIGxvZ2ljIGluIHNlcGFyYXRlIHdvcmtlcnMgZm9yIHNwZWVkIHB1cnBvc2VzXG4vLyAgICAgICAgICB3ZSBoYXZlIGJpdGNvcmUgc29ja2V0LmlvIGNvbW11bmljYXRpb24gaW4gd29ya2VyLCBiZWNhdXNlIHRoZSBodHRwIHBvbGxpbmcgaXMgc2xvd1xuLy8gICAgICAgICAgd2UgaGF2ZSB0aGUgYWRkcmVzcyBkZXJpdmF0aW9uIGluIHdvcmtlciwgYmVjYXVzZSBpdCdzIHNsb3dcbi8vICBzbyB3ZSBoYXZlIHRoZSBsb2dpYyBvZiBhc2tpbmcgdGhpbmdzIG91dCBmcm9tIHRoZSB3b3JrZXIgYnkgcmVxdWVzdHMsXG4vLyAgYW5kIHRoZSBtYWluIHRocmVhZCByZXR1cm5pbmcgdGhpbmdzIGJhY2tcblxuZXhwb3J0cy5maW5kRGVsZXRlZCA9IGZpbmREZWxldGVkO1xuXG52YXIgX2RlZmVycmVkID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvZGVmZXJyZWQnKTtcblxudmFyIF9zdHJlYW0gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9zdHJlYW0nKTtcblxudmFyIF9iaXRjb2luanNMaWJaY2FzaCA9IHJlcXVpcmUoJ2JpdGNvaW5qcy1saWItemNhc2gnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEdBUF9TSVpFID0gMjA7XG5cbnZhciBHZXRDaGFpblRyYW5zYWN0aW9ucyA9IGV4cG9ydHMuR2V0Q2hhaW5UcmFuc2FjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2NyZWF0ZUNsYXNzKEdldENoYWluVHJhbnNhY3Rpb25zLCBbe1xuICAgICAgICBrZXk6ICdvcmlnaW5hbExhc3RTZWFyY2hlZCcsXG5cblxuICAgICAgICAvLyBsYXN0IGFkZHJlc3MgdGhhdCB3YXMgc2VhcmNoZWQgd2l0aCB0aGUgcHJldmlvdXMgc2VhcmNoXG5cblxuICAgICAgICAvLyBhIHZhcmlhYmxlIHRoYXQgd2lsbCBtYXliZSBpbmNyZWFzZSB3aGVuIEkgc2VlXG4gICAgICAgIC8vIG5ldyBjb25maXJtZWQgYWRkcmVzc1xuXG5cbiAgICAgICAgLy8gdHJhbnNhY3Rpb25zIGluIHRoZSByYW5nZSB3aWxsIGJlIHNhdmVkIHRvIHRoaXMgYXJyYXlcbiAgICAgICAgLy8gaW5kZXhlZCBieSBoYXNoXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcmlnaW5hbExhc3RTZWFyY2hlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsTGFzdENvbmZpcm1lZCArIEdBUF9TSVpFO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcyBpcyBkZWZlcnJlZCBwcm9taXNlIGZvciByZXN1bHRcblxuXG4gICAgICAgIC8vIGxhc3QgYWRkcmVzcyB0aGF0IHdhcyBjb25maXJtZWQgd2l0aCB0aGUgcHJldmlvdXMgc2VhcmNoXG4gICAgICAgIC8vIChjb25zdGFudClcblxuXG4gICAgICAgIC8vIHBhdGggb2YgbGFzdCBhZGRyZXNzIHRoYXQgSSBzZWFyY2hlZFxuXG5cbiAgICAgICAgLy8gYWRkcmVzcyAtPiBudW1iZXIgbWFwXG5cbiAgICAgICAgLy8gYWxsIHNlZW4gYWRkcmVzc2VzLCBpbmNsdWRpbmcgdGhlIGdhcCBhZGRyZXNzZXNcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbnVsbFJhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG51bGxSYW5nZSgpIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMucmFuZ2U7XG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHJhbmdlLCB7XG4gICAgICAgICAgICAgICAgc2luY2U6IHJhbmdlLm51bGxCbG9ja1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aWxsIGJlIGluamVjdGVkXG5cbiAgICB9XSk7XG5cbiAgICBmdW5jdGlvbiBHZXRDaGFpblRyYW5zYWN0aW9ucyhpZCwgcmFuZ2UsIG9yaWdpbmFsTGFzdENvbmZpcm1lZCwgZ2V0U3RyZWFtLCBvcmlnaW5hbFRyYW5zYWN0aW9ucywgb2xkQWRkcmVzc2VzLCBuZXR3b3JrLCB4cHViLCBzZWd3aXQsIHdlYmFzc2VtYmx5KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHZXRDaGFpblRyYW5zYWN0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hbGxDaGVja2VkQWRkcmVzc2VzID0gW107XG4gICAgICAgIHRoaXMuYmFja1NlYXJjaCA9IHt9O1xuICAgICAgICB0aGlzLm5ld1RyYW5zYWN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmxhc3RTZWFyY2hlZCA9IC0xO1xuICAgICAgICB0aGlzLmRmZCA9ICgwLCBfZGVmZXJyZWQuZGVmZXJyZWQpKCk7XG5cbiAgICAgICAgdGhpcy5vcmlnaW5hbExhc3RDb25maXJtZWQgPSBvcmlnaW5hbExhc3RDb25maXJtZWQ7XG4gICAgICAgIHRoaXMubGFzdENvbmZpcm1lZCA9IG9yaWdpbmFsTGFzdENvbmZpcm1lZDtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gaWQ7XG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcbiAgICAgICAgdGhpcy5nZXRTdHJlYW0gPSBnZXRTdHJlYW07XG4gICAgICAgIHRoaXMudHhpZHMgPSBkZXJpdmVUeGlkU2V0KG9yaWdpbmFsVHJhbnNhY3Rpb25zKTtcbiAgICAgICAgdGhpcy5hbGxBZGRyZXNzZXMgPSBvbGRBZGRyZXNzZXM7XG4gICAgICAgIHRoaXMubmV0d29yayA9IG5ldHdvcms7XG4gICAgICAgIHRoaXMueHB1YiA9IHhwdWI7XG4gICAgICAgIHRoaXMuc2Vnd2l0ID0gc2Vnd2l0O1xuICAgICAgICB0aGlzLndlYmFzc2VtYmx5ID0gd2ViYXNzZW1ibHk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEdldENoYWluVHJhbnNhY3Rpb25zLCBbe1xuICAgICAgICBrZXk6ICdkaXNjb3ZlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlcigpIHtcbiAgICAgICAgICAgIC8vIGZpcnN0IGFuZCBsYXN0IHJhbmdlIG9mIGFkZHJlc3NlcyBmb3IgdGhlIGZpcnN0IHNlYXJjaFxuICAgICAgICAgICAgLy8gKGFsd2F5cyAwIC0gMTkpXG4gICAgICAgICAgICB2YXIgZmlyc3QgPSAwO1xuICAgICAgICAgICAgdmFyIGxhc3QgPSBHQVBfU0laRSAtIDE7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShmaXJzdCwgbGFzdCwgdGhpcy5yYW5nZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZmQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9uZSBcIml0ZXJhdGlvblwiIC0gbWVhbmluZywgZ2V0IHN0cmVhbSBvZiB0cmFuc2FjdGlvbnMgb24gb25lIGNodW5rLFxuICAgICAgICAvLyB3YWl0IGZvciBpdCB0byBlbmQsIGFuZCB0aGVuIGRlY2lkZSB3aGF0IHRvIGRvIG5leHRcblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXRlcmF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpdGVyYXRlKGZpcnN0LCBsYXN0LCAvLyBsYXN0IGlzIGluY2x1c2l2ZVxuICAgICAgICByYW5nZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGFkZHJlc3NlcyA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxBZGRyZXNzZXMubGVuZ3RoIC0gMSA+PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc2VzID0gdGhpcy5hbGxBZGRyZXNzZXMuc2xpY2UoZmlyc3QsIGxhc3QgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndlYmFzc2VtYmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZWJhc3NlbWJseSBpcyBvZmYgPT4gd2UgZ2VuZXJhdGUgZXZlcnl0aGluZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFpbk5vZGUgPSBfYml0Y29pbmpzTGliWmNhc2guSEROb2RlLmZyb21CYXNlNTgodGhpcy54cHViLCB0aGlzLm5ldHdvcmspLmRlcml2ZSh0aGlzLmNoYWluSWQpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3Q7IGkgPD0gbGFzdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkcmVzc05vZGUgPSBjaGFpbk5vZGUuZGVyaXZlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hZGRyZXNzID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZWd3aXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkcmVzcyA9IGFkZHJlc3NOb2RlLmdldEFkZHJlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwNDkubWVkaWF3aWtpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkcmVzcyBkZXJpdmF0aW9uICsgdGVzdCB2ZWN0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBraCA9IGFkZHJlc3NOb2RlLmdldElkZW50aWZpZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0U2lnID0gbmV3IEJ1ZmZlcihwa2gubGVuZ3RoICsgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0U2lnWzBdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHRTaWdbMV0gPSAweDE0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBraC5jb3B5KHNjcmlwdFNpZywgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NCeXRlcyA9IF9iaXRjb2luanNMaWJaY2FzaC5jcnlwdG8uaGFzaDE2MChzY3JpcHRTaWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRyZXNzID0gX2JpdGNvaW5qc0xpYlpjYXNoLmFkZHJlc3MudG9CYXNlNThDaGVjayhhZGRyZXNzQnl0ZXMsIHRoaXMubmV0d29yay5zY3JpcHRIYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzW2kgLSBmaXJzdF0gPSBfYWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IHRoaXMuZ2V0U3RyZWFtKHRoaXMuY2hhaW5JZCwgZmlyc3QsIGxhc3QsIHJhbmdlLmZpcnN0LmhlaWdodCwgcmFuZ2UubGFzdC5oZWlnaHQsIHRoaXMudHhpZHMuc2l6ZSwgYWRkcmVzc2VzKTtcblxuICAgICAgICAgICAgc3RyZWFtLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHZhbHVlXykge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZmQucmVqZWN0KHZhbHVlXyk7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZV87XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlVHJhbnNhY3Rpb25zKHZhbHVlLCBmaXJzdCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3RyZWFtLmZpbmlzaC5hdHRhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZUZpbmlzaChsYXN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hhdCB0byBkbyB3aXRoIHRyYW5zYWN0aW9ucz9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlVHJhbnNhY3Rpb25zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVRyYW5zYWN0aW9ucyh2YWx1ZSwgZmlyc3QpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBzYXZlIHRoZSBhZGRyZXNzZXNcbiAgICAgICAgICAgIHZhbHVlLmFkZHJlc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChhZGRyZXNzLCBpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLmFsbEFkZHJlc3Nlc1tpICsgZmlyc3RdID0gYWRkcmVzcztcbiAgICAgICAgICAgICAgICBfdGhpczIuYWxsQ2hlY2tlZEFkZHJlc3Nlc1tpICsgZmlyc3RdID0gYWRkcmVzcztcbiAgICAgICAgICAgICAgICBfdGhpczIuYmFja1NlYXJjaFthZGRyZXNzXSA9IGkgKyBmaXJzdDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YWx1ZS50cmFuc2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSB0eHMgKGVycm9yIGluIGhlcmUgaXMgaGFuZGxlZCBpbiBpdGVyYXRlKVxuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBfYml0Y29pbmpzTGliWmNhc2guVHJhbnNhY3Rpb24uZnJvbUhleCh0cmFuc2FjdGlvbi5oZXgsIHRyYW5zYWN0aW9uLnpjYXNoKTtcbiAgICAgICAgICAgICAgICB2YXIgb3V0cHV0QWRkcmVzc2VzID0gW107XG4gICAgICAgICAgICAgICAgcGFyc2VkLm91dHMuZm9yRWFjaChmdW5jdGlvbiAob3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAvLyB0cnktY2F0Y2gsIGJlY2F1c2Ugc29tZSBvdXRwdXRzIGRvbid0IGhhdmUgYWRkcmVzc2VzXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzID0gX2JpdGNvaW5qc0xpYlpjYXNoLmFkZHJlc3MuZnJvbU91dHB1dFNjcmlwdChvdXRwdXQuc2NyaXB0LCBfdGhpczIubmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBtaW5lLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLmJhY2tTZWFyY2hbYWRkcmVzc10gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGNvbmZpcm1lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi5oZWlnaHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2FkZHJlc3NJID0gX3RoaXMyLmJhY2tTZWFyY2hbYWRkcmVzc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgbWluZSBhbmQgY29uZmlybWVkLCBidW1wIGxhc3RDb25maXJtZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9hZGRyZXNzSSA+IF90aGlzMi5sYXN0Q29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIubGFzdENvbmZpcm1lZCA9IF9hZGRyZXNzSTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBhZGQgdG8gZmxvd2RlZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJEZsb3dJc3N1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBfYml0Y29pbmpzTGliWmNhc2guc2NyaXB0LmNsYXNzaWZ5T3V0cHV0KG91dHB1dC5zY3JpcHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ251bGxkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gYWRkIHRvIGZsb3dkZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkRmxvd0lzc3VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IF9iaXRjb2luanNMaWJaY2FzaC5zY3JpcHQubnVsbERhdGEub3V0cHV0LmRlY29kZShvdXRwdXQuc2NyaXB0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuZXZlcnkoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID49IDMyICYmIGkgPD0gMTI2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzY2lpID0gYnVmZmVyLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGFzY2lpLnNsaWNlKDAsIDQwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSAnMHgnICsgYnVmZmVyLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBoZXguc2xpY2UoMCwgNDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSAnT1BfUkVUVVJOICgnICsgdGV4dCArICcpJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9ICdVTktOT1dOJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dEFkZHJlc3Nlcy5wdXNoKGFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBjID0ge1xuICAgICAgICAgICAgICAgICAgICB0eDogcGFyc2VkLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRBZGRyZXNzZXM6IG91dHB1dEFkZHJlc3NlcyxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0cmFuc2FjdGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdHJhbnNhY3Rpb24udGltZXN0YW1wLFxuICAgICAgICAgICAgICAgICAgICBoYXNoOiB0cmFuc2FjdGlvbi5oYXNoLFxuICAgICAgICAgICAgICAgICAgICBmZWU6IHRyYW5zYWN0aW9uLmZlZSxcbiAgICAgICAgICAgICAgICAgICAgdnNpemU6IHRyYW5zYWN0aW9uLnZzaXplLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dEFkZHJlc3NlczogdHJhbnNhY3Rpb24uaW5wdXRBZGRyZXNzZXNcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gbW9yZSB0cmFuc2FjdGlvbnMgd2l0aCB0aGUgc2FtZSBJRCBvdmVyd3JpdGUgZWFjaCBvdGhlclxuICAgICAgICAgICAgICAgIF90aGlzMi5uZXdUcmFuc2FjdGlvbnNbYy5oYXNoXSA9IGM7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnR4aWRzLmFkZChjLmhhc2gpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aGVuIHN0cmVhbSBmaW5pc2hlcywgd2UgaGF2ZSB0byBkZWNpZGUgaWYgd2Ugd2FudCB0cnkgbW9yZSBhZGRyZXNzZXMgb3Igbm90XG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUZpbmlzaCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVGaW5pc2gobGFzdCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0U2VhcmNoZWQgPSBsYXN0O1xuXG4gICAgICAgICAgICAvLyBsb29rIGF0IHdoaWNoIGlzIHRoZSBuZXh0IHRoaW5nIHdlIHdhbnRcbiAgICAgICAgICAgIHZhciBzaG91bGRTZWFyY2hMYXN0ID0gdGhpcy5sYXN0Q29uZmlybWVkICsgR0FQX1NJWkU7XG4gICAgICAgICAgICB2YXIgbmV4dENodW5rRW5kID0gdGhpcy5sYXN0U2VhcmNoZWQgKyBHQVBfU0laRTtcbiAgICAgICAgICAgIHZhciBuZXh0TGFzdCA9IHNob3VsZFNlYXJjaExhc3QgPCBuZXh0Q2h1bmtFbmQgPyBzaG91bGRTZWFyY2hMYXN0IDogbmV4dENodW5rRW5kO1xuICAgICAgICAgICAgdmFyIG5leHRGaXJzdCA9IHRoaXMubGFzdFNlYXJjaGVkICsgMTtcblxuICAgICAgICAgICAgLy8gSXMgdGhlcmUgc29tZXRoaW5nIHRvIHNlYXJjaD9cbiAgICAgICAgICAgIGlmIChuZXh0TGFzdCA+PSBuZXh0Rmlyc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBvbiBjb21wbGV0ZWx5IG5ldyBhZGRyZXNzZXMsIHdlIGxvb2sgZnJvbSBibG9jayAwXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbWlzcyB0cmFuc2FjdGlvbnNcblxuICAgICAgICAgICAgICAgIC8vIGFyZSB0aGVyZSBzb21lIG5ldyBhZGRyZXNzZXM/XG4gICAgICAgICAgICAgICAgaWYgKG5leHRMYXN0ID4gdGhpcy5vcmlnaW5hbExhc3RTZWFyY2hlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFwiYnJlYWtcIiBpbnRvIHR3byBwYXJ0cywgb25lIHBhcnQgb25seSBuZXcgYWRkcmVzc2VzLFxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlciBwYXJ0IG9ubHkgb2xkIGFkZHJlc3Nlc1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEZpcnN0ID49IHRoaXMub3JpZ2luYWxMYXN0U2VhcmNoZWQoKSArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBhZGRyZXNzZXMsIGFsbCBibG9ja3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShuZXh0Rmlyc3QsIG5leHRMYXN0LCB0aGlzLm51bGxSYW5nZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9sZCBhZGRyZXNzZXMsIG5ldyBibG9ja3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShuZXh0Rmlyc3QsIHRoaXMub3JpZ2luYWxMYXN0U2VhcmNoZWQoKSwgdGhpcy5yYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBvbGQgYWRkcmVzc2VzLCBuZXcgYmxvY2tzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlcmF0ZShuZXh0Rmlyc3QsIG5leHRMYXN0LCB0aGlzLnJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vdGhpbmcgbW9yZSB0byBsb29rIGZvciwgcmV0dXJuXG4gICAgICAgICAgICAgICAgdGhpcy5kZmQucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIG5ld1RyYW5zYWN0aW9uczogdGhpcy5uZXdUcmFuc2FjdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGFsbEFkZHJlc3NlczogdGhpcy5hbGxBZGRyZXNzZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBHZXRDaGFpblRyYW5zYWN0aW9ucztcbn0oKTtcblxuZnVuY3Rpb24gZmluZERlbGV0ZWQodHhpZHMsIGRvZXNUcmFuc2FjdGlvbkV4aXN0KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzdHIgPSBfc3RyZWFtLlN0cmVhbS5mcm9tQXJyYXkodHhpZHMpO1xuICAgIHJldHVybiBzdHIubWFwUHJvbWlzZUVycm9yKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICByZXR1cm4gZG9lc1RyYW5zYWN0aW9uRXhpc3QoaWQpLnRoZW4oZnVuY3Rpb24gKGV4aXN0cykge1xuICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pLmF3YWl0RmluaXNoKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlcml2ZVR4aWRTZXQodHJhbnNhY3Rpb25zKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBTZXQoKTtcblxuICAgIHRyYW5zYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJlcy5hZGQodC5oYXNoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRDMWphR0ZwYmkxMGNtRnVjMkZqZEdsdmJuTXVhbk1pWFN3aWJtRnRaWE1pT2xzaVptbHVaRVJsYkdWMFpXUWlMQ0pIUVZCZlUwbGFSU0lzSWtkbGRFTm9ZV2x1VkhKaGJuTmhZM1JwYjI1eklpd2liM0pwWjJsdVlXeE1ZWE4wUTI5dVptbHliV1ZrSWl3aWNtRnVaMlVpTENKemFXNWpaU0lzSW01MWJHeENiRzlqYXlJc0ltbGtJaXdpWjJWMFUzUnlaV0Z0SWl3aWIzSnBaMmx1WVd4VWNtRnVjMkZqZEdsdmJuTWlMQ0p2YkdSQlpHUnlaWE56WlhNaUxDSnVaWFIzYjNKcklpd2llSEIxWWlJc0luTmxaM2RwZENJc0luZGxZbUZ6YzJWdFlteDVJaXdpWVd4c1EyaGxZMnRsWkVGa1pISmxjM05sY3lJc0ltSmhZMnRUWldGeVkyZ2lMQ0p1WlhkVWNtRnVjMkZqZEdsdmJuTWlMQ0pzWVhOMFUyVmhjbU5vWldRaUxDSmtabVFpTENKc1lYTjBRMjl1Wm1seWJXVmtJaXdpWTJoaGFXNUpaQ0lzSW5SNGFXUnpJaXdpWkdWeWFYWmxWSGhwWkZObGRDSXNJbUZzYkVGa1pISmxjM05sY3lJc0ltWnBjbk4wSWl3aWJHRnpkQ0lzSW1sMFpYSmhkR1VpTENKd2NtOXRhWE5sSWl3aVlXUmtjbVZ6YzJWeklpd2liR1Z1WjNSb0lpd2ljMnhwWTJVaUxDSmphR0ZwYms1dlpHVWlMQ0ptY205dFFtRnpaVFU0SWl3aVpHVnlhWFpsSWl3aWFTSXNJbUZrWkhKbGMzTk9iMlJsSWl3aVlXUmtjbVZ6Y3lJc0ltZGxkRUZrWkhKbGMzTWlMQ0p3YTJnaUxDSm5aWFJKWkdWdWRHbG1hV1Z5SWl3aWMyTnlhWEIwVTJsbklpd2lRblZtWm1WeUlpd2lZMjl3ZVNJc0ltRmtaSEpsYzNOQ2VYUmxjeUlzSW1oaGMyZ3hOakFpTENKMGIwSmhjMlUxT0VOb1pXTnJJaXdpYzJOeWFYQjBTR0Z6YUNJc0luTjBjbVZoYlNJc0ltaGxhV2RvZENJc0luTnBlbVVpTENKMllXeDFaWE1pTENKaGRIUmhZMmdpTENKMllXeDFaVjhpTENKRmNuSnZjaUlzSW5KbGFtVmpkQ0lzSW1ScGMzQnZjMlVpTENKMllXeDFaU0lzSW1oaGJtUnNaVlJ5WVc1ellXTjBhVzl1Y3lJc0ltWnBibWx6YUNJc0ltaGhibVJzWlVacGJtbHphQ0lzSW1admNrVmhZMmdpTENKMGNtRnVjMkZqZEdsdmJuTWlMQ0p3WVhKelpXUWlMQ0ptY205dFNHVjRJaXdpZEhKaGJuTmhZM1JwYjI0aUxDSm9aWGdpTENKNlkyRnphQ0lzSW05MWRIQjFkRUZrWkhKbGMzTmxjeUlzSW05MWRITWlMQ0p2ZFhSd2RYUWlMQ0ptY205dFQzVjBjSFYwVTJOeWFYQjBJaXdpYzJOeWFYQjBJaXdpWDJGa1pISmxjM05KSWl3aVpTSXNJblI1Y0dVaUxDSmpiR0Z6YzJsbWVVOTFkSEIxZENJc0ltSjFabVpsY2lJc0ltNTFiR3hFWVhSaElpd2laR1ZqYjJSbElpd2lkR1Y0ZENJc0ltVjJaWEo1SWl3aVlYTmphV2tpTENKMGIxTjBjbWx1WnlJc0luQjFjMmdpTENKaklpd2lkSGdpTENKMGFXMWxjM1JoYlhBaUxDSm9ZWE5vSWl3aVptVmxJaXdpZG5OcGVtVWlMQ0pwYm5CMWRFRmtaSEpsYzNObGN5SXNJbUZrWkNJc0luTm9iM1ZzWkZObFlYSmphRXhoYzNRaUxDSnVaWGgwUTJoMWJtdEZibVFpTENKdVpYaDBUR0Z6ZENJc0ltNWxlSFJHYVhKemRDSXNJbTl5YVdkcGJtRnNUR0Z6ZEZObFlYSmphR1ZrSWl3aWJuVnNiRkpoYm1kbElpd2ljbVZ6YjJ4MlpTSXNJbVJ2WlhOVWNtRnVjMkZqZEdsdmJrVjRhWE4wSWl3aWNtVnpkV3gwSWl3aWMzUnlJaXdpWm5KdmJVRnljbUY1SWl3aWJXRndVSEp2YldselpVVnljbTl5SWl3aWRHaGxiaUlzSW1WNGFYTjBjeUlzSW1GM1lXbDBSbWx1YVhOb0lpd2ljbVZ6SWl3aVUyVjBJaXdpZENKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRSUVhkVlowSkJMRmNzUjBGQlFVRXNWenM3UVVGMFZXaENPenRCUVZOQk96dEJRVU5CT3pzN08wRkJWVUVzU1VGQlRVTXNWMEZCYlVJc1JVRkJla0k3TzBsQlJXRkRMRzlDTEZkQlFVRkJMRzlDT3pzN096dEJRWFZDVkRzN08wRkJVa0U3UVVGRFFUczdPMEZCVWtFN1FVRkRRVHNyUTBGbEswSTdRVUZETTBJc2JVSkJRVThzUzBGQlMwTXNjVUpCUVV3c1IwRkJOa0pHTEZGQlFYQkRPMEZCUTBnN08wRkJSVVE3T3p0QlFWUkJPMEZCUTBFN096dEJRVkpCT3pzN1FVRlFRVHM3UVVGS1FUczdPenR2UTBGelEzZENPMEZCUTNCQ0xHZENRVUZOUnl4UlFVRlJMRXRCUVV0QkxFdEJRVzVDTzBGQlEwRXNaME5CUTA5QkxFdEJSRkE3UVVGRlNVTXNkVUpCUVU5RUxFMUJRVTFGTzBGQlJtcENPMEZCU1VnN08wRkJTVVE3T3pzN1FVRmhRU3hyUTBGRFNVTXNSVUZFU2l4RlFVVkpTQ3hMUVVaS0xFVkJSMGxFTEhGQ1FVaEtMRVZCU1VsTExGTkJTa29zUlVGaFNVTXNiMEpCWWtvc1JVRmpTVU1zV1VGa1NpeEZRV1ZKUXl4UFFXWktMRVZCWjBKSlF5eEpRV2hDU2l4RlFXbENTVU1zVFVGcVFrb3NSVUZyUWtsRExGZEJiRUpLTEVWQmJVSkZPMEZCUVVFN08wRkJRVUVzWVVFNVJVWkRMRzFDUVRoRlJTeEhRVGxGYlVNc1JVRTRSVzVETzBGQlFVRXNZVUV6UlVaRExGVkJNa1ZGTEVkQk0wVjNReXhGUVRKRmVFTTdRVUZCUVN4aFFYWkZSa01zWlVGMVJVVXNSMEYyUlhORExFVkJkVVYwUXp0QlFVRkJMR0ZCY0VWR1F5eFpRVzlGUlN4SFFYQkZjVUlzUTBGQlF5eERRVzlGZEVJN1FVRkJRU3hoUVhCRVJrTXNSMEZ2UkVVc1IwRndSRFJDTEhsQ1FXOUVOVUk3TzBGQlEwVXNZVUZCUzJoQ0xIRkNRVUZNTEVkQlFUWkNRU3h4UWtGQk4wSTdRVUZEUVN4aFFVRkxhVUlzWVVGQlRDeEhRVUZ4UW1wQ0xIRkNRVUZ5UWp0QlFVTkJMR0ZCUVV0clFpeFBRVUZNTEVkQlFXVmtMRVZCUVdZN1FVRkRRU3hoUVVGTFNDeExRVUZNTEVkQlFXRkJMRXRCUVdJN1FVRkRRU3hoUVVGTFNTeFRRVUZNTEVkQlFXbENRU3hUUVVGcVFqdEJRVU5CTEdGQlFVdGpMRXRCUVV3c1IwRkJZVU1zWTBGQlkyUXNiMEpCUVdRc1EwRkJZanRCUVVOQkxHRkJRVXRsTEZsQlFVd3NSMEZCYjBKa0xGbEJRWEJDTzBGQlEwRXNZVUZCUzBNc1QwRkJUQ3hIUVVGbFFTeFBRVUZtTzBGQlEwRXNZVUZCUzBNc1NVRkJUQ3hIUVVGWlFTeEpRVUZhTzBGQlEwRXNZVUZCUzBNc1RVRkJUQ3hIUVVGalFTeE5RVUZrTzBGQlEwRXNZVUZCUzBNc1YwRkJUQ3hIUVVGdFFrRXNWMEZCYmtJN1FVRkRTRHM3T3p0dFEwRkZhVU03UVVGRE9VSTdRVUZEUVR0QlFVTkJMR2RDUVVGTlZ5eFJRVUZSTEVOQlFXUTdRVUZEUVN4blFrRkJUVU1zVDBGQlQzcENMRmRCUVZjc1EwRkJlRUk3TzBGQlJVRXNhVUpCUVVzd1FpeFBRVUZNTEVOQlFXRkdMRXRCUVdJc1JVRkJiMEpETEVsQlFYQkNMRVZCUVRCQ0xFdEJRVXQwUWl4TFFVRXZRanRCUVVOQkxHMUNRVUZQTEV0QlFVdGxMRWRCUVV3c1EwRkJVMU1zVDBGQmFFSTdRVUZEU0RzN1FVRkZSRHRCUVVOQk96czdPMmREUVVWSlNDeExMRVZCUTBGRExFa3NSVUZCWXp0QlFVTmtkRUlzWVN4RlFVTkdPMEZCUVVFN08wRkJRMFVzWjBKQlFVbDVRaXhaUVVFMFFpeEpRVUZvUXp0QlFVTkJMR2RDUVVGSkxFdEJRVXRNTEZsQlFVd3NRMEZCYTBKTkxFMUJRV3hDTEVkQlFUSkNMRU5CUVROQ0xFbEJRV2REU2l4SlFVRndReXhGUVVFd1F6dEJRVU4wUTBjc05FSkJRVmtzUzBGQlMwd3NXVUZCVEN4RFFVRnJRazhzUzBGQmJFSXNRMEZCZDBKT0xFdEJRWGhDTEVWQlFTdENReXhQUVVGUExFTkJRWFJETEVOQlFWbzdRVUZEU0N4aFFVWkVMRTFCUlU4N1FVRkRTQ3h2UWtGQlNTeERRVUZETEV0QlFVdGFMRmRCUVZZc1JVRkJkVUk3UVVGRGJrSmxMR2REUVVGWkxFVkJRVm83UVVGRFFUdEJRVU5CTEhkQ1FVRk5SeXhaUVVGWkxEQkNRVUZuUWtNc1ZVRkJhRUlzUTBGQk1rSXNTMEZCUzNKQ0xFbEJRV2hETEVWQlFYTkRMRXRCUVV0RUxFOUJRVE5ETEVWQlFXOUVkVUlzVFVGQmNFUXNRMEZCTWtRc1MwRkJTMklzVDBGQmFFVXNRMEZCYkVJN1FVRkRRU3g1UWtGQlN5eEpRVUZKWXl4SlFVRkpWaXhMUVVGaUxFVkJRVzlDVlN4TFFVRkxWQ3hKUVVGNlFpeEZRVUVyUWxNc1IwRkJMMElzUlVGQmIwTTdRVUZEYUVNc05FSkJRVTFETEdOQlFXTktMRlZCUVZWRkxFMUJRVllzUTBGQmFVSkRMRU5CUVdwQ0xFTkJRWEJDTzBGQlEwRXNORUpCUVVsRkxGZEJRVlVzUlVGQlpEczdRVUZGUVN3MFFrRkJTU3hEUVVGRExFdEJRVXQ0UWl4TlFVRldMRVZCUVd0Q08wRkJRMlIzUWl4MVEwRkJWVVFzV1VGQldVVXNWVUZCV2l4RlFVRldPMEZCUTBnc2VVSkJSa1FzVFVGRlR6dEJRVU5JTzBGQlEwRTdRVUZEUVN4blEwRkJUVU1zVFVGQlRVZ3NXVUZCV1Vrc1lVRkJXaXhGUVVGYU8wRkJRMEVzWjBOQlFVMURMRmxCUVZrc1NVRkJTVU1zVFVGQlNpeERRVUZYU0N4SlFVRkpWQ3hOUVVGS0xFZEJRV0VzUTBGQmVFSXNRMEZCYkVJN1FVRkRRVmNzYzBOQlFWVXNRMEZCVml4SlFVRmxMRU5CUVdZN1FVRkRRVUVzYzBOQlFWVXNRMEZCVml4SlFVRmxMRWxCUVdZN1FVRkRRVVlzWjBOQlFVbEpMRWxCUVVvc1EwRkJVMFlzVTBGQlZDeEZRVUZ2UWl4RFFVRndRanRCUVVOQkxHZERRVUZOUnl4bFFVRmxMREJDUVVGblFrTXNUMEZCYUVJc1EwRkJkMEpLTEZOQlFYaENMRU5CUVhKQ08wRkJRMEZLTEhWRFFVRlZMREpDUVVGcFFsTXNZVUZCYWtJc1EwRkJLMEpHTEZsQlFTOUNMRVZCUVRaRExFdEJRVXRxUXl4UFFVRk1MRU5CUVdGdlF5eFZRVUV4UkN4RFFVRldPMEZCUTBnN08wRkJSVVJzUWl4clEwRkJWVTBzU1VGQlNWWXNTMEZCWkN4SlFVRjFRbGtzVVVGQmRrSTdRVUZEU0R0QlFVTktPMEZCUTBvN08wRkJSVVFzWjBKQlFVMVhMRk5CUVZNc1MwRkJTM2hETEZOQlFVd3NRMEZEV0N4TFFVRkxZU3hQUVVSTkxFVkJSVmhKTEV0QlJsY3NSVUZIV0VNc1NVRklWeXhGUVVsWWRFSXNUVUZCVFhGQ0xFdEJRVTRzUTBGQldYZENMRTFCU2tRc1JVRkxXRGRETEUxQlFVMXpRaXhKUVVGT0xFTkJRVmQxUWl4TlFVeEJMRVZCVFZnc1MwRkJTek5DTEV0QlFVd3NRMEZCVnpSQ0xFbEJUa0VzUlVGUFdISkNMRk5CVUZjc1EwRkJaanM3UVVGVlFXMUNMRzFDUVVGUFJ5eE5RVUZRTEVOQlFXTkRMRTFCUVdRc1EwRkJjVUlzVlVGQlEwTXNUVUZCUkN4RlFVRlpPMEZCUXpkQ0xHOUNRVUZKUVN4clFrRkJhMEpETEV0QlFYUkNMRVZCUVRaQ08wRkJRM3BDTERCQ1FVRkxia01zUjBGQlRDeERRVUZUYjBNc1RVRkJWQ3hEUVVGblFrWXNUVUZCYUVJN1FVRkRRVXdzTWtKQlFVOVJMRTlCUVZBN1FVRkRRVHRCUVVOSU96dEJRVVZFTEc5Q1FVRk5ReXhSUVVGUlNpeE5RVUZrTzBGQlEwRXNjMEpCUVV0TExHdENRVUZNTEVOQlFYZENSQ3hMUVVGNFFpeEZRVUVyUW1oRExFdEJRUzlDTzBGQlEwZ3NZVUZVUkRzN1FVRlhRWFZDTEcxQ1FVRlBWeXhOUVVGUUxFTkJRV05RTEUxQlFXUXNRMEZCY1VJc1dVRkJUVHRCUVVOMlFpeHpRa0ZCUzFFc1dVRkJUQ3hEUVVGclFteERMRWxCUVd4Q08wRkJRMGdzWVVGR1JEdEJRVWRJT3p0QlFVVkVPenM3T3pKRFFVVkpLMElzU3l4RlFVTkJhRU1zU3l4RlFVTkdPMEZCUVVFN08wRkJRMFU3UVVGRFFXZERMR3RDUVVGTk5VSXNVMEZCVGl4RFFVRm5RbWRETEU5QlFXaENMRU5CUVhkQ0xGVkJRVU40UWl4UFFVRkVMRVZCUVZWR0xFTkJRVllzUlVGQlowSTdRVUZEY0VNc2RVSkJRVXRZTEZsQlFVd3NRMEZCYTBKWExFbEJRVWxXTEV0QlFYUkNMRWxCUVN0Q1dTeFBRVUV2UWp0QlFVTkJMSFZDUVVGTGRFSXNiVUpCUVV3c1EwRkJlVUp2UWl4SlFVRkpWaXhMUVVFM1FpeEpRVUZ6UTFrc1QwRkJkRU03UVVGRFFTeDFRa0ZCUzNKQ0xGVkJRVXdzUTBGQlowSnhRaXhQUVVGb1FpeEpRVUV5UWtZc1NVRkJTVllzUzBGQkwwSTdRVUZEU0N4aFFVcEVPenRCUVUxQlowTXNhMEpCUVUxTExGbEJRVTRzUTBGQmJVSkVMRTlCUVc1Q0xFTkJRVEpDTEhWQ1FVRmxPMEZCUTNSRE8wRkJRMEVzYjBKQlFVMUZMRk5CUVZNc0swSkJRWEZDUXl4UFFVRnlRaXhEUVVFMlFrTXNXVUZCV1VNc1IwRkJla01zUlVGQk9FTkVMRmxCUVZsRkxFdEJRVEZFTEVOQlFXWTdRVUZEUVN4dlFrRkJUVU1zYTBKQlFXdENMRVZCUVhoQ08wRkJRMEZNTEhWQ1FVRlBUU3hKUVVGUUxFTkJRVmxTTEU5QlFWb3NRMEZCYjBJc1ZVRkJRMU1zVFVGQlJDeEZRVUZaTzBGQlF6VkNMSGRDUVVGSmFrTXNaMEpCUVVvN1FVRkRRVHRCUVVOQkxIZENRVUZKTzBGQlEwRkJMR3REUVVGVkxESkNRVUZwUW10RExHZENRVUZxUWl4RFFVRnJRMFFzVDBGQlQwVXNUVUZCZWtNc1JVRkJhVVFzVDBGQlN6ZEVMRTlCUVhSRUxFTkJRVlk3UVVGRFFUdEJRVU5CTERSQ1FVRkpMRTlCUVV0TExGVkJRVXdzUTBGQlowSnhRaXhQUVVGb1FpeExRVUUwUWl4SlFVRm9ReXhGUVVGelF6dEJRVU5zUXp0QlFVTkJMR2REUVVGSk5FSXNXVUZCV1doQ0xFMUJRVm9zU1VGQmMwSXNTVUZCTVVJc1JVRkJaME03UVVGRE5VSXNiME5CUVUxM1FpeFpRVUZaTEU5QlFVdDZSQ3hWUVVGTUxFTkJRV2RDY1VJc1QwRkJhRUlzUTBGQmJFSTdRVUZEUVR0QlFVTkJMRzlEUVVGSmIwTXNXVUZCV1N4UFFVRkxja1FzWVVGQmNrSXNSVUZCYjBNN1FVRkRhRU1zTWtOQlFVdEJMR0ZCUVV3c1IwRkJjVUp4UkN4VFFVRnlRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEhGQ1FXSkVMRU5CWVVVc1QwRkJUME1zUTBGQlVDeEZRVUZWTzBGQlExSTdRVUZEUVR0QlFVTkJMRFJDUVVGTlF5eFBRVUZQTERCQ1FVRm5Ra01zWTBGQmFFSXNRMEZCSzBKT0xFOUJRVTlGTEUxQlFYUkRMRU5CUVdJN08wRkJSVUVzTkVKQlFVbEhMRk5CUVZNc1ZVRkJZaXhGUVVGNVFqdEJRVU55UWp0QlFVTkJPMEZCUTBFc1owTkJRVTFGTEZOQlFWTXNNRUpCUVdkQ1F5eFJRVUZvUWl4RFFVRjVRbElzVFVGQmVrSXNRMEZCWjBOVExFMUJRV2hETEVOQlFYVkRWQ3hQUVVGUFJTeE5RVUU1UXl4RFFVRm1PenRCUVVWQkxHZERRVUZKVVN4UFFVRlBMRVZCUVZnN08wRkJSVUVzWjBOQlFVbElMRmRCUVZjc1EwRkJaaXhGUVVGclFqdEJRVU5rTEc5RFFVRkpRU3hQUVVGUFNTeExRVUZRTEVOQlFXRTdRVUZCUVN3eVEwRkJTemxETEV0QlFVc3NSVUZCVEN4SlFVRlhRU3hMUVVGTExFZEJRWEpDTzBGQlFVRXNhVU5CUVdJc1EwRkJTaXhGUVVFMFF6dEJRVU40UXl4M1EwRkJUU3RETEZGQlFWRk1MRTlCUVU5TkxGRkJRVkFzUTBGQlowSXNUMEZCYUVJc1EwRkJaRHRCUVVOQlNDd3lRMEZCVDBVc1RVRkJUVzVFTEV0QlFVNHNRMEZCV1N4RFFVRmFMRVZCUVdVc1JVRkJaaXhEUVVGUU8wRkJRMGdzYVVOQlNFUXNUVUZIVHp0QlFVTklMSGREUVVGTmJVTXNUVUZCVFN4UFFVRlBWeXhQUVVGUFRTeFJRVUZRTEVOQlFXZENMRXRCUVdoQ0xFTkJRVzVDTzBGQlEwRklMREpEUVVGUFpDeEpRVUZKYmtNc1MwRkJTaXhEUVVGVkxFTkJRVllzUlVGQllTeEZRVUZpTEVOQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBSTkxITkRRVUZWTEdkQ1FVRm5RakpETEVsQlFXaENMRWRCUVhWQ0xFZEJRV3BETzBGQlEwZ3NlVUpCYWtKRUxFMUJhVUpQTzBGQlEwZ3pReXh6UTBGQlZTeFRRVUZXTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3RDTEc5RFFVRm5RbWRDTEVsQlFXaENMRU5CUVhGQ0wwTXNUMEZCY2tJN1FVRkRTQ3hwUWtFMVEwUTdRVUUyUTBFc2IwSkJRVTFuUkN4SlFVRjVRanRCUVVNelFrTXNkMEpCUVVsMlFpeE5RVVIxUWp0QlFVVXpRa3NzYjBSQlJqSkNPMEZCUnpOQ2JrSXNORUpCUVZGblFpeFpRVUZaYUVJc1RVRklUenRCUVVrelFuTkRMQ3RDUVVGWGRFSXNXVUZCV1hOQ0xGTkJTa2s3UVVGTE0wSkRMREJDUVVGTmRrSXNXVUZCV1hWQ0xFbEJURk03UVVGTk0wSkRMSGxDUVVGTGVFSXNXVUZCV1hkQ0xFZEJUbFU3UVVGUE0wSkRMREpDUVVGUGVrSXNXVUZCV1hsQ0xFdEJVRkU3UVVGUk0wSkRMRzlEUVVGblFqRkNMRmxCUVZrd1FqdEJRVkpFTEdsQ1FVRXZRanM3UVVGWFFUdEJRVU5CTEhWQ1FVRkxNVVVzWlVGQlRDeERRVUZ4UW05RkxFVkJRVVZITEVsQlFYWkNMRWxCUVN0Q1NDeERRVUV2UWp0QlFVTkJMSFZDUVVGTEwwUXNTMEZCVEN4RFFVRlhjMFVzUjBGQldDeERRVUZsVUN4RlFVRkZSeXhKUVVGcVFqdEJRVU5JTEdGQkwwUkVPMEZCWjBWSU96dEJRVVZFT3pzN08zRkRRVVZKT1VRc1NTeEZRVU5HTzBGQlEwVXNhVUpCUVV0U0xGbEJRVXdzUjBGQmIwSlJMRWxCUVhCQ096dEJRVVZCTzBGQlEwRXNaMEpCUVUxdFJTeHRRa0ZCYlVJc1MwRkJTM3BGTEdGQlFVd3NSMEZCY1VKdVFpeFJRVUU1UXp0QlFVTkJMR2RDUVVGTk5rWXNaVUZCWlN4TFFVRkxOVVVzV1VGQlRDeEhRVUZ2UW1wQ0xGRkJRWHBETzBGQlEwRXNaMEpCUVUwNFJpeFhRVU5HUml4dFFrRkJiVUpETEZsQlFXNUNMRWRCUTBWRUxHZENRVVJHTEVkQlJVVkRMRmxCU0U0N1FVRkpRU3huUWtGQlRVVXNXVUZCV1N4TFFVRkxPVVVzV1VGQlRDeEhRVUZ2UWl4RFFVRjBRenM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpOa1VzV1VGQldVTXNVMEZCYUVJc1JVRkJNa0k3UVVGRGRrSTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHOUNRVUZKUkN4WFFVRlhMRXRCUVV0RkxHOUNRVUZNTEVWQlFXWXNSVUZCTkVNN1FVRkRlRU03UVVGRFFUdEJRVU5CTEhkQ1FVRkpSQ3hoUVVGaExFdEJRVXRETEc5Q1FVRk1MRXRCUVRoQ0xFTkJRUzlETEVWQlFXdEVPMEZCUXpsRE8wRkJRMEVzTmtKQlFVdDBSU3hQUVVGTUxFTkJRMGx4UlN4VFFVUktMRVZCUlVsRUxGRkJSa29zUlVGSFNTeExRVUZMUnl4VFFVRk1MRVZCU0VvN1FVRkxTQ3h4UWtGUVJDeE5RVTlQTzBGQlEwZzdRVUZEUVN3MlFrRkJTM1pGTEU5QlFVd3NRMEZEU1hGRkxGTkJSRW9zUlVGRlNTeExRVUZMUXl4dlFrRkJUQ3hGUVVaS0xFVkJSMGtzUzBGQlN6ZEdMRXRCU0ZRN1FVRkxTRHRCUVVOS0xHbENRV3hDUkN4TlFXdENUenRCUVVOSU8wRkJRMEVzZVVKQlFVdDFRaXhQUVVGTUxFTkJRMGx4UlN4VFFVUktMRVZCUlVsRUxGRkJSa29zUlVGSFNTeExRVUZMTTBZc1MwRklWRHRCUVV0SU8wRkJRMG9zWVVFdlFrUXNUVUVyUWs4N1FVRkRTRHRCUVVOQkxIRkNRVUZMWlN4SFFVRk1MRU5CUVZOblJpeFBRVUZVTEVOQlFXbENPMEZCUTJKc1JpeHhRMEZCYVVJc1MwRkJTMEVzWlVGRVZEdEJRVVZpVHl4clEwRkJZeXhMUVVGTFFUdEJRVVpPTEdsQ1FVRnFRanRCUVVsSU8wRkJRMG83T3pzN096dEJRVWRGTEZOQlFWTjRRaXhYUVVGVUxFTkJRMGh6UWl4TFFVUkhMRVZCUlVnNFJTeHZRa0ZHUnl4RlFVdHRRanRCUVVOMFFpeFJRVUZOUXl4VFFVRlRMRVZCUVdZN1FVRkRRU3hSUVVGTlF5eE5RVUZOTEdWQlFVOURMRk5CUVZBc1EwRkJhVUpxUml4TFFVRnFRaXhEUVVGYU8wRkJRMEVzVjBGQlQyZEdMRWxCUTBaRkxHVkJSRVVzUTBGRFl5eGpRVUZOTzBGQlEyNUNMR1ZCUVU5S0xIRkNRVUZ4UWpkR0xFVkJRWEpDTEVWQlFYbENhMGNzU1VGQmVrSXNRMEZCT0VJc2EwSkJRVlU3UVVGRE0wTXNaMEpCUVVrc1EwRkJRME1zVFVGQlRDeEZRVUZoTzBGQlExUk1MSFZDUVVGUGFrSXNTVUZCVUN4RFFVRlpOMFVzUlVGQldqdEJRVU5JTzBGQlEwb3NVMEZLVFN4RFFVRlFPMEZCUzBnc1MwRlFSU3hGUVZGR2IwY3NWMEZTUlN4SFFWTkdSaXhKUVZSRkxFTkJVMGM3UVVGQlFTeGxRVUZOU2l4TlFVRk9PMEZCUVVFc1MwRlVTQ3hEUVVGUU8wRkJWVWc3TzBGQlJVUXNVMEZCVXpsRkxHRkJRVlFzUTBGRFNYVkRMRmxCUkVvc1JVRkZaVHRCUVVOWUxGRkJRVTA0UXl4TlFVRk5MRWxCUVVsRExFZEJRVW9zUlVGQldqczdRVUZGUVM5RExHbENRVUZoUkN4UFFVRmlMRU5CUVhGQ0xHRkJRVXM3UVVGRGRFSXJReXhaUVVGSmFFSXNSMEZCU2l4RFFVRlJhMElzUlVGQlJYUkNMRWxCUVZZN1FVRkRTQ3hMUVVaRU8wRkJSMEVzVjBGQlQyOUNMRWRCUVZBN1FVRkRTQ0lzSW1acGJHVWlPaUpuWlhRdFkyaGhhVzR0ZEhKaGJuTmhZM1JwYjI1ekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ1FHWnNiM2NnS2k5Y2JseHVMeThnVkdocGN5QnBjeUIzYUdGMElHaGhjSEJsYm5NZ1NVNVRTVVJGSUhSb1pTQjNiM0pyWlhKY2JpOHZJRmRsSUdGemF5QjBhR1VnVFVGSlRpQjBieUJtWlhSamFDQjFjeUIwY21GdWMyRmpkR2x2Ym5NZ1puSnZiU0IwYUdWY2JpOHZJR0pzYjJOclkyaGhhVzRnWVc1a0lHRmtaSEpsYzNObGMxeHVMeThnVkdobElFMUJTVTRnZEdoeVpXRmtJSEpsY0d4cFpYTWdZbUZqYXlCMGJ5QjBhR1VnZDI5eWEyVnlMQ0JoYm1RZ2QyVWdkMjl5YXlCbWNtOXRJSFJvWlhKbFhHNHZMMXh1THk5Y2JpOHZJRWwwSjNNZ1kyOXRjR3hwWTJGMFpXUWdiR2xyWlNCMGFHbHpMQ0JpWldOaGRYTmxYRzR2THlBb01Ta2dkMlVnZDJGdWRDQjBieUJyWldWd0lIUm9aU0JzYjJkcFl5QnBiaUIwYUdVZ2QyOXlhMlZ5WEc0dkx5QW9NaWtnWW5WMElIUm9aU0IzYjNKclpYSWdZMkZ1Ym05MElHUnBjbVZqZEd4NUlHTmhiR3dnWVc1dmRHaGxjaUIzYjNKclpYSXNJR0Z1WkNCM1pTQm9ZWFpsSUdGc2JGeHVMeThnSUNBZ0lDQnZkR2hsY2lCc2IyZHBZeUJwYmlCelpYQmhjbUYwWlNCM2IzSnJaWEp6SUdadmNpQnpjR1ZsWkNCd2RYSndiM05sYzF4dUx5OGdJQ0FnSUNBZ0lDQWdkMlVnYUdGMlpTQmlhWFJqYjNKbElITnZZMnRsZEM1cGJ5QmpiMjF0ZFc1cFkyRjBhVzl1SUdsdUlIZHZjbXRsY2l3Z1ltVmpZWFZ6WlNCMGFHVWdhSFIwY0NCd2IyeHNhVzVuSUdseklITnNiM2RjYmk4dklDQWdJQ0FnSUNBZ0lIZGxJR2hoZG1VZ2RHaGxJR0ZrWkhKbGMzTWdaR1Z5YVhaaGRHbHZiaUJwYmlCM2IzSnJaWElzSUdKbFkyRjFjMlVnYVhRbmN5QnpiRzkzWEc0dkx5QWdjMjhnZDJVZ2FHRjJaU0IwYUdVZ2JHOW5hV01nYjJZZ1lYTnJhVzVuSUhSb2FXNW5jeUJ2ZFhRZ1puSnZiU0IwYUdVZ2QyOXlhMlZ5SUdKNUlISmxjWFZsYzNSekxGeHVMeThnSUdGdVpDQjBhR1VnYldGcGJpQjBhSEpsWVdRZ2NtVjBkWEp1YVc1bklIUm9hVzVuY3lCaVlXTnJYRzVjYm1sdGNHOXlkQ0I3SUdSbFptVnljbVZrSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZFhScGJITXZaR1ZtWlhKeVpXUW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ2V5QkVaV1psY25KbFpDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVjBhV3h6TDJSbFptVnljbVZrSnp0Y2JtbHRjRzl5ZENCMGVYQmxJSHRjYmlBZ0lDQkRhR0ZwYms1bGQxUnlZVzV6WVdOMGFXOXVMRnh1SUNBZ0lFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lFTm9ZV2x1VG1WM1NXNW1ieXhjYmlBZ0lDQkNiRzlqYTFKaGJtZGxMRnh1SUNBZ0lFTm9kVzVyUkdselkyOTJaWEo1U1c1bWJ5eGNibjBnWm5KdmJTQW5MaTR2ZEhsd1pYTW5PMXh1YVcxd2IzSjBJSHNnVTNSeVpXRnRJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZkWFJwYkhNdmMzUnlaV0Z0Snp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnVkhKaGJuTmhZM1JwYjI0Z1lYTWdRbWwwWTI5cGJrcHpWSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdZV1JrY21WemN5QmhjeUJDYVhSamIybHVTbk5CWkdSeVpYTnpMRnh1SUNBZ0lFaEVUbTlrWlNCaGN5QkNhWFJqYjJsdVNuTklSRTV2WkdVc1hHNGdJQ0FnWTNKNWNIUnZJR0Z6SUVKcGRHTnZhVzVLYzBOeWVYQjBieXhjYmlBZ0lDQnpZM0pwY0hRZ1lYTWdRbWwwWTI5cGJrcHpVMk55YVhCMExGeHVmU0JtY205dElDZGlhWFJqYjJsdWFuTXRiR2xpTFhwallYTm9KenRjYm1sdGNHOXlkQ0IwZVhCbElIdE9aWFIzYjNKcklHRnpJRUpwZEdOdmFXNUtjMDVsZEhkdmNtdDlJR1p5YjIwZ0oySnBkR052YVc1cWN5MXNhV0l0ZW1OaGMyZ25PMXh1YVcxd2IzSjBJSFI1Y0dVZ2UxUnlZVzV6WVdOMGFXOXVTVzVtYjMwZ1puSnZiU0FuTGk0dkxpNHZhVzVrWlhnbk8xeHVYRzVqYjI1emRDQkhRVkJmVTBsYVJUb2diblZ0WW1WeUlEMGdNakE3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJIWlhSRGFHRnBibFJ5WVc1ellXTjBhVzl1Y3lCN1hHNGdJQ0FnTHk4Z1lXeHNJSE5sWlc0Z1lXUmtjbVZ6YzJWekxDQnBibU5zZFdScGJtY2dkR2hsSUdkaGNDQmhaR1J5WlhOelpYTmNiaUFnSUNCaGJHeEJaR1J5WlhOelpYTTZJRUZ5Y21GNVBITjBjbWx1Wno0N1hHNGdJQ0FnWVd4c1EyaGxZMnRsWkVGa1pISmxjM05sY3pvZ1FYSnlZWGs4YzNSeWFXNW5QaUE5SUZ0ZE8xeHVYRzRnSUNBZ0x5OGdZV1JrY21WemN5QXRQaUJ1ZFcxaVpYSWdiV0Z3WEc0Z0lDQWdZbUZqYTFObFlYSmphRG9nZTF0aFpHUnlaWE56T2lCemRISnBibWRkT2lCdWRXMWlaWEo5SUQwZ2UzMDdYRzVjYmlBZ0lDQXZMeUIwY21GdWMyRmpkR2x2Ym5NZ2FXNGdkR2hsSUhKaGJtZGxJSGRwYkd3Z1ltVWdjMkYyWldRZ2RHOGdkR2hwY3lCaGNuSmhlVnh1SUNBZ0lDOHZJR2x1WkdWNFpXUWdZbmtnYUdGemFGeHVJQ0FnSUc1bGQxUnlZVzV6WVdOMGFXOXVjem9nUTJoaGFXNU9aWGRVY21GdWMyRmpkR2x2Ym5NZ1BTQjdmVHRjYmx4dUlDQWdJQzh2SUhCaGRHZ2diMllnYkdGemRDQmhaR1J5WlhOeklIUm9ZWFFnU1NCelpXRnlZMmhsWkZ4dUlDQWdJR3hoYzNSVFpXRnlZMmhsWkRvZ2JuVnRZbVZ5SUQwZ0xURTdYRzVjYmlBZ0lDQXZMeUJoSUhaaGNtbGhZbXhsSUhSb1lYUWdkMmxzYkNCdFlYbGlaU0JwYm1OeVpXRnpaU0IzYUdWdUlFa2djMlZsWEc0Z0lDQWdMeThnYm1WM0lHTnZibVpwY20xbFpDQmhaR1J5WlhOelhHNGdJQ0FnYkdGemRFTnZibVpwY20xbFpEb2diblZ0WW1WeU8xeHVYRzRnSUNBZ0x5OGdiR0Z6ZENCaFpHUnlaWE56SUhSb1lYUWdkMkZ6SUdOdmJtWnBjbTFsWkNCM2FYUm9JSFJvWlNCd2NtVjJhVzkxY3lCelpXRnlZMmhjYmlBZ0lDQXZMeUFvWTI5dWMzUmhiblFwWEc0Z0lDQWdiM0pwWjJsdVlXeE1ZWE4wUTI5dVptbHliV1ZrT2lCdWRXMWlaWEk3WEc1Y2JpQWdJQ0F2THlCc1lYTjBJR0ZrWkhKbGMzTWdkR2hoZENCM1lYTWdjMlZoY21Ob1pXUWdkMmwwYUNCMGFHVWdjSEpsZG1sdmRYTWdjMlZoY21Ob1hHNGdJQ0FnYjNKcFoybHVZV3hNWVhOMFUyVmhjbU5vWldRb0tUb2diblZ0WW1WeUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjNKcFoybHVZV3hNWVhOMFEyOXVabWx5YldWa0lDc2dSMEZRWDFOSldrVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdkR2hwY3lCcGN5QmtaV1psY25KbFpDQndjbTl0YVhObElHWnZjaUJ5WlhOMWJIUmNiaUFnSUNCa1ptUTZJRVJsWm1WeWNtVmtQRU5vWVdsdVRtVjNTVzVtYno0Z1BTQmtaV1psY25KbFpDZ3BPMXh1WEc0Z0lDQWdZMmhoYVc1SlpEb2diblZ0WW1WeU8xeHVJQ0FnSUc1bGRIZHZjbXM2SUVKcGRHTnZhVzVLYzA1bGRIZHZjbXM3WEc1Y2JpQWdJQ0I0Y0hWaU9pQnpkSEpwYm1jN1hHNGdJQ0FnYzJWbmQybDBPaUJpYjI5c1pXRnVPMXh1WEc0Z0lDQWdjbUZ1WjJVNklFSnNiMk5yVW1GdVoyVTdYRzVjYmlBZ0lDQnVkV3hzVW1GdVoyVW9LVG9nUW14dlkydFNZVzVuWlNCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKaGJtZGxJRDBnZEdocGN5NXlZVzVuWlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzR1TG5KaGJtZGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MybHVZMlU2SUhKaGJtZGxMbTUxYkd4Q2JHOWpheXhjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwZUdsa2N6b2dVMlYwUEhOMGNtbHVaejQ3WEc1Y2JpQWdJQ0F2THlCM2FXeHNJR0psSUdsdWFtVmpkR1ZrWEc0Z0lDQWdaMlYwVTNSeVpXRnRPaUFvWEc0Z0lDQWdJQ0FnSUdOb1lXbHVTV1E2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnWm1seWMzUkpibVJsZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCc1lYTjBTVzVrWlhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2MzUmhjblJDYkc5amF6b2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQmxibVJDYkc5amF6b2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQndjMlYxWkc5RGIzVnVkRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JoWkdSeVpYTnpaWE02SUQ5QmNuSmhlVHh6ZEhKcGJtYytYRzRnSUNBZ0tTQTlQaUJUZEhKbFlXMDhRMmgxYm10RWFYTmpiM1psY25sSmJtWnZJSHdnUlhKeWIzSStPMXh1WEc0Z0lDQWdkMlZpWVhOelpXMWliSGs2SUdKdmIyeGxZVzQ3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ2FXUTZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdjbUZ1WjJVNklFSnNiMk5yVW1GdVoyVXNYRzRnSUNBZ0lDQWdJRzl5YVdkcGJtRnNUR0Z6ZEVOdmJtWnBjbTFsWkRvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCblpYUlRkSEpsWVcwNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lXbHVTV1E2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBjbk4wU1c1a1pYZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGMzUkpibVJsZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SQ2JHOWphem9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNWtRbXh2WTJzNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ6WlhWa2IwTnZkVzUwT2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1J5WlhOelpYTTZJRDlCY25KaGVUeHpkSEpwYm1jK1hHNGdJQ0FnSUNBZ0lDa2dQVDRnVTNSeVpXRnRQRU5vZFc1clJHbHpZMjkyWlhKNVNXNW1ieUI4SUVWeWNtOXlQaXhjYmlBZ0lDQWdJQ0FnYjNKcFoybHVZV3hVY21GdWMyRmpkR2x2Ym5NNklFRnljbUY1UEZSeVlXNXpZV04wYVc5dVNXNW1iejRzWEc0Z0lDQWdJQ0FnSUc5c1pFRmtaSEpsYzNObGN6b2dRWEp5WVhrOGMzUnlhVzVuUGl4Y2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YXpvZ1FtbDBZMjlwYmtwelRtVjBkMjl5YXl4Y2JpQWdJQ0FnSUNBZ2VIQjFZam9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0J6WldkM2FYUTZJR0p2YjJ4bFlXNHNYRzRnSUNBZ0lDQWdJSGRsWW1GemMyVnRZbXg1T2lCaWIyOXNaV0Z1WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0pwWjJsdVlXeE1ZWE4wUTI5dVptbHliV1ZrSUQwZ2IzSnBaMmx1WVd4TVlYTjBRMjl1Wm1seWJXVmtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhjM1JEYjI1bWFYSnRaV1FnUFNCdmNtbG5hVzVoYkV4aGMzUkRiMjVtYVhKdFpXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyaGhhVzVKWkNBOUlHbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmhibWRsSUQwZ2NtRnVaMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMlYwVTNSeVpXRnRJRDBnWjJWMFUzUnlaV0Z0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMblI0YVdSeklEMGdaR1Z5YVhabFZIaHBaRk5sZENodmNtbG5hVzVoYkZSeVlXNXpZV04wYVc5dWN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXeHNRV1JrY21WemMyVnpJRDBnYjJ4a1FXUmtjbVZ6YzJWek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01bGRIZHZjbXNnUFNCdVpYUjNiM0pyTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmh3ZFdJZ1BTQjRjSFZpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sWjNkcGRDQTlJSE5sWjNkcGREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSmhjM05sYldKc2VTQTlJSGRsWW1GemMyVnRZbXg1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR1JwYzJOdmRtVnlLQ2s2SUZCeWIyMXBjMlU4UTJoaGFXNU9aWGRKYm1adlBpQjdYRzRnSUNBZ0lDQWdJQzh2SUdacGNuTjBJR0Z1WkNCc1lYTjBJSEpoYm1kbElHOW1JR0ZrWkhKbGMzTmxjeUJtYjNJZ2RHaGxJR1pwY25OMElITmxZWEpqYUZ4dUlDQWdJQ0FnSUNBdkx5QW9ZV3gzWVhseklEQWdMU0F4T1NsY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm1seWMzUWdQU0F3TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JzWVhOMElEMGdSMEZRWDFOSldrVWdMU0F4TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YVhSbGNtRjBaU2htYVhKemRDd2diR0Z6ZEN3Z2RHaHBjeTV5WVc1blpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SbVpDNXdjbTl0YVhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHOXVaU0JjSW1sMFpYSmhkR2x2Ymx3aUlDMGdiV1ZoYm1sdVp5d2daMlYwSUhOMGNtVmhiU0J2WmlCMGNtRnVjMkZqZEdsdmJuTWdiMjRnYjI1bElHTm9kVzVyTEZ4dUlDQWdJQzh2SUhkaGFYUWdabTl5SUdsMElIUnZJR1Z1WkN3Z1lXNWtJSFJvWlc0Z1pHVmphV1JsSUhkb1lYUWdkRzhnWkc4Z2JtVjRkRnh1SUNBZ0lHbDBaWEpoZEdVb1hHNGdJQ0FnSUNBZ0lHWnBjbk4wT2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUd4aGMzUTZJRzUxYldKbGNpd2dMeThnYkdGemRDQnBjeUJwYm1Oc2RYTnBkbVZjYmlBZ0lDQWdJQ0FnY21GdVoyVTZJRUpzYjJOclVtRnVaMlVzWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmhaR1J5WlhOelpYTTZJRDlCY25KaGVUeHpkSEpwYm1jK0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVlXeHNRV1JrY21WemMyVnpMbXhsYm1kMGFDQXRJREVnUGowZ2JHRnpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemMyVnpJRDBnZEdocGN5NWhiR3hCWkdSeVpYTnpaWE11YzJ4cFkyVW9abWx5YzNRc0lHeGhjM1FnS3lBeEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1M1pXSmhjM05sYldKc2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkhKbGMzTmxjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2xtSUhkbFltRnpjMlZ0WW14NUlHbHpJRzltWmlBOVBpQjNaU0JuWlc1bGNtRjBaU0JsZG1WeWVYUm9hVzVuSUdobGNtVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamFHRnBiazV2WkdVZ1BTQkNhWFJqYjJsdVNuTklSRTV2WkdVdVpuSnZiVUpoYzJVMU9DaDBhR2x6TG5od2RXSXNJSFJvYVhNdWJtVjBkMjl5YXlrdVpHVnlhWFpsS0hSb2FYTXVZMmhoYVc1SlpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SUdacGNuTjBPeUJwSUR3OUlHeGhjM1E3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoWkdSeVpYTnpUbTlrWlNBOUlHTm9ZV2x1VG05a1pTNWtaWEpwZG1Vb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhaR1J5WlhOeklEMGdKeWM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbk5sWjNkcGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemN5QTlJR0ZrWkhKbGMzTk9iMlJsTG1kbGRFRmtaSEpsYzNNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObFpTQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZbWwwWTI5cGJpOWlhWEJ6TDJKc2IySXZiV0Z6ZEdWeUwySnBjQzB3TURRNUxtMWxaR2xoZDJscmFWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZV1JrY21WemN5QmtaWEpwZG1GMGFXOXVJQ3NnZEdWemRDQjJaV04wYjNKelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3YTJnZ1BTQmhaR1J5WlhOelRtOWtaUzVuWlhSSlpHVnVkR2xtYVdWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCelkzSnBjSFJUYVdjZ1BTQnVaWGNnUW5WbVptVnlLSEJyYUM1c1pXNW5kR2dnS3lBeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpjbWx3ZEZOcFoxc3dYU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkzSnBjSFJUYVdkYk1WMGdQU0F3ZURFME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHdG9MbU52Y0hrb2MyTnlhWEIwVTJsbkxDQXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHRmtaSEpsYzNOQ2VYUmxjeUE5SUVKcGRHTnZhVzVLYzBOeWVYQjBieTVvWVhOb01UWXdLSE5qY21sd2RGTnBaeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdSeVpYTnpJRDBnUW1sMFkyOXBia3B6UVdSa2NtVnpjeTUwYjBKaGMyVTFPRU5vWldOcktHRmtaSEpsYzNOQ2VYUmxjeXdnZEdocGN5NXVaWFIzYjNKckxuTmpjbWx3ZEVoaGMyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2NtVnpjMlZ6VzJrZ0xTQm1hWEp6ZEYwZ1BTQmhaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElITjBjbVZoYlNBOUlIUm9hWE11WjJWMFUzUnlaV0Z0S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amFHRnBia2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabWx5YzNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVhOMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21GdVoyVXVabWx5YzNRdWFHVnBaMmgwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbUZ1WjJVdWJHRnpkQzVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblI0YVdSekxuTnBlbVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1J5WlhOelpYTmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCemRISmxZVzB1ZG1Gc2RXVnpMbUYwZEdGamFDZ29kbUZzZFdWZktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVmZJR2x1YzNSaGJtTmxiMllnUlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUm1aQzV5WldwbFkzUW9kbUZzZFdWZktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEpsWVcwdVpHbHpjRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCMllXeDFaVjg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVlJ5WVc1ellXTjBhVzl1Y3loMllXeDFaU3dnWm1seWMzUXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnpkSEpsWVcwdVptbHVhWE5vTG1GMGRHRmphQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pVWnBibWx6YUNoc1lYTjBLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1YyaGhkQ0IwYnlCa2J5QjNhWFJvSUhSeVlXNXpZV04wYVc5dWN6OWNiaUFnSUNCb1lXNWtiR1ZVY21GdWMyRmpkR2x2Ym5Nb1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lCRGFIVnVhMFJwYzJOdmRtVnllVWx1Wm04c1hHNGdJQ0FnSUNBZ0lHWnBjbk4wT2lCdWRXMWlaWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2MyRjJaU0IwYUdVZ1lXUmtjbVZ6YzJWelhHNGdJQ0FnSUNBZ0lIWmhiSFZsTG1Ga1pISmxjM05sY3k1bWIzSkZZV05vS0NoaFpHUnlaWE56TENCcEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Gc2JFRmtaSEpsYzNObGMxdHBJQ3NnWm1seWMzUmRJRDBnWVdSa2NtVnpjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVd4c1EyaGxZMnRsWkVGa1pISmxjM05sYzF0cElDc2dabWx5YzNSZElEMGdZV1JrY21WemN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZbUZqYTFObFlYSmphRnRoWkdSeVpYTnpYU0E5SUdrZ0t5Qm1hWEp6ZER0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnZG1Gc2RXVXVkSEpoYm5OaFkzUnBiMjV6TG1admNrVmhZMmdvZEhKaGJuTmhZM1JwYjI0Z1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjR0Z5YzJVZ2RIaHpJQ2hsY25KdmNpQnBiaUJvWlhKbElHbHpJR2hoYm1Sc1pXUWdhVzRnYVhSbGNtRjBaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCaGNuTmxaQ0E5SUVKcGRHTnZhVzVLYzFSeVlXNXpZV04wYVc5dUxtWnliMjFJWlhnb2RISmhibk5oWTNScGIyNHVhR1Y0TENCMGNtRnVjMkZqZEdsdmJpNTZZMkZ6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZkWFJ3ZFhSQlpHUnlaWE56WlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbk5sWkM1dmRYUnpMbVp2Y2tWaFkyZ29LRzkxZEhCMWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJ5ZVMxallYUmphQ3dnWW1WallYVnpaU0J6YjIxbElHOTFkSEIxZEhNZ1pHOXVKM1FnYUdGMlpTQmhaR1J5WlhOelpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1J5WlhOeklEMGdRbWwwWTI5cGJrcHpRV1JrY21WemN5NW1jbTl0VDNWMGNIVjBVMk55YVhCMEtHOTFkSEIxZEM1elkzSnBjSFFzSUhSb2FYTXVibVYwZDI5eWF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHbG1JRzFwYm1VdUxpNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WW1GamExTmxZWEpqYUZ0aFpHUnlaWE56WFNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQmpiMjVtYVhKdFpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21GdWMyRmpkR2x2Ymk1b1pXbG5hSFFnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUY5aFpHUnlaWE56U1NBOUlIUm9hWE11WW1GamExTmxZWEpqYUZ0aFpHUnlaWE56WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlCcGRDZHpJRzFwYm1VZ1lXNWtJR052Ym1acGNtMWxaQ3dnWW5WdGNDQnNZWE4wUTI5dVptbHliV1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjloWkdSeVpYTnpTU0ErSUhSb2FYTXViR0Z6ZEVOdmJtWnBjbTFsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhoYzNSRGIyNW1hWEp0WldRZ1BTQmZZV1JrY21WemMwazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVVDBSUElHRmtaQ0IwYnlCbWJHOTNaR1ZtWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ1JHYkc5M1NYTnpkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEhsd1pTQTlJRUpwZEdOdmFXNUtjMU5qY21sd2RDNWpiR0Z6YzJsbWVVOTFkSEIxZENodmRYUndkWFF1YzJOeWFYQjBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjI1MWJHeGtZWFJoSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRTlFVHlCaFpHUWdkRzhnWm14dmQyUmxabHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnSkVac2IzZEpjM04xWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZblZtWm1WeUlEMGdRbWwwWTI5cGJrcHpVMk55YVhCMExtNTFiR3hFWVhSaExtOTFkSEIxZEM1a1pXTnZaR1VvYjNWMGNIVjBMbk5qY21sd2RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMFpYaDBJRDBnSnljN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpZFdabVpYSWdJVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1luVm1abVZ5TG1WMlpYSjVLR2tnUFQ0Z2FTQStQU0F6TWlBbUppQnBJRHc5SURFeU5pa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lYTmphV2tnUFNCaWRXWm1aWEl1ZEc5VGRISnBibWNvSjJGelkybHBKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRZ1BTQmhjMk5wYVM1emJHbGpaU2d3TENBME1DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2FHVjRJRDBnSnpCNEp5QXJJR0oxWm1abGNpNTBiMU4wY21sdVp5Z25hR1Y0SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUWdQU0JvWlhndWMyeHBZMlVvTUN3Z05EQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pISmxjM01nUFNBblQxQmZVa1ZVVlZKT0lDZ25JQ3NnZEdWNGRDQXJJQ2NwSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaSEpsYzNNZ1BTQW5WVTVMVGs5WFRpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhSQlpHUnlaWE56WlhNdWNIVnphQ2hoWkdSeVpYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWXpvZ1EyaGhhVzVPWlhkVWNtRnVjMkZqZEdsdmJpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZURvZ2NHRnljMlZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRIQjFkRUZrWkhKbGMzTmxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJSFJ5WVc1ellXTjBhVzl1TG1obGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGMzUmhiWEE2SUhSeVlXNXpZV04wYVc5dUxuUnBiV1Z6ZEdGdGNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZWE5vT2lCMGNtRnVjMkZqZEdsdmJpNW9ZWE5vTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdabFpUb2dkSEpoYm5OaFkzUnBiMjR1Wm1WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnphWHBsT2lCMGNtRnVjMkZqZEdsdmJpNTJjMmw2WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRUZrWkhKbGMzTmxjem9nZEhKaGJuTmhZM1JwYjI0dWFXNXdkWFJCWkdSeVpYTnpaWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ0YjNKbElIUnlZVzV6WVdOMGFXOXVjeUIzYVhSb0lIUm9aU0J6WVcxbElFbEVJRzkyWlhKM2NtbDBaU0JsWVdOb0lHOTBhR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01bGQxUnlZVzV6WVdOMGFXOXVjMXRqTG1oaGMyaGRJRDBnWXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRIaHBaSE11WVdSa0tHTXVhR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSGRvWlc0Z2MzUnlaV0Z0SUdacGJtbHphR1Z6TENCM1pTQm9ZWFpsSUhSdklHUmxZMmxrWlNCcFppQjNaU0IzWVc1MElIUnllU0J0YjNKbElHRmtaSEpsYzNObGN5QnZjaUJ1YjNSY2JpQWdJQ0JvWVc1a2JHVkdhVzVwYzJnb1hHNGdJQ0FnSUNBZ0lHeGhjM1E2SUc1MWJXSmxjbHh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhjM1JUWldGeVkyaGxaQ0E5SUd4aGMzUTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2JHOXZheUJoZENCM2FHbGphQ0JwY3lCMGFHVWdibVY0ZENCMGFHbHVaeUIzWlNCM1lXNTBYRzRnSUNBZ0lDQWdJR052Ym5OMElITm9iM1ZzWkZObFlYSmphRXhoYzNRZ1BTQjBhR2x6TG14aGMzUkRiMjVtYVhKdFpXUWdLeUJIUVZCZlUwbGFSVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEVOb2RXNXJSVzVrSUQwZ2RHaHBjeTVzWVhOMFUyVmhjbU5vWldRZ0t5QkhRVkJmVTBsYVJUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtVjRkRXhoYzNRZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJodmRXeGtVMlZoY21Ob1RHRnpkQ0E4SUc1bGVIUkRhSFZ1YTBWdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCemFHOTFiR1JUWldGeVkyaE1ZWE4wWEc0Z0lDQWdJQ0FnSUNBZ0lDQTZJRzVsZUhSRGFIVnVhMFZ1WkR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WNGRFWnBjbk4wSUQwZ2RHaHBjeTVzWVhOMFUyVmhjbU5vWldRZ0t5QXhPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbHpJSFJvWlhKbElITnZiV1YwYUdsdVp5QjBieUJ6WldGeVkyZy9YRzRnSUNBZ0lDQWdJR2xtSUNodVpYaDBUR0Z6ZENBK1BTQnVaWGgwUm1seWMzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzl1SUdOdmJYQnNaWFJsYkhrZ2JtVjNJR0ZrWkhKbGMzTmxjeXdnZDJVZ2JHOXZheUJtY205dElHSnNiMk5ySURCY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOdklIZGxJR1J2YmlkMElHMXBjM01nZEhKaGJuTmhZM1JwYjI1elhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHRnlaU0IwYUdWeVpTQnpiMjFsSUc1bGR5QmhaR1J5WlhOelpYTS9YRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibVY0ZEV4aGMzUWdQaUIwYUdsekxtOXlhV2RwYm1Gc1RHRnpkRk5sWVhKamFHVmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmNJbUp5WldGclhDSWdhVzUwYnlCMGQyOGdjR0Z5ZEhNc0lHOXVaU0J3WVhKMElHOXViSGtnYm1WM0lHRmtaSEpsYzNObGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ2ZEdobGNpQndZWEowSUc5dWJIa2diMnhrSUdGa1pISmxjM05sYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVaWGgwUm1seWMzUWdQajBnZEdocGN5NXZjbWxuYVc1aGJFeGhjM1JUWldGeVkyaGxaQ2dwSUNzZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnVaWGNnWVdSa2NtVnpjMlZ6TENCaGJHd2dZbXh2WTJ0elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYUmxjbUYwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUkdhWEp6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUk1ZWE4wTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVkV3hzVW1GdVoyVW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc5c1pDQmhaR1J5WlhOelpYTXNJRzVsZHlCaWJHOWphM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwZEdWeVlYUmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZEVacGNuTjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNtbG5hVzVoYkV4aGMzUlRaV0Z5WTJobFpDZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVlXNW5aU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHOXNaQ0JoWkdSeVpYTnpaWE1zSUc1bGR5QmliRzlqYTNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWwwWlhKaGRHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUkdhWEp6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZEV4aGMzUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbUZ1WjJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1dmRHaHBibWNnYlc5eVpTQjBieUJzYjI5cklHWnZjaXdnY21WMGRYSnVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJtWkM1eVpYTnZiSFpsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYZFVjbUZ1YzJGamRHbHZibk02SUhSb2FYTXVibVYzVkhKaGJuTmhZM1JwYjI1ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNiRUZrWkhKbGMzTmxjem9nZEdocGN5NWhiR3hCWkdSeVpYTnpaWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHWnBibVJFWld4bGRHVmtLRnh1SUNBZ0lIUjRhV1J6T2lCQmNuSmhlVHh6ZEhKcGJtYytMRnh1SUNBZ0lHUnZaWE5VY21GdWMyRmpkR2x2YmtWNGFYTjBPaUFvWEc0Z0lDQWdJQ0FnSUhSNGFXUTZJSE4wY21sdVoxeHVJQ0FnSUNrZ1BUNGdVSEp2YldselpUeGliMjlzWldGdVBseHVLVG9nVUhKdmJXbHpaVHhCY25KaGVUeHpkSEpwYm1jK1BpQjdYRzRnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnVzEwN1hHNGdJQ0FnWTI5dWMzUWdjM1J5SUQwZ1UzUnlaV0Z0TG1aeWIyMUJjbkpoZVNoMGVHbGtjeWs3WEc0Z0lDQWdjbVYwZFhKdUlITjBjbHh1SUNBZ0lDQWdJQ0F1YldGd1VISnZiV2x6WlVWeWNtOXlLR2xrSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrYjJWelZISmhibk5oWTNScGIyNUZlR2x6ZENocFpDa3VkR2hsYmlobGVHbHpkSE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWlhocGMzUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdMbUYzWVdsMFJtbHVhWE5vS0NsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvS0NrZ1BUNGdjbVZ6ZFd4MEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHVnlhWFpsVkhocFpGTmxkQ2hjYmlBZ0lDQjBjbUZ1YzJGamRHbHZibk02SUVGeWNtRjVQRlJ5WVc1ellXTjBhVzl1U1c1bWJ6NHNYRzRwT2lCVFpYUThjM1J5YVc1blBpQjdYRzRnSUNBZ1kyOXVjM1FnY21WeklEMGdibVYzSUZObGRDZ3BPMXh1WEc0Z0lDQWdkSEpoYm5OaFkzUnBiMjV6TG1admNrVmhZMmdvZENBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsY3k1aFpHUW9kQzVvWVhOb0tUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc0aVhYMD0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuLy8gVGhpcyBpcyB0aGUgZW50cnkgdG8gdGhlIHdvcmtlciwgZG9pbmcgYWNjb3VudCBkaXNjb3ZlcnkgKyBhbmFseXNpc1xuXG52YXIgX2NoYW5uZWwgPSByZXF1aXJlKCcuL2NoYW5uZWwnKTtcblxudmFyIGNoYW5uZWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY2hhbm5lbCk7XG5cbnZhciBfYmxvY2tzID0gcmVxdWlyZSgnLi9ibG9ja3MnKTtcblxudmFyIF9nZXRDaGFpblRyYW5zYWN0aW9ucyA9IHJlcXVpcmUoJy4vZ2V0LWNoYWluLXRyYW5zYWN0aW9ucycpO1xuXG52YXIgX2ludGVncmF0ZU5ld1R4cyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRlLW5ldy10eHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuLy8gRGVmYXVsdCBzdGFydGluZyBpbmZvIGJlaW5nIHVzZWQsIHdoZW4gdGhlcmUgaXMgbnVsbFxudmFyIGRlZmF1bHRJbmZvID0ge1xuICAgIHV0eG9zOiBbXSxcbiAgICB0cmFuc2FjdGlvbnM6IFtdLFxuICAgIHVzZWRBZGRyZXNzZXM6IFtdLFxuICAgIHVudXNlZEFkZHJlc3NlczogW10sXG4gICAgY2hhbmdlSW5kZXg6IDAsXG4gICAgYmFsYW5jZTogMCxcbiAgICBzZW50QWRkcmVzc2VzOiB7fSxcbiAgICBsYXN0QmxvY2s6IHsgaGVpZ2h0OiAwLCBoYXNoOiAnYWJjZCcgfSxcbiAgICB0cmFuc2FjdGlvbkhhc2hlczoge30sXG4gICAgY2hhbmdlQWRkcmVzc2VzOiBbXSxcbiAgICBhbGxvd0NoYW5nZTogZmFsc2UsXG4gICAgbGFzdENvbmZpcm1lZENoYW5nZTogLTEsXG4gICAgbGFzdENvbmZpcm1lZE1haW46IC0xLFxuICAgIHZlcnNpb246IDNcbn07XG5cbnZhciByZWN2SW5mbyA9IHZvaWQgMDtcbnZhciByZWN2TmV0d29yayA9IHZvaWQgMDtcbnZhciByZWN2WHB1YiA9IHZvaWQgMDtcbnZhciByZWN2U2Vnd2l0ID0gdm9pZCAwO1xudmFyIHJlY3ZXZWJBc3NlbWJseSA9IHZvaWQgMDtcblxuLy8gaW5pdCBvbiB3b3JrZXIgc3RhcnRcbmNoYW5uZWwuaW5pdFByb21pc2UudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBhY2NvdW50SW5mbyA9IF9yZWYuYWNjb3VudEluZm8sXG4gICAgICAgIG5ldHdvcmsgPSBfcmVmLm5ldHdvcmssXG4gICAgICAgIHhwdWIgPSBfcmVmLnhwdWIsXG4gICAgICAgIHNlZ3dpdCA9IF9yZWYuc2Vnd2l0LFxuICAgICAgICB3ZWJhc3NlbWJseSA9IF9yZWYud2ViYXNzZW1ibHk7XG5cbiAgICByZWN2SW5mbyA9IGFjY291bnRJbmZvO1xuICAgIHJlY3ZOZXR3b3JrID0gbmV0d29yaztcbiAgICByZWN2U2Vnd2l0ID0gc2Vnd2l0O1xuICAgIHJlY3ZYcHViID0geHB1YjtcbiAgICByZWN2V2ViQXNzZW1ibHkgPSB3ZWJhc3NlbWJseTtcbn0pO1xuXG5jaGFubmVsLnN0YXJ0RGlzY292ZXJ5UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVjdkluZm8gPT0gbnVsbCA/IGRlZmF1bHRJbmZvIDogcmVjdkluZm87XG5cbiAgICAvLyB2ZXJzaW9uIG51bGwgPT4gMSBhZGRlZCBpbmZvcyBhYm91dCBmZWVzIGFuZCBzaXplczsgd2UgY2Fubm90IGNhbGN1bGF0ZSB0aGF0XG4gICAgLy8gdmVyc2lvbiAyIHdhcyBjb3JyZWN0aW9uIGluIG15dHJlem9yXG4gICAgLy8gdjMgYWRkZWQgaW5mbywgd2hldGhlciB1dHhvIGlzIG15IG93biBvciBub3RcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIHJlLWRvd25sb2FkIGV2ZXJ5dGhpbmcgLT4gc2V0dGluZyBpbml0aWFsIHN0YXRlIGFzIGlmIG5vdGhpbmcgaXMga25vd25cbiAgICBpZiAoaW5pdGlhbFN0YXRlLnZlcnNpb24gPT0gbnVsbCB8fCBpbml0aWFsU3RhdGUudmVyc2lvbiA8IDMpIHtcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gZGVmYXVsdEluZm87XG4gICAgfVxuXG4gICAgLy8gZmlyc3QgbG9hZCBibG9ja3MsIHRoZW4gY291bnQgbGFzdCB1c2VkIGluZGV4ZXMsXG4gICAgLy8gdGhlbiBzdGFydCBhc2tpbmcgZm9yIG5ldyB0cmFuc2FjdGlvbnMsXG4gICAgLy8gdGhlbiBpbnRlZ3JhdGUgbmV3IHRyYW5zYWN0aW9ucyBpbnRvIG9sZCB0cmFuc2FjdGlvbnNcbiAgICAoMCwgX2Jsb2Nrcy5sb2FkQmxvY2tSYW5nZSkoaW5pdGlhbFN0YXRlKS50aGVuKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICAvLyB3aGVuIHN0YXJ0aW5nIGZyb20gMCwgdGFrZSBhcyBpZiB0aGVyZSBpcyBubyBpbmZvXG4gICAgICAgIHZhciBvbGRTdGF0ZSA9IHJhbmdlLmZpcnN0LmhlaWdodCA9PT0gMCA/IGRlZmF1bHRJbmZvIDogaW5pdGlhbFN0YXRlO1xuXG4gICAgICAgIHZhciBsYXN0VXNlZE1haW4gPSBvbGRTdGF0ZS51c2VkQWRkcmVzc2VzLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBsYXN0VXNlZENoYW5nZSA9IG9sZFN0YXRlLmNoYW5nZUluZGV4IC0gMTtcbiAgICAgICAgdmFyIGxhc3RDb25maXJtZWRNYWluID0gb2xkU3RhdGUubGFzdENvbmZpcm1lZE1haW4gPT0gbnVsbCA/IGxhc3RVc2VkTWFpbiA6IG9sZFN0YXRlLmxhc3RDb25maXJtZWRNYWluO1xuICAgICAgICB2YXIgbGFzdENvbmZpcm1lZENoYW5nZSA9IG9sZFN0YXRlLmxhc3RDb25maXJtZWRDaGFuZ2UgPT0gbnVsbCA/IGxhc3RVc2VkQ2hhbmdlIDogb2xkU3RhdGUubGFzdENvbmZpcm1lZENoYW5nZTtcblxuICAgICAgICB2YXIgdW5jb25maXJtZWRUeGlkcyA9IG9sZFN0YXRlLnRyYW5zYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmhlaWdodCA9PSBudWxsO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0Lmhhc2g7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBtYWluQWRkcmVzc2VzID0gb2xkU3RhdGUudXNlZEFkZHJlc3Nlcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmFkZHJlc3M7XG4gICAgICAgIH0pLmNvbmNhdChvbGRTdGF0ZS51bnVzZWRBZGRyZXNzZXMpO1xuICAgICAgICB2YXIgY2hhbmdlQWRkcmVzc2VzID0gb2xkU3RhdGUuY2hhbmdlQWRkcmVzc2VzO1xuXG4gICAgICAgIC8vIGdldCBhbGwgdGhlIG5ldyBpbmZvLCB0aGVuLi4uXG4gICAgICAgIHJldHVybiBkaXNjb3ZlckFjY291bnQocmFuZ2UsIFtsYXN0Q29uZmlybWVkTWFpbiwgbGFzdENvbmZpcm1lZENoYW5nZV0sIG9sZFN0YXRlLnRyYW5zYWN0aW9ucywgbWFpbkFkZHJlc3NlcywgY2hhbmdlQWRkcmVzc2VzKS50aGVuKGZ1bmN0aW9uIChuZXdJbmZvKSB7XG4gICAgICAgICAgICAvLyB0aGVuIGZpbmQgb3V0IGRlbGV0ZWQgaW5mb1xuICAgICAgICAgICAgdmFyIGRlbGV0ZWRQID0gKDAsIF9nZXRDaGFpblRyYW5zYWN0aW9ucy5maW5kRGVsZXRlZCkodW5jb25maXJtZWRUeGlkcywgY2hhbm5lbC5kb2VzVHJhbnNhY3Rpb25FeGlzdCk7XG4gICAgICAgICAgICB2YXIgcmVzUCA9IGRlbGV0ZWRQLnRoZW4oZnVuY3Rpb24gKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi4gdGhlbiBpbnRlZ3JhdGVcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9pbnRlZ3JhdGVOZXdUeHMuaW50ZWdyYXRlTmV3VHhzKShuZXdJbmZvLCBvbGRTdGF0ZSwgcmFuZ2UubGFzdCwgZGVsZXRlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNQO1xuICAgICAgICB9KTtcbiAgICB9KS50aGVuKFxuICAgIC8vIGVpdGhlciBzdWNjZXNzIG9yIGZhaWx1cmVcbiAgICAvLyAob3RoZXIgc2lkZSB3aWxsIHNodXQgZG93biB0aGUgd29ya2VyIHRoZW4pXG4gICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gY2hhbm5lbC5yZXR1cm5TdWNjZXNzKHJlc3VsdCk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsLnJldHVybkVycm9yKGVycm9yKTtcbiAgICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBkaXNjb3ZlckFjY291bnQocmFuZ2UsIGxhc3RVc2VkQWRkcmVzc2VzLCB0cmFuc2FjdGlvbnMsIG1haW5BZGRyZXNzZXMsIGNoYW5nZUFkZHJlc3Nlcykge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbbmV3IF9nZXRDaGFpblRyYW5zYWN0aW9ucy5HZXRDaGFpblRyYW5zYWN0aW9ucygwLCByYW5nZSwgbGFzdFVzZWRBZGRyZXNzZXNbMF0sIGNoYW5uZWwuY2h1bmtUcmFuc2FjdGlvbnMsIHRyYW5zYWN0aW9ucywgbWFpbkFkZHJlc3NlcywgcmVjdk5ldHdvcmssIHJlY3ZYcHViLCByZWN2U2Vnd2l0LCByZWN2V2ViQXNzZW1ibHkpLmRpc2NvdmVyKCksIG5ldyBfZ2V0Q2hhaW5UcmFuc2FjdGlvbnMuR2V0Q2hhaW5UcmFuc2FjdGlvbnMoMSwgcmFuZ2UsIGxhc3RVc2VkQWRkcmVzc2VzWzFdLCBjaGFubmVsLmNodW5rVHJhbnNhY3Rpb25zLCBbXSwgY2hhbmdlQWRkcmVzc2VzLCByZWN2TmV0d29yaywgcmVjdlhwdWIsIHJlY3ZTZWd3aXQsIHJlY3ZXZWJBc3NlbWJseSkuZGlzY292ZXIoKV0pLnRoZW4oZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSxcbiAgICAgICAgICAgIG1haW4gPSBfcmVmM1swXSxcbiAgICAgICAgICAgIGNoYW5nZSA9IF9yZWYzWzFdO1xuXG4gICAgICAgIHJldHVybiB7IG1haW46IG1haW4sIGNoYW5nZTogY2hhbmdlIH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW1Ob1lXNXVaV3dpTENKa1pXWmhkV3gwU1c1bWJ5SXNJblYwZUc5eklpd2lkSEpoYm5OaFkzUnBiMjV6SWl3aWRYTmxaRUZrWkhKbGMzTmxjeUlzSW5WdWRYTmxaRUZrWkhKbGMzTmxjeUlzSW1Ob1lXNW5aVWx1WkdWNElpd2lZbUZzWVc1alpTSXNJbk5sYm5SQlpHUnlaWE56WlhNaUxDSnNZWE4wUW14dlkyc2lMQ0pvWldsbmFIUWlMQ0pvWVhOb0lpd2lkSEpoYm5OaFkzUnBiMjVJWVhOb1pYTWlMQ0pqYUdGdVoyVkJaR1J5WlhOelpYTWlMQ0poYkd4dmQwTm9ZVzVuWlNJc0lteGhjM1JEYjI1bWFYSnRaV1JEYUdGdVoyVWlMQ0pzWVhOMFEyOXVabWx5YldWa1RXRnBiaUlzSW5abGNuTnBiMjRpTENKeVpXTjJTVzVtYnlJc0luSmxZM1pPWlhSM2IzSnJJaXdpY21WamRsaHdkV0lpTENKeVpXTjJVMlZuZDJsMElpd2ljbVZqZGxkbFlrRnpjMlZ0WW14NUlpd2lhVzVwZEZCeWIyMXBjMlVpTENKMGFHVnVJaXdpWVdOamIzVnVkRWx1Wm04aUxDSnVaWFIzYjNKcklpd2llSEIxWWlJc0luTmxaM2RwZENJc0luZGxZbUZ6YzJWdFlteDVJaXdpYzNSaGNuUkVhWE5qYjNabGNubFFjbTl0YVhObElpd2lhVzVwZEdsaGJGTjBZWFJsSWl3aWIyeGtVM1JoZEdVaUxDSnlZVzVuWlNJc0ltWnBjbk4wSWl3aWJHRnpkRlZ6WldSTllXbHVJaXdpYkdWdVozUm9JaXdpYkdGemRGVnpaV1JEYUdGdVoyVWlMQ0oxYm1OdmJtWnBjbTFsWkZSNGFXUnpJaXdpWm1sc2RHVnlJaXdpZENJc0ltMWhjQ0lzSW0xaGFXNUJaR1J5WlhOelpYTWlMQ0poSWl3aVlXUmtjbVZ6Y3lJc0ltTnZibU5oZENJc0ltUnBjMk52ZG1WeVFXTmpiM1Z1ZENJc0ltNWxkMGx1Wm04aUxDSmtaV3hsZEdWa1VDSXNJbVJ2WlhOVWNtRnVjMkZqZEdsdmJrVjRhWE4wSWl3aWNtVnpVQ0lzSW14aGMzUWlMQ0prWld4bGRHVmtJaXdpY21WemRXeDBJaXdpY21WMGRYSnVVM1ZqWTJWemN5SXNJbkpsZEhWeWJrVnljbTl5SWl3aVpYSnliM0lpTENKc1lYTjBWWE5sWkVGa1pISmxjM05sY3lJc0lsQnliMjFwYzJVaUxDSmhiR3dpTENKamFIVnVhMVJ5WVc1ellXTjBhVzl1Y3lJc0ltUnBjMk52ZG1WeUlpd2liV0ZwYmlJc0ltTm9ZVzVuWlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0QlFVVkJPenRCUVV0Qk96dEpRVUZaUVN4UE96dEJRVU5hT3p0QlFVZEJPenRCUVVOQk96czdPMEZCUlVFN1FVRkRRU3hKUVVGTlF5eGpRVUV5UWp0QlFVTTNRa01zVjBGQlR5eEZRVVJ6UWp0QlFVVTNRa01zYTBKQlFXTXNSVUZHWlR0QlFVYzNRa01zYlVKQlFXVXNSVUZJWXp0QlFVazNRa01zY1VKQlFXbENMRVZCU2xrN1FVRkxOMEpETEdsQ1FVRmhMRU5CVEdkQ08wRkJUVGRDUXl4aFFVRlRMRU5CVG05Q08wRkJUemRDUXl4dFFrRkJaU3hGUVZCak8wRkJVVGRDUXl4bFFVRlhMRVZCUVVORExGRkJRVkVzUTBGQlZDeEZRVUZaUXl4TlFVRk5MRTFCUVd4Q0xFVkJVbXRDTzBGQlV6ZENReXgxUWtGQmJVSXNSVUZVVlR0QlFWVTNRa01zY1VKQlFXbENMRVZCVmxrN1FVRlhOMEpETEdsQ1FVRmhMRXRCV0dkQ08wRkJXVGRDUXl4NVFrRkJjVUlzUTBGQlF5eERRVnBQTzBGQllUZENReXgxUWtGQmJVSXNRMEZCUXl4RFFXSlRPMEZCWXpkQ1F5eGhRVUZUTzBGQlpHOUNMRU5CUVdwRE96dEJRV2xDUVN4SlFVRkpReXhwUWtGQlNqdEJRVU5CTEVsQlFVbERMRzlDUVVGS08wRkJRMEVzU1VGQlNVTXNhVUpCUVVvN1FVRkRRU3hKUVVGSlF5eHRRa0ZCU2p0QlFVTkJMRWxCUVVsRExIZENRVUZLT3p0QlFVVkJPMEZCUTBGMFFpeFJRVUZSZFVJc1YwRkJVaXhEUVVGdlFrTXNTVUZCY0VJc1EwRkJlVUlzWjBKQlFYVkVPMEZCUVVFc1VVRkJja1JETEZkQlFYRkVMRkZCUVhKRVFTeFhRVUZ4UkR0QlFVRkJMRkZCUVhoRFF5eFBRVUYzUXl4UlFVRjRRMEVzVDBGQmQwTTdRVUZCUVN4UlFVRXZRa01zU1VGQkswSXNVVUZCTDBKQkxFbEJRU3RDTzBGQlFVRXNVVUZCZWtKRExFMUJRWGxDTEZGQlFYcENRU3hOUVVGNVFqdEJRVUZCTEZGQlFXcENReXhYUVVGcFFpeFJRVUZxUWtFc1YwRkJhVUk3TzBGQlF6VkZXQ3hsUVVGWFR5eFhRVUZZTzBGQlEwRk9MR3RDUVVGalR5eFBRVUZrTzBGQlEwRk1MR2xDUVVGaFR5eE5RVUZpTzBGQlEwRlNMR1ZCUVZkUExFbEJRVmc3UVVGRFFVd3NjMEpCUVd0Q1R5eFhRVUZzUWp0QlFVTklMRU5CVGtRN08wRkJVVUUzUWl4UlFVRlJPRUlzY1VKQlFWSXNRMEZCT0VKT0xFbEJRVGxDTEVOQlFXMURMRmxCUVUwN1FVRkRja01zVVVGQlNVOHNaVUZCWldJc1dVRkJXU3hKUVVGYUxFZEJRVzFDYWtJc1YwRkJia0lzUjBGQmFVTnBRaXhSUVVGd1JEczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVWxoTEdGQlFXRmtMRTlCUVdJc1NVRkJkMElzU1VGQmVFSXNTVUZCWjBOakxHRkJRV0ZrTEU5QlFXSXNSMEZCZFVJc1EwRkJNMFFzUlVGQk9FUTdRVUZETVVSakxIVkNRVUZsT1VJc1YwRkJaanRCUVVOSU96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2REUVVGbE9FSXNXVUZCWml4RlFVRTJRbEFzU1VGQk4wSXNRMEZCYTBNc2FVSkJRVk03UVVGRGRrTTdRVUZEUVN4WlFVRk5VU3hYUVVGWFF5eE5RVUZOUXl4TFFVRk9MRU5CUVZsNFFpeE5RVUZhTEV0QlFYVkNMRU5CUVhaQ0xFZEJRVEpDVkN4WFFVRXpRaXhIUVVGNVF6aENMRmxCUVRGRU96dEJRVVZCTEZsQlFVMUpMR1ZCUVdWSUxGTkJRVk0xUWl4aFFVRlVMRU5CUVhWQ1owTXNUVUZCZGtJc1IwRkJaME1zUTBGQmNrUTdRVUZEUVN4WlFVRk5ReXhwUWtGQmFVSk1MRk5CUVZNeFFpeFhRVUZVTEVkQlFYVkNMRU5CUVRsRE8wRkJRMEVzV1VGQlRWVXNiMEpCUVc5Q1owSXNVMEZCVTJoQ0xHbENRVUZVTEVsQlFUaENMRWxCUVRsQ0xFZEJRWEZEYlVJc1dVRkJja01zUjBGQmIwUklMRk5CUVZOb1FpeHBRa0ZCZGtZN1FVRkRRU3haUVVGTlJDeHpRa0ZCYzBKcFFpeFRRVUZUYWtJc2JVSkJRVlFzU1VGQlowTXNTVUZCYUVNc1IwRkJkVU56UWl4alFVRjJReXhIUVVGM1JFd3NVMEZCVTJwQ0xHMUNRVUUzUmpzN1FVRkZRU3haUVVGTmRVSXNiVUpCUVcxQ1RpeFRRVUZUTjBJc1dVRkJWQ3hEUVVGelFtOURMRTFCUVhSQ0xFTkJRVFpDTzBGQlFVRXNiVUpCUVV0RExFVkJRVVU1UWl4TlFVRkdMRWxCUVZrc1NVRkJha0k3UVVGQlFTeFRRVUUzUWl4RlFVRnZSQ3RDTEVkQlFYQkVMRU5CUVhkRU8wRkJRVUVzYlVKQlFVdEVMRVZCUVVVM1FpeEpRVUZRTzBGQlFVRXNVMEZCZUVRc1EwRkJla0k3TzBGQlJVRXNXVUZCVFN0Q0xHZENRVUZuUWxZc1UwRkJVelZDTEdGQlFWUXNRMEZCZFVKeFF5eEhRVUYyUWl4RFFVRXlRanRCUVVGQkxHMUNRVUZMUlN4RlFVRkZReXhQUVVGUU8wRkJRVUVzVTBGQk0wSXNSVUZCTWtORExFMUJRVE5ETEVOQlFXdEVZaXhUUVVGVE0wSXNaVUZCTTBRc1EwRkJkRUk3UVVGRFFTeFpRVUZOVVN4clFrRkJhMEp0UWl4VFFVRlRia0lzWlVGQmFrTTdPMEZCUlVFN1FVRkRRU3hsUVVGUGFVTXNaMEpCUVdkQ1lpeExRVUZvUWl4RlFVRjFRaXhEUVVGRGFrSXNhVUpCUVVRc1JVRkJiMEpFTEcxQ1FVRndRaXhEUVVGMlFpeEZRVUZwUldsQ0xGTkJRVk0zUWl4WlFVRXhSU3hGUVVGM1JuVkRMR0ZCUVhoR0xFVkJRWFZITjBJc1pVRkJka2NzUlVGRFJsY3NTVUZFUlN4RFFVTkhMRlZCUVVOMVFpeFBRVUZFTEVWQlFXMUVPMEZCUTNKRU8wRkJRMEVzWjBKQlFVMURMRmRCUVcxRExIVkRRVUZaVml4blFrRkJXaXhGUVVFNFFuUkRMRkZCUVZGcFJDeHZRa0ZCZEVNc1EwRkJla003UVVGRFFTeG5Ra0ZCVFVNc1QwRkJOa0pHTEZOQlFWTjRRaXhKUVVGVUxFTkJRV01zYlVKQlFWYzdRVUZEZUVRN1FVRkRRU3gxUWtGQlR5eHpRMEZCWjBKMVFpeFBRVUZvUWl4RlFVRjVRbVlzVVVGQmVrSXNSVUZCYlVORExFMUJRVTFyUWl4SlFVRjZReXhGUVVFclEwTXNUMEZCTDBNc1EwRkJVRHRCUVVOSUxHRkJTR3RETEVOQlFXNURPMEZCU1VFc2JVSkJRVTlHTEVsQlFWQTdRVUZEU0N4VFFWUkZMRU5CUVZBN1FVRlZTQ3hMUVhwQ1JDeEZRWGxDUnpGQ0xFbEJla0pJTzBGQk1FSkpPMEZCUTBFN1FVRkRRU3hqUVVGRE5rSXNUVUZCUkR0QlFVRkJMR1ZCUVhsQ2NrUXNVVUZCVVhORUxHRkJRVklzUTBGQmMwSkVMRTFCUVhSQ0xFTkJRWHBDTzBGQlFVRXNTMEUxUWtvc1JVRTJRa2s3UVVGQlFTeGxRVUZUY2tRc1VVRkJVWFZFTEZkQlFWSXNRMEZCYjBKRExFdEJRWEJDTEVOQlFWUTdRVUZCUVN4TFFUZENTanRCUVN0Q1NDeERRVGREUkRzN1FVRXJRMEVzVTBGQlUxWXNaVUZCVkN4RFFVTkpZaXhMUVVSS0xFVkJSVWwzUWl4cFFrRkdTaXhGUVVkSmRFUXNXVUZJU2l4RlFVbEpkVU1zWVVGS1NpeEZRVXRKTjBJc1pVRk1TaXhGUVUweVFqdEJRVU4yUWl4WFFVRlBOa01zVVVGQlVVTXNSMEZCVWl4RFFVRlpMRU5CUTJZc0swTkJRWGxDTEVOQlFYcENMRVZCUVRSQ01VSXNTMEZCTlVJc1JVRkJiVU4zUWl4clFrRkJhMElzUTBGQmJFSXNRMEZCYmtNc1JVRkJlVVI2UkN4UlFVRlJORVFzYVVKQlFXcEZMRVZCUVc5R2VrUXNXVUZCY0VZc1JVRkJhMGQxUXl4aFFVRnNSeXhGUVVGcFNIWkNMRmRCUVdwSUxFVkJRVGhJUXl4UlFVRTVTQ3hGUVVGM1NVTXNWVUZCZUVrc1JVRkJiMHBETEdWQlFYQktMRVZCUVhGTGRVTXNVVUZCY2tzc1JVRkVaU3hGUVVWbUxDdERRVUY1UWl4RFFVRjZRaXhGUVVFMFFqVkNMRXRCUVRWQ0xFVkJRVzFEZDBJc2EwSkJRV3RDTEVOQlFXeENMRU5CUVc1RExFVkJRWGxFZWtRc1VVRkJVVFJFTEdsQ1FVRnFSU3hGUVVGdlJpeEZRVUZ3Uml4RlFVRjNSaTlETEdWQlFYaEdMRVZCUVhsSFRTeFhRVUY2Unl4RlFVRnpTRU1zVVVGQmRFZ3NSVUZCWjBsRExGVkJRV2hKTEVWQlFUUkpReXhsUVVFMVNTeEZRVUUyU25WRExGRkJRVGRLTEVWQlJtVXNRMEZCV2l4RlFVZEtja01zU1VGSVNTeERRVWRETzBGQlFVRTdRVUZCUVN4WlFVRkZjME1zU1VGQlJqdEJRVUZCTEZsQlFWRkRMRTFCUVZJN08wRkJRVUVzWlVGQmNVSXNSVUZCUTBRc1ZVRkJSQ3hGUVVGUFF5eGpRVUZRTEVWQlFYSkNPMEZCUVVFc1MwRklSQ3hEUVVGUU8wRkJTVWdpTENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpQkFabXh2ZHlBcUwxeHVYRzR2THlCVWFHbHpJR2x6SUhSb1pTQmxiblJ5ZVNCMGJ5QjBhR1VnZDI5eWEyVnlMQ0JrYjJsdVp5QmhZMk52ZFc1MElHUnBjMk52ZG1WeWVTQXJJR0Z1WVd4NWMybHpYRzVjYm1sdGNHOXlkQ0IwZVhCbElIdE9aWFIzYjNKcklHRnpJRUpwZEdOdmFXNUtjMDVsZEhkdmNtdDlJR1p5YjIwZ0oySnBkR052YVc1cWN5MXNhV0l0ZW1OaGMyZ25PMXh1WEc1cGJYQnZjblFnZEhsd1pTQjdRV05qYjNWdWRFbHVabThzSUZSeVlXNXpZV04wYVc5dVNXNW1iMzBnWm5KdmJTQW5MaTR2TGk0dmFXNWtaWGduTzF4dWFXMXdiM0owSUNvZ1lYTWdZMmhoYm01bGJDQm1jbTl0SUNjdUwyTm9ZVzV1Wld3bk8xeHVhVzF3YjNKMElIdHNiMkZrUW14dlkydFNZVzVuWlgwZ1puSnZiU0FuTGk5aWJHOWphM01uTzF4dWFXMXdiM0owSUhSNWNHVWdlMEpzYjJOclVtRnVaMlVzSUVGalkyOTFiblJPWlhkSmJtWnZmU0JtY205dElDY3VMaTkwZVhCbGN5YzdYRzVjYm1sdGNHOXlkQ0I3UjJWMFEyaGhhVzVVY21GdWMyRmpkR2x2Ym5Nc0lHWnBibVJFWld4bGRHVmtmU0JtY205dElDY3VMMmRsZEMxamFHRnBiaTEwY21GdWMyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIdHBiblJsWjNKaGRHVk9aWGRVZUhOOUlHWnliMjBnSnk0dmFXNTBaV2R5WVhSbExXNWxkeTEwZUhNbk8xeHVYRzR2THlCRVpXWmhkV3gwSUhOMFlYSjBhVzVuSUdsdVptOGdZbVZwYm1jZ2RYTmxaQ3dnZDJobGJpQjBhR1Z5WlNCcGN5QnVkV3hzWEc1amIyNXpkQ0JrWldaaGRXeDBTVzVtYnpvZ1FXTmpiM1Z1ZEVsdVptOGdQU0I3WEc0Z0lDQWdkWFI0YjNNNklGdGRMRnh1SUNBZ0lIUnlZVzV6WVdOMGFXOXVjem9nVzEwc1hHNGdJQ0FnZFhObFpFRmtaSEpsYzNObGN6b2dXMTBzWEc0Z0lDQWdkVzUxYzJWa1FXUmtjbVZ6YzJWek9pQmJYU3hjYmlBZ0lDQmphR0Z1WjJWSmJtUmxlRG9nTUN4Y2JpQWdJQ0JpWVd4aGJtTmxPaUF3TEZ4dUlDQWdJSE5sYm5SQlpHUnlaWE56WlhNNklIdDlMRnh1SUNBZ0lHeGhjM1JDYkc5amF6b2dlMmhsYVdkb2REb2dNQ3dnYUdGemFEb2dKMkZpWTJRbmZTeGNiaUFnSUNCMGNtRnVjMkZqZEdsdmJraGhjMmhsY3pvZ2UzMHNYRzRnSUNBZ1kyaGhibWRsUVdSa2NtVnpjMlZ6T2lCYlhTeGNiaUFnSUNCaGJHeHZkME5vWVc1blpUb2dabUZzYzJVc1hHNGdJQ0FnYkdGemRFTnZibVpwY20xbFpFTm9ZVzVuWlRvZ0xURXNYRzRnSUNBZ2JHRnpkRU52Ym1acGNtMWxaRTFoYVc0NklDMHhMRnh1SUNBZ0lIWmxjbk5wYjI0NklETXNYRzU5TzF4dVhHNXNaWFFnY21WamRrbHVabTg2SUQ5QlkyTnZkVzUwU1c1bWJ6dGNibXhsZENCeVpXTjJUbVYwZDI5eWF6b2dRbWwwWTI5cGJrcHpUbVYwZDI5eWF6dGNibXhsZENCeVpXTjJXSEIxWWpvZ2MzUnlhVzVuTzF4dWJHVjBJSEpsWTNaVFpXZDNhWFE2SUdKdmIyeGxZVzQ3WEc1c1pYUWdjbVZqZGxkbFlrRnpjMlZ0WW14NU9pQmliMjlzWldGdU8xeHVYRzR2THlCcGJtbDBJRzl1SUhkdmNtdGxjaUJ6ZEdGeWRGeHVZMmhoYm01bGJDNXBibWwwVUhKdmJXbHpaUzUwYUdWdUtDaDdZV05qYjNWdWRFbHVabThzSUc1bGRIZHZjbXNzSUhod2RXSXNJSE5sWjNkcGRDd2dkMlZpWVhOelpXMWliSGw5S1NBOVBpQjdYRzRnSUNBZ2NtVmpka2x1Wm04Z1BTQmhZMk52ZFc1MFNXNW1ienRjYmlBZ0lDQnlaV04yVG1WMGQyOXlheUE5SUc1bGRIZHZjbXM3WEc0Z0lDQWdjbVZqZGxObFozZHBkQ0E5SUhObFozZHBkRHRjYmlBZ0lDQnlaV04yV0hCMVlpQTlJSGh3ZFdJN1hHNGdJQ0FnY21WamRsZGxZa0Z6YzJWdFlteDVJRDBnZDJWaVlYTnpaVzFpYkhrN1hHNTlLVHRjYmx4dVkyaGhibTVsYkM1emRHRnlkRVJwYzJOdmRtVnllVkJ5YjIxcGMyVXVkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdiR1YwSUdsdWFYUnBZV3hUZEdGMFpTQTlJSEpsWTNaSmJtWnZJRDA5SUc1MWJHd2dQeUJrWldaaGRXeDBTVzVtYnlBNklISmxZM1pKYm1adk8xeHVYRzRnSUNBZ0x5OGdkbVZ5YzJsdmJpQnVkV3hzSUQwK0lERWdZV1JrWldRZ2FXNW1iM01nWVdKdmRYUWdabVZsY3lCaGJtUWdjMmw2WlhNN0lIZGxJR05oYm01dmRDQmpZV3hqZFd4aGRHVWdkR2hoZEZ4dUlDQWdJQzh2SUhabGNuTnBiMjRnTWlCM1lYTWdZMjl5Y21WamRHbHZiaUJwYmlCdGVYUnlaWHB2Y2x4dUlDQWdJQzh2SUhZeklHRmtaR1ZrSUdsdVptOHNJSGRvWlhSb1pYSWdkWFI0YnlCcGN5QnRlU0J2ZDI0Z2IzSWdibTkwWEc0Z0lDQWdMeThnYzI4Z2QyVWdhR0YyWlNCMGJ5QnlaUzFrYjNkdWJHOWhaQ0JsZG1WeWVYUm9hVzVuSUMwK0lITmxkSFJwYm1jZ2FXNXBkR2xoYkNCemRHRjBaU0JoY3lCcFppQnViM1JvYVc1bklHbHpJR3R1YjNkdVhHNGdJQ0FnYVdZZ0tHbHVhWFJwWVd4VGRHRjBaUzUyWlhKemFXOXVJRDA5SUc1MWJHd2dmSHdnYVc1cGRHbGhiRk4wWVhSbExuWmxjbk5wYjI0Z1BDQXpLU0I3WEc0Z0lDQWdJQ0FnSUdsdWFYUnBZV3hUZEdGMFpTQTlJR1JsWm1GMWJIUkpibVp2TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdacGNuTjBJR3h2WVdRZ1lteHZZMnR6TENCMGFHVnVJR052ZFc1MElHeGhjM1FnZFhObFpDQnBibVJsZUdWekxGeHVJQ0FnSUM4dklIUm9aVzRnYzNSaGNuUWdZWE5yYVc1bklHWnZjaUJ1WlhjZ2RISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lDOHZJSFJvWlc0Z2FXNTBaV2R5WVhSbElHNWxkeUIwY21GdWMyRmpkR2x2Ym5NZ2FXNTBieUJ2YkdRZ2RISmhibk5oWTNScGIyNXpYRzRnSUNBZ2JHOWhaRUpzYjJOclVtRnVaMlVvYVc1cGRHbGhiRk4wWVhSbEtTNTBhR1Z1S0hKaGJtZGxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCemRHRnlkR2x1WnlCbWNtOXRJREFzSUhSaGEyVWdZWE1nYVdZZ2RHaGxjbVVnYVhNZ2JtOGdhVzVtYjF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2YkdSVGRHRjBaU0E5SUhKaGJtZGxMbVpwY25OMExtaGxhV2RvZENBOVBUMGdNQ0EvSUdSbFptRjFiSFJKYm1adklEb2dhVzVwZEdsaGJGTjBZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4aGMzUlZjMlZrVFdGcGJpQTlJRzlzWkZOMFlYUmxMblZ6WldSQlpHUnlaWE56WlhNdWJHVnVaM1JvSUMwZ01UdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHRnpkRlZ6WldSRGFHRnVaMlVnUFNCdmJHUlRkR0YwWlM1amFHRnVaMlZKYm1SbGVDQXRJREU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3hoYzNSRGIyNW1hWEp0WldSTllXbHVJRDBnYjJ4a1UzUmhkR1V1YkdGemRFTnZibVpwY20xbFpFMWhhVzRnUFQwZ2JuVnNiQ0EvSUd4aGMzUlZjMlZrVFdGcGJpQTZJRzlzWkZOMFlYUmxMbXhoYzNSRGIyNW1hWEp0WldSTllXbHVPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnNZWE4wUTI5dVptbHliV1ZrUTJoaGJtZGxJRDBnYjJ4a1UzUmhkR1V1YkdGemRFTnZibVpwY20xbFpFTm9ZVzVuWlNBOVBTQnVkV3hzSUQ4Z2JHRnpkRlZ6WldSRGFHRnVaMlVnT2lCdmJHUlRkR0YwWlM1c1lYTjBRMjl1Wm1seWJXVmtRMmhoYm1kbE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnVZMjl1Wm1seWJXVmtWSGhwWkhNZ1BTQnZiR1JUZEdGMFpTNTBjbUZ1YzJGamRHbHZibk11Wm1sc2RHVnlLSFFnUFQ0Z2RDNW9aV2xuYUhRZ1BUMGdiblZzYkNrdWJXRndLSFFnUFQ0Z2RDNW9ZWE5vS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdFlXbHVRV1JrY21WemMyVnpJRDBnYjJ4a1UzUmhkR1V1ZFhObFpFRmtaSEpsYzNObGN5NXRZWEFvWVNBOVBpQmhMbUZrWkhKbGMzTXBMbU52Ym1OaGRDaHZiR1JUZEdGMFpTNTFiblZ6WldSQlpHUnlaWE56WlhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamFHRnVaMlZCWkdSeVpYTnpaWE1nUFNCdmJHUlRkR0YwWlM1amFHRnVaMlZCWkdSeVpYTnpaWE03WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaMlYwSUdGc2JDQjBhR1VnYm1WM0lHbHVabThzSUhSb1pXNHVMaTVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JwYzJOdmRtVnlRV05qYjNWdWRDaHlZVzVuWlN3Z1cyeGhjM1JEYjI1bWFYSnRaV1JOWVdsdUxDQnNZWE4wUTI5dVptbHliV1ZrUTJoaGJtZGxYU3dnYjJ4a1UzUmhkR1V1ZEhKaGJuTmhZM1JwYjI1ekxDQnRZV2x1UVdSa2NtVnpjMlZ6TENCamFHRnVaMlZCWkdSeVpYTnpaWE1wWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmlnb2JtVjNTVzVtYnpvZ1FXTmpiM1Z1ZEU1bGQwbHVabThwT2lCUWNtOXRhWE5sUEVGalkyOTFiblJKYm1adlBpQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxiaUJtYVc1a0lHOTFkQ0JrWld4bGRHVmtJR2x1Wm05Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWld4bGRHVmtVRG9nVUhKdmJXbHpaVHhCY25KaGVUeHpkSEpwYm1jK1BpQTlJR1pwYm1SRVpXeGxkR1ZrS0hWdVkyOXVabWx5YldWa1ZIaHBaSE1zSUdOb1lXNXVaV3d1Wkc5bGMxUnlZVzV6WVdOMGFXOXVSWGhwYzNRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMxQTZJRkJ5YjIxcGMyVThRV05qYjNWdWRFbHVabTgrSUQwZ1pHVnNaWFJsWkZBdWRHaGxiaWhrWld4bGRHVmtJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnTGk0dUlIUm9aVzRnYVc1MFpXZHlZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJuUmxaM0poZEdWT1pYZFVlSE1vYm1WM1NXNW1ieXdnYjJ4a1UzUmhkR1VzSUhKaGJtZGxMbXhoYzNRc0lHUmxiR1YwWldRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE5RTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2t1ZEdobGJpaGNiaUFnSUNBZ0lDQWdMeThnWldsMGFHVnlJSE4xWTJObGMzTWdiM0lnWm1GcGJIVnlaVnh1SUNBZ0lDQWdJQ0F2THlBb2IzUm9aWElnYzJsa1pTQjNhV3hzSUhOb2RYUWdaRzkzYmlCMGFHVWdkMjl5YTJWeUlIUm9aVzRwWEc0Z0lDQWdJQ0FnSUNoeVpYTjFiSFE2SUVGalkyOTFiblJKYm1adktTQTlQaUJqYUdGdWJtVnNMbkpsZEhWeWJsTjFZMk5sYzNNb2NtVnpkV3gwS1N4Y2JpQWdJQ0FnSUNBZ1pYSnliM0lnUFQ0Z1kyaGhibTVsYkM1eVpYUjFjbTVGY25KdmNpaGxjbkp2Y2lsY2JpQWdJQ0FwTzF4dWZTazdYRzVjYm1aMWJtTjBhVzl1SUdScGMyTnZkbVZ5UVdOamIzVnVkQ2hjYmlBZ0lDQnlZVzVuWlRvZ1FteHZZMnRTWVc1blpTeGNiaUFnSUNCc1lYTjBWWE5sWkVGa1pISmxjM05sY3pvZ1cyNTFiV0psY2l3Z2JuVnRZbVZ5WFN4Y2JpQWdJQ0IwY21GdWMyRmpkR2x2Ym5NNklFRnljbUY1UEZSeVlXNXpZV04wYVc5dVNXNW1iejRzWEc0Z0lDQWdiV0ZwYmtGa1pISmxjM05sY3pvZ1FYSnlZWGs4YzNSeWFXNW5QaXhjYmlBZ0lDQmphR0Z1WjJWQlpHUnlaWE56WlhNNklFRnljbUY1UEhOMGNtbHVaejVjYmlrNklGQnliMjFwYzJVOFFXTmpiM1Z1ZEU1bGQwbHVabTgrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNWhiR3dvVzF4dUlDQWdJQ0FnSUNCdVpYY2dSMlYwUTJoaGFXNVVjbUZ1YzJGamRHbHZibk1vTUN3Z2NtRnVaMlVzSUd4aGMzUlZjMlZrUVdSa2NtVnpjMlZ6V3pCZExDQmphR0Z1Ym1Wc0xtTm9kVzVyVkhKaGJuTmhZM1JwYjI1ekxDQjBjbUZ1YzJGamRHbHZibk1zSUcxaGFXNUJaR1J5WlhOelpYTXNJSEpsWTNaT1pYUjNiM0pyTENCeVpXTjJXSEIxWWl3Z2NtVmpkbE5sWjNkcGRDd2djbVZqZGxkbFlrRnpjMlZ0WW14NUtTNWthWE5qYjNabGNpZ3BMRnh1SUNBZ0lDQWdJQ0J1WlhjZ1IyVjBRMmhoYVc1VWNtRnVjMkZqZEdsdmJuTW9NU3dnY21GdVoyVXNJR3hoYzNSVmMyVmtRV1JrY21WemMyVnpXekZkTENCamFHRnVibVZzTG1Ob2RXNXJWSEpoYm5OaFkzUnBiMjV6TENCYlhTd2dZMmhoYm1kbFFXUmtjbVZ6YzJWekxDQnlaV04yVG1WMGQyOXlheXdnY21WamRsaHdkV0lzSUhKbFkzWlRaV2QzYVhRc0lISmxZM1pYWldKQmMzTmxiV0pzZVNrdVpHbHpZMjkyWlhJb0tTeGNiaUFnSUNCZEtTNTBhR1Z1S0NoYmJXRnBiaXdnWTJoaGJtZGxYU2tnUFQ0Z0tIdHRZV2x1TENCamFHRnVaMlY5S1NrN1hHNTlYRzVjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5pbnRlZ3JhdGVOZXdUeHMgPSBpbnRlZ3JhdGVOZXdUeHM7XG5cbnZhciBfZGVyaXZlVXR4b3MgPSByZXF1aXJlKCcuL2Rlcml2ZS11dHhvcycpO1xuXG52YXIgX2Rlcml2ZUFuYWx5c2lzID0gcmVxdWlyZSgnLi9kZXJpdmUtYW5hbHlzaXMnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBHQVBfU0laRSA9IDIwO1xuXG5mdW5jdGlvbiBkZWxldGVUeHMob2xkSW5mbywgdHhzKSB7XG4gICAgdmFyIHNldCA9IG5ldyBTZXQodHhzKTtcbiAgICB2YXIgdXR4b3MgPSBvbGRJbmZvLnV0eG9zLmZpbHRlcihmdW5jdGlvbiAodXR4bykge1xuICAgICAgICByZXR1cm4gIXNldC5oYXModXR4by50cmFuc2FjdGlvbkhhc2gpO1xuICAgIH0pO1xuICAgIHZhciB0cmFuc2FjdGlvbnMgPSBvbGRJbmZvLnRyYW5zYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgIHJldHVybiAhc2V0Lmhhcyh0eC5oYXNoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG9sZEluZm8sIHtcbiAgICAgICAgdXR4b3M6IHV0eG9zLFxuICAgICAgICB0cmFuc2FjdGlvbnM6IHRyYW5zYWN0aW9uc1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBpbnRlZ3JhdGVOZXdUeHMobmV3SW5mbywgb2xkSW5mb1VuZGVsZXRlZCwgbGFzdEJsb2NrLCBkZWxldGVkVHhzKSB7XG4gICAgdmFyIG9sZEluZm8gPSBkZWxldGVkVHhzLmxlbmd0aCAhPT0gMCA/IGRlbGV0ZVR4cyhvbGRJbmZvVW5kZWxldGVkLCBkZWxldGVkVHhzKSA6IG9sZEluZm9VbmRlbGV0ZWQ7XG4gICAgdmFyIGFkZHJlc3NUb1BhdGggPSBkZXJpdmVBZGRyZXNzVG9QYXRoKG5ld0luZm8ubWFpbi5hbGxBZGRyZXNzZXMsIG5ld0luZm8uY2hhbmdlLmFsbEFkZHJlc3Nlcyk7XG5cbiAgICB2YXIgam9pbmVkID0gZGVyaXZlSm9pbmVkKG5ld0luZm8ubWFpbi5uZXdUcmFuc2FjdGlvbnMsIG5ld0luZm8uY2hhbmdlLm5ld1RyYW5zYWN0aW9ucyk7XG5cbiAgICB2YXIgdXR4b3MgPSAoMCwgX2Rlcml2ZVV0eG9zLmRlcml2ZVV0eG9zKShuZXdJbmZvLCBvbGRJbmZvLCBhZGRyZXNzVG9QYXRoLCBqb2luZWQpO1xuXG4gICAgdmFyIHRyYW5zYWN0aW9ucyA9ICgwLCBfZGVyaXZlQW5hbHlzaXMuZGVyaXZlQW5hbHlzaXMpKGpvaW5lZCwgb2xkSW5mby50cmFuc2FjdGlvbnMsIGFkZHJlc3NUb1BhdGgpO1xuXG4gICAgdmFyIF9kZXJpdmVVc2VkQWRkcmVzc2VzID0gZGVyaXZlVXNlZEFkZHJlc3Nlcyh0cmFuc2FjdGlvbnMsIGFkZHJlc3NUb1BhdGgsIG5ld0luZm8ubWFpbi5hbGxBZGRyZXNzZXMsIDApLFxuICAgICAgICB1c2VkQWRkcmVzc2VzID0gX2Rlcml2ZVVzZWRBZGRyZXNzZXMudXNlZEFkZHJlc3NlcyxcbiAgICAgICAgdW51c2VkQWRkcmVzc2VzID0gX2Rlcml2ZVVzZWRBZGRyZXNzZXMudW51c2VkQWRkcmVzc2VzLFxuICAgICAgICBsYXN0Q29uZmlybWVkTWFpbiA9IF9kZXJpdmVVc2VkQWRkcmVzc2VzLmxhc3RDb25maXJtZWQ7XG5cbiAgICB2YXIgdXNlZENoYW5nZSA9IGRlcml2ZVVzZWRBZGRyZXNzZXModHJhbnNhY3Rpb25zLCBhZGRyZXNzVG9QYXRoLCBuZXdJbmZvLmNoYW5nZS5hbGxBZGRyZXNzZXMsIDEpO1xuXG4gICAgdmFyIGJhbGFuY2UgPSB0cmFuc2FjdGlvbnMubGVuZ3RoID4gMCA/IHRyYW5zYWN0aW9uc1swXS5iYWxhbmNlIDogMDtcbiAgICB2YXIgdXR4b0JhbGFuY2UgPSB1dHhvcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGEpIHtcbiAgICAgICAgcmV0dXJuIGEudmFsdWUgKyBwcmV2O1xuICAgIH0sIDApO1xuICAgIGlmIChiYWxhbmNlICE9PSB1dHhvQmFsYW5jZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29uc2lzdGVudCBpbmZvLicpO1xuICAgIH1cblxuICAgIHZhciBzZW50QWRkcmVzc2VzID0gZGVyaXZlU2VudEFkZHJlc3Nlcyh0cmFuc2FjdGlvbnMpO1xuXG4gICAgdmFyIGNoYW5nZUFkZHJlc3NlcyA9IG5ld0luZm8uY2hhbmdlLmFsbEFkZHJlc3NlcztcbiAgICB2YXIgY2hhbmdlSW5kZXggPSB1c2VkQ2hhbmdlLnVzZWRBZGRyZXNzZXMubGVuZ3RoO1xuICAgIHZhciBhbGxvd0NoYW5nZSA9IHVzZWRDaGFuZ2UudW51c2VkQWRkcmVzc2VzLmxlbmd0aCA+IDA7XG4gICAgdmFyIGxhc3RDb25maXJtZWRDaGFuZ2UgPSB1c2VkQ2hhbmdlLmxhc3RDb25maXJtZWQ7XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIHV0eG9zOiB1dHhvcyxcbiAgICAgICAgdHJhbnNhY3Rpb25zOiB0cmFuc2FjdGlvbnMsXG4gICAgICAgIHVzZWRBZGRyZXNzZXM6IHVzZWRBZGRyZXNzZXMsXG4gICAgICAgIHVudXNlZEFkZHJlc3NlczogdW51c2VkQWRkcmVzc2VzLFxuICAgICAgICBsYXN0Q29uZmlybWVkTWFpbjogbGFzdENvbmZpcm1lZE1haW4sXG4gICAgICAgIGxhc3RDb25maXJtZWRDaGFuZ2U6IGxhc3RDb25maXJtZWRDaGFuZ2UsXG4gICAgICAgIGNoYW5nZUluZGV4OiBjaGFuZ2VJbmRleCxcbiAgICAgICAgYmFsYW5jZTogYmFsYW5jZSxcbiAgICAgICAgbGFzdEJsb2NrOiBsYXN0QmxvY2ssXG4gICAgICAgIHNlbnRBZGRyZXNzZXM6IHNlbnRBZGRyZXNzZXMsXG4gICAgICAgIGNoYW5nZUFkZHJlc3NlczogY2hhbmdlQWRkcmVzc2VzLFxuICAgICAgICBhbGxvd0NoYW5nZTogYWxsb3dDaGFuZ2UsXG4gICAgICAgIHZlcnNpb246IG9sZEluZm9VbmRlbGV0ZWQudmVyc2lvblxuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBkZXJpdmVBZGRyZXNzVG9QYXRoKG1haW4sIGNoYW5nZSkge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIG1haW4uZm9yRWFjaChmdW5jdGlvbiAoYSwgaSkge1xuICAgICAgICByZXNbYV0gPSBbMCwgaV07XG4gICAgfSk7XG4gICAgY2hhbmdlLmZvckVhY2goZnVuY3Rpb24gKGEsIGkpIHtcbiAgICAgICAgcmVzW2FdID0gWzEsIGldO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gZGVyaXZlSm9pbmVkKG1haW4sIGNoYW5nZSkge1xuICAgIHZhciByZXMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKG1haW4pLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJlc1tpZF0gPSBtYWluW2lkXTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhjaGFuZ2UpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJlc1tpZF0gPSBjaGFuZ2VbaWRdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gZGVyaXZlU2VudEFkZHJlc3Nlcyh0cmFuc2FjdGlvbnMpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgdHJhbnNhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKHQudHlwZSA9PT0gJ3NlbnQnKSB7XG4gICAgICAgICAgICB0LnRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzID0gX3JlZi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBpID0gX3JlZi5pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHR4SWQgPSB0Lmhhc2g7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHR4SWQgKyAnOicgKyBpO1xuICAgICAgICAgICAgICAgIHJlc1trZXldID0gYWRkcmVzcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gZGVyaXZlVXNlZEFkZHJlc3Nlcyh0cmFuc2FjdGlvbnMsIGFkZHJlc3NUb1BhdGgsIGFsbEFkZHJlc3NlcywgY2hhaW4pIHtcbiAgICB2YXIgYWxsUmVjZWl2ZWQgPSBbXTtcbiAgICB2YXIgbGFzdFVzZWQgPSAtMTtcbiAgICB2YXIgbGFzdENvbmZpcm1lZCA9IC0xO1xuXG4gICAgdHJhbnNhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgKDAsIF91dGlscy5vYmplY3RWYWx1ZXMpKHQubXlPdXRwdXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYWRkcmVzcyA9IG8uYWRkcmVzcztcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG8udmFsdWU7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IGFkZHJlc3NUb1BhdGhbYWRkcmVzc107XG4gICAgICAgICAgICBpZiAocGF0aFswXSA9PT0gY2hhaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXRoWzFdO1xuICAgICAgICAgICAgICAgIGlmIChhbGxSZWNlaXZlZFtpZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhbGxSZWNlaXZlZFtpZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGxSZWNlaXZlZFtpZF0gKz0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYXN0VXNlZCA8IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RVc2VkID0gaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0LmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdENvbmZpcm1lZCA8IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q29uZmlybWVkID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIHVzZWRBZGRyZXNzZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXN0VXNlZDsgaSsrKSB7XG4gICAgICAgIHZhciBhZGRyZXNzID0gYWxsQWRkcmVzc2VzW2ldO1xuICAgICAgICB2YXIgcmVjZWl2ZWQgPSBhbGxSZWNlaXZlZFtpXSA9PSBudWxsID8gMCA6IGFsbFJlY2VpdmVkW2ldO1xuICAgICAgICB1c2VkQWRkcmVzc2VzLnB1c2goeyBhZGRyZXNzOiBhZGRyZXNzLCByZWNlaXZlZDogcmVjZWl2ZWQgfSk7XG4gICAgfVxuICAgIHZhciB1bnVzZWRBZGRyZXNzZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IGxhc3RVc2VkICsgMTsgX2kgPD0gbGFzdENvbmZpcm1lZCArIEdBUF9TSVpFOyBfaSsrKSB7XG4gICAgICAgIHVudXNlZEFkZHJlc3Nlcy5wdXNoKGFsbEFkZHJlc3Nlc1tfaV0pO1xuICAgIH1cbiAgICByZXR1cm4geyB1c2VkQWRkcmVzc2VzOiB1c2VkQWRkcmVzc2VzLCB1bnVzZWRBZGRyZXNzZXM6IHVudXNlZEFkZHJlc3NlcywgbGFzdENvbmZpcm1lZDogbGFzdENvbmZpcm1lZCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWRHVm5jbUYwWlMxdVpYY3RkSGh6TG1weklsMHNJbTVoYldWeklqcGJJbWx1ZEdWbmNtRjBaVTVsZDFSNGN5SXNJa2RCVUY5VFNWcEZJaXdpWkdWc1pYUmxWSGh6SWl3aWIyeGtTVzVtYnlJc0luUjRjeUlzSW5ObGRDSXNJbE5sZENJc0luVjBlRzl6SWl3aVptbHNkR1Z5SWl3aWFHRnpJaXdpZFhSNGJ5SXNJblJ5WVc1ellXTjBhVzl1U0dGemFDSXNJblJ5WVc1ellXTjBhVzl1Y3lJc0luUjRJaXdpYUdGemFDSXNJbTVsZDBsdVptOGlMQ0p2YkdSSmJtWnZWVzVrWld4bGRHVmtJaXdpYkdGemRFSnNiMk5ySWl3aVpHVnNaWFJsWkZSNGN5SXNJbXhsYm1kMGFDSXNJbUZrWkhKbGMzTlViMUJoZEdnaUxDSmtaWEpwZG1WQlpHUnlaWE56Vkc5UVlYUm9JaXdpYldGcGJpSXNJbUZzYkVGa1pISmxjM05sY3lJc0ltTm9ZVzVuWlNJc0ltcHZhVzVsWkNJc0ltUmxjbWwyWlVwdmFXNWxaQ0lzSW01bGQxUnlZVzV6WVdOMGFXOXVjeUlzSW1SbGNtbDJaVlZ6WldSQlpHUnlaWE56WlhNaUxDSjFjMlZrUVdSa2NtVnpjMlZ6SWl3aWRXNTFjMlZrUVdSa2NtVnpjMlZ6SWl3aWJHRnpkRU52Ym1acGNtMWxaRTFoYVc0aUxDSnNZWE4wUTI5dVptbHliV1ZrSWl3aWRYTmxaRU5vWVc1blpTSXNJbUpoYkdGdVkyVWlMQ0oxZEhodlFtRnNZVzVqWlNJc0luSmxaSFZqWlNJc0luQnlaWFlpTENKaElpd2lkbUZzZFdVaUxDSkZjbkp2Y2lJc0luTmxiblJCWkdSeVpYTnpaWE1pTENKa1pYSnBkbVZUWlc1MFFXUmtjbVZ6YzJWeklpd2lZMmhoYm1kbFFXUmtjbVZ6YzJWeklpd2lZMmhoYm1kbFNXNWtaWGdpTENKaGJHeHZkME5vWVc1blpTSXNJbXhoYzNSRGIyNW1hWEp0WldSRGFHRnVaMlVpTENKemRHRjBaU0lzSW5abGNuTnBiMjRpTENKeVpYTWlMQ0ptYjNKRllXTm9JaXdpYVNJc0lrOWlhbVZqZENJc0ltdGxlWE1pTENKcFpDSXNJblFpTENKMGVYQmxJaXdpZEdGeVoyVjBjeUlzSW1Ga1pISmxjM01pTENKMGVFbGtJaXdpYTJWNUlpd2lZMmhoYVc0aUxDSmhiR3hTWldObGFYWmxaQ0lzSW14aGMzUlZjMlZrSWl3aWJYbFBkWFJ3ZFhSeklpd2lieUlzSW5CaGRHZ2lMQ0pvWldsbmFIUWlMQ0p5WldObGFYWmxaQ0lzSW5CMWMyZ2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzFGQk1rTm5Ra0VzWlN4SFFVRkJRU3hsT3p0QlFUVkNhRUk3TzBGQlNVRTdPMEZCU1VFN08wRkJTVUVzU1VGQlRVTXNWMEZCYlVJc1JVRkJla0k3TzBGQlJVRXNVMEZCVTBNc1UwRkJWQ3hEUVVOSlF5eFBRVVJLTEVWQlJVbERMRWRCUmtvc1JVRkhaVHRCUVVOWUxGRkJRVTFETEUxQlFXMUNMRWxCUVVsRExFZEJRVW9zUTBGQlVVWXNSMEZCVWl4RFFVRjZRanRCUVVOQkxGRkJRVTFITEZGQlFWRktMRkZCUVZGSkxFdEJRVklzUTBGQlkwTXNUVUZCWkN4RFFVRnhRanRCUVVGQkxHVkJRVkVzUTBGQlEwZ3NTVUZCU1Vrc1IwRkJTaXhEUVVGUlF5eExRVUZMUXl4bFFVRmlMRU5CUVZRN1FVRkJRU3hMUVVGeVFpeERRVUZrTzBGQlEwRXNVVUZCVFVNc1pVRkJaVlFzVVVGQlVWTXNXVUZCVWl4RFFVRnhRa29zVFVGQmNrSXNRMEZCTkVJN1FVRkJRU3hsUVVGTkxFTkJRVU5JTEVsQlFVbEpMRWRCUVVvc1EwRkJVVWtzUjBGQlIwTXNTVUZCV0N4RFFVRlFPMEZCUVVFc1MwRkJOVUlzUTBGQmNrSTdRVUZEUVN4M1FrRkRUMWdzVDBGRVVEdEJRVVZKU1N4dlFrRkdTanRCUVVkSlN6dEJRVWhLTzBGQlMwZzdPMEZCUlUwc1UwRkJVMW9zWlVGQlZDeERRVU5JWlN4UFFVUkhMRVZCUlVoRExHZENRVVpITEVWQlIwaERMRk5CU0Vjc1JVRkpTRU1zVlVGS1J5eEZRVXRSTzBGQlExZ3NVVUZCVFdZc1ZVRkJWMlVzVjBGQlYwTXNUVUZCV0N4TFFVRnpRaXhEUVVGMlFpeEhRVU5XYWtJc1ZVRkJWV01zWjBKQlFWWXNSVUZCTkVKRkxGVkJRVFZDTEVOQlJGVXNSMEZGVmtZc1owSkJSazQ3UVVGSFFTeFJRVUZOU1N4blFrRkJaMEpETEc5Q1FVTnNRazRzVVVGQlVVOHNTVUZCVWl4RFFVRmhReXhaUVVSTExFVkJSV3hDVWl4UlFVRlJVeXhOUVVGU0xFTkJRV1ZFTEZsQlJrY3NRMEZCZEVJN08wRkJTMEVzVVVGQlRVVXNVMEZCVTBNc1lVRkRXRmdzVVVGQlVVOHNTVUZCVWl4RFFVRmhTeXhsUVVSR0xFVkJSVmhhTEZGQlFWRlRMRTFCUVZJc1EwRkJaVWNzWlVGR1NpeERRVUZtT3p0QlFVdEJMRkZCUVUxd1FpeFJRVUZSTERoQ1FVTldVU3hQUVVSVkxFVkJSVlphTEU5QlJsVXNSVUZIVm1sQ0xHRkJTRlVzUlVGSlZrc3NUVUZLVlN4RFFVRmtPenRCUVU5QkxGRkJRVTFpTEdWQlFXVXNiME5CUTJwQ1lTeE5RVVJwUWl4RlFVVnFRblJDTEZGQlFWRlRMRmxCUmxNc1JVRkhha0pSTEdGQlNHbENMRU5CUVhKQ096dEJRWEpDVnl3clFrRXlRbWRGVVN4dlFrRkRka1ZvUWl4WlFVUjFSU3hGUVVWMlJWRXNZVUZHZFVVc1JVRkhka1ZNTEZGQlFWRlBMRWxCUVZJc1EwRkJZVU1zV1VGSU1FUXNSVUZKZGtVc1EwRktkVVVzUTBFelFtaEZPMEZCUVVFc1VVRXlRa3BOTEdGQk0wSkpMSGRDUVRKQ1NrRXNZVUV6UWtrN1FVRkJRU3hSUVRKQ1YwTXNaVUV6UWxnc2QwSkJNa0pYUVN4bFFUTkNXRHRCUVVGQkxGRkJNa0l5UTBNc2FVSkJNMEl6UXl4M1FrRXlRalJDUXl4aFFUTkNOVUk3TzBGQmEwTllMRkZCUVUxRExHRkJRV0ZNTEc5Q1FVTm1hRUlzV1VGRVpTeEZRVVZtVVN4aFFVWmxMRVZCUjJaTUxGRkJRVkZUTEUxQlFWSXNRMEZCWlVRc1dVRklRU3hGUVVsbUxFTkJTbVVzUTBGQmJrSTdPMEZCVDBFc1VVRkJUVmNzVlVGQlZYUkNMR0ZCUVdGUExFMUJRV0lzUjBGQmMwSXNRMEZCZEVJc1IwRkJNRUpRTEdGQlFXRXNRMEZCWWl4RlFVRm5Rbk5DTEU5QlFURkRMRWRCUVc5RUxFTkJRWEJGTzBGQlEwRXNVVUZCVFVNc1kwRkJjMEkxUWl4TlFVRk5Oa0lzVFVGQlRpeERRVUZoTEZWQlFVTkRMRWxCUVVRc1JVRkJUME1zUTBGQlVEdEJRVUZCTEdWQlFXRkJMRVZCUVVWRExFdEJRVVlzUjBGQlZVWXNTVUZCZGtJN1FVRkJRU3hMUVVGaUxFVkJRVEJETEVOQlFURkRMRU5CUVRWQ08wRkJRMEVzVVVGQlNVZ3NXVUZCV1VNc1YwRkJhRUlzUlVGQk5rSTdRVUZEZWtJc1kwRkJUU3hKUVVGSlN5eExRVUZLTEVOQlFWVXNiMEpCUVZZc1EwRkJUanRCUVVOSU96dEJRVVZFTEZGQlFVMURMR2RDUVVGblFrTXNiMEpCUVc5Q09VSXNXVUZCY0VJc1EwRkJkRUk3TzBGQlJVRXNVVUZCVFN0Q0xHdENRVUZyUWpWQ0xGRkJRVkZUTEUxQlFWSXNRMEZCWlVRc1dVRkJka003UVVGRFFTeFJRVUZOY1VJc1kwRkJZMWdzVjBGQlYwb3NZVUZCV0N4RFFVRjVRbFlzVFVGQk4wTTdRVUZEUVN4UlFVRk5NRUlzWTBGQlkxb3NWMEZCVjBnc1pVRkJXQ3hEUVVFeVFsZ3NUVUZCTTBJc1IwRkJiME1zUTBGQmVFUTdRVUZEUVN4UlFVRk5Na0lzYzBKQlFYTkNZaXhYUVVGWFJDeGhRVUYyUXpzN1FVRkZRU3hSUVVGTlpTeFJRVUZSTzBGQlExWjRReXh2UWtGRVZUdEJRVVZXU3l4clEwRkdWVHRCUVVkV2FVSXNiME5CU0ZVN1FVRkpWa01zZDBOQlNsVTdRVUZMVmtNc05FTkJURlU3UVVGTlZtVXNaMFJCVGxVN1FVRlBWa1lzWjBOQlVGVTdRVUZSVmxZc2QwSkJVbFU3UVVGVFZtcENMRFJDUVZSVk8wRkJWVlozUWl4dlEwRldWVHRCUVZkV1JTeDNRMEZZVlR0QlFWbFdSU3huUTBGYVZUdEJRV0ZXUnl4cFFrRkJVMmhETEdsQ1FVRnBRbWRETzBGQlltaENMRXRCUVdRN1FVRmxRU3hYUVVGUFJDeExRVUZRTzBGQlEwZzdPMEZCUlVRc1UwRkJVekZDTEcxQ1FVRlVMRU5CUTBsRExFbEJSRW9zUlVGRlNVVXNUVUZHU2l4RlFVZHBRanRCUVVOaUxGRkJRVTE1UWl4TlFVRnhRaXhGUVVFelFqczdRVUZGUVROQ0xGTkJRVXMwUWl4UFFVRk1MRU5CUVdFc1ZVRkJRMW9zUTBGQlJDeEZRVUZKWVN4RFFVRktMRVZCUVZVN1FVRkRia0pHTEZsQlFVbFlMRU5CUVVvc1NVRkJVeXhEUVVGRExFTkJRVVFzUlVGQlNXRXNRMEZCU2l4RFFVRlVPMEZCUTBnc1MwRkdSRHRCUVVkQk0wSXNWMEZCVHpCQ0xFOUJRVkFzUTBGQlpTeFZRVUZEV2l4RFFVRkVMRVZCUVVsaExFTkJRVW9zUlVGQlZUdEJRVU55UWtZc1dVRkJTVmdzUTBGQlNpeEpRVUZUTEVOQlFVTXNRMEZCUkN4RlFVRkpZU3hEUVVGS0xFTkJRVlE3UVVGRFNDeExRVVpFT3p0QlFVbEJMRmRCUVU5R0xFZEJRVkE3UVVGRFNEczdRVUZGUkN4VFFVRlRka0lzV1VGQlZDeERRVU5KU2l4SlFVUktMRVZCUlVsRkxFMUJSa29zUlVGSGQwSTdRVUZEY0VJc1VVRkJUWGxDTEUxQlFVMHNSVUZCV2pzN1FVRkZRVWNzVjBGQlQwTXNTVUZCVUN4RFFVRlpMMElzU1VGQldpeEZRVUZyUWpSQ0xFOUJRV3hDTEVOQlFUQkNMR05CUVUwN1FVRkROVUpFTEZsQlFVbExMRVZCUVVvc1NVRkJWV2hETEV0QlFVdG5ReXhGUVVGTUxFTkJRVlk3UVVGRFNDeExRVVpFTzBGQlIwRkdMRmRCUVU5RExFbEJRVkFzUTBGQldUZENMRTFCUVZvc1JVRkJiMEl3UWl4UFFVRndRaXhEUVVFMFFpeGpRVUZOTzBGQlF6bENSQ3haUVVGSlN5eEZRVUZLTEVsQlFWVTVRaXhQUVVGUE9FSXNSVUZCVUN4RFFVRldPMEZCUTBnc1MwRkdSRHM3UVVGSlFTeFhRVUZQVEN4SFFVRlFPMEZCUTBnN08wRkJSVVFzVTBGQlUxQXNiVUpCUVZRc1EwRkRTVGxDTEZsQlJFb3NSVUZGYlVNN1FVRkRMMElzVVVGQlRYRkRMRTFCUVUwc1JVRkJXanRCUVVOQmNrTXNhVUpCUVdGelF5eFBRVUZpTEVOQlFYRkNMR0ZCUVVzN1FVRkRkRUlzV1VGQlNVc3NSVUZCUlVNc1NVRkJSaXhMUVVGWExFMUJRV1lzUlVGQmRVSTdRVUZEYmtKRUxHTkJRVVZGTEU5QlFVWXNRMEZCVlZBc1QwRkJWaXhEUVVGclFpeG5Ra0ZCYTBJN1FVRkJRU3h2UWtGQmFFSlJMRTlCUVdkQ0xGRkJRV2hDUVN4UFFVRm5RanRCUVVGQkxHOUNRVUZRVUN4RFFVRlBMRkZCUVZCQkxFTkJRVTg3TzBGQlEyaERMRzlDUVVGTlVTeFBRVUZQU2l4RlFVRkZla01zU1VGQlpqdEJRVU5CTEc5Q1FVRk5PRU1zVFVGQlRVUXNUMEZCVHl4SFFVRlFMRWRCUVdGU0xFTkJRWHBDTzBGQlEwRkdMRzlDUVVGSlZ5eEhRVUZLTEVsQlFWZEdMRTlCUVZnN1FVRkRTQ3hoUVVwRU8wRkJTMGc3UVVGRFNpeExRVkpFTzBGQlUwRXNWMEZCVDFRc1IwRkJVRHRCUVVOSU96dEJRVVZFTEZOQlFWTnlRaXh0UWtGQlZDeERRVU5KYUVJc1dVRkVTaXhGUVVWSlVTeGhRVVpLTEVWQlIwbEhMRmxCU0Vvc1JVRkpTWE5ETEV0QlNrb3NSVUZUUlR0QlFVTkZMRkZCUVUxRExHTkJRVFpDTEVWQlFXNURPMEZCUTBFc1VVRkJTVU1zVjBGQlZ5eERRVUZETEVOQlFXaENPMEZCUTBFc1VVRkJTUzlDTEdkQ1FVRm5RaXhEUVVGRExFTkJRWEpDT3p0QlFVVkJjRUlzYVVKQlFXRnpReXhQUVVGaUxFTkJRWEZDTEdGQlFVczdRVUZEZEVJc2FVTkJRV0ZMTEVWQlFVVlRMRk5CUVdZc1JVRkJNRUprTEU5QlFURkNMRU5CUVd0RExHRkJRVXM3UVVGRGJrTXNaMEpCUVUxUkxGVkJRVlZQTEVWQlFVVlFMRTlCUVd4Q08wRkJRMEVzWjBKQlFVMXVRaXhSUVVGUk1FSXNSVUZCUlRGQ0xFdEJRV2hDTzBGQlEwRXNaMEpCUVUweVFpeFBRVUZQT1VNc1kwRkJZM05ETEU5QlFXUXNRMEZCWWp0QlFVTkJMR2RDUVVGSlVTeExRVUZMTEVOQlFVd3NUVUZCV1V3c1MwRkJhRUlzUlVGQmRVSTdRVUZEYmtJc2IwSkJRVTFRTEV0QlFVdFpMRXRCUVVzc1EwRkJUQ3hEUVVGWU8wRkJRMEVzYjBKQlFVbEtMRmxCUVZsU0xFVkJRVm9zUzBGQmJVSXNTVUZCZGtJc1JVRkJOa0k3UVVGRGVrSlJMR2REUVVGWlVpeEZRVUZhTEVsQlFXdENaaXhMUVVGc1FqdEJRVU5JTEdsQ1FVWkVMRTFCUlU4N1FVRkRTSFZDTEdkRFFVRlpVaXhGUVVGYUxFdEJRVzFDWml4TFFVRnVRanRCUVVOSU8wRkJRMFFzYjBKQlFVbDNRaXhYUVVGWFZDeEZRVUZtTEVWQlFXMUNPMEZCUTJaVExDdENRVUZYVkN4RlFVRllPMEZCUTBnN1FVRkRSQ3h2UWtGQlNVTXNSVUZCUlZrc1RVRkJUaXhGUVVGak8wRkJRMVlzZDBKQlFVbHVReXhuUWtGQlowSnpRaXhGUVVGd1FpeEZRVUYzUWp0QlFVTndRblJDTEhkRFFVRm5Rbk5DTEVWQlFXaENPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zVTBGd1FrUTdRVUZ4UWtnc1MwRjBRa1E3TzBGQmQwSkJMRkZCUVUxNlFpeG5Ra0ZCWjBJc1JVRkJkRUk3UVVGRFFTeFRRVUZMTEVsQlFVbHpRaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRXRCUVV0WkxGRkJRWEpDTEVWQlFTdENXaXhIUVVFdlFpeEZRVUZ2UXp0QlFVTm9ReXhaUVVGTlR5eFZRVUZWYmtNc1lVRkJZVFJDTEVOQlFXSXNRMEZCYUVJN1FVRkRRU3haUVVGTmFVSXNWMEZCVjA0c1dVRkJXVmdzUTBGQldpeExRVUZyUWl4SlFVRnNRaXhIUVVGNVFpeERRVUY2UWl4SFFVRTJRbGNzV1VGQldWZ3NRMEZCV2l4RFFVRTVRenRCUVVOQmRFSXNjMEpCUVdOM1F5eEpRVUZrTEVOQlFXMUNMRVZCUVVOWUxHZENRVUZFTEVWQlFWVlZMR3RDUVVGV0xFVkJRVzVDTzBGQlEwZzdRVUZEUkN4UlFVRk5kRU1zYTBKQlFXdENMRVZCUVhoQ08wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1MwRkJTVmtzVjBGQlZ5eERRVUY0UWl4RlFVRXlRbG9zVFVGQlMyNUNMR2RDUVVGblFpOUNMRkZCUVdoRUxFVkJRVEJFYTBRc1NVRkJNVVFzUlVGQkswUTdRVUZETTBSeVFpeDNRa0ZCWjBKMVF5eEpRVUZvUWl4RFFVRnhRamxETEdGQlFXRTBRaXhGUVVGaUxFTkJRWEpDTzBGQlEwZzdRVUZEUkN4WFFVRlBMRVZCUVVOMFFpdzBRa0ZCUkN4RlFVRm5Ra01zWjBOQlFXaENMRVZCUVdsRFJTdzBRa0ZCYWtNc1JVRkJVRHRCUVVOSUlpd2labWxzWlNJNkltbHVkR1ZuY21GMFpTMXVaWGN0ZEhoekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ1FHWnNiM2NnS2k5Y2JseHVhVzF3YjNKMElIUjVjR1VnZTF4dUlDQWdJRUZqWTI5MWJuUkpibVp2TEZ4dUlDQWdJRlJ5WVc1ellXTjBhVzl1U1c1bWJ5eGNiaUFnSUNCQlpHUnlaWE56VjJsMGFGSmxZMlZwZG1Wa0xGeHVmU0JtY205dElDY3VMaTh1TGk5cGJtUmxlQ2M3WEc1Y2JtbHRjRzl5ZENCMGVYQmxJSHRjYmlBZ0lDQkJZMk52ZFc1MFRtVjNTVzVtYnl4Y2JpQWdJQ0JDYkc5amF5eGNiaUFnSUNCQlpHUnlaWE56Vkc5UVlYUm9MRnh1SUNBZ0lFTm9ZV2x1VG1WM1ZISmhibk5oWTNScGIyNXpMRnh1ZlNCbWNtOXRJQ2N1TGk5MGVYQmxjeWM3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnWkdWeWFYWmxWWFI0YjNNc1hHNTlJR1p5YjIwZ0p5NHZaR1Z5YVhabExYVjBlRzl6Snp0Y2JseHVhVzF3YjNKMElIdGNiaUFnSUNCa1pYSnBkbVZCYm1Gc2VYTnBjeXhjYm4wZ1puSnZiU0FuTGk5a1pYSnBkbVV0WVc1aGJIbHphWE1uTzF4dVhHNXBiWEJ2Y25RZ2UxeHVJQ0FnSUc5aWFtVmpkRlpoYkhWbGN5eGNibjBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1WEc1amIyNXpkQ0JIUVZCZlUwbGFSVG9nYm5WdFltVnlJRDBnTWpBN1hHNWNibVoxYm1OMGFXOXVJR1JsYkdWMFpWUjRjeWhjYmlBZ0lDQnZiR1JKYm1adk9pQkJZMk52ZFc1MFNXNW1ieXhjYmlBZ0lDQjBlSE02SUVGeWNtRjVQSE4wY21sdVp6NWNiaWs2SUVGalkyOTFiblJKYm1adklIdGNiaUFnSUNCamIyNXpkQ0J6WlhRNklGTmxkRHh6ZEhKcGJtYytJRDBnYm1WM0lGTmxkQ2gwZUhNcE8xeHVJQ0FnSUdOdmJuTjBJSFYwZUc5eklEMGdiMnhrU1c1bWJ5NTFkSGh2Y3k1bWFXeDBaWElvZFhSNGJ5QTlQaUFoYzJWMExtaGhjeWgxZEhodkxuUnlZVzV6WVdOMGFXOXVTR0Z6YUNrcE8xeHVJQ0FnSUdOdmJuTjBJSFJ5WVc1ellXTjBhVzl1Y3lBOUlHOXNaRWx1Wm04dWRISmhibk5oWTNScGIyNXpMbVpwYkhSbGNpaDBlQ0E5UGlBaGMyVjBMbWhoY3loMGVDNW9ZWE5vS1NrN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnTGk0dWIyeGtTVzVtYnl4Y2JpQWdJQ0FnSUNBZ2RYUjRiM01zWEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dWN5eGNiaUFnSUNCOU8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVc1MFpXZHlZWFJsVG1WM1ZIaHpLRnh1SUNBZ0lHNWxkMGx1Wm04NklFRmpZMjkxYm5ST1pYZEpibVp2TEZ4dUlDQWdJRzlzWkVsdVptOVZibVJsYkdWMFpXUTZJRUZqWTI5MWJuUkpibVp2TEZ4dUlDQWdJR3hoYzNSQ2JHOWphem9nUW14dlkyc3NYRzRnSUNBZ1pHVnNaWFJsWkZSNGN6b2dRWEp5WVhrOGMzUnlhVzVuUGx4dUtUb2dRV05qYjNWdWRFbHVabThnZTF4dUlDQWdJR052Ym5OMElHOXNaRWx1Wm04Z1BTQW9aR1ZzWlhSbFpGUjRjeTVzWlc1bmRHZ2dJVDA5SURBcFhHNGdJQ0FnSUNBZ0lEOGdaR1ZzWlhSbFZIaHpLRzlzWkVsdVptOVZibVJsYkdWMFpXUXNJR1JsYkdWMFpXUlVlSE1wWEc0Z0lDQWdJQ0FnSURvZ2IyeGtTVzVtYjFWdVpHVnNaWFJsWkR0Y2JpQWdJQ0JqYjI1emRDQmhaR1J5WlhOelZHOVFZWFJvSUQwZ1pHVnlhWFpsUVdSa2NtVnpjMVJ2VUdGMGFDaGNiaUFnSUNBZ0lDQWdibVYzU1c1bWJ5NXRZV2x1TG1Gc2JFRmtaSEpsYzNObGN5eGNiaUFnSUNBZ0lDQWdibVYzU1c1bWJ5NWphR0Z1WjJVdVlXeHNRV1JrY21WemMyVnpYRzRnSUNBZ0tUdGNibHh1SUNBZ0lHTnZibk4wSUdwdmFXNWxaQ0E5SUdSbGNtbDJaVXB2YVc1bFpDaGNiaUFnSUNBZ0lDQWdibVYzU1c1bWJ5NXRZV2x1TG01bGQxUnlZVzV6WVdOMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnYm1WM1NXNW1ieTVqYUdGdVoyVXVibVYzVkhKaGJuTmhZM1JwYjI1elhHNGdJQ0FnS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSFYwZUc5eklEMGdaR1Z5YVhabFZYUjRiM01vWEc0Z0lDQWdJQ0FnSUc1bGQwbHVabThzWEc0Z0lDQWdJQ0FnSUc5c1pFbHVabThzWEc0Z0lDQWdJQ0FnSUdGa1pISmxjM05VYjFCaGRHZ3NYRzRnSUNBZ0lDQWdJR3B2YVc1bFpGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCamIyNXpkQ0IwY21GdWMyRmpkR2x2Ym5NZ1BTQmtaWEpwZG1WQmJtRnNlWE5wY3loY2JpQWdJQ0FnSUNBZ2FtOXBibVZrTEZ4dUlDQWdJQ0FnSUNCdmJHUkpibVp2TG5SeVlXNXpZV04wYVc5dWN5eGNiaUFnSUNBZ0lDQWdZV1JrY21WemMxUnZVR0YwYUZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQjdkWE5sWkVGa1pISmxjM05sY3l3Z2RXNTFjMlZrUVdSa2NtVnpjMlZ6TENCc1lYTjBRMjl1Wm1seWJXVmtPaUJzWVhOMFEyOXVabWx5YldWa1RXRnBibjBnUFNCa1pYSnBkbVZWYzJWa1FXUmtjbVZ6YzJWektGeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJGamRHbHZibk1zWEc0Z0lDQWdJQ0FnSUdGa1pISmxjM05VYjFCaGRHZ3NYRzRnSUNBZ0lDQWdJRzVsZDBsdVptOHViV0ZwYmk1aGJHeEJaR1J5WlhOelpYTXNYRzRnSUNBZ0lDQWdJREJjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2RYTmxaRU5vWVc1blpTQTlJR1JsY21sMlpWVnpaV1JCWkdSeVpYTnpaWE1vWEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dWN5eGNiaUFnSUNBZ0lDQWdZV1JrY21WemMxUnZVR0YwYUN4Y2JpQWdJQ0FnSUNBZ2JtVjNTVzVtYnk1amFHRnVaMlV1WVd4c1FXUmtjbVZ6YzJWekxGeHVJQ0FnSUNBZ0lDQXhYRzRnSUNBZ0tUdGNibHh1SUNBZ0lHTnZibk4wSUdKaGJHRnVZMlVnUFNCMGNtRnVjMkZqZEdsdmJuTXViR1Z1WjNSb0lENGdNQ0EvSUhSeVlXNXpZV04wYVc5dWMxc3dYUzVpWVd4aGJtTmxJRG9nTUR0Y2JpQWdJQ0JqYjI1emRDQjFkSGh2UW1Gc1lXNWpaVG9nYm5WdFltVnlJRDBnZFhSNGIzTXVjbVZrZFdObEtDaHdjbVYyTENCaEtTQTlQaUJoTG5aaGJIVmxJQ3NnY0hKbGRpd2dNQ2s3WEc0Z0lDQWdhV1lnS0dKaGJHRnVZMlVnSVQwOUlIVjBlRzlDWVd4aGJtTmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduU1c1amIyNXphWE4wWlc1MElHbHVabTh1SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjMlZ1ZEVGa1pISmxjM05sY3lBOUlHUmxjbWwyWlZObGJuUkJaR1J5WlhOelpYTW9kSEpoYm5OaFkzUnBiMjV6S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR05vWVc1blpVRmtaSEpsYzNObGN5QTlJRzVsZDBsdVptOHVZMmhoYm1kbExtRnNiRUZrWkhKbGMzTmxjenRjYmlBZ0lDQmpiMjV6ZENCamFHRnVaMlZKYm1SbGVDQTlJSFZ6WldSRGFHRnVaMlV1ZFhObFpFRmtaSEpsYzNObGN5NXNaVzVuZEdnN1hHNGdJQ0FnWTI5dWMzUWdZV3hzYjNkRGFHRnVaMlVnUFNCMWMyVmtRMmhoYm1kbExuVnVkWE5sWkVGa1pISmxjM05sY3k1c1pXNW5kR2dnUGlBd08xeHVJQ0FnSUdOdmJuTjBJR3hoYzNSRGIyNW1hWEp0WldSRGFHRnVaMlVnUFNCMWMyVmtRMmhoYm1kbExteGhjM1JEYjI1bWFYSnRaV1E3WEc1Y2JpQWdJQ0JqYjI1emRDQnpkR0YwWlNBOUlIdGNiaUFnSUNBZ0lDQWdkWFI0YjNNc1hHNGdJQ0FnSUNBZ0lIUnlZVzV6WVdOMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnZFhObFpFRmtaSEpsYzNObGN5eGNiaUFnSUNBZ0lDQWdkVzUxYzJWa1FXUmtjbVZ6YzJWekxGeHVJQ0FnSUNBZ0lDQnNZWE4wUTI5dVptbHliV1ZrVFdGcGJpeGNiaUFnSUNBZ0lDQWdiR0Z6ZEVOdmJtWnBjbTFsWkVOb1lXNW5aU3hjYmlBZ0lDQWdJQ0FnWTJoaGJtZGxTVzVrWlhnc1hHNGdJQ0FnSUNBZ0lHSmhiR0Z1WTJVc1hHNGdJQ0FnSUNBZ0lHeGhjM1JDYkc5amF5eGNiaUFnSUNBZ0lDQWdjMlZ1ZEVGa1pISmxjM05sY3l4Y2JpQWdJQ0FnSUNBZ1kyaGhibWRsUVdSa2NtVnpjMlZ6TEZ4dUlDQWdJQ0FnSUNCaGJHeHZkME5vWVc1blpTeGNiaUFnSUNBZ0lDQWdkbVZ5YzJsdmJqb2diMnhrU1c1bWIxVnVaR1ZzWlhSbFpDNTJaWEp6YVc5dUxGeHVJQ0FnSUgwN1hHNGdJQ0FnY21WMGRYSnVJSE4wWVhSbE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pYSnBkbVZCWkdSeVpYTnpWRzlRWVhSb0tGeHVJQ0FnSUcxaGFXNDZJRUZ5Y21GNVBITjBjbWx1Wno0c1hHNGdJQ0FnWTJoaGJtZGxPaUJCY25KaGVUeHpkSEpwYm1jK1hHNHBPaUJCWkdSeVpYTnpWRzlRWVhSb0lIdGNiaUFnSUNCamIyNXpkQ0J5WlhNNklFRmtaSEpsYzNOVWIxQmhkR2dnUFNCN2ZUdGNibHh1SUNBZ0lHMWhhVzR1Wm05eVJXRmphQ2dvWVN3Z2FTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYTmJZVjBnUFNCYk1Dd2dhVjA3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZMmhoYm1kbExtWnZja1ZoWTJnb0tHRXNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdjbVZ6VzJGZElEMGdXekVzSUdsZE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGN6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHVnlhWFpsU205cGJtVmtLRnh1SUNBZ0lHMWhhVzQ2SUVOb1lXbHVUbVYzVkhKaGJuTmhZM1JwYjI1ekxGeHVJQ0FnSUdOb1lXNW5aVG9nUTJoaGFXNU9aWGRVY21GdWMyRmpkR2x2Ym5OY2JpazZJRU5vWVdsdVRtVjNWSEpoYm5OaFkzUnBiMjV6SUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE1nUFNCN2ZUdGNibHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLRzFoYVc0cExtWnZja1ZoWTJnb2FXUWdQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYTmJhV1JkSUQwZ2JXRnBibHRwWkYwN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1kyaGhibWRsS1M1bWIzSkZZV05vS0dsa0lEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WelcybGtYU0E5SUdOb1lXNW5aVnRwWkYwN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pYSnBkbVZUWlc1MFFXUmtjbVZ6YzJWektGeHVJQ0FnSUhSeVlXNXpZV04wYVc5dWN6b2dRWEp5WVhrOFZISmhibk5oWTNScGIyNUpibVp2UGx4dUtUb2dlMXQwZUZCc2RYTkpibVJsZURvZ2MzUnlhVzVuWFRvZ2MzUnlhVzVuZlNCN1hHNGdJQ0FnWTI5dWMzUWdjbVZ6SUQwZ2UzMDdYRzRnSUNBZ2RISmhibk5oWTNScGIyNXpMbVp2Y2tWaFkyZ29kQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwTG5SNWNHVWdQVDA5SUNkelpXNTBKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkQzUwWVhKblpYUnpMbVp2Y2tWaFkyZ29LSHRoWkdSeVpYTnpMQ0JwZlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUjRTV1FnUFNCMExtaGhjMmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1SUQwZ2RIaEpaQ0FySUNjNkp5QXJJR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WelcydGxlVjBnUFNCaFpHUnlaWE56TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJrWlhKcGRtVlZjMlZrUVdSa2NtVnpjMlZ6S0Z4dUlDQWdJSFJ5WVc1ellXTjBhVzl1Y3pvZ1FYSnlZWGs4VkhKaGJuTmhZM1JwYjI1SmJtWnZQaXhjYmlBZ0lDQmhaR1J5WlhOelZHOVFZWFJvT2lCQlpHUnlaWE56Vkc5UVlYUm9MRnh1SUNBZ0lHRnNiRUZrWkhKbGMzTmxjem9nUVhKeVlYazhjM1J5YVc1blBpeGNiaUFnSUNCamFHRnBiam9nYm5WdFltVnlYRzRwT2lCN1hHNGdJQ0FnZFhObFpFRmtaSEpsYzNObGN6b2dRWEp5WVhrOFFXUmtjbVZ6YzFkcGRHaFNaV05sYVhabFpENHNYRzRnSUNBZ2RXNTFjMlZrUVdSa2NtVnpjMlZ6T2lCQmNuSmhlVHh6ZEhKcGJtYytMRnh1SUNBZ0lHeGhjM1JEYjI1bWFYSnRaV1E2SUc1MWJXSmxjaXhjYm4wZ2UxeHVJQ0FnSUdOdmJuTjBJR0ZzYkZKbFkyVnBkbVZrT2lCQmNuSmhlVHh1ZFcxaVpYSStJRDBnVzEwN1hHNGdJQ0FnYkdWMElHeGhjM1JWYzJWa0lEMGdMVEU3WEc0Z0lDQWdiR1YwSUd4aGMzUkRiMjVtYVhKdFpXUWdQU0F0TVR0Y2JseHVJQ0FnSUhSeVlXNXpZV04wYVc5dWN5NW1iM0pGWVdOb0tIUWdQVDRnZTF4dUlDQWdJQ0FnSUNCdlltcGxZM1JXWVd4MVpYTW9kQzV0ZVU5MWRIQjFkSE1wTG1admNrVmhZMmdvYnlBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoWkdSeVpYTnpJRDBnYnk1aFpHUnlaWE56TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCdkxuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHRjBhQ0E5SUdGa1pISmxjM05VYjFCaGRHaGJZV1JrY21WemMxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0YwYUZzd1hTQTlQVDBnWTJoaGFXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBaQ0E5SUhCaGRHaGJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRnNiRkpsWTJWcGRtVmtXMmxrWFNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYkZKbFkyVnBkbVZrVzJsa1hTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYkZKbFkyVnBkbVZrVzJsa1hTQXJQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGMzUlZjMlZrSUR3Z2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRlZ6WldRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUXVhR1ZwWjJoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNZWE4wUTI5dVptbHliV1ZrSUR3Z2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSRGIyNW1hWEp0WldRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQmpiMjV6ZENCMWMyVmtRV1JrY21WemMyVnpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUEQwZ2JHRnpkRlZ6WldRN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoWkdSeVpYTnpJRDBnWVd4c1FXUmtjbVZ6YzJWelcybGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaV05sYVhabFpDQTlJR0ZzYkZKbFkyVnBkbVZrVzJsZElEMDlJRzUxYkd3Z1B5QXdJRG9nWVd4c1VtVmpaV2wyWldSYmFWMDdYRzRnSUNBZ0lDQWdJSFZ6WldSQlpHUnlaWE56WlhNdWNIVnphQ2g3WVdSa2NtVnpjeXdnY21WalpXbDJaV1I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2RXNTFjMlZrUVdSa2NtVnpjMlZ6SUQwZ1cxMDdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJR3hoYzNSVmMyVmtJQ3NnTVRzZ2FTQThQU0JzWVhOMFEyOXVabWx5YldWa0lDc2dSMEZRWDFOSldrVTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjFiblZ6WldSQlpHUnlaWE56WlhNdWNIVnphQ2hoYkd4QlpHUnlaWE56WlhOYmFWMHBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZTNWelpXUkJaR1J5WlhOelpYTXNJSFZ1ZFhObFpFRmtaSEpsYzNObGN5d2diR0Z6ZEVOdmJtWnBjbTFsWkgwN1hHNTlYRzVjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0SW5wdXRJZCA9IGdldElucHV0SWQ7XG5leHBvcnRzLm9iamVjdFZhbHVlcyA9IG9iamVjdFZhbHVlcztcbmZ1bmN0aW9uIGdldElucHV0SWQoaSkge1xuICAgIHZhciBoYXNoID0gaS5oYXNoO1xuICAgIEFycmF5LnByb3RvdHlwZS5yZXZlcnNlLmNhbGwoaGFzaCk7XG4gICAgdmFyIHJlcyA9IGhhc2gudG9TdHJpbmcoJ2hleCcpO1xuICAgIEFycmF5LnByb3RvdHlwZS5yZXZlcnNlLmNhbGwoaGFzaCk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIG9iamVjdFZhbHVlcyhrKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGspLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrW2tleV07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSW1kbGRFbHVjSFYwU1dRaUxDSnZZbXBsWTNSV1lXeDFaWE1pTENKcElpd2lhR0Z6YUNJc0lrRnljbUY1SWl3aWNISnZkRzkwZVhCbElpd2ljbVYyWlhKelpTSXNJbU5oYkd3aUxDSnlaWE1pTENKMGIxTjBjbWx1WnlJc0ltc2lMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2liV0Z3SWl3aWEyVjVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRSUVVkblFrRXNWU3hIUVVGQlFTeFZPMUZCVlVGRExGa3NSMEZCUVVFc1dUdEJRVlpVTEZOQlFWTkVMRlZCUVZRc1EwRkRTRVVzUTBGRVJ5eEZRVVZITzBGQlEwNHNVVUZCVFVNc1QwRkJUMFFzUlVGQlJVTXNTVUZCWmp0QlFVTkJReXhWUVVGTlF5eFRRVUZPTEVOQlFXZENReXhQUVVGb1FpeERRVUYzUWtNc1NVRkJlRUlzUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVVVGQlRVc3NUVUZCVDB3c1MwRkJTMDBzVVVGQlRDeERRVUZqTEV0QlFXUXNRMEZCWWp0QlFVTkJUQ3hWUVVGTlF5eFRRVUZPTEVOQlFXZENReXhQUVVGb1FpeERRVUYzUWtNc1NVRkJlRUlzUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVjBGQlQwc3NSMEZCVUR0QlFVTklPMEZCUlUwc1UwRkJVMUFzV1VGQlZDeERRVUY1UWxNc1EwRkJla0lzUlVGQmNVUTdRVUZEZUVRc1YwRkJUME1zVDBGQlQwTXNTVUZCVUN4RFFVRlpSaXhEUVVGYUxFVkJRV1ZITEVkQlFXWXNRMEZCYlVJN1FVRkJRU3hsUVVGUFNDeEZRVUZGU1N4SFFVRkdMRU5CUVZBN1FVRkJRU3hMUVVGdVFpeERRVUZRTzBGQlEwZ2lMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lCQVpteHZkeUFxTDF4dWFXMXdiM0owSUhSNWNHVWdleUJKYm5CMWRDQmhjeUJDYVhSamIybHVTbk5KYm5CMWRDQjlJR1p5YjIwZ0oySnBkR052YVc1cWN5MXNhV0l0ZW1OaGMyZ25PMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFNXNXdkWFJKWkNoY2JpQWdJQ0JwT2lCQ2FYUmpiMmx1U25OSmJuQjFkRnh1S1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0JqYjI1emRDQm9ZWE5vSUQwZ2FTNW9ZWE5vTzF4dUlDQWdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXlaWFpsY25ObExtTmhiR3dvYUdGemFDazdYRzRnSUNBZ1kyOXVjM1FnY21WeklEMGdLR2hoYzJndWRHOVRkSEpwYm1jb0oyaGxlQ2NwS1R0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjbVYyWlhKelpTNWpZV3hzS0doaGMyZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCdlltcGxZM1JXWVd4MVpYTThWRDRvYXpvZ2UxdHJPaUJoYm5sZE9pQlVmU2s2SUVGeWNtRjVQRlErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtdGxlWE1vYXlrdWJXRndLR3RsZVNBOVBpQnJXMnRsZVYwcE8xeHVmVnh1WEc0aVhYMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZlcnJlZCA9IGRlZmVycmVkO1xuZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gICAgdmFyIG91dFJlc29sdmUgPSBmdW5jdGlvbiBvdXRSZXNvbHZlKHQpIHt9O1xuICAgIHZhciBvdXRSZWplY3QgPSBmdW5jdGlvbiBvdXRSZWplY3QoZSkge307XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG91dFJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBvdXRSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogcHJvbWlzZSxcbiAgICAgICAgcmVzb2x2ZTogb3V0UmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0OiBvdXRSZWplY3RcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbFptVnljbVZrTG1weklsMHNJbTVoYldWeklqcGJJbVJsWm1WeWNtVmtJaXdpYjNWMFVtVnpiMngyWlNJc0luUWlMQ0p2ZFhSU1pXcGxZM1FpTENKbElpd2ljSEp2YldselpTSXNJbEJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpY21WcVpXTjBJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRSUVZGblFrRXNVU3hIUVVGQlFTeFJPMEZCUVZRc1UwRkJVMEVzVVVGQlZDeEhRVUZ2UXp0QlFVTjJReXhSUVVGSlF5eGhRVUZoTEc5Q1FVRkRReXhEUVVGRUxFVkJRVlVzUTBGQlJTeERRVUUzUWp0QlFVTkJMRkZCUVVsRExGbEJRVmtzYlVKQlFVTkRMRU5CUVVRc1JVRkJZeXhEUVVGRkxFTkJRV2hETzBGQlEwRXNVVUZCVFVNc1ZVRkJWU3hKUVVGSlF5eFBRVUZLTEVOQlFWa3NWVUZCUTBNc1QwRkJSQ3hGUVVGVlF5eE5RVUZXTEVWQlFYRkNPMEZCUXpkRFVDeHhRa0ZCWVUwc1QwRkJZanRCUVVOQlNpeHZRa0ZCV1Vzc1RVRkJXanRCUVVOSUxFdEJTR1VzUTBGQmFFSTdRVUZKUVN4WFFVRlBPMEZCUTBoSUxIZENRVVJITzBGQlJVaEZMR2xDUVVGVFRpeFZRVVpPTzBGQlIwaFBMR2RDUVVGUlREdEJRVWhNTEV0QlFWQTdRVUZMU0NJc0ltWnBiR1VpT2lKa1pXWmxjbkpsWkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSUVCbWJHOTNJQ292WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRVJsWm1WeWNtVmtQRlErSUQwZ2UxeHVJQ0FnSUhCeWIyMXBjMlU2SUZCeWIyMXBjMlU4VkQ0c1hHNGdJQ0FnY21WemIyeDJaVG9nS0hRNklGUXBJRDArSUhadmFXUXNYRzRnSUNBZ2NtVnFaV04wT2lBb1pUb2dSWEp5YjNJcElEMCtJSFp2YVdRc1hHNTlPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWkdWbVpYSnlaV1E4VkQ0b0tUb2dSR1ZtWlhKeVpXUThWRDRnZTF4dUlDQWdJR3hsZENCdmRYUlNaWE52YkhabElEMGdLSFE2SUZRcElEMCtJSHQ5TzF4dUlDQWdJR3hsZENCdmRYUlNaV3BsWTNRZ1BTQW9aVG9nUlhKeWIzSXBJRDArSUh0OU8xeHVJQ0FnSUdOdmJuTjBJSEJ5YjIxcGMyVWdQU0J1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRzkxZEZKbGMyOXNkbVVnUFNCeVpYTnZiSFpsTzF4dUlDQWdJQ0FnSUNCdmRYUlNaV3BsWTNRZ1BTQnlaV3BsWTNRN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnY0hKdmJXbHpaU3hjYmlBZ0lDQWdJQ0FnY21WemIyeDJaVG9nYjNWMFVtVnpiMngyWlN4Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wT2lCdmRYUlNaV3BsWTNRc1hHNGdJQ0FnZlR0Y2JuMWNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TdHJlYW1XaXRoRW5kaW5nID0gZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzLlF1ZXVlID0gZXhwb3J0cy5FbWl0dGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG4vLyBXZSBkaWRuJ3QgZmluZCBhbnkgU3RyZWFtIGxpYnJhcnkgdGhhdCB3b3VsZCBiZSBmbG93LXR5cGVkIGFuZCB0aGF0IHdlIGxpa2VkLlxuLy8gU28gd2UgbWFkZSBvdXIgb3duIGxpYnJhcnkgZm9yIGVtaXR0ZXJzIGFuZCBzdHJlYW1zLCB0aGF0IHdhcyBzdXBwb3NlZCB0byBiZSBzaW1wbGUuLi5cbi8vXG4vLyAuLi4gd2VsbCBpdCBnb3QgYmlnIG92ZXIgdGltZS4gU28gaGVyZSBpdCBpcy5cbi8vXG4vLyBXZSBhcmUgcHJvYmFibHkgcmVpbnZlbnRpbmcgdGhlIHdoZWVsIGhlcmUuIEJ1dCBpdCBpcyBPVVIgd2hlZWwuXG5cbnZhciBfZGVmZXJyZWQgPSByZXF1aXJlKCcuL2RlZmVycmVkJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGNvbnN0IE1BWF9MSVNURU5FUlMgPSA1MDtcbnZhciBFbWl0dGVyID0gZXhwb3J0cy5FbWl0dGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVtaXR0ZXIoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWl0dGVyKTtcblxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhFbWl0dGVyLCBbe1xuICAgICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5kZXRhY2gobGlzdGVuZXIuaGFuZGxlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBgYXR0YWNoYCBkb2Vzbid0IGFmZmVjdCBjdXJyZW50bHkgcnVubmluZyBgZW1pdGAsIHNvIGxpc3RlbmVycyBhcmUgbm90XG4gICAgICAgIC8vIG1vZGlmaWVkIGluIHBsYWNlLlxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdhdHRhY2gnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuY29uY2F0KFt7XG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBkZXRhY2hlZDogZmFsc2VcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPiBNQVhfTElTVEVORVJTKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gbWFueSBsaXN0ZW5lcnMuIE1lbW9yeSBsZWFrPycpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYGRldGFjaGAgZG9lcyBhZmZlY3QgdGhlIGBlbWl0YCBjeWNsZSwgd2UgbWFyayB0aGUgbGlzdGVuZXIgYXMgYGRldGFjaGVkYFxuICAgICAgICAvLyBzbyBpdCBjYW4gYmUgaWdub3JlZCByaWdodCBhd2F5LlxuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXRhY2gnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lci5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmRldGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdlbWl0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGlmICghbGlzdGVuZXIuZGV0YWNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuaGFuZGxlcih2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmRldGFjaChsaXN0ZW5lci5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRW1pdHRlcjtcbn0oKTtcblxudmFyIFF1ZXVlID0gZXhwb3J0cy5RdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWV1ZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1ZXVlKTtcblxuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnRha2VycyA9IFtdO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhRdWV1ZSwgW3tcbiAgICAgICAga2V5OiAncHV0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1dCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Rha2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGFrZSh0YWtlcikge1xuICAgICAgICAgICAgdGhpcy50YWtlcnMucHVzaCh0YWtlcik7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NoaWZ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IDAgJiYgdGhpcy50YWtlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBfdmFsdWUgPSB0aGlzLmJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHZhciB0YWtlciA9IHRoaXMudGFrZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgdGFrZXIoX3ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBRdWV1ZTtcbn0oKTtcblxudmFyIFN0cmVhbSA9IGZ1bmN0aW9uICgpIHtcbiAgICBfY3JlYXRlQ2xhc3MoU3RyZWFtLCBudWxsLCBbe1xuICAgICAgICBrZXk6ICdmcm9tRW1pdHRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRW1pdHRlcihlbWl0dGVyLCBkaXNwb3NlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIodCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuYXR0YWNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5kZXRhY2goaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Zyb21FbWl0dGVyRmluaXNoJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FbWl0dGVyRmluaXNoKGVtaXR0ZXIsIGZpbmlzaGVyLCBkaXNwb3NlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIodCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuYXR0YWNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGZpbmlzaGVyLmF0dGFjaChmdW5jdGlvbiAobm90aGluZywgZGV0YWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5kZXRhY2goaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmRldGFjaChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZnJvbUFycmF5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21BcnJheShhcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oZnVuY3Rpb24gKHVwZGF0ZSwgZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZnJvbVByb21pc2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oZnVuY3Rpb24gKHVwZGF0ZSwgZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmVhbV8gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZmluaXNoLmF0dGFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1fID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtXyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1fLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2VuZXJhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUoaW5pdGlhbCwgX2dlbmVyYXRlLCBjb25kaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBpdGVyYXRlID0gZnVuY3Rpb24gaXRlcmF0ZShzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBfZ2VuZXJhdGUoc3RhdGUpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9wIHRoZSBpdGVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uKHN0YXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaXRlcmF0ZShpbml0aWFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRMYXRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMYXRlcigpIHtcbiAgICAgICAgICAgIHZhciBkZiA9ICgwLCBfZGVmZXJyZWQuZGVmZXJyZWQpKCk7XG4gICAgICAgICAgICB2YXIgc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gc2V0dGVyKHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBzdHJlYW0gdHdpY2UuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZGYucmVzb2x2ZShzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgZGYucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgICAgICAgICAgICBzID0gbnM7XG4gICAgICAgICAgICAgICAgICAgIG5zLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh2KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG5zLmZpbmlzaC5hdHRhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RyZWFtOiBzdHJlYW0sIHNldHRlcjogc2V0dGVyIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NpbXBsZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaW1wbGUodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbWJpbmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tYmluZShzdHJlYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tYmluZWQgPSBuZXcgQXJyYXkoc3RyZWFtcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW1zLmZvckVhY2goZnVuY3Rpb24gKHMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcy52YWx1ZXMuYXR0YWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21iaW5lZFtpXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkLmFkZChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkLnNpemUgPj0gc3RyZWFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoY29tYmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcy5maW5pc2guYXR0YWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkLmFkZChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZC5zaXplID49IHN0cmVhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbWJpbmVGbGF0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbWJpbmVGbGF0KHN0cmVhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW1zLmZvckVhY2goZnVuY3Rpb24gKHMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcy52YWx1ZXMuYXR0YWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzLmZpbmlzaC5hdHRhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoZWQuYWRkKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkLnNpemUgPj0gc3RyZWFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZmlsdGVyTnVsbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJOdWxsKHN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oZnVuY3Rpb24gKHVwZGF0ZSwgZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmZpbmlzaC5hdHRhY2goZmluaXNoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLmRpc3Bvc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIGZ1bmN0aW9uIFN0cmVhbShjb250cm9sbGVyKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJlYW0pO1xuXG4gICAgICAgIHRoaXMudmFsdWVzID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5maW5pc2ggPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UgPSBjb250cm9sbGVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMzLnZhbHVlcy5lbWl0KHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMzLmZpbmlzaC5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTdHJlYW0sIFt7XG4gICAgICAgIGtleTogJ2F3YWl0Rmlyc3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXdhaXRGaXJzdCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBfb25GaW5pc2ggPSBmdW5jdGlvbiBvbkZpbmlzaCgpIHt9O1xuICAgICAgICAgICAgICAgIHZhciBvblZhbHVlID0gZnVuY3Rpb24gb25WYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczQudmFsdWVzLmRldGFjaChvblZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0LmZpbmlzaC5kZXRhY2goX29uRmluaXNoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfb25GaW5pc2ggPSBmdW5jdGlvbiBvbkZpbmlzaCgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnZhbHVlcy5kZXRhY2gob25WYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzNC5maW5pc2guZGV0YWNoKF9vbkZpbmlzaCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIGZpcnN0IHZhbHVlLicpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzNC52YWx1ZXMuYXR0YWNoKG9uVmFsdWUpO1xuICAgICAgICAgICAgICAgIF90aGlzNC5maW5pc2guYXR0YWNoKF9vbkZpbmlzaCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYXdhaXRGaW5pc2gnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXdhaXRGaW5pc2goKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uRmluaXNoID0gZnVuY3Rpb24gb25GaW5pc2goZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzNS5maW5pc2guZGV0YWNoKG9uRmluaXNoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX3RoaXM1LmZpbmlzaC5hdHRhY2gob25GaW5pc2gpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2F3YWl0TGFzdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhd2FpdExhc3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHZhciBvblZhbHVlID0gZnVuY3Rpb24gb25WYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBvbkZpbmlzaCA9IGZ1bmN0aW9uIG9uRmluaXNoKGZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczYudmFsdWVzLmRldGFjaChvblZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM2LmZpbmlzaC5kZXRhY2gob25GaW5pc2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIGxhc3QgdmFsdWUuJykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShsYXN0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpczYudmFsdWVzLmF0dGFjaChvblZhbHVlKTtcbiAgICAgICAgICAgICAgICBfdGhpczYuZmluaXNoLmF0dGFjaChvbkZpbmlzaCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbWFwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcChmbikge1xuICAgICAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICAgICAgICAgIF90aGlzNy52YWx1ZXMuYXR0YWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoZm4odmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfdGhpczcuZmluaXNoLmF0dGFjaChmaW5pc2gpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczcuZGlzcG9zZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm90ZTogdGhpcyBET0VTIGtlZXAgdGhlIG9yZGVyXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21hcFByb21pc2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWFwUHJvbWlzZShmbikge1xuICAgICAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKGZ1bmN0aW9uICh1cGRhdGUsIGZpbmlzaCkge1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzOC52YWx1ZXMuYXR0YWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNOb3cgPSBwcmV2aW91cztcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBmbih2YWx1ZSkudGhlbihmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNOb3cudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzOC5maW5pc2guYXR0YWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM4LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ21hcFByb21pc2VFcnJvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXBQcm9taXNlRXJyb3IoZm4pIHtcbiAgICAgICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXMgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpczkudmFsdWVzLmF0dGFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTm93ID0gcHJldmlvdXM7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzID0gZm4odmFsdWUpLnRoZW4oZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTm93LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTm93LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXM5LmZpbmlzaC5hdHRhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpczkuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZmlsdGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihmbikge1xuICAgICAgICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShmdW5jdGlvbiAodXBkYXRlLCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICBfdGhpczEwLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfdGhpczEwLmZpbmlzaC5hdHRhY2goZmluaXNoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMC5kaXNwb3NlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlZHVjZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWR1Y2UoZm4sIGluaXRpYWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBpbml0aWFsO1xuICAgICAgICAgICAgICAgIF90aGlzMTEudmFsdWVzLmF0dGFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBmbihzdGF0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzMTEuZmluaXNoLmF0dGFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbmNhdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXQob3RoZXIpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oZnVuY3Rpb24gKHVwZGF0ZSwgZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbmlzaGVkID0gMDtcbiAgICAgICAgICAgICAgICBfdGhpczEyLnZhbHVlcy5hdHRhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb3RoZXIudmFsdWVzLmF0dGFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hPbmUgPSBmdW5jdGlvbiBmaW5pc2hPbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgX3RoaXMxMi5maW5pc2guYXR0YWNoKGZpbmlzaE9uZSk7XG4gICAgICAgICAgICAgICAgb3RoZXIuZmluaXNoLmF0dGFjaChmaW5pc2hPbmUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMxMi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3RyZWFtO1xufSgpO1xuXG5leHBvcnRzLlN0cmVhbSA9IFN0cmVhbTtcblxudmFyIFN0cmVhbVdpdGhFbmRpbmcgPSBleHBvcnRzLlN0cmVhbVdpdGhFbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyZWFtV2l0aEVuZGluZygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmVhbVdpdGhFbmRpbmcpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTdHJlYW1XaXRoRW5kaW5nLCBudWxsLCBbe1xuICAgICAgICBrZXk6ICdmcm9tU3RyZWFtQW5kUHJvbWlzZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tU3RyZWFtQW5kUHJvbWlzZShzLCBlbmRpbmcpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBuZXcgU3RyZWFtV2l0aEVuZGluZygpO1xuICAgICAgICAgICAgcmVzLnN0cmVhbSA9IHM7XG5cbiAgICAgICAgICAgIHZhciBkZWYgPSAoMCwgX2RlZmVycmVkLmRlZmVycmVkKSgpO1xuICAgICAgICAgICAgcmVzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGRlZi5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcy5hd2FpdEZpbmlzaCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlZi5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVzLmVuZGluZyA9IGRlZi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmRpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gLy8gZW5kaW5nIG5ldmVyIHJlc29sdmVzIGJlZm9yZSBzdHJlYW0gZmluaXNoZXNcblxuICAgIH1dKTtcblxuICAgIHJldHVybiBTdHJlYW1XaXRoRW5kaW5nO1xufSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OMGNtVmhiUzVxY3lKZExDSnVZVzFsY3lJNld5SkZiV2wwZEdWeUlpd2liR2x6ZEdWdVpYSnpJaXdpWm05eVJXRmphQ0lzSW1SbGRHRmphQ0lzSW14cGMzUmxibVZ5SWl3aWFHRnVaR3hsY2lJc0ltTnZibU5oZENJc0ltUmxkR0ZqYUdWa0lpd2labWxzZEdWeUlpd2lkbUZzZFdVaUxDSlJkV1YxWlNJc0ltSjFabVpsY2lJc0luUmhhMlZ5Y3lJc0luQjFjMmdpTENKemFHbG1kQ0lzSW5SaGEyVnlJaXdpYkdWdVozUm9JaXdpVTNSeVpXRnRJaXdpWlcxcGRIUmxjaUlzSW1ScGMzQnZjMlVpTENKMWNHUmhkR1VpTENKbWFXNXBjMmdpTENKa2FYTndiM05sWkNJc0luUWlMQ0poZEhSaFkyZ2lMQ0ptYVc1cGMyaGxjaUlzSW01dmRHaHBibWNpTENKaGNuSmhlU0lzSW5ObGRGUnBiV1Z2ZFhRaUxDSndjbTl0YVhObElpd2ljM1J5WldGdFh5SXNJblJvWlc0aUxDSnpkSEpsWVcwaUxDSjJZV3gxWlhNaUxDSjJJaXdpYVc1cGRHbGhiQ0lzSW1kbGJtVnlZWFJsSWl3aVkyOXVaR2wwYVc5dUlpd2lhWFJsY21GMFpTSXNJbk4wWVhSbElpd2laR1lpTENKelpYUWlMQ0p6WlhSMFpYSWlMQ0p6SWl3aVJYSnliM0lpTENKeVpYTnZiSFpsSWl3aWJuTWlMQ0p6ZEhKbFlXMXpJaXdpWTI5dFltbHVaV1FpTENKQmNuSmhlU0lzSW5Wd1pHRjBaV1FpTENKVFpYUWlMQ0ptYVc1cGMyaGxaQ0lzSW1raUxDSmhaR1FpTENKemFYcGxJaXdpWTI5dWRISnZiR3hsY2lJc0ltVnRhWFFpTENKUWNtOXRhWE5sSWl3aWNtVnFaV04wSWl3aWIyNUdhVzVwYzJnaUxDSnZibFpoYkhWbElpd2liR0Z6ZEZaaGJIVmxJaXdpWm00aUxDSndjbVYyYVc5MWN5SXNJbkJ5WlhacGIzVnpUbTkzSWl3aWRTSXNJbVZ5Y205eUlpd2liM1JvWlhJaUxDSm1hVzVwYzJoUGJtVWlMQ0pUZEhKbFlXMVhhWFJvUlc1a2FXNW5JaXdpWlc1a2FXNW5JaXdpY21Weklpd2laR1ZtSWl3aVpTSXNJbUYzWVdsMFJtbHVhWE5vSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPenM3UVVGUlFUdEpRVU5oUVN4UExGZEJRVUZCTEU4N1FVRkhWQ3gxUWtGQll6dEJRVUZCT3p0QlFVTldMR0ZCUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCYWtJN1FVRkRTRHM3T3p0clEwRkZVenRCUVVGQk96dEJRVU5PTEdsQ1FVRkxRU3hUUVVGTUxFTkJRV1ZETEU5QlFXWXNRMEZCZFVJN1FVRkJRU3gxUWtGQldTeE5RVUZMUXl4TlFVRk1MRU5CUVZsRExGTkJRVk5ETEU5QlFYSkNMRU5CUVZvN1FVRkJRU3hoUVVGMlFqdEJRVU5CTEdsQ1FVRkxTaXhUUVVGTUxFZEJRV2xDTEVWQlFXcENPMEZCUTBnN08wRkJSVVE3UVVGRFFUczdPenNyUWtGRFQwa3NUeXhGUVVGeFFqdEJRVU40UWl4cFFrRkJTMG9zVTBGQlRDeEhRVUZwUWl4TFFVRkxRU3hUUVVGTUxFTkJRV1ZMTEUxQlFXWXNRMEZCYzBJc1EwRkJRenRCUVVOd1EwUXNaME5CUkc5RE8wRkJSWEJEUlN3d1FrRkJWVHRCUVVZd1FpeGhRVUZFTEVOQlFYUkNMRU5CUVdwQ08wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwZzdPMEZCUlVRN1FVRkRRVHM3T3pzclFrRkRUMFlzVHl4RlFVRnhRanRCUVVONFFpeHBRa0ZCUzBvc1UwRkJUQ3hIUVVGcFFpeExRVUZMUVN4VFFVRk1MRU5CUVdWUExFMUJRV1lzUTBGQmMwSXNWVUZCUTBvc1VVRkJSQ3hGUVVGak8wRkJRMnBFTEc5Q1FVRkpRU3hUUVVGVFF5eFBRVUZVTEV0QlFYRkNRU3hQUVVGNlFpeEZRVUZyUXp0QlFVTTVRa1FzTmtKQlFWTkhMRkZCUVZRc1IwRkJiMElzU1VGQmNFSTdRVUZEUVN3eVFrRkJUeXhMUVVGUU8wRkJRMGdzYVVKQlNFUXNUVUZIVHp0QlFVTklMREpDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTEdGQlVHZENMRU5CUVdwQ08wRkJVVWc3T3pzMlFrRkZTVVVzU3l4RlFVRlZPMEZCUVVFN08wRkJRMWdzYVVKQlFVdFNMRk5CUVV3c1EwRkJaVU1zVDBGQlppeERRVUYxUWl4VlFVRkRSU3hSUVVGRUxFVkJRV003UVVGRGFrTXNiMEpCUVVrc1EwRkJRMEVzVTBGQlUwY3NVVUZCWkN4RlFVRjNRanRCUVVOd1FrZ3NOa0pCUVZORExFOUJRVlFzUTBGQmFVSkpMRXRCUVdwQ0xFVkJRWGRDTEZsQlFVMDdRVUZETVVJc0swSkJRVXRPTEUxQlFVd3NRMEZCV1VNc1UwRkJVME1zVDBGQmNrSTdRVUZEU0N4eFFrRkdSRHRCUVVkSU8wRkJRMG9zWVVGT1JEdEJRVTlJT3pzN096czdTVUZMVVVzc1N5eFhRVUZCUVN4TE8wRkJTVlFzY1VKQlFXTTdRVUZCUVRzN1FVRkRWaXhoUVVGTFF5eE5RVUZNTEVkQlFXTXNSVUZCWkR0QlFVTkJMR0ZCUVV0RExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwZzdPenM3TkVKQlJVZElMRXNzUlVGQlZUdEJRVU5XTEdsQ1FVRkxSU3hOUVVGTUxFTkJRVmxGTEVsQlFWb3NRMEZCYVVKS0xFdEJRV3BDTzBGQlEwRXNhVUpCUVV0TExFdEJRVXc3UVVGRFNEczdPelpDUVVWSlF5eExMRVZCUVdsQ08wRkJRMnhDTEdsQ1FVRkxTQ3hOUVVGTUxFTkJRVmxETEVsQlFWb3NRMEZCYVVKRkxFdEJRV3BDTzBGQlEwRXNhVUpCUVV0RUxFdEJRVXc3UVVGRFNEczdPMmREUVVWUE8wRkJRMG9zWjBKQlFVa3NTMEZCUzBnc1RVRkJUQ3hEUVVGWlN5eE5RVUZhTEVkQlFYRkNMRU5CUVhKQ0xFbEJRVEJDTEV0QlFVdEtMRTFCUVV3c1EwRkJXVWtzVFVGQldpeEhRVUZ4UWl4RFFVRnVSQ3hGUVVGelJEdEJRVU5zUkN4dlFrRkJUVkFzVTBGQlVTeExRVUZMUlN4TlFVRk1MRU5CUVZsSExFdEJRVm9zUlVGQlpEdEJRVU5CTEc5Q1FVRk5ReXhSUVVGUkxFdEJRVXRJTEUxQlFVd3NRMEZCV1VVc1MwRkJXaXhGUVVGa08wRkJRMEZETEhOQ1FVRk5UaXhOUVVGT08wRkJRMGc3UVVGRFNqczdPenM3TzBsQlVWRlJMRTA3T3p0dlEwRk5URU1zVHl4RlFVTkJReXhQTEVWQlExTTdRVUZEVkN4dFFrRkJUeXhKUVVGSlJpeE5RVUZLTEVOQlFWY3NWVUZCUTBjc1RVRkJSQ3hGUVVGVFF5eE5RVUZVTEVWQlFXOUNPMEZCUTJ4RExHOUNRVUZKUXl4WFFVRlhMRXRCUVdZN1FVRkRRU3h2UWtGQlRXcENMRlZCUVZVc1UwRkJWa0VzVDBGQlZTeERRVUZEYTBJc1EwRkJSQ3hGUVVGUE8wRkJRMjVDTEhkQ1FVRkpMRU5CUVVORUxGRkJRVXdzUlVGQlpUdEJRVU5ZUml3clFrRkJUMGNzUTBGQlVEdEJRVU5JTzBGQlEwb3NhVUpCU2tRN1FVRkxRVXdzZDBKQlFWRk5MRTFCUVZJc1EwRkJaVzVDTEU5QlFXWTdRVUZEUVN4MVFrRkJUeXhaUVVGTk8wRkJRMVJwUWl3clFrRkJWeXhKUVVGWU8wRkJRMEZLTERSQ1FVRlJaaXhOUVVGU0xFTkJRV1ZGTEU5QlFXWTdRVUZEUVdNN1FVRkRTQ3hwUWtGS1JEdEJRVXRJTEdGQllrMHNRMEZCVUR0QlFXTklPenM3TUVOQlIwZEVMRThzUlVGRFFVOHNVU3hGUVVOQlRpeFBMRVZCUTFNN1FVRkRWQ3h0UWtGQlR5eEpRVUZKUml4TlFVRktMRU5CUVZjc1ZVRkJRMGNzVFVGQlJDeEZRVUZUUXl4TlFVRlVMRVZCUVc5Q08wRkJRMnhETEc5Q1FVRkpReXhYUVVGWExFdEJRV1k3UVVGRFFTeHZRa0ZCVFdwQ0xGVkJRVlVzVTBGQlZrRXNUMEZCVlN4RFFVRkRhMElzUTBGQlJDeEZRVUZQTzBGQlEyNUNMSGRDUVVGSkxFTkJRVU5FTEZGQlFVd3NSVUZCWlR0QlFVTllSaXdyUWtGQlQwY3NRMEZCVUR0QlFVTklPMEZCUTBvc2FVSkJTa1E3UVVGTFFVd3NkMEpCUVZGTkxFMUJRVklzUTBGQlpXNUNMRTlCUVdZN1FVRkRRVzlDTEhsQ1FVRlRSQ3hOUVVGVUxFTkJRV2RDTEZWQlFVTkZMRTlCUVVRc1JVRkJWWFpDTEUxQlFWWXNSVUZCY1VJN1FVRkRha05yUWp0QlFVTkJiRUk3UVVGRFFXVXNORUpCUVZGbUxFMUJRVklzUTBGQlpVVXNUMEZCWmp0QlFVTklMR2xDUVVwRU8wRkJTMEVzZFVKQlFVOHNXVUZCVFR0QlFVTlVhVUlzSzBKQlFWY3NTVUZCV0R0QlFVTkJTaXcwUWtGQlVXWXNUVUZCVWl4RFFVRmxSU3hQUVVGbU8wRkJRMEZqTzBGQlEwZ3NhVUpCU2tRN1FVRkxTQ3hoUVd4Q1RTeERRVUZRTzBGQmJVSklPenM3YTBOQlIwZFJMRXNzUlVGRFV6dEJRVU5VTEcxQ1FVRlBMRWxCUVVsV0xFMUJRVW9zUTBGQlZ5eFZRVUZEUnl4TlFVRkVMRVZCUVZORExFMUJRVlFzUlVGQmIwSTdRVUZEYkVNc2IwSkJRVWxETEZkQlFWY3NTMEZCWmp0QlFVTkJUU3d5UWtGQlZ5eFpRVUZOTzBGQlEySXNkMEpCUVVrc1EwRkJRMDRzVVVGQlRDeEZRVUZsTzBGQlExaExMRGhDUVVGTmVrSXNUMEZCVGl4RFFVRmpMR0ZCUVVzN1FVRkRabXRDTEcxRFFVRlBSeXhEUVVGUU8wRkJRMGdzZVVKQlJrUTdRVUZIUVVZN1FVRkRTRHRCUVVOS0xHbENRVkJFTEVWQlQwY3NRMEZRU0R0QlFWRkJMSFZDUVVGUExGbEJRVTA3UVVGRFZFTXNLMEpCUVZjc1NVRkJXRHRCUVVOSUxHbENRVVpFTzBGQlIwZ3NZVUZpVFN4RFFVRlFPMEZCWTBnN096dHZRMEZIUjA4c1R5eEZRVU5UTzBGQlExUXNiVUpCUVU4c1NVRkJTVm9zVFVGQlNpeERRVUZYTEZWQlFVTkhMRTFCUVVRc1JVRkJVME1zVFVGQlZDeEZRVUZ2UWp0QlFVTnNReXh2UWtGQlNWTXNaMEpCUVVvN1FVRkRRU3h2UWtGQlNWSXNWMEZCVnl4TFFVRm1PMEZCUTBGUExIZENRVUZSUlN4SlFVRlNMRU5CUVdFc2EwSkJRVlU3UVVGRGJrSXNkMEpCUVVrc1EwRkJRMVFzVVVGQlRDeEZRVUZsTzBGQlExaFZMQ3RDUVVGUFF5eE5RVUZRTEVOQlFXTlVMRTFCUVdRc1EwRkJjVUk3UVVGQlFTeHRRMEZCUzBvc1QwRkJUMk1zUTBGQlVDeERRVUZNTzBGQlFVRXNlVUpCUVhKQ08wRkJRMEZHTEN0Q1FVRlBXQ3hOUVVGUUxFTkJRV05ITEUxQlFXUXNRMEZCY1VJN1FVRkJRU3h0UTBGQlRVZ3NVVUZCVGp0QlFVRkJMSGxDUVVGeVFqdEJRVU5CVXl4clEwRkJWVVVzVFVGQlZqdEJRVU5JTzBGQlEwb3NhVUpCVGtRc1JVRk5SeXhaUVVGTk8wRkJRMHhLTEN0Q1FVTkZPMEZCUVVFc0swSkJRVTFRTEZGQlFVNDdRVUZCUVN4eFFrRkVSaXhGUVVOclFpeERRVVJzUWp0QlFVZElMR2xDUVZaRU8wRkJWMEVzZFVKQlFVOHNXVUZCVFR0QlFVTlVReXdyUWtGQlZ5eEpRVUZZTzBGQlEwRXNkMEpCUVVsUkxGZEJRVmNzU1VGQlppeEZRVUZ4UWp0QlFVTnFRa0VzWjBOQlFWRllMRTlCUVZJN1FVRkRTRHRCUVVOS0xHbENRVXhFTzBGQlRVZ3NZVUZ3UWswc1EwRkJVRHRCUVhGQ1NEczdPMmxEUVVkSFowSXNUeXhGUVVOQlF5eFRMRVZCUTBGRExGTXNSVUZEVXp0QlFVTlVMRzFDUVVGUExFbEJRVWx3UWl4TlFVRktMRU5CUVZjc1ZVRkJRMGNzVFVGQlJDeEZRVUZUUXl4TlFVRlVMRVZCUVc5Q08wRkJRMnhETEc5Q1FVRkpReXhYUVVGWExFdEJRV1k3UVVGRFFTeHZRa0ZCVFdkQ0xGVkJRVlVzVTBGQlZrRXNUMEZCVlN4RFFVRkRReXhMUVVGRUxFVkJRVmM3UVVGRGRrSklMRGhDUVVGVFJ5eExRVUZVTEVWQlFXZENVaXhKUVVGb1FpeERRVUZ4UWl4VlFVRkRVU3hMUVVGRUxFVkJRVmM3UVVGRE5VSXNORUpCUVVscVFpeFJRVUZLTEVWQlFXTTdRVUZEVmp0QlFVTklMSGxDUVVaRUxFMUJSVTg3UVVGRFNFWXNiVU5CUVU5dFFpeExRVUZRTzBGQlEwRXNaME5CUVVsR0xGVkJRVlZGTEV0QlFWWXNRMEZCU2l4RlFVRnpRanRCUVVOc1FrUXNkME5CUVZGRExFdEJRVkk3UVVGRFNDdzJRa0ZHUkN4TlFVVlBPMEZCUTBoc1FqdEJRVU5JTzBGQlEwbzdRVUZEU2l4eFFrRllSRHRCUVZsSUxHbENRV0pFTzBGQlkwRnBRaXgzUWtGQlVVZ3NUMEZCVWp0QlFVTkJMSFZDUVVGUExGbEJRVTA3UVVGQlJXSXNLMEpCUVZjc1NVRkJXRHRCUVVGclFpeHBRa0ZCYWtNN1FVRkRTQ3hoUVd4Q1RTeERRVUZRTzBGQmJVSklPenM3YlVOQlMwTTdRVUZEUlN4blFrRkJUV3RDTEV0QlFVc3NlVUpCUVZnN1FVRkRRU3huUWtGQlNVTXNUVUZCVFN4TFFVRldPMEZCUTBFc1owSkJRVTFETEZOQlFWTXNVMEZCVkVFc1RVRkJVeXhEUVVGRFF5eERRVUZFTEVWQlFXdENPMEZCUXpkQ0xHOUNRVUZKUml4SFFVRktMRVZCUVZNN1FVRkRUQ3d3UWtGQlRTeEpRVUZKUnl4TFFVRktMRU5CUVZVc2RVSkJRVllzUTBGQlRqdEJRVU5JTzBGQlEwUklMSE5DUVVGTkxFbEJRVTQ3UVVGRFFVUXNiVUpCUVVkTExFOUJRVWdzUTBGQlYwWXNRMEZCV0R0QlFVTklMR0ZCVGtRN1FVRlBRU3huUWtGQlRWZ3NVMEZCVXl4SlFVRkpaaXhOUVVGS0xFTkJRVmNzVlVGQlEwY3NUVUZCUkN4RlFVRlRReXhOUVVGVUxFVkJRVzlDTzBGQlF6RkRMRzlDUVVGSmMwSXNTVUZCWjBJc1NVRkJjRUk3UVVGRFFVZ3NiVUpCUVVkWUxFOUJRVWdzUTBGQlYwVXNTVUZCV0N4RFFVRm5RaXhqUVVGTk8wRkJRMnhDV1N4M1FrRkJTVWNzUlVGQlNqdEJRVU5CUVN4MVFrRkJSMklzVFVGQlNDeERRVUZWVkN4TlFVRldMRU5CUVdsQ0xGVkJRVU5WTEVOQlFVUXNSVUZCVHp0QlFVTndRbVFzSzBKQlFVOWpMRU5CUVZBN1FVRkRTQ3h4UWtGR1JEdEJRVWRCV1N4MVFrRkJSM3BDTEUxQlFVZ3NRMEZCVlVjc1RVRkJWaXhEUVVGcFFpeFpRVUZOTzBGQlEyNUNTRHRCUVVOSUxIRkNRVVpFTzBGQlIwZ3NhVUpCVWtRN1FVRlRRU3gxUWtGQlR5eFpRVUZOTzBGQlExUXNkMEpCUVVselFpeExRVUZMTEVsQlFWUXNSVUZCWlR0QlFVTllRU3d3UWtGQlJYaENMRTlCUVVZN1FVRkRTRHRCUVVOS0xHbENRVXBFTzBGQlMwZ3NZVUZvUW1Nc1EwRkJaanRCUVdsQ1FTeHRRa0ZCVHl4RlFVRkRZU3hqUVVGRUxFVkJRVk5WTEdOQlFWUXNSVUZCVUR0QlFVTklPenM3SzBKQlJXZENha01zU3l4RlFVRnhRanRCUVVOc1F5eHRRa0ZCVHl4SlFVRkpVU3hOUVVGS0xFTkJRVmNzVlVGQlEwY3NUVUZCUkN4RlFVRlRReXhOUVVGVUxFVkJRVzlDTzBGQlEyeERMRzlDUVVGSlF5eFhRVUZYTEV0QlFXWTdRVUZEUVUwc01rSkJRVmNzV1VGQlRUdEJRVU5pTEhkQ1FVRkpMRU5CUVVOT0xGRkJRVXdzUlVGQlpUdEJRVU5ZUml3clFrRkJUMWdzUzBGQlVEdEJRVU5CYlVJc2JVTkJRVmNzV1VGQlRUdEJRVU5pTEdkRFFVRkpMRU5CUVVOT0xGRkJRVXdzUlVGQlpUdEJRVU5ZUkR0QlFVTklPMEZCUTBvc2VVSkJTa1FzUlVGSlJ5eERRVXBJTzBGQlMwZzdRVUZEU2l4cFFrRlVSQ3hGUVZOSExFTkJWRWc3UVVGVlFTeDFRa0ZCVHl4WlFVRk5PMEZCUTFSRExDdENRVUZYTEVsQlFWZzdRVUZEU0N4cFFrRkdSRHRCUVVkSUxHRkJaazBzUTBGQlVEdEJRV2RDU0RzN08yZERRVVZwUW5sQ0xFOHNSVUZCTmtNN1FVRkRNMFFzYlVKQlFVOHNTVUZCU1RsQ0xFMUJRVW9zUTBGQlZ5eFZRVUZEUnl4TlFVRkVMRVZCUVZORExFMUJRVlFzUlVGQmIwSTdRVUZEYkVNc2IwSkJRVTB5UWl4WFFVRlhMRWxCUVVsRExFdEJRVW9zUTBGQlZVWXNVVUZCVVM5Q0xFMUJRV3hDTEVOQlFXcENPMEZCUTBFc2IwSkJRVTFyUXl4VlFVRlZMRWxCUVVsRExFZEJRVW9zUlVGQmFFSTdRVUZEUVN4dlFrRkJUVU1zVjBGQlZ5eEpRVUZKUkN4SFFVRktMRVZCUVdwQ08wRkJRMEZLTEhkQ1FVRlJOME1zVDBGQlVpeERRVUZuUWl4VlFVRkRlVU1zUTBGQlJDeEZRVUZKVlN4RFFVRktMRVZCUVZVN1FVRkRkRUpXTEhOQ1FVRkZWaXhOUVVGR0xFTkJRVk5VTEUxQlFWUXNRMEZCWjBJc1ZVRkJRMVVzUTBGQlJDeEZRVUZQTzBGQlEyNUNZeXhwUTBGQlUwc3NRMEZCVkN4SlFVRmpia0lzUTBGQlpEdEJRVU5CWjBJc1owTkJRVkZKTEVkQlFWSXNRMEZCV1VRc1EwRkJXanRCUVVOQkxEUkNRVUZKU0N4UlFVRlJTeXhKUVVGU0xFbEJRV2RDVWl4UlFVRlJMMElzVFVGQk5VSXNSVUZCYjBNN1FVRkRhRU5KTEcxRFFVRlBORUlzVVVGQlVEdEJRVU5JTzBGQlEwb3NjVUpCVGtRN1FVRlBRVXdzYzBKQlFVVjBRaXhOUVVGR0xFTkJRVk5ITEUxQlFWUXNRMEZCWjBJc1dVRkJUVHRCUVVOc1FqUkNMR2xEUVVGVFJTeEhRVUZVTEVOQlFXRkVMRU5CUVdJN1FVRkRRU3cwUWtGQlNVUXNVMEZCVTBjc1NVRkJWQ3hKUVVGcFFsSXNVVUZCVVM5Q0xFMUJRVGRDTEVWQlFYRkRPMEZCUTJwRFN6dEJRVU5JTzBGQlEwb3NjVUpCVEVRN1FVRk5TQ3hwUWtGa1JEdEJRV1ZCTEhWQ1FVRlBMRmxCUVUwN1FVRkRWREJDTERSQ1FVRlJOME1zVDBGQlVpeERRVUZuUWl4VlFVRkRlVU1zUTBGQlJEdEJRVUZCTEN0Q1FVRlBRU3hGUVVGRmVFSXNUMEZCUml4RlFVRlFPMEZCUVVFc2NVSkJRV2hDTzBGQlEwZ3NhVUpCUmtRN1FVRkhTQ3hoUVhSQ1RTeERRVUZRTzBGQmRVSklPenM3YjBOQlJYRkNORUlzVHl4RlFVRnpRenRCUVVONFJDeHRRa0ZCVHl4SlFVRkpPVUlzVFVGQlNpeERRVUZYTEZWQlFVTkhMRTFCUVVRc1JVRkJVME1zVFVGQlZDeEZRVUZ2UWp0QlFVTnNReXh2UWtGQlRTdENMRmRCUVZjc1NVRkJTVVFzUjBGQlNpeEZRVUZxUWp0QlFVTkJTaXgzUWtGQlVUZERMRTlCUVZJc1EwRkJaMElzVlVGQlEzbERMRU5CUVVRc1JVRkJTVlVzUTBGQlNpeEZRVUZWTzBGQlEzUkNWaXh6UWtGQlJWWXNUVUZCUml4RFFVRlRWQ3hOUVVGVUxFTkJRV2RDTEZWQlFVTlZMRU5CUVVRc1JVRkJUenRCUVVOdVFtUXNLMEpCUVU5akxFTkJRVkE3UVVGRFNDeHhRa0ZHUkR0QlFVZEJVeXh6UWtGQlJYUkNMRTFCUVVZc1EwRkJVMGNzVFVGQlZDeERRVUZuUWl4WlFVRk5PMEZCUTJ4Q05FSXNhVU5CUVZORkxFZEJRVlFzUTBGQllVUXNRMEZCWWp0QlFVTkJMRFJDUVVGSlJDeFRRVUZUUnl4SlFVRlVMRWxCUVdsQ1VpeFJRVUZSTDBJc1RVRkJOMElzUlVGQmNVTTdRVUZEYWtOTE8wRkJRMGc3UVVGRFNpeHhRa0ZNUkR0QlFVMUlMR2xDUVZaRU8wRkJWMEVzZFVKQlFVOHNXVUZCVFR0QlFVTlVNRUlzTkVKQlFWRTNReXhQUVVGU0xFTkJRV2RDTEZWQlFVTjVReXhEUVVGRU8wRkJRVUVzSzBKQlFVOUJMRVZCUVVWNFFpeFBRVUZHTEVWQlFWQTdRVUZCUVN4eFFrRkJhRUk3UVVGRFNDeHBRa0ZHUkR0QlFVZElMR0ZCYUVKTkxFTkJRVkE3UVVGcFFrZzdPenR0UTBGSFIyRXNUU3hGUVVOVE8wRkJRMVFzYlVKQlFVOHNTVUZCU1dZc1RVRkJTaXhEUVVGWExGVkJRVU5ITEUxQlFVUXNSVUZCVTBNc1RVRkJWQ3hGUVVGdlFqdEJRVU5zUTFjc2RVSkJRVTlETEUxQlFWQXNRMEZCWTFRc1RVRkJaQ3hEUVVGeFFpeFZRVUZEWml4TFFVRkVMRVZCUVZjN1FVRkROVUlzZDBKQlFVbEJMRk5CUVZNc1NVRkJZaXhGUVVGdFFqdEJRVU5tVnl3clFrRkJUMWdzUzBGQlVEdEJRVU5JTzBGQlEwb3NhVUpCU2tRN1FVRkxRWFZDTEhWQ1FVRlBXQ3hOUVVGUUxFTkJRV05ITEUxQlFXUXNRMEZCY1VKSUxFMUJRWEpDTzBGQlEwRXNkVUpCUVU5WExFOUJRVTlpTEU5QlFXUTdRVUZEU0N4aFFWSk5MRU5CUVZBN1FVRlRTRHM3TzBGQlJVUXNiMEpCUVZseFF5eFZRVUZhTEVWQlFYVkRPMEZCUVVFN08wRkJRVUU3TzBGQlEyNURMR0ZCUVV0MlFpeE5RVUZNTEVkQlFXTXNTVUZCU1dwRExFOUJRVW9zUlVGQlpEdEJRVU5CTEdGQlFVdHhRaXhOUVVGTUxFZEJRV01zU1VGQlNYSkNMRTlCUVVvc1JVRkJaRHRCUVVOQkxHRkJRVXR0UWl4UFFVRk1MRWRCUVdWeFF5eFhRVU5ZTEZWQlFVTXZReXhMUVVGRUxFVkJRVmM3UVVGQlJTeHRRa0ZCUzNkQ0xFMUJRVXdzUTBGQldYZENMRWxCUVZvc1EwRkJhVUpvUkN4TFFVRnFRanRCUVVFd1FpeFRRVVExUWl4RlFVVllMRmxCUVUwN1FVRkJSU3h0UWtGQlMxa3NUVUZCVEN4RFFVRlpiME1zU1VGQldqdEJRVUZ4UWl4VFFVWnNRaXhEUVVGbU8wRkJTVWc3T3pzN2NVTkJSWGRDTzBGQlFVRTdPMEZCUTNKQ0xHMUNRVUZQTEVsQlFVbERMRTlCUVVvc1EwRkJXU3hWUVVGRFlpeFBRVUZFTEVWQlFWVmpMRTFCUVZZc1JVRkJjVUk3UVVGRGNFTXNiMEpCUVVsRExGbEJRVmNzYjBKQlFVMHNRMEZCUlN4RFFVRjJRanRCUVVOQkxHOUNRVUZOUXl4VlFVRlZMRk5CUVZaQkxFOUJRVlVzUTBGQlEzQkVMRXRCUVVRc1JVRkJWenRCUVVOMlFpd3lRa0ZCUzNkQ0xFMUJRVXdzUTBGQldUbENMRTFCUVZvc1EwRkJiVUl3UkN4UFFVRnVRanRCUVVOQkxESkNRVUZMZUVNc1RVRkJUQ3hEUVVGWmJFSXNUVUZCV2l4RFFVRnRRbmxFTEZOQlFXNUNPMEZCUTBGbUxEUkNRVUZSY0VNc1MwRkJVanRCUVVOSUxHbENRVXBFTzBGQlMwRnRSQ3cwUWtGQlZ5eHZRa0ZCVFR0QlFVTmlMREpDUVVGTE0wSXNUVUZCVEN4RFFVRlpPVUlzVFVGQldpeERRVUZ0UWpCRUxFOUJRVzVDTzBGQlEwRXNNa0pCUVV0NFF5eE5RVUZNTEVOQlFWbHNRaXhOUVVGYUxFTkJRVzFDZVVRc1UwRkJia0k3UVVGRFFVUXNNa0pCUVU4c1NVRkJTV1lzUzBGQlNpeERRVUZWTEdsQ1FVRldMRU5CUVZBN1FVRkRTQ3hwUWtGS1JEdEJRVXRCTEhWQ1FVRkxXQ3hOUVVGTUxFTkJRVmxVTEUxQlFWb3NRMEZCYlVKeFF5eFBRVUZ1UWp0QlFVTkJMSFZDUVVGTGVFTXNUVUZCVEN4RFFVRlpSeXhOUVVGYUxFTkJRVzFDYjBNc1UwRkJia0k3UVVGRFNDeGhRV1JOTEVOQlFWQTdRVUZsU0RzN08zTkRRVVUwUWp0QlFVRkJPenRCUVVONlFpeHRRa0ZCVHl4SlFVRkpSaXhQUVVGS0xFTkJRVmtzVlVGQlEySXNUMEZCUkN4RlFVRmhPMEZCUXpWQ0xHOUNRVUZOWlN4WFFVRlhMRk5CUVZoQkxGRkJRVmNzUTBGQlEzWkRMRTFCUVVRc1JVRkJXVHRCUVVONlFpd3lRa0ZCUzBFc1RVRkJUQ3hEUVVGWmJFSXNUVUZCV2l4RFFVRnRRbmxFTEZGQlFXNUNPMEZCUTBGbU8wRkJRMGdzYVVKQlNFUTdRVUZKUVN4MVFrRkJTM2hDTEUxQlFVd3NRMEZCV1Vjc1RVRkJXaXhEUVVGdFFtOURMRkZCUVc1Q08wRkJRMGdzWVVGT1RTeERRVUZRTzBGQlQwZzdPenR2UTBGRmRVSTdRVUZCUVRzN1FVRkRjRUlzYlVKQlFVOHNTVUZCU1VZc1QwRkJTaXhEUVVGWkxGVkJRVU5pTEU5QlFVUXNSVUZCVldNc1RVRkJWaXhGUVVGeFFqdEJRVU53UXl4dlFrRkJTVWNzYTBKQlFVbzdRVUZEUVN4dlFrRkJUVVFzVlVGQlZTeFRRVUZXUVN4UFFVRlZMRU5CUVVOd1JDeExRVUZFTEVWQlFWYzdRVUZCUlhGRUxHZERRVUZaY2tRc1MwRkJXanRCUVVGdlFpeHBRa0ZCYWtRN1FVRkRRU3h2UWtGQlRXMUVMRmRCUVZjc1UwRkJXRUVzVVVGQlZ5eERRVUZEZGtNc1RVRkJSQ3hGUVVGWk8wRkJRM3BDTERKQ1FVRkxXU3hOUVVGTUxFTkJRVms1UWl4TlFVRmFMRU5CUVcxQ01FUXNUMEZCYmtJN1FVRkRRU3d5UWtGQlMzaERMRTFCUVV3c1EwRkJXV3hDTEUxQlFWb3NRMEZCYlVKNVJDeFJRVUZ1UWp0QlFVTkJMSGRDUVVGSlJTeGhRVUZoTEVsQlFXcENMRVZCUVhWQ08wRkJRMjVDU0N3clFrRkJUeXhKUVVGSlppeExRVUZLTEVOQlFWVXNaMEpCUVZZc1EwRkJVRHRCUVVOSUxIRkNRVVpFTEUxQlJVODdRVUZEU0VNc1owTkJRVkZwUWl4VFFVRlNPMEZCUTBnN1FVRkRTaXhwUWtGU1JEdEJRVk5CTEhWQ1FVRkxOMElzVFVGQlRDeERRVUZaVkN4TlFVRmFMRU5CUVcxQ2NVTXNUMEZCYmtJN1FVRkRRU3gxUWtGQlMzaERMRTFCUVV3c1EwRkJXVWNzVFVGQldpeERRVUZ0UW05RExGRkJRVzVDTzBGQlEwZ3NZVUZrVFN4RFFVRlFPMEZCWlVnN096czBRa0ZGVFVjc1JTeEZRVUZuUXp0QlFVRkJPenRCUVVOdVF5eHRRa0ZCVHl4SlFVRkpPVU1zVFVGQlNpeERRVUZYTEZWQlFVTkhMRTFCUVVRc1JVRkJVME1zVFVGQlZDeEZRVUZ2UWp0QlFVTnNReXgxUWtGQlMxa3NUVUZCVEN4RFFVRlpWQ3hOUVVGYUxFTkJRVzFDTEZWQlFVTm1MRXRCUVVRc1JVRkJWenRCUVVGRlZ5d3lRa0ZCVHpKRExFZEJRVWQwUkN4TFFVRklMRU5CUVZBN1FVRkJiMElzYVVKQlFYQkVPMEZCUTBFc2RVSkJRVXRaTEUxQlFVd3NRMEZCV1Vjc1RVRkJXaXhEUVVGdFFrZ3NUVUZCYmtJN1FVRkRRU3gxUWtGQlR5eFBRVUZMUml4UFFVRmFPMEZCUTBnc1lVRktUU3hEUVVGUU8wRkJTMGc3TzBGQlJVUTdPenM3YlVOQlEyTTBReXhGTEVWQlFYbERPMEZCUVVFN08wRkJRMjVFTEcxQ1FVRlBMRWxCUVVrNVF5eE5RVUZLTEVOQlFWY3NWVUZCUTBjc1RVRkJSQ3hGUVVGVFF5eE5RVUZVTEVWQlFXOUNPMEZCUTJ4RExHOUNRVUZKTWtNc1YwRkJlVUpPTEZGQlFWRmlMRTlCUVZJc1JVRkJOMEk3UVVGRFFTeHZRa0ZCU1haQ0xGZEJRVmNzUzBGQlpqdEJRVU5CTEhWQ1FVRkxWeXhOUVVGTUxFTkJRVmxVTEUxQlFWb3NRMEZCYlVJc1ZVRkJRMllzUzBGQlJDeEZRVUZYTzBGQlF6RkNMSGRDUVVGTmQwUXNZMEZCWTBRc1VVRkJjRUk3UVVGRFFVRXNLMEpCUVZkRUxFZEJRVWQwUkN4TFFVRklMRVZCUVZWelFpeEpRVUZXTEVOQlFXVXNZVUZCU3p0QlFVTXpRbXRETEc5RFFVRlpiRU1zU1VGQldpeERRVUZwUWl4WlFVRk5PMEZCUTI1Q0xHZERRVUZKTEVOQlFVTlVMRkZCUVV3c1JVRkJaVHRCUVVOWVJpeDFRMEZCVHpoRExFTkJRVkE3UVVGRFNEdEJRVU5LTEhsQ1FVcEVPMEZCUzBnc2NVSkJUbFVzUTBGQldEdEJRVTlJTEdsQ1FWUkVPMEZCVlVFc2RVSkJRVXMzUXl4TlFVRk1MRU5CUVZsSExFMUJRVm9zUTBGQmJVSXNXVUZCVFR0QlFVTnlRbmRETERaQ1FVRlRha01zU1VGQlZDeERRVUZqTzBGQlFVRXNLMEpCUVUxV0xGRkJRVTQ3UVVGQlFTeHhRa0ZCWkR0QlFVTklMR2xDUVVaRU8wRkJSMEVzZFVKQlFVOHNXVUZCVFR0QlFVTlVReXdyUWtGQlZ5eEpRVUZZTzBGQlEwRXNNa0pCUVV0SUxFOUJRVXc3UVVGRFNDeHBRa0ZJUkR0QlFVbElMR0ZCY0VKTkxFTkJRVkE3UVVGeFFrZzdPenQzUTBGRmEwSTBReXhGTEVWQlFXbEVPMEZCUVVFN08wRkJRMmhGTEcxQ1FVRlBMRWxCUVVrNVF5eE5RVUZLTEVOQlFWY3NWVUZCUTBjc1RVRkJSQ3hGUVVGVFF5eE5RVUZVTEVWQlFXOUNPMEZCUTJ4RExHOUNRVUZKTWtNc1YwRkJlVUpPTEZGQlFWRmlMRTlCUVZJc1JVRkJOMEk3UVVGRFFTeHZRa0ZCU1haQ0xGZEJRVmNzUzBGQlpqdEJRVU5CTEhWQ1FVRkxWeXhOUVVGTUxFTkJRVmxVTEUxQlFWb3NRMEZCYlVJc1ZVRkJRMllzUzBGQlJDeEZRVUZYTzBGQlF6RkNMSGRDUVVGTmQwUXNZMEZCWTBRc1VVRkJjRUk3UVVGRFFVRXNLMEpCUVZkRUxFZEJRVWQwUkN4TFFVRklMRVZCUVZWelFpeEpRVUZXTEVOQlFXVXNZVUZCU3p0QlFVTXpRbXRETEc5RFFVRlpiRU1zU1VGQldpeERRVUZwUWl4WlFVRk5PMEZCUTI1Q0xHZERRVUZKTEVOQlFVTlVMRkZCUVV3c1JVRkJaVHRCUVVOWVJpeDFRMEZCVHpoRExFTkJRVkE3UVVGRFNEdEJRVU5LTEhsQ1FVcEVPMEZCUzBnc2NVSkJUbFVzUlVGTlVpeHBRa0ZCVXp0QlFVTlNSQ3h2UTBGQldXeERMRWxCUVZvc1EwRkJhVUlzV1VGQlRUdEJRVU51UWl4blEwRkJTU3hEUVVGRFZDeFJRVUZNTEVWQlFXVTdRVUZEV0VZc2RVTkJRVThyUXl4TFFVRlFPMEZCUTBnN1FVRkRTaXg1UWtGS1JEdEJRVXRJTEhGQ1FWcFZMRU5CUVZnN1FVRmhTQ3hwUWtGbVJEdEJRV2RDUVN4MVFrRkJTemxETEUxQlFVd3NRMEZCV1Vjc1RVRkJXaXhEUVVGdFFpeFpRVUZOTzBGQlEzSkNkME1zTmtKQlFWTnFReXhKUVVGVUxFTkJRV003UVVGQlFTd3JRa0ZCVFZZc1VVRkJUanRCUVVGQkxIRkNRVUZrTzBGQlEwZ3NhVUpCUmtRN1FVRkhRU3gxUWtGQlR5eFpRVUZOTzBGQlExUkRMQ3RDUVVGWExFbEJRVmc3UVVGRFFTd3lRa0ZCUzBnc1QwRkJURHRCUVVOSUxHbENRVWhFTzBGQlNVZ3NZVUV4UWswc1EwRkJVRHRCUVRKQ1NEczdPeXRDUVVWTk5FTXNSU3hGUVVGelF6dEJRVUZCT3p0QlFVTjZReXh0UWtGQlR5eEpRVUZKT1VNc1RVRkJTaXhEUVVGWExGVkJRVU5ITEUxQlFVUXNSVUZCVTBNc1RVRkJWQ3hGUVVGdlFqdEJRVU5zUXl4M1FrRkJTMWtzVFVGQlRDeERRVUZaVkN4TlFVRmFMRU5CUVcxQ0xGVkJRVU5tTEV0QlFVUXNSVUZCVnp0QlFVTXhRaXgzUWtGQlNYTkVMRWRCUVVkMFJDeExRVUZJTEVOQlFVb3NSVUZCWlR0QlFVTllWeXdyUWtGQlQxZ3NTMEZCVUR0QlFVTklPMEZCUTBvc2FVSkJTa1E3UVVGTFFTeDNRa0ZCUzFrc1RVRkJUQ3hEUVVGWlJ5eE5RVUZhTEVOQlFXMUNTQ3hOUVVGdVFqdEJRVU5CTEhWQ1FVRlBMRkZCUVV0R0xFOUJRVm83UVVGRFNDeGhRVkpOTEVOQlFWQTdRVUZUU0RzN095dENRVVZUTkVNc1JTeEZRVUZyUXpWQ0xFOHNSVUZCZDBJN1FVRkJRVHM3UVVGRGFFVXNiVUpCUVU4c1NVRkJTWFZDTEU5QlFVb3NRMEZCV1N4VlFVRkRZaXhQUVVGRUxFVkJRVlZqTEUxQlFWWXNSVUZCY1VJN1FVRkRjRU1zYjBKQlFVbHdRaXhSUVVGUlNpeFBRVUZhTzBGQlEwRXNkMEpCUVV0R0xFMUJRVXdzUTBGQldWUXNUVUZCV2l4RFFVRnRRaXhWUVVGRFppeExRVUZFTEVWQlFWYzdRVUZCUlRoQ0xEUkNRVUZSZDBJc1IwRkJSM2hDTEV0QlFVZ3NSVUZCVlRsQ0xFdEJRVllzUTBGQlVqdEJRVUV5UWl4cFFrRkJNMFE3UVVGRFFTeDNRa0ZCUzFrc1RVRkJUQ3hEUVVGWlJ5eE5RVUZhTEVOQlFXMUNMRmxCUVUwN1FVRkJSWEZDTERSQ1FVRlJUaXhMUVVGU08wRkJRV2xDTEdsQ1FVRTFRenRCUVVOSUxHRkJTazBzUTBGQlVEdEJRVXRJT3pzN0swSkJSVTAyUWl4TExFVkJRVFpDTzBGQlFVRTdPMEZCUTJoRExHMUNRVUZQTEVsQlFVbHVSQ3hOUVVGS0xFTkJRVmNzVlVGQlEwY3NUVUZCUkN4RlFVRlRReXhOUVVGVUxFVkJRVzlDTzBGQlEyeERMRzlDUVVGSkswSXNWMEZCVnl4RFFVRm1PMEZCUTBFc2QwSkJRVXR1UWl4TlFVRk1MRU5CUVZsVUxFMUJRVm9zUTBGQmJVSXNWVUZCUTJZc1MwRkJSQ3hGUVVGWE8wRkJRekZDVnl3eVFrRkJUMWdzUzBGQlVEdEJRVU5JTEdsQ1FVWkVPMEZCUjBFeVJDeHpRa0ZCVFc1RExFMUJRVTRzUTBGQllWUXNUVUZCWWl4RFFVRnZRaXhWUVVGRFppeExRVUZFTEVWQlFWYzdRVUZETTBKWExESkNRVUZQV0N4TFFVRlFPMEZCUTBnc2FVSkJSa1E3TzBGQlNVRXNiMEpCUVUwMFJDeFpRVUZaTEZOQlFWcEJMRk5CUVZrc1IwRkJUVHRCUVVOd1FtcENPMEZCUTBFc2QwSkJRVWxCTEdGQlFXRXNRMEZCYWtJc1JVRkJiMEk3UVVGRGFFSXZRanRCUVVOSU8wRkJRMG9zYVVKQlRFUTdPMEZCVDBFc2QwSkJRVXRCTEUxQlFVd3NRMEZCV1Vjc1RVRkJXaXhEUVVGdFFqWkRMRk5CUVc1Q08wRkJRMEZFTEhOQ1FVRk5MME1zVFVGQlRpeERRVUZoUnl4TlFVRmlMRU5CUVc5Q05rTXNVMEZCY0VJN08wRkJSVUVzZFVKQlFVOHNXVUZCVFR0QlFVTlVMRFJDUVVGTGJFUXNUMEZCVER0QlFVTkJhVVFzTUVKQlFVMXFSQ3hQUVVGT08wRkJRMGdzYVVKQlNFUTdRVUZKU0N4aFFYWkNUU3hEUVVGUU8wRkJkMEpJT3pzN096czdPenRKUVVkUmJVUXNaMElzVjBGQlFVRXNaMEk3T3pzN096czdOa05CUzIxQ00wSXNReXhGUVVGdlFqUkNMRTBzUlVGQk9FUTdRVUZETVVjc1owSkJRVTFETEUxQlFUQkRMRWxCUVVsR0xHZENRVUZLTEVWQlFXaEVPMEZCUTBGRkxHZENRVUZKZUVNc1RVRkJTaXhIUVVGaFZ5eERRVUZpT3p0QlFVVkJMR2RDUVVGTk9FSXNUVUZCVFN4NVFrRkJXanRCUVVOQlJDeG5Ra0ZCU1hKRUxFOUJRVW9zUjBGQll5eFZRVUZEZFVRc1EwRkJSQ3hGUVVGak8wRkJRM2hDUkN4dlFrRkJTV1FzVFVGQlNpeERRVUZYWlN4RFFVRllPMEZCUTBFdlFpeHJRa0ZCUlhoQ0xFOUJRVVk3UVVGRFNDeGhRVWhFTzBGQlNVRjNRaXhqUVVGRlowTXNWMEZCUml4SFFVRm5RalZETEVsQlFXaENMRU5CUVhGQ0xGbEJRVTA3UVVGRGRrSXdReXh2UWtGQlNUVkNMRTlCUVVvN1FVRkRTQ3hoUVVaRU96dEJRVWxCTWtJc1owSkJRVWxFTEUxQlFVb3NSMEZCWVVVc1NVRkJTVFZETEU5QlFVb3NRMEZCV1VVc1NVRkJXaXhEUVVGcFFqdEJRVUZCTEhWQ1FVRk5kME1zVFVGQlRqdEJRVUZCTEdGQlFXcENMRU5CUVdJN1FVRkRRU3h0UWtGQlQwTXNSMEZCVUR0QlFVTklMRk1zUTBGc1FubENJaXdpWm1sc1pTSTZJbk4wY21WaGJTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUlFQm1iRzkzWEc0Z0tpOWNibHh1THk4Z1YyVWdaR2xrYmlkMElHWnBibVFnWVc1NUlGTjBjbVZoYlNCc2FXSnlZWEo1SUhSb1lYUWdkMjkxYkdRZ1ltVWdabXh2ZHkxMGVYQmxaQ0JoYm1RZ2RHaGhkQ0IzWlNCc2FXdGxaQzVjYmk4dklGTnZJSGRsSUcxaFpHVWdiM1Z5SUc5M2JpQnNhV0p5WVhKNUlHWnZjaUJsYldsMGRHVnljeUJoYm1RZ2MzUnlaV0Z0Y3l3Z2RHaGhkQ0IzWVhNZ2MzVndjRzl6WldRZ2RHOGdZbVVnYzJsdGNHeGxMaTR1WEc0dkwxeHVMeThnTGk0dUlIZGxiR3dnYVhRZ1oyOTBJR0pwWnlCdmRtVnlJSFJwYldVdUlGTnZJR2hsY21VZ2FYUWdhWE11WEc0dkwxeHVMeThnVjJVZ1lYSmxJSEJ5YjJKaFlteDVJSEpsYVc1MlpXNTBhVzVuSUhSb1pTQjNhR1ZsYkNCb1pYSmxMaUJDZFhRZ2FYUWdhWE1nVDFWU0lIZG9aV1ZzTGx4dVhHNXBiWEJ2Y25RZ2V5QmtaV1psY25KbFpDQjlJR1p5YjIwZ0p5NHZaR1ZtWlhKeVpXUW5PMXh1WEc1MGVYQmxJRWhoYm1Sc1pYSThWRDRnUFNBb2RtRnNkV1U2SUZRc0lHUmxkR0ZqYURvZ0tDa2dQVDRnZG05cFpDa2dQVDRnZG05cFpEdGNiblI1Y0dVZ1RHbHpkR1Z1WlhJOFZENGdQU0I3WEc0Z0lDQWdhR0Z1Wkd4bGNqb2dTR0Z1Wkd4bGNqeFVQaXhjYmlBZ0lDQmtaWFJoWTJobFpEb2dZbTl2YkdWaGJpeGNibjA3WEc1Y2JpOHZJR052Ym5OMElFMUJXRjlNU1ZOVVJVNUZVbE1nUFNBMU1EdGNibVY0Y0c5eWRDQmpiR0Z6Y3lCRmJXbDBkR1Z5UEZRK0lIdGNiaUFnSUNCc2FYTjBaVzVsY25NNklFRnljbUY1UEV4cGMzUmxibVZ5UEZRK1BqdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbXhwYzNSbGJtVnljeUE5SUZ0ZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsemRHVnVaWEp6TG1admNrVmhZMmdvYkdsemRHVnVaWElnUFQ0Z2RHaHBjeTVrWlhSaFkyZ29iR2x6ZEdWdVpYSXVhR0Z1Wkd4bGNpa3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYm1WeWN5QTlJRnRkTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdCaGRIUmhZMmhnSUdSdlpYTnVKM1FnWVdabVpXTjBJR04xY25KbGJuUnNlU0J5ZFc1dWFXNW5JR0JsYldsMFlDd2djMjhnYkdsemRHVnVaWEp6SUdGeVpTQnViM1JjYmlBZ0lDQXZMeUJ0YjJScFptbGxaQ0JwYmlCd2JHRmpaUzVjYmlBZ0lDQmhkSFJoWTJnb2FHRnVaR3hsY2pvZ1NHRnVaR3hsY2p4VVBpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JsYm1WeWN5QTlJSFJvYVhNdWJHbHpkR1Z1WlhKekxtTnZibU5oZENoYmUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxkR0ZqYUdWa09pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2ZWMHBPMXh1SUNBZ0lDQWdJQ0F2THlCcFppQW9kR2hwY3k1c2FYTjBaVzVsY25NdWJHVnVaM1JvSUQ0Z1RVRllYMHhKVTFSRlRrVlNVeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RVYjI4Z2JXRnVlU0JzYVhOMFpXNWxjbk11SUUxbGJXOXllU0JzWldGclB5Y3BPMXh1SUNBZ0lDQWdJQ0F2THlCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1lHUmxkR0ZqYUdBZ1pHOWxjeUJoWm1abFkzUWdkR2hsSUdCbGJXbDBZQ0JqZVdOc1pTd2dkMlVnYldGeWF5QjBhR1VnYkdsemRHVnVaWElnWVhNZ1lHUmxkR0ZqYUdWa1lGeHVJQ0FnSUM4dklITnZJR2wwSUdOaGJpQmlaU0JwWjI1dmNtVmtJSEpwWjJoMElHRjNZWGt1WEc0Z0lDQWdaR1YwWVdOb0tHaGhibVJzWlhJNklFaGhibVJzWlhJOFZENHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNhWE4wWlc1bGNuTWdQU0IwYUdsekxteHBjM1JsYm1WeWN5NW1hV3gwWlhJb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdsemRHVnVaWEl1YUdGdVpHeGxjaUE5UFQwZ2FHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JsYm1WeUxtUmxkR0ZqYUdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbGJXbDBLSFpoYkhWbE9pQlVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR2x6ZEdWdVpYSnpMbVp2Y2tWaFkyZ29LR3hwYzNSbGJtVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXeHBjM1JsYm1WeUxtUmxkR0ZqYUdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR2x6ZEdWdVpYSXVhR0Z1Wkd4bGNpaDJZV3gxWlN3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbGRHRmphQ2hzYVhOMFpXNWxjaTVvWVc1a2JHVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzUwZVhCbElGUmhhMlZ5UEZRK0lEMGdLSFpoYkhWbE9pQlVLU0E5UGlCMmIybGtPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVWFZsZFdVOFZENGdlMXh1SUNBZ0lHSjFabVpsY2pvZ1FYSnlZWGs4VkQ0N1hHNGdJQ0FnZEdGclpYSnpPaUJCY25KaGVUeFVZV3RsY2p4VVBqNDdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpZFdabVpYSWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwWVd0bGNuTWdQU0JiWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3ZFhRb2RtRnNkV1U2SUZRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWRXWm1aWEl1Y0hWemFDaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJocFpuUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBZV3RsS0hSaGEyVnlPaUJVWVd0bGNqeFVQaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJoYTJWeWN5NXdkWE5vS0hSaGEyVnlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXphR2xtZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOb2FXWjBLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aWRXWm1aWEl1YkdWdVozUm9JRDRnTUNBbUppQjBhR2x6TG5SaGEyVnljeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlNBOUlIUm9hWE11WW5WbVptVnlMbk5vYVdaMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwWVd0bGNpQTlJSFJvYVhNdWRHRnJaWEp6TG5Ob2FXWjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZV3RsY2loMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjBlWEJsSUVScGMzQnZjMlZ5SUQwZ0tDa2dQVDRnZG05cFpEdGNiblI1Y0dVZ1JtbHVhWE5vWlhJZ1BTQW9LU0E5UGlCMmIybGtPMXh1ZEhsd1pTQlZjR1JoZEdWeVBGUStJRDBnS0haaGJIVmxPaUJVS1NBOVBpQjJiMmxrTzF4dWRIbHdaU0JEYjI1MGNtOXNiR1Z5UEZRK0lEMGdLSFZ3WkdGMFpUb2dWWEJrWVhSbGNqeFVQaXdnWm1sdWFYTm9PaUJHYVc1cGMyaGxjaWtnUFQ0Z1JHbHpjRzl6WlhJN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVGRISmxZVzA4VkQ0Z2UxeHVJQ0FnSUhaaGJIVmxjem9nUlcxcGRIUmxjanhVUGp0Y2JpQWdJQ0JtYVc1cGMyZzZJRVZ0YVhSMFpYSThkbTlwWkQ0N1hHNGdJQ0FnWkdsemNHOXpaVG9nUkdsemNHOXpaWEk3WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdabkp2YlVWdGFYUjBaWEk4VkQ0b1hHNGdJQ0FnSUNBZ0lHVnRhWFIwWlhJNklFVnRhWFIwWlhJOFZENHNYRzRnSUNBZ0lDQWdJR1JwYzNCdmMyVTZJQ2dwSUQwK0lIWnZhV1JjYmlBZ0lDQXBPaUJUZEhKbFlXMDhWRDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlNnb2RYQmtZWFJsTENCbWFXNXBjMmdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmthWE53YjNObFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhR0Z1Wkd4bGNpQTlJQ2gwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGa2FYTndiM05sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9kQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnRhWFIwWlhJdVlYUjBZV05vS0doaGJtUnNaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiM05sWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlcxcGRIUmxjaTVrWlhSaFkyZ29hR0Z1Wkd4bGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x6Y0c5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHWnliMjFGYldsMGRHVnlSbWx1YVhOb1BGUStLRnh1SUNBZ0lDQWdJQ0JsYldsMGRHVnlPaUJGYldsMGRHVnlQRlErTEZ4dUlDQWdJQ0FnSUNCbWFXNXBjMmhsY2pvZ1JXMXBkSFJsY2p4MmIybGtQaXhjYmlBZ0lDQWdJQ0FnWkdsemNHOXpaVG9nS0NrZ1BUNGdkbTlwWkZ4dUlDQWdJQ2s2SUZOMGNtVmhiVHhVUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVM1J5WldGdEtDaDFjR1JoZEdVc0lHWnBibWx6YUNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JwYzNCdmMyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JvWVc1a2JHVnlJRDBnS0hRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXUnBjM0J2YzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaU2gwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdaVzFwZEhSbGNpNWhkSFJoWTJnb2FHRnVaR3hsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVc1cGMyaGxjaTVoZEhSaFkyZ29LRzV2ZEdocGJtY3NJR1JsZEdGamFDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJtbHphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGRHRmphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdGFYUjBaWEl1WkdWMFlXTm9LR2hoYm1Sc1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCdmMyVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV2wwZEdWeUxtUmxkR0ZqYUNob1lXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiM05sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWm5KdmJVRnljbUY1UEZRK0tGeHVJQ0FnSUNBZ0lDQmhjbkpoZVRvZ1FYSnlZWGs4VkQ1Y2JpQWdJQ0FwT2lCVGRISmxZVzA4VkQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJTZ29kWEJrWVhSbExDQm1hVzVwYzJncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrYVhOd2IzTmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZrYVhOd2IzTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkpoZVM1bWIzSkZZV05vS0hRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEJrWVhSbEtIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdWFYTm9LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0J2YzJWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJtY205dFVISnZiV2x6WlR4VVBpaGNiaUFnSUNBZ0lDQWdjSEp2YldselpUb2dVSEp2YldselpUeFRkSEpsWVcwOFZENCtYRzRnSUNBZ0tUb2dVM1J5WldGdFBGUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzBvS0hWd1pHRjBaU3dnWm1sdWFYTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MzUnlaV0Z0WHp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa2FYTndiM05sWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpTNTBhR1Z1S0hOMGNtVmhiU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZrYVhOd2IzTmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEpsWVcwdWRtRnNkV1Z6TG1GMGRHRmphQ2gySUQwK0lIVndaR0YwWlNoMktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGNtVmhiUzVtYVc1cGMyZ3VZWFIwWVdOb0tDZ3BJRDArSUdacGJtbHphQ2dwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J5WldGdFh5QTlJSE4wY21WaGJUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lHWnBibWx6YUNncExDQXhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2IzTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMGNtVmhiVjhnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEpsWVcxZkxtUnBjM0J2YzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ1oyVnVaWEpoZEdVOFZENG9YRzRnSUNBZ0lDQWdJR2x1YVhScFlXdzZJRlFzWEc0Z0lDQWdJQ0FnSUdkbGJtVnlZWFJsT2lBb2MzUmhkR1U2SUZRcElEMCtJRkJ5YjIxcGMyVThWRDRzWEc0Z0lDQWdJQ0FnSUdOdmJtUnBkR2x2YmpvZ0tITjBZWFJsT2lCVUtTQTlQaUJpYjI5c1pXRnVYRzRnSUNBZ0tUb2dVM1J5WldGdFBGUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzBvS0hWd1pHRjBaU3dnWm1sdWFYTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHbHpjRzl6WldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbDBaWEpoZEdVZ1BTQW9jM1JoZEdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWlc1bGNtRjBaU2h6ZEdGMFpTa3VkR2hsYmlnb2MzUmhkR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUnBjM0J2YzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEc5d0lIUm9aU0JwZEdWeVlYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaU2h6ZEdGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dVpHbDBhVzl1S0hOMFlYUmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaWEpoZEdVb2MzUmhkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXNXBjMmdvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaWEpoZEdVb2FXNXBkR2xoYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2V5QmthWE53YjNObFpDQTlJSFJ5ZFdVN0lIMDdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QnpaWFJNWVhSbGNqeFVQaWdwT2lCN1hHNGdJQ0FnSUNBZ0lITjBjbVZoYlRvZ1UzUnlaV0Z0UEZRK0xGeHVJQ0FnSUNBZ0lDQnpaWFIwWlhJNklDaHpPaUJUZEhKbFlXMDhWRDRwSUQwK0lIWnZhV1FzWEc0Z0lDQWdmU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JtSUQwZ1pHVm1aWEp5WldRb0tUdGNiaUFnSUNBZ0lDQWdiR1YwSUhObGRDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYUjBaWElnUFNBb2N6b2dVM1J5WldGdFBGUStLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RUWlhSMGFXNW5JSE4wY21WaGJTQjBkMmxqWlM0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaaTV5WlhOdmJIWmxLSE1wTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemRISmxZVzBnUFNCdVpYY2dVM1J5WldGdEtDaDFjR1JoZEdVc0lHWnBibWx6YUNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSE02SUQ5VGRISmxZVzA4VkQ0Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1l1Y0hKdmJXbHpaUzUwYUdWdUtHNXpJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeklEMGdibk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm5NdWRtRnNkV1Z6TG1GMGRHRmphQ2dvZGlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1VvZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibk11Wm1sdWFYTm9MbUYwZEdGamFDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1semFDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N5NWthWE53YjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3YzNSeVpXRnRMQ0J6WlhSMFpYSjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCemFXMXdiR1U4VkQ0b2RtRnNkV1U2SUZRcE9pQlRkSEpsWVcwOFZENGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiU2dvZFhCa1lYUmxMQ0JtYVc1cGMyZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa2FYTndiM05sWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGa2FYTndiM05sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpHbHpjRzl6WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVc1cGMyZ29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0J2YzJWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJqYjIxaWFXNWxQRlErS0hOMGNtVmhiWE02SUVGeWNtRjVQRk4wY21WaGJUeFVQajRwT2lCVGRISmxZVzA4UVhKeVlYazhWRDQrSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlRkSEpsWVcwb0tIVndaR0YwWlN3Z1ptbHVhWE5vS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjIxaWFXNWxaQ0E5SUc1bGR5QkJjbkpoZVNoemRISmxZVzF6TG14bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNHUmhkR1ZrSUQwZ2JtVjNJRk5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdabWx1YVhOb1pXUWdQU0J1WlhjZ1UyVjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEpsWVcxekxtWnZja1ZoWTJnb0tITXNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpMblpoYkhWbGN5NWhkSFJoWTJnb0tIWXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl0WW1sdVpXUmJhVjBnUFNCMk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtMbUZrWkNocEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVndaR0YwWldRdWMybDZaU0ErUFNCemRISmxZVzF6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhCa1lYUmxLR052YldKcGJtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11Wm1sdWFYTm9MbUYwZEdGamFDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1semFHVmtMbUZrWkNocEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBibWx6YUdWa0xuTnBlbVVnUGowZ2MzUnlaV0Z0Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJtbHphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSeVpXRnRjeTVtYjNKRllXTm9LQ2h6S1NBOVBpQnpMbVJwYzNCdmMyVW9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdZMjl0WW1sdVpVWnNZWFE4VkQ0b2MzUnlaV0Z0Y3pvZ1FYSnlZWGs4VTNSeVpXRnRQRlErUGlrNklGTjBjbVZoYlR4VVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRLQ2gxY0dSaGRHVXNJR1pwYm1semFDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ptbHVhWE5vWldRZ1BTQnVaWGNnVTJWMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISmxZVzF6TG1admNrVmhZMmdvS0hNc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCekxuWmhiSFZsY3k1aGRIUmhZMmdvS0hZcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYQmtZWFJsS0hZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE11Wm1sdWFYTm9MbUYwZEdGamFDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYm1semFHVmtMbUZrWkNocEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBibWx6YUdWa0xuTnBlbVVnUGowZ2MzUnlaV0Z0Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJtbHphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSeVpXRnRjeTVtYjNKRllXTm9LQ2h6S1NBOVBpQnpMbVJwYzNCdmMyVW9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdabWxzZEdWeVRuVnNiRHhVUGloY2JpQWdJQ0FnSUNBZ2MzUnlaV0Z0T2lCVGRISmxZVzA4UDFRK1hHNGdJQ0FnS1RvZ1UzUnlaV0Z0UEZRK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJUZEhKbFlXMG9LSFZ3WkdGMFpTd2dabWx1YVhOb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEpsWVcwdWRtRnNkV1Z6TG1GMGRHRmphQ2dvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeVpXRnRMbVpwYm1semFDNWhkSFJoWTJnb1ptbHVhWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkSEpsWVcwdVpHbHpjRzl6WlR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZMjl1ZEhKdmJHeGxjam9nUTI5dWRISnZiR3hsY2p4VVBpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsY3lBOUlHNWxkeUJGYldsMGRHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWx1YVhOb0lEMGdibVYzSUVWdGFYUjBaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd2IzTmxJRDBnWTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ2gyWVd4MVpTa2dQVDRnZXlCMGFHbHpMblpoYkhWbGN5NWxiV2wwS0haaGJIVmxLVHNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIc2dkR2hwY3k1bWFXNXBjMmd1WlcxcGRDZ3BPeUI5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVhkaGFYUkdhWEp6ZENncE9pQlFjbTl0YVhObFBGUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZia1pwYm1semFDQTlJQ2dwSUQwK0lIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1V1lXeDFaU0E5SUNoMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpMbVJsZEdGamFDaHZibFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtbHphQzVrWlhSaFkyZ29iMjVHYVc1cGMyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl1Um1sdWFYTm9JRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNkV1Z6TG1SbGRHRmphQ2h2YmxaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnBibWx6YUM1a1pYUmhZMmdvYjI1R2FXNXBjMmdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjA1dklHWnBjbk4wSUhaaGJIVmxMaWNwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxjeTVoZEhSaFkyZ29iMjVXWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYm1semFDNWhkSFJoWTJnb2IyNUdhVzVwYzJncE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhkMkZwZEVacGJtbHphQ2dwT2lCUWNtOXRhWE5sUEhadmFXUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2YmtacGJtbHphQ0E5SUNobWFXNXBjMmdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtbHphQzVrWlhSaFkyZ29iMjVHYVc1cGMyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYm1semFDNWhkSFJoWTJnb2IyNUdhVzVwYzJncE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhkMkZwZEV4aGMzUW9LVG9nVUhKdmJXbHpaVHhVUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkdGemRGWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyNVdZV3gxWlNBOUlDaDJZV3gxWlNrZ1BUNGdleUJzWVhOMFZtRnNkV1VnUFNCMllXeDFaVHNnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOXVSbWx1YVhOb0lEMGdLR1pwYm1semFDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdWekxtUmxkR0ZqYUNodmJsWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYm1semFDNWtaWFJoWTJnb2IyNUdhVzVwYzJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhOMFZtRnNkV1VnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZE9ieUJzWVhOMElIWmhiSFZsTGljcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR3hoYzNSV1lXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpMbUYwZEdGamFDaHZibFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabWx1YVhOb0xtRjBkR0ZqYUNodmJrWnBibWx6YUNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHMWhjRHhWUGlobWJqb2dLSFpoYkhWbE9pQlVLU0E5UGlCVktUb2dVM1J5WldGdFBGVStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzBvS0hWd1pHRjBaU3dnWm1sdWFYTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsY3k1aGRIUmhZMmdvS0haaGJIVmxLU0E5UGlCN0lIVndaR0YwWlNobWJpaDJZV3gxWlNrcE95QjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm1sdWFYTm9MbUYwZEdGamFDaG1hVzVwYzJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHbHpjRzl6WlR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdibTkwWlRvZ2RHaHBjeUJFVDBWVElHdGxaWEFnZEdobElHOXlaR1Z5WEc0Z0lDQWdiV0Z3VUhKdmJXbHpaVHhWUGlobWJqb2dLSFpoYkhWbE9pQlVLU0E5UGlCUWNtOXRhWE5sUEZVK0tUb2dVM1J5WldGdFBGVStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzBvS0hWd1pHRjBaU3dnWm1sdWFYTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NISmxkbWx2ZFhNNklGQnliMjFwYzJVOFlXNTVQaUE5SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdScGMzQnZjMlZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxjeTVoZEhSaFkyZ29LSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjSEpsZG1sdmRYTk9iM2NnUFNCd2NtVjJhVzkxY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxY3lBOUlHWnVLSFpoYkhWbEtTNTBhR1Z1S0hVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxYzA1dmR5NTBhR1Z1S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpHbHpjRzl6WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9kU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtbHphQzVoZEhSaFkyZ29LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFpwYjNWekxuUm9aVzRvS0NrZ1BUNGdabWx1YVhOb0tDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCdmMyVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMzQnZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUcxaGNGQnliMjFwYzJWRmNuSnZjanhWUGlobWJqb2dLSFpoYkhWbE9pQlVLU0E5UGlCUWNtOXRhWE5sUEZVK0tUb2dVM1J5WldGdFBGVWdmQ0JGY25KdmNqNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiU2dvZFhCa1lYUmxMQ0JtYVc1cGMyZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2NtVjJhVzkxY3pvZ1VISnZiV2x6WlR4aGJuaytJRDBnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdsemNHOXpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpMbUYwZEdGamFDZ29kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbVYyYVc5MWMwNXZkeUE5SUhCeVpYWnBiM1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWnBiM1Z6SUQwZ1ptNG9kbUZzZFdVcExuUm9aVzRvZFNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWnBiM1Z6VG05M0xuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGa2FYTndiM05sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpTaDFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnWlhKeWIzSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWMwNXZkeTUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haR2x6Y0c5elpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1VvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYVc1cGMyZ3VZWFIwWVdOb0tDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxY3k1MGFHVnVLQ2dwSUQwK0lHWnBibWx6YUNncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE53YjNObFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOd2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtYVd4MFpYSW9abTQ2SUNoMllXeDFaVG9nVkNrZ1BUNGdZbTl2YkdWaGJpazZJRk4wY21WaGJUeFVQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UzUnlaV0Z0S0NoMWNHUmhkR1VzSUdacGJtbHphQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3gxWlhNdVlYUjBZV05vS0NoMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYmloMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEJrWVhSbEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVptbHVhWE5vTG1GMGRHRmphQ2htYVc1cGMyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2x6Y0c5elpUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZrZFdObFBGVStLR1p1T2lBb2NISmxkbWx2ZFhNNklGVXNJSFpoYkhWbE9pQlVLU0E5UGlCVkxDQnBibWwwYVdGc09pQlZLVG9nVUhKdmJXbHpaVHhWUGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzNSaGRHVWdQU0JwYm1sMGFXRnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpYTXVZWFIwWVdOb0tDaDJZV3gxWlNrZ1BUNGdleUJ6ZEdGMFpTQTlJR1p1S0hOMFlYUmxMQ0IyWVd4MVpTazdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWFXNXBjMmd1WVhSMFlXTm9LQ2dwSUQwK0lIc2djbVZ6YjJ4MlpTaHpkR0YwWlNrN0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1allYUW9iM1JvWlhJNklGTjBjbVZoYlR4VVBpazZJRk4wY21WaGJUeFVQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UzUnlaV0Z0S0NoMWNHUmhkR1VzSUdacGJtbHphQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWnBibWx6YUdWa0lEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpMbUYwZEdGamFDZ29kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZEdobGNpNTJZV3gxWlhNdVlYUjBZV05vS0NoMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVndaR0YwWlNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ptbHVhWE5vVDI1bElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibWx6YUdWa0t5czdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dacGJtbHphR1ZrSUQwOVBTQXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibWx6YUNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabWx1YVhOb0xtRjBkR0ZqYUNobWFXNXBjMmhQYm1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNSb1pYSXVabWx1YVhOb0xtRjBkR0ZqYUNobWFXNXBjMmhQYm1VcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHbHpjRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTBhR1Z5TG1ScGMzQnZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGTjBjbVZoYlZkcGRHaEZibVJwYm1jOFZYQmtZWFJsVkN3Z1JXNWthVzVuVkQ0Z2UxeHVJQ0FnSUhOMGNtVmhiVG9nVTNSeVpXRnRQRlZ3WkdGMFpWUStPMXh1SUNBZ0lHVnVaR2x1WnpvZ1VISnZiV2x6WlR4RmJtUnBibWRVUGpzZ0x5OGdaVzVrYVc1bklHNWxkbVZ5SUhKbGMyOXNkbVZ6SUdKbFptOXlaU0J6ZEhKbFlXMGdabWx1YVhOb1pYTmNiaUFnSUNCa2FYTndiM05sT2lBb1pUb2dSWEp5YjNJcElEMCtJSFp2YVdRN1hHNWNiaUFnSUNCemRHRjBhV01nWm5KdmJWTjBjbVZoYlVGdVpGQnliMjFwYzJVb2N6b2dVM1J5WldGdFBGVndaR0YwWlZRK0xDQmxibVJwYm1jNklGQnliMjFwYzJVOFJXNWthVzVuVkQ0cE9pQlRkSEpsWVcxWGFYUm9SVzVrYVc1blBGVndaR0YwWlZRc0lFVnVaR2x1WjFRK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpPaUJUZEhKbFlXMVhhWFJvUlc1a2FXNW5QRlZ3WkdGMFpWUXNJRVZ1WkdsdVoxUStJRDBnYm1WM0lGTjBjbVZoYlZkcGRHaEZibVJwYm1jb0tUdGNiaUFnSUNBZ0lDQWdjbVZ6TG5OMGNtVmhiU0E5SUhNN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHVm1JRDBnWkdWbVpYSnlaV1FvS1R0Y2JpQWdJQ0FnSUNBZ2NtVnpMbVJwYzNCdmMyVWdQU0FvWlRvZ1JYSnliM0lwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFppNXlaV3BsWTNRb1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCekxtUnBjM0J2YzJVb0tUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnY3k1aGQyRnBkRVpwYm1semFDZ3BMblJvWlc0b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtTG5KbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnY21WekxtVnVaR2x1WnlBOUlHUmxaaTV3Y205dGFYTmxMblJvWlc0b0tDa2dQVDRnWlc1a2FXNW5LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0I5WEc1OVhHNGlYWDA9Il19
